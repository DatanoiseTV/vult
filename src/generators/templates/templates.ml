

open GenerateParams

type template = params -> Pla.t -> Pla.t

type t = template * template

module Default = struct

   let header (params:params) (code:Pla.t) : Pla.t =
      let file = String.uppercase params.output in
      {pla|
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#ifndef <#file#s>_H
#define <#file#s>_H
#include <stdint.h>
#include <math.h>
#include "vultin.h"

<#code#>

#endif // <#file#s>_H
|pla}

   let implementation (params:params) (code:Pla.t) : Pla.t =
      let output = params.output in
      {pla|
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#include "<#output#s>.h"

<#code#>
|pla}

   let get : t = header, implementation

end

let apply (params:params) (code:Pla.t) : Pla.t =
   let header,impl =
      match params.template with
      | "none"    -> Default.get
      | "default" -> Default.get
      | "teensy"  -> TeensyAudio.get
      | "pd"      -> Pd.get
      | t -> failwith (Printf.sprintf "The template '%s' is not available for this generator" t)
   in
   if params.is_header then
      header params code
   else
      impl params code
