
fun min(a,b) return if a<b then a else b;
fun max(a,b) return if a>b then a else b;

fun clip(low,high,value){
    return min(max(low,value),high);
}

fun process(freq,pw,wave){
  mem m;
  mem rate;
  mem phase;
  mem p;
  mem frequency;
  mem state_triang;
  mem state_pulse;
  mem state_saw;
  mem triang;
  mem output;
  mem pre_wave;
  val fixed_frequency = 0;
  val PI = 3.1416;
  if(wave != pre_wave && abs(output) < 0.05) {
    pre_wave = wave;
  }
  if(pre_wave == 0 || pre_wave == 2) {
    fixed_frequency = freq;
  }
  else {
    fixed_frequency = freq / 2;
  }
  if(frequency != fixed_frequency) {
    frequency = fixed_frequency;
    val p_1 = frequency / 44100;
    rate = PI * p_1;
    val maxHarmonics = floor(0.5 / p_1);
    m = 2 * maxHarmonics + 1;
  }

  val shift05 = 0.5 + pw * 0.49;
  val shift = phase + shift05 * PI;

  if(shift > PI) {
    shift = shift - PI;
  }

  val denominator1 = sin(phase);
  val tmp1 = 0;
  if(fixdenorm(denominator1) == 0) {
    tmp1 = 1;
  }
  else {
    tmp1 = sin(m * phase) / m * denominator1;
  }
  val denominator2 = sin(shift);
  val tmp2 = 0;
  if(fixdenorm(denominator2) == 0) {
    tmp2 = 1;
  }
  else {
    tmp2 = sin(m * shift) / m * denominator2;
  }
  phase = phase + rate;

  if(phase > PI) {
    phase = phase - PI;
  }

  state_pulse  = clip(state_pulse * 0.9999 + tmp1 - tmp2, -1, 1);
  state_saw    = clip(state_saw * 0.9999 + (tmp1 + tmp2 - 2 / p) / shift05 / 2, -1, 1);
  state_triang = clip(state_triang * 0.9999 + 2 * state_pulse / p, -1, 1);

  if(pre_wave == 0) {
    output = state_pulse;
  }
  else if(pre_wave == 1) {
    output = state_saw;
  }
  else if(pre_wave == 2) {
    output = state_triang;
  }
  return output;
}

println(x:process(440,0,1));
println(x:process(1200,0,1));
println(x:process(1200,0,1));
println(x:process(1200,0,1));
println(x:process(1200,0,1));
println(x:process(1200,0,1));
println(x:process(1200,0,1));
println(x:process(1200,0,1));
println(x:process(1200,0,1));
println(x:process(1200,0,1));
println(x:process(1200,0,1));
println(x:process(1200,0,1));
println(x:process(1200,0,1));
println(x:process(1200,0,1));
println(x:process(1200,0,1));
println(x:process(1200,0,1));
println(x:process(1200,0,1));
println(x:process(1200,0,1));
println(x:process(1200,0,1));
println(x:process(1200,0,1));
println(x:process(1200,0,1));
println(x:process(1200,0,1));
println(x:process(1200,0,1));
println(x:process(1200,0,1));
println(x:process(1200,0,1));
println(x:process(1200,0,1));
println(x:process(1200,0,1));
println(x:process(1200,0,1));
println(x:process(1200,0,1));
println(x:process(1200,0,1));
println(x:process(1200,0,1));