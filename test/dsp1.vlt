
val samplerate = 44100;
val pi = 3.1416;

fun clip(low,high,value){
    return min(max(low,value),high);
}

fun biquad(x:num,b0,b1,b2,a1,a2){
    mem w1,w2;
    val w0 = x -a1*w1-a2*w2;
    val y0 = b0*w0 + b1*w1 + b2*w2;
    w2, w1 = w1, w0;
    return y0;
}

fun lp6(x,fc) {
    val fc:num = clip(fc,0,samplerate);
    val k = tan(pi*fc/samplerate);
    val b0 = k/(k+1);
    val b1 = k/(k+1);
    val a1 = (k-1)/(k+1);
    return biquad(x,b0,b1,0,a1,0);
}

fun change:bool(x) {
    mem pre_x;
    val v = pre_x!=x;
    pre_x = x;
    return v;
}

fun lp12(x,fc,q) {
    mem b0,b1,b2,a1,a2;
    if (change(fc) || change(q)) {
        val qc = max(sqrt(2),q+sqrt(2));
        val fc = clip(fc,0,samplerate);
        val k = tan(pi*fc/samplerate);
        val den = k*k*qc+k+qc;
        b0 = k*k*qc/den;
        b1 = 2*b0;
        b2 = b0;
        a1 = 2*qc*(k*k-1)/den;
        a2 = (k*k*qc-k+qc)/den;
    }
    return biquad(x,b0,b1,b2,a1,a2);
}
fun hp6(x,fc){
    fc = clip(fc,0,samplerate);
    k = tan(pi*fc/samplerate);
    b0 = 1/(k+1);
    b1 = -1/(k+1);
    a1 = (k-1)/(k+1);
    return biquad(x,b0,b1,0,a1,0);
}

fun allp6(x,fc){
    fc = clip(fc,0,samplerate);
    k = tan(pi*fc/samplerate);
    b0 = (k-1)/(k+1);
    b1 = 1;
    a1 = (k-1)/(k+1);
    return biquad(x,b0,b1,0,a1,0);
}

fun hp12(x,fc,q){
    mem b0,b1,b2,a1,a2;
    if(change(fc) || change(q)){
        qc = max(sqrt(2),q+sqrt(2));
        fc = clip(fc,0,samplerate);
        k = tan(pi*fc/samplerate);
        den = k*k*qc+k+qc;
        b0 = qc/den;
        b1 = -2*qc/den;
        b2 = qc/den;
        a1 = 2*qc*(k*k-1)/den;
        a2 = (k*k*qc-k+qc)/den;
    }
    return biquad(x,b0,b1,b2,a1,a2);
}


fun bp12(x,fc,q){
    mem b0,b1,b2,a1,a2;
    if(change(fc) || change(q)){
        qc = max(sqrt(2),q+sqrt(2));
        fc = clip(fc,0,samplerate);
        k = tan(pi*fc/samplerate);
        den = k*k*qc+k+qc;
        b0 = k/den;
        b1 = 0;
        b2 = -k/den;
        a1 = 2*qc*(k*k-1)/den;
        a2 = (k*k*qc-k+qc)/den;
    }
    return biquad(x,b0,b1,b2,a1,a2);
}


fun notch12(x,fc,q){
    mem b0,b1,b2,a1,a2;
    if(change(fc) || change(q)){
        qc = max(sqrt(2),q+sqrt(2));
        fc = clip(fc,0,samplerate);
        k = tan(pi*fc/samplerate);
        den = k*k*qc+k+qc;
        b0 = qc*(1+k*k)/den;
        b1 = 2*qc*(k*k-1)/den;
        b2 = b0;
        a1 = 2*qc*(k*k-1)/den;
        a2 = (k*k*qc-k+qc)/den;
    }
    return biquad(x,b0,b1,b2,a1,a2);
}

fun allp12(x,fc,q){
    mem b0,b1,b2,a1,a2;
    if(change(fc) || change(q)){
        qc = max(sqrt(2),q+sqrt(2));
        fc = clip(fc,0,samplerate);
        k = tan(pi*fc/samplerate);
        den = k*k*qc+k+qc;
        b0 = (k*k*qc-k+qc)/den;
        b1 = 2*qc*(k*k-1)/den;
        b2 = 1;
        a1 = 2*qc*(k*k-1)/den;
        a2 = (k*k*qc-k+qc)/den;
    }
    return biquad(x,b0,b1,b2,a1,a2);
}
