
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#include "monoin.h"

void Monoin__ctx_type_0_init(Monoin__ctx_type_0 &_output_){
   Monoin__ctx_type_0 _ctx;
   _ctx.pre = 0;
   int_init_array(4,0,_ctx.notes);
   _ctx.count = 0;
   _output_ = _ctx;
   return ;
}

void Monoin_mono_noteOn_init(Monoin__ctx_type_0 &_output_){
   Monoin__ctx_type_0_init(_output_);
   return ;
}

int Monoin_mono_noteOn(Monoin__ctx_type_0 &_ctx, int n){
   uint8_t _cond_12;
   _cond_12 = (_ctx.count < 4);
   if(_cond_12){
      int_set(_ctx.notes,_ctx.count,n);
      _ctx.pre = n;
      uint8_t _cond_11;
      _cond_11 = (_ctx.count < 4);
      if(_cond_11){
         _ctx.count = (_ctx.count + 1);
      }
   }
   return _ctx.pre;
}

void Monoin_mono_noteOff_init(Monoin__ctx_type_0 &_output_){
   Monoin__ctx_type_0_init(_output_);
   return ;
}

int Monoin_mono_noteOff(Monoin__ctx_type_0 &_ctx, int n){
   uint8_t found;
   found = 0;
   int pos;
   int i;
   i = 0;
   uint8_t _cond_13;
   _cond_13 = (_ctx.count == 0);
   if(_cond_13){
      return _ctx.pre;
   }
   while((i < 4) && bool_not(found)){
      uint8_t _cond_14;
      _cond_14 = (int_get(_ctx.notes,i) == n);
      if(_cond_14){
         pos = i;
         found = 1;
      }
      i = (i + 1);
   }
   if(found){
      int k;
      k = (pos + 1);
      while(k < 4){
         int_set(_ctx.notes,(k + (-1)),int_get(_ctx.notes,k));
         k = (k + 1);
      }
      uint8_t _cond_15;
      _cond_15 = (found && (_ctx.count > 0));
      if(_cond_15){
         _ctx.count = (_ctx.count + (-1));
         _ctx.pre = int_get(_ctx.notes,(_ctx.count + (-1)));
      }
   }
   return _ctx.pre;
}

void Monoin_mono_isGateOn_init(Monoin__ctx_type_0 &_output_){
   Monoin__ctx_type_0_init(_output_);
   return ;
}

uint8_t Monoin_mono_isGateOn(Monoin__ctx_type_0 &_ctx){
   return (_ctx.count > 0);
}


