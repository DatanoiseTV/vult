#ifndef SIN_H
#define SIN_H
#include <stdint.h>
#include <math.h>
#include "vultin.h"

typedef struct _ctx_type_0 {
   float pre_x;
} _ctx_type_0;

typedef _ctx_type_0 change_type;

_ctx_type_0 _Sin__ctx_type_0_init();

_ctx_type_0 _Sin_change_init();

uint8_t _Sin_change(_ctx_type_0 &_ctx, float x);

typedef struct _ctx_type_1 {
   float y2;
   float y1;
   float w;
   float cos_w;
   _ctx_type_0 _inst0;
} _ctx_type_1;

typedef _ctx_type_1 sc_osc_type;

_ctx_type_1 _Sin__ctx_type_1_init();

_ctx_type_1 _Sin_sc_osc_init();

float _Sin_sc_osc(_ctx_type_1 &_ctx, float pitch);

typedef _ctx_type_1 sc_osc_start_type;

_ctx_type_1 _Sin_sc_osc_start_init();

void _Sin_sc_osc_start(_ctx_type_1 &_ctx);

typedef struct _ctx_type_2 {
   float pitch;
   _ctx_type_1 _inst0;
} _ctx_type_2;

typedef _ctx_type_2 process_type;

_ctx_type_2 _Sin__ctx_type_2_init();

_ctx_type_2 _Sin_process_init();

float _Sin_process(_ctx_type_2 &_ctx, float input);

typedef _ctx_type_2 noteOn_type;

_ctx_type_2 _Sin_noteOn_init();

void _Sin_noteOn(_ctx_type_2 &_ctx, int note, int velocity);

typedef _ctx_type_2 noteOff_type;

_ctx_type_2 _Sin_noteOff_init();

void _Sin_noteOff(_ctx_type_2 &_ctx, int note);

typedef _ctx_type_2 controlChange_type;

_ctx_type_2 _Sin_controlChange_init();

void _Sin_controlChange(_ctx_type_2 &_ctx, int control, int value);

typedef _ctx_type_2 default_type;

_ctx_type_2 _Sin_default_init();

void _Sin_default_(_ctx_type_2 &_ctx);



#endif // SIN_H
