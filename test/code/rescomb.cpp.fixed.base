
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#include "rescomb.h"

void Util__ctx_type_3_init(Util__ctx_type_3 &_output_){
   Util__ctx_type_3 _ctx;
   _ctx.y1 = 0x0 /* 0.000000 */;
   _ctx.x1 = 0x0 /* 0.000000 */;
   _output_ = _ctx;
   return ;
}

fix16_t Util_dcblock(Util__ctx_type_3 &_ctx, fix16_t x0){
   fix16_t y0;
   y0 = (x0 + (- _ctx.x1) + fix_mul(0xfeb8 /* 0.995000 */,_ctx.y1));
   _ctx.x1 = x0;
   _ctx.y1 = y0;
   return y0;
}

void Rescomb__ctx_type_0_init(Rescomb__ctx_type_0 &_output_){
   Rescomb__ctx_type_0 _ctx;
   _ctx.write_pos = 0;
   fix_init_array(675,0x0 /* 0.000000 */,_ctx.buffer);
   _output_ = _ctx;
   return ;
}

fix16_t Rescomb_delay(Rescomb__ctx_type_0 &_ctx, fix16_t x, fix16_t cv){
   _ctx.write_pos = ((1 + _ctx.write_pos) % 675);
   fix_set(_ctx.buffer,_ctx.write_pos,x);
   fix16_t r_size;
   r_size = 0x2a30000 /* 675.000000 */;
   fix16_t r_index;
   r_index = ((int_to_fix(_ctx.write_pos) + (- Util_cvToperiod(cv))) % r_size);
   if(r_index < 0x0 /* 0.000000 */){
      r_index = (r_index + r_size);
   }
   int t1;
   t1 = (fix_to_int(fix_floor(r_index)) % 675);
   int t2;
   t2 = ((1 + t1) % 675);
   fix16_t decimal;
   decimal = (r_index + (- int_to_fix(t1)));
   fix16_t x1;
   x1 = fix_get(_ctx.buffer,t1);
   fix16_t x2;
   x2 = fix_get(_ctx.buffer,t2);
   fix16_t ret;
   ret = (x1 + fix_mul(decimal,(x2 + (- x1))));
   return ret;
}

void Rescomb__ctx_type_5_init(Rescomb__ctx_type_5 &_output_){
   Rescomb__ctx_type_5 _ctx;
   _ctx.stone = 0x0 /* 0.000000 */;
   _ctx.output = 0x0 /* 0.000000 */;
   Rescomb__ctx_type_0_init(_ctx._inst4122);
   Util__ctx_type_3_init(_ctx._inst3125);
   Util__ctx_type_1_init(_ctx._inst159);
   _output_ = _ctx;
   return ;
}

fix16_t Rescomb_do(Rescomb__ctx_type_5 &_ctx, fix16_t in, fix16_t cv, fix16_t tone, fix16_t res){
   if(Util_change(_ctx._inst159,tone)){
      _ctx.stone = Rescomb_toneCurve(tone);
   }
   fix16_t feedback;
   feedback = Util_dcblock(_ctx._inst3125,fix_mul(_ctx.output,res));
   fix16_t saturated_input;
   saturated_input = Saturate_soft_process((feedback + in));
   _ctx.output = (in + fix_mul(_ctx.stone,Rescomb_delay(_ctx._inst4122,saturated_input,cv)));
   return Saturate_soft_process(_ctx.output);
}


