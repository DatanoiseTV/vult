
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#include "short_delay.h"

void Short_delay__ctx_type_0_init(Short_delay__ctx_type_0 &_output_){
   Short_delay__ctx_type_0 _ctx;
   _ctx.x4 = 0.0f;
   _ctx.x3 = 0.0f;
   _ctx.x2 = 0.0f;
   _output_ = _ctx;
   return ;
}

float Short_delay_soft(Short_delay__ctx_type_0 &_ctx, float x1){
   float o;
   o = (0.25f * (_ctx.x2 + _ctx.x3 + _ctx.x4 + x1));
   float _tmp_1_0;
   _tmp_1_0 = x1;
   float _tmp_1_1;
   _tmp_1_1 = _ctx.x2;
   float _tmp_1_2;
   _tmp_1_2 = _ctx.x3;
   _ctx.x2 = _tmp_1_0;
   _ctx.x3 = _tmp_1_1;
   _ctx.x4 = _tmp_1_2;
   return o;
}

void Short_delay__ctx_type_1_init(Short_delay__ctx_type_1 &_output_){
   Short_delay__ctx_type_1 _ctx;
   _ctx.write_pos = 0;
   ;
   _output_ = _ctx;
   return ;
}

float Short_delay_do(Short_delay__ctx_type_1 &_ctx, float x, float time, float feedback){
   time = float_clip(time,0.0f,1.f);
   feedback = float_clip(feedback,0.0f,1.f);
   float index_r;
   index_r = (22050.f * time);
   int index_i;
   index_i = float_to_int(floorf(index_r));
   int delta;
   delta = (_ctx.write_pos + (- index_i));
   int read_pos;
   if(delta < 0){
      read_pos = (22050 + delta);
   }
   else
   {
      read_pos = delta;
   }
   float decimal;
   decimal = (index_r + (- int_to_float(index_i)));
   float x1;
   x1 = float_get(_ctx.buffer,read_pos);
   float x2;
   x2 = float_get(_ctx.buffer,((1 + read_pos) % 22050));
   float ret;
   ret = (x1 + (decimal * (x2 + (- x1))));
   _ctx.write_pos = ((1 + _ctx.write_pos) % 22050);
   float_set(_ctx.buffer,_ctx.write_pos,Saturate_process((x + (feedback * ret))));
   return ret;
}

void Short_delay__ctx_type_2_init(Short_delay__ctx_type_2 &_output_){
   Short_delay__ctx_type_2 _ctx;
   Short_delay__ctx_type_1_init(_ctx._inst2227);
   Short_delay__ctx_type_0_init(_ctx._inst1128);
   _output_ = _ctx;
   return ;
}


