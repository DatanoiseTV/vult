
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#include "sawcore.h"

void Util__ctx_type_0_init(Util__ctx_type_0 &_output_){
   Util__ctx_type_0 _ctx;
   _ctx.pre = 0;
   _output_ = _ctx;
   return ;
}

void Util_edge_init(Util__ctx_type_0 &_output_){
   Util__ctx_type_0_init(_output_);
   return ;
}

uint8_t Util_edge(Util__ctx_type_0 &_ctx, uint8_t x){
   uint8_t ret;
   ret = (x && bool_not(_ctx.pre));
   _ctx.pre = x;
   return ret;
}

void Util__ctx_type_1_init(Util__ctx_type_1 &_output_){
   Util__ctx_type_1 _ctx;
   _ctx.pre_x = 0x0 /* 0.000000 */;
   _output_ = _ctx;
   return ;
}

void Util_change_init(Util__ctx_type_1 &_output_){
   Util__ctx_type_1_init(_output_);
   return ;
}

uint8_t Util_change(Util__ctx_type_1 &_ctx, fix16_t x){
   uint8_t v;
   v = (_ctx.pre_x != x);
   _ctx.pre_x = x;
   return v;
}

fix16_t Util_map(fix16_t x, fix16_t x0, fix16_t x1, fix16_t y0, fix16_t y1){
   return (fix_div(fix_mul((x + (- x0)),(y1 + (- y0))),(x1 + (- x0))) + y0);
}

void Util__ctx_type_3_init(Util__ctx_type_3 &_output_){
   Util__ctx_type_3 _ctx;
   _ctx.y1 = 0x0 /* 0.000000 */;
   _ctx.x1 = 0x0 /* 0.000000 */;
   _output_ = _ctx;
   return ;
}

void Util_dcblock_init(Util__ctx_type_3 &_output_){
   Util__ctx_type_3_init(_output_);
   return ;
}

fix16_t Util_dcblock(Util__ctx_type_3 &_ctx, fix16_t x0){
   fix16_t y0;
   y0 = (x0 + (- _ctx.x1) + fix_mul(_ctx.y1,0xfeb8 /* 0.995000 */));
   _ctx.x1 = x0;
   _ctx.y1 = y0;
   return y0;
}

void Util__ctx_type_4_init(Util__ctx_type_4 &_output_){
   Util__ctx_type_4 _ctx;
   _ctx.x = 0x0 /* 0.000000 */;
   _output_ = _ctx;
   return ;
}

void Util_smooth_init(Util__ctx_type_4 &_output_){
   Util__ctx_type_4_init(_output_);
   return ;
}

fix16_t Util_smooth(Util__ctx_type_4 &_ctx, fix16_t input){
   _ctx.x = (_ctx.x + fix_mul((input + (- _ctx.x)),0x147 /* 0.005000 */));
   return _ctx.x;
}

void Util__ctx_type_5_init(Util__ctx_type_5 &_output_){
   Util__ctx_type_5 _ctx;
   _ctx.x0 = 0x0 /* 0.000000 */;
   _output_ = _ctx;
   return ;
}

void Util_average2_init(Util__ctx_type_5 &_output_){
   Util__ctx_type_5_init(_output_);
   return ;
}

fix16_t Util_average2(Util__ctx_type_5 &_ctx, fix16_t x1){
   fix16_t result;
   result = fix_mul((_ctx.x0 + x1),0x8000 /* 0.500000 */);
   _ctx.x0 = x1;
   return result;
}

fix16_t Util_cubic_clipper(fix16_t x){
   uint8_t _cond_21;
   _cond_21 = (x <= (-0xaaaa /* -0.666667 */));
   if(_cond_21){
      return (-0xaaaa /* -0.666667 */);
   }
   else
   {
      uint8_t _cond_20;
      _cond_20 = (x >= 0xaaaa /* 0.666667 */);
      if(_cond_20){
         return 0xaaaa /* 0.666667 */;
      }
      else
      {
         return (x + fix_mul(fix_mul(fix_mul((-0x5555 /* -0.333333 */),x),x),x));
      }
   }
}

fix16_t Util_pitchToRate_1024(fix16_t pitch){
   int index;
   index = int_clip(fix_to_int(fix_mul(0x3e7c /* 0.244094 */,pitch)),0,31);
   return (fix_wrap_array(Util_pitchToRate_1024_c0)[index] + fix_mul(pitch,(fix_wrap_array(Util_pitchToRate_1024_c1)[index] + fix_mul(fix_wrap_array(Util_pitchToRate_1024_c2)[index],pitch))));
}

fix16_t Util_pitchToRate(fix16_t pitch){
   int index;
   index = int_clip(fix_to_int(fix_mul(0x3e7c /* 0.244094 */,pitch)),0,31);
   return (fix_wrap_array(Util_pitchToRate_c0)[index] + fix_mul(pitch,(fix_wrap_array(Util_pitchToRate_c1)[index] + fix_mul(fix_wrap_array(Util_pitchToRate_c2)[index],pitch))));
}

fix16_t Util_cvToPitch(fix16_t cv){
   return (fix_mul(cv,0x780000 /* 120.000000 */) + 0x180000 /* 24.000000 */);
}

fix16_t Util_cvToRate_1024(fix16_t cv){
   int index;
   index = int_clip(fix_to_int(fix_mul(0x2271c7 /* 34.444444 */,cv)),0,31);
   return (fix_wrap_array(Util_cvToRate_1024_c0)[index] + fix_mul(cv,(fix_wrap_array(Util_cvToRate_1024_c1)[index] + fix_mul(fix_wrap_array(Util_cvToRate_1024_c2)[index],cv))));
}

fix16_t Util_cvToRate(fix16_t cv){
   int index;
   index = int_clip(fix_to_int(fix_mul(0x2271c7 /* 34.444444 */,cv)),0,31);
   return (fix_wrap_array(Util_cvToRate_c0)[index] + fix_mul(cv,(fix_wrap_array(Util_cvToRate_c1)[index] + fix_mul(fix_wrap_array(Util_cvToRate_c2)[index],cv))));
}

fix16_t Util_pitchToCv(fix16_t pitch){
   return fix_mul(0x222 /* 0.008333 */,((-0x180000 /* -24.000000 */) + pitch));
}

fix16_t Util_cvToperiod(fix16_t cv){
   int index;
   index = int_clip(fix_to_int(fix_mul(0x1f0000 /* 31.000000 */,cv)),0,31);
   return (fix_wrap_array(Util_cvToperiod_c0)[index] + fix_mul(cv,(fix_wrap_array(Util_cvToperiod_c1)[index] + fix_mul(fix_wrap_array(Util_cvToperiod_c2)[index],cv))));
}

fix16_t Util_cvTokHz(fix16_t cv){
   int index;
   index = int_clip(fix_to_int(fix_mul(0x1f0000 /* 31.000000 */,cv)),0,31);
   return (fix_wrap_array(Util_cvTokHz_c0)[index] + fix_mul(cv,(fix_wrap_array(Util_cvTokHz_c1)[index] + fix_mul(fix_wrap_array(Util_cvTokHz_c2)[index],cv))));
}

void Sawcore_ptr_w2(fix16_t phase, fix16_t rate, _tuple_$_bool_real_$ &_output_){
   _tuple_$_bool_real_$ out;
   fix16_t s1;
   s1 = rate;
   fix16_t s2;
   s2 = (s1 + rate);
   uint8_t _cond_46;
   _cond_46 = (phase < s1);
   if(_cond_46){
      fix16_t d;
      d = fix_div(phase,rate);
      fix16_t t2;
      t2 = fix_mul(s2,0x40 /* 0.000977 */);
      {
         out.field_0 = 0;
         out.field_1 = (0x10000 /* 1.000000 */ + fix_mul(d,((- d) + t2)));
      }
   }
   else
   {
      uint8_t _cond_45;
      _cond_45 = (phase < s2);
      if(_cond_45){
         fix16_t d;
         d = fix_div(phase,rate);
         fix16_t t2;
         t2 = fix_mul(s2,0x40 /* 0.000977 */);
         {
            out.field_0 = 0;
            out.field_1 = (0x30000 /* 3.000000 */ + fix_mul(d,((-0x40000 /* -4.000000 */) + d + t2)));
         }
      }
      else
      {
         {
            out.field_0 = 1;
            out.field_1 = 0x0 /* 0.000000 */;
         }
      }
   }
   _output_ = out;
   return ;
}

void Sawcore__ctx_type_1_init(Sawcore__ctx_type_1 &_output_){
   Sawcore__ctx_type_1 _ctx;
   _ctx.reset_state = 0;
   _ctx.reset_phase = 0x0 /* 0.000000 */;
   _ctx.rate = 0x0 /* 0.000000 */;
   _ctx.phase = 0x0 /* 0.000000 */;
   Util__ctx_type_0_init(_ctx._inst30);
   Util__ctx_type_1_init(_ctx._inst28);
   Sawcore_default(_ctx);
   _output_ = _ctx;
   return ;
}

void Sawcore_process_init(Sawcore__ctx_type_1 &_output_){
   Sawcore__ctx_type_1_init(_output_);
   return ;
}

fix16_t Sawcore_process(Sawcore__ctx_type_1 &_ctx, fix16_t cv, fix16_t reset){
   fix16_t transition;
   transition = 0x0 /* 0.000000 */;
   fix16_t out;
   out = 0x0 /* 0.000000 */;
   uint8_t _cond_47;
   _cond_47 = Util_change(_ctx._inst28,cv);
   if(_cond_47){
      _ctx.rate = Util_cvToRate_1024(cv);
   }
   fix16_t new_phase;
   new_phase = (_ctx.phase + _ctx.rate);
   uint8_t do_reset;
   do_reset = Util_edge(_ctx._inst30,(reset > 0x0 /* 0.000000 */));
   uint8_t do_wrap;
   do_wrap = (new_phase > 0x4000000 /* 1024.000000 */);
   uint8_t _cond_48;
   _cond_48 = (do_reset || do_wrap);
   if(_cond_48){
      _ctx.reset_phase = _ctx.phase;
      if(do_wrap){ new_phase = (new_phase + (-0x4000000 /* -1024.000000 */)); }
      else
      { new_phase = 0x0 /* 0.000000 */; }
      _ctx.reset_state = 1;
   }
   _ctx.phase = new_phase;
   out = _ctx.phase;
   if(_ctx.reset_state){
      uint8_t done;
      fix16_t ptr;
      _tuple_$_bool_real_$ _call_49;
      Sawcore_ptr_w2(_ctx.phase,_ctx.rate,_call_49);
      done = _call_49.field_0;ptr = _call_49.field_1;
      transition = fix_mul(fix_mul((ptr + 0x10000 /* 1.000000 */),0x8000 /* 0.500000 */),_ctx.reset_phase);
      if(done){
         _ctx.reset_state = 0;
      }
      else
      {
         out = transition;
      }
   }
   return (fix_mul(0x80 /* 0.001953 */,out) + (-0x10000 /* -1.000000 */));
}

void Sawcore_noteOn_init(Sawcore__ctx_type_1 &_output_){
   Sawcore__ctx_type_1_init(_output_);
   return ;
}

void Sawcore_noteOn(Sawcore__ctx_type_1 &_ctx, int note, int velocity, int channel){
}

void Sawcore_noteOff_init(Sawcore__ctx_type_1 &_output_){
   Sawcore__ctx_type_1_init(_output_);
   return ;
}

void Sawcore_noteOff(Sawcore__ctx_type_1 &_ctx, int note, int channel){
}

void Sawcore_controlChange_init(Sawcore__ctx_type_1 &_output_){
   Sawcore__ctx_type_1_init(_output_);
   return ;
}

void Sawcore_controlChange(Sawcore__ctx_type_1 &_ctx, int control, int value, int channel){
}

void Sawcore_default_init(Sawcore__ctx_type_1 &_output_){
   Sawcore__ctx_type_1_init(_output_);
   return ;
}

void Sawcore_default(Sawcore__ctx_type_1 &_ctx){
   _ctx.rate = 0xc265 /* 0.759367 */;
}


