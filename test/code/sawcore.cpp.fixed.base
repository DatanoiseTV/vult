
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#include "sawcore.h"

void Util__ctx_type_3_init(Util__ctx_type_3 &_output_){
   Util__ctx_type_3 _ctx;
   _ctx.y1 = 0x0 /* 0.000000 */;
   _ctx.x1 = 0x0 /* 0.000000 */;
   _output_ = _ctx;
   return ;
}

fix16_t Util_dcblock(Util__ctx_type_3 &_ctx, fix16_t x0){
   fix16_t y0;
   y0 = (x0 + (- _ctx.x1) + fix_mul(0xfeb8 /* 0.995000 */,_ctx.y1));
   _ctx.x1 = x0;
   _ctx.y1 = y0;
   return y0;
}

void Sawcore__ctx_type_0_init(Sawcore__ctx_type_0 &_output_){
   Sawcore__ctx_type_0 _ctx;
   _ctx.ptr_w2_ret_1 = 0x0 /* 0.000000 */;
   _ctx.ptr_w2_ret_0 = false;
   _output_ = _ctx;
   return ;
}

void Sawcore_ptr_w2(Sawcore__ctx_type_0 &_ctx, fix16_t phase, fix16_t rate){
   _tuple___bool_real__ out;
   fix16_t s1;
   s1 = rate;
   fix16_t s2;
   s2 = (rate + s1);
   if(phase < s1){
      fix16_t d;
      d = fix_div(phase,rate);
      fix16_t t2;
      t2 = (s2 >> 10);
      {
         out.field_0 = false;
         out.field_1 = (0x10000 /* 1.000000 */ + fix_mul(d,(t2 + (- d))));
      }
   }
   else
   {
      if(phase < s2){
         fix16_t d;
         d = fix_div(phase,rate);
         fix16_t t2;
         t2 = (s2 >> 10);
         {
            out.field_0 = false;
            out.field_1 = (0x30000 /* 3.000000 */ + fix_mul(d,(-0x40000 /* -4.000000 */ + d + t2)));
         }
      }
      else
      {
         out.field_0 = true;
         out.field_1 = 0x0 /* 0.000000 */;
      }
   }
   _ctx.ptr_w2_ret_0 = out.field_0;_ctx.ptr_w2_ret_1 = out.field_1;
   return ;
}

void Sawcore__ctx_type_1_init(Sawcore__ctx_type_1 &_output_){
   Sawcore__ctx_type_1 _ctx;
   _ctx.reset_state = false;
   _ctx.reset_phase = 0x0 /* 0.000000 */;
   _ctx.rate = 0x0 /* 0.000000 */;
   _ctx.phase = 0x0 /* 0.000000 */;
   Sawcore__ctx_type_0_init(_ctx._inst622);
   Util__ctx_type_0_init(_ctx._inst351);
   Util__ctx_type_1_init(_ctx._inst13b);
   Sawcore_default(_ctx);
   _output_ = _ctx;
   return ;
}

fix16_t Sawcore_process(Sawcore__ctx_type_1 &_ctx, fix16_t cv, fix16_t reset){
   fix16_t transition;
   transition = 0x0 /* 0.000000 */;
   fix16_t out;
   out = 0x0 /* 0.000000 */;
   if(Util_change(_ctx._inst13b,cv)){
      _ctx.rate = Util_cvToRate_1024(cv);
   }
   fix16_t new_phase;
   new_phase = (_ctx.phase + _ctx.rate);
   uint8_t do_reset;
   do_reset = Util_edge(_ctx._inst351,(reset > 0x0 /* 0.000000 */));
   uint8_t do_wrap;
   do_wrap = (new_phase > 0x4000000 /* 1024.000000 */);
   if(do_reset || do_wrap){
      _ctx.reset_phase = _ctx.phase;
      if(do_wrap){
         new_phase = (-0x4000000 /* -1024.000000 */ + new_phase);
      }
      else
      {
         new_phase = 0x0 /* 0.000000 */;
      }
      _ctx.reset_state = true;
   }
   _ctx.phase = new_phase;
   out = _ctx.phase;
   if(_ctx.reset_state){
      uint8_t done;
      fix16_t ptr;
      Sawcore_ptr_w2(_ctx._inst622,_ctx.phase,_ctx.rate);
      done = Sawcore_ptr_w2_ret_0(_ctx._inst622);
      ptr = Sawcore_ptr_w2_ret_1(_ctx._inst622);
      transition = (fix_mul(_ctx.reset_phase,(0x10000 /* 1.000000 */ + ptr)) >> 1);
      if(done){
         _ctx.reset_state = false;
      }
      else
      {
         out = transition;
      }
   }
   return (-0x10000 /* -1.000000 */ + (out >> 9));
}


