
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#include "aff_ff.h"

void Aff_ff__ctx_type_0_init(Aff_ff__ctx_type_0 &_output_){
   Aff_ff__ctx_type_0 _ctx;
   _ctx.x = 0;
   _ctx.process_ret_1 = 0.f;
   _ctx.process_ret_0 = 0.f;
   _output_ = _ctx;
   return ;
}

void Aff_ff_process_init(Aff_ff__ctx_type_0 &_output_){
   Aff_ff__ctx_type_0_init(_output_);
   return ;
}

void Aff_ff_process(Aff_ff__ctx_type_0 &_ctx, float a, float b){
   _ctx.x = (_ctx.x + 1);
   _ctx.process_ret_0 = (a + b);
   _ctx.process_ret_1 = (a + (- b));
   return ;
}

void Aff_ff_process_ret_0_init(Aff_ff__ctx_type_0 &_output_){
   Aff_ff__ctx_type_0_init(_output_);
   return ;
}

float Aff_ff_process_ret_0(Aff_ff__ctx_type_0 &_ctx){
   return _ctx.process_ret_0;
}

void Aff_ff_process_ret_1_init(Aff_ff__ctx_type_0 &_output_){
   Aff_ff__ctx_type_0_init(_output_);
   return ;
}

float Aff_ff_process_ret_1(Aff_ff__ctx_type_0 &_ctx){
   return _ctx.process_ret_1;
}

void Aff_ff_noteOn_init(Aff_ff__ctx_type_0 &_output_){
   Aff_ff__ctx_type_0_init(_output_);
   return ;
}

void Aff_ff_noteOn(Aff_ff__ctx_type_0 &_ctx, int note, int velocity, int channel){

}

void Aff_ff_noteOff_init(Aff_ff__ctx_type_0 &_output_){
   Aff_ff__ctx_type_0_init(_output_);
   return ;
}

void Aff_ff_noteOff(Aff_ff__ctx_type_0 &_ctx, int note, int channel){

}

void Aff_ff_controlChange_init(Aff_ff__ctx_type_0 &_output_){
   Aff_ff__ctx_type_0_init(_output_);
   return ;
}

void Aff_ff_controlChange(Aff_ff__ctx_type_0 &_ctx, int control, int value, int channel){

}

void Aff_ff_default_init(Aff_ff__ctx_type_0 &_output_){
   Aff_ff__ctx_type_0_init(_output_);
   return ;
}

void Aff_ff_default(Aff_ff__ctx_type_0 &_ctx){

}



extern "C" {

EXPORT void *aff_ff__constructor()
{
   Aff_ff_process_type *data = (Aff_ff_process_type *)malloc(sizeof(Aff_ff_process_type));
   Aff_ff_process_init(*data);
   Aff_ff_default(*data);
   return (void *)data;
}

EXPORT void aff_ff__destructor(void *object)
{
   Aff_ff_process_type *data = (Aff_ff_process_type *)object;
   free(data);
}

EXPORT void aff_ff__process(void *object, double in_0, double in_1, double &out_0, double &out_1)
{
   Aff_ff_process_type *data = (Aff_ff_process_type *)object;
   _tuple___real_real__ ret;  Aff_ff_process(*data,(float) in_0,(float) in_1,ret); 
out_0 = (float) ret.field_0; 
out_1 = (float) ret.field_1; 

}


EXPORT void aff_ff__noteOn(void *object, int note,int velocity,int channel){
   Aff_ff_process_type *data = (Aff_ff_process_type *)object;
   if(vel) Aff_ff_noteOn(*data,(int)note,(int)velocity,(int)channel);
   else Aff_ff_noteOff(*data,(int)note,(int)channel);
}



EXPORT void aff_ff__noteOff(void *object, int note,int channel) {
   Aff_ff_process_type *data = (Aff_ff_process_type *)object;
   Aff_ff_noteOff(*data,(int)note,(int)channel);
}



EXPORT void aff_ff__controlChange(void *object, int control,int value,int channel) {
   Aff_ff_process_type *data = (Aff_ff_process_type *)object;
   Aff_ff_controlChange(*data,(int)control,(int)value,(int)channel);
}


} // extern "C"
