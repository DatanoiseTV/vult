
local this = {}
local ffi = require("ffi")
function this.ternary(cond,then_,else_) if cond then return then_ else return else_ end end
function this.eps()             return 1e-18; end
function this.random()          return math.random(); end
function this.irandom()         return math.floor(math.random() * 4294967296); end
function this.clip(x,low,high)  return (this.ternary(x<low,low,this.ternary(x>high,high,x))); end
function this.real(x)           return x; end
function this.int(x)            local int_part,_ = math.modf(x) return int_part; end
function this.sin(x)            return math.sin(x); end
function this.cos(x)            return math.cos(x); end
function this.abs(x)            return math.abs(x); end
function this.exp(x)            return math.exp(x); end
function this.floor(x)          return math.floor(x); end
function this.tan(x)            return math.tan(x); end
function this.tanh(x)           return math.tanh(x); end
function this.sqrt(x)           return x; end
function this.set(a,i,v)        a[i]=v; end
function this.get(a,i)          return a[i]; end
function this.makeArray(size,v) local a = ffi.new("double[?]",size); for i=0,size-1 do a[i]=v end return a; end
function this.wrap_array(a)     return a; end
function this.Util__ctx_type_0_init()
   local _ctx = {};
   _ctx.pre = false;
   return _ctx;

end

function this.Util_edge_init()
   return this.Util__ctx_type_0_init();
end

function this.Util_edge(_ctx,x)
   local ret = (x and (not _ctx.pre));
   _ctx.pre = x;
   return ret;

end

function this.Util__ctx_type_1_init()
   local _ctx = {};
   _ctx.pre_x = 0.000000;
   return _ctx;

end

function this.Util_change_init()
   return this.Util__ctx_type_1_init();
end

function this.Util_change(_ctx,x)
   local v = (_ctx.pre_x ~= x);
   _ctx.pre_x = x;
   return v;

end

function this.Util_map(x,x0,x1,y0,y1)
   return ((((x + (- x0)) * (y1 + (- y0))) / (x1 + (- x0))) + y0);

end

function this.Util__ctx_type_3_init()
   local _ctx = {};
   _ctx.y1 = 0.000000;
   _ctx.x1 = 0.000000;
   return _ctx;

end

function this.Util_dcblock_init()
   return this.Util__ctx_type_3_init();
end

function this.Util_dcblock(_ctx,x0)
   local y0 = (x0 + (- _ctx.x1) + (_ctx.y1 * 0.995000));
   _ctx.x1 = x0;
   _ctx.y1 = y0;
   return y0;

end

function this.Util__ctx_type_4_init()
   local _ctx = {};
   _ctx.x = 0.000000;
   return _ctx;

end

function this.Util_smooth_init()
   return this.Util__ctx_type_4_init();
end

function this.Util_smooth(_ctx,input)
   _ctx.x = (_ctx.x + ((input + (- _ctx.x)) * 0.005000));
   return _ctx.x;

end

function this.Util__ctx_type_5_init()
   local _ctx = {};
   _ctx.x0 = 0.000000;
   return _ctx;

end

function this.Util_average2_init()
   return this.Util__ctx_type_5_init();
end

function this.Util_average2(_ctx,x1)
   local result = ((_ctx.x0 + x1) * 0.500000);
   _ctx.x0 = x1;
   return result;

end

local Util_pitchToRate_c0 = ffi.new("double[33]", {0.189842,0.191326,0.198689,0.219425,0.265677,0.356438,0.520651,0.801560,1.262758,1.996562,3.135544,4.868347,7.461281,11.287715,16.867996,24.923305,36.448521,52.809903,75.876616,108.197225,153.232414,215.672344,301.846626,420.298038,582.505178,803.812129,1104.880165,1513.124126,2065.373952,2810.230550,3812.902888,5159.525580,6963.761469});
local Util_pitchToRate_c1 = ffi.new("double[33]", {0.010913,0.010176,0.008334,0.004867,(-0.000939),(-0.010061),(-0.023820),(-0.044002),(-0.073002),(-0.114025),(-0.171341),(-0.250621),(-0.359381),(-0.507548),(-0.708208),(-0.978575),(-1.341250),(-1.825848),(-2.471123),(-3.327721),(-4.461658),(-5.959006),(-7.931626),(-10.525312),(-13.929212),(-18.387588),(-24.219785),(-31.835151),(-41.769557),(-54.706455),(-71.541226),(-93.422592),(-121.823163)});
local Util_pitchToRate_c2 = ffi.new("double[33]", {0.000356,0.000447,0.000562,0.000707,0.000889,0.001119,0.001407,0.001769,0.002225,0.002799,0.003520,0.004426,0.005567,0.007001,0.008805,0.011074,0.013927,0.017515,0.022028,0.027704,0.034841,0.043818,0.055107,0.069305,0.087163,0.109617,0.137862,0.173377,0.218054,0.274227,0.344892,0.433780,0.545543});
function this.Util_pitchToRate(pitch)
   local index = this.clip(this.int((0.244094 * pitch)),0,31);
   return (this.get(this.wrap_array(Util_pitchToRate_c0),index) + (pitch * (this.get(this.wrap_array(Util_pitchToRate_c1),index) + (this.get(this.wrap_array(Util_pitchToRate_c2),index) * pitch))));

end

function this.Util_cvToPitch(cv)
   return ((cv * 120.000000) + 24.000000);

end

local Util_cvToRate_c0 = ffi.new("double[33]", {0.759367,0.762877,0.779737,0.825652,0.924648,1.112398,1.440687,1.983392,2.844434,4.168310,6.153994,9.073195,13.294301,19.313616,27.796102,39.628290,55.986657,78.426750,108.998215,150.387464,206.118533,280.781675,380.357513,512.612775,687.616764,918.349028,1221.607949,1619.052235,2138.629322,2815.436671,3696.162408,4838.694117,6318.211520});
local Util_cvToRate_c1 = ffi.new("double[33]", {5.245583,4.998943,4.403089,3.319116,1.564497,(-1.099256),(-4.982226),(-10.485864),(-18.127956),(-28.574100),(-42.677360),(-61.528124),(-86.516770),(-119.412133),(-162.460318),(-218.508269),(-291.156786),(-384.956978),(-505.652297),(-660.458539),(-858.494950),(-1111.173376),(-1432.858445),(-1841.544459),(-2359.816046),(-3015.795467),(-3844.838138),(-4891.101919),(-6210.197274),(-7868.993868),(-9955.778008),(-12575.747874),(-15862.234621)});
local Util_cvToRate_c2 = ffi.new("double[33]", {20.125592,24.457572,29.722000,36.119582,43.894227,53.342343,64.824143,78.777366,95.733987,116.340471,141.382451,171.814646,208.797363,253.740413,308.357211,374.730622,455.389632,553.410816,672.536916,817.290611,993.216833,1207.000622,1466.803875,1782.529271,2166.244997,2632.487590,3199.072620,3887.673024,4724.859179,5741.245302,6977.441755,8479.290028,10304.455486});
function this.Util_cvToRate(cv)
   local index = this.clip(this.int((34.444444 * cv)),0,31);
   return (this.get(this.wrap_array(Util_cvToRate_c0),index) + (cv * (this.get(this.wrap_array(Util_cvToRate_c1),index) + (this.get(this.wrap_array(Util_cvToRate_c2),index) * cv))));

end

function this.Util_pitchToCv(pitch)
   return (0.008333 * ((-24.000000) + pitch));

end

local Util_cvToRate_unit_c0 = ffi.new("double[33]", {0.000742,0.000745,0.000761,0.000806,0.000903,0.001086,0.001407,0.001937,0.002778,0.004071,0.006010,0.008861,0.012983,0.018861,0.027145,0.038700,0.054674,0.076589,0.106444,0.146863,0.201288,0.274201,0.371443,0.500598,0.671501,0.896825,1.192977,1.581106,2.088505,2.749450,3.609534,4.725287,6.170128});
local Util_cvToRate_unit_c1 = ffi.new("double[33]", {0.005123,0.004882,0.004300,0.003241,0.001528,(-0.001073),(-0.004865),(-0.010240),(-0.017703),(-0.027904),(-0.041677),(-0.060086),(-0.084489),(-0.116613),(-0.158653),(-0.213387),(-0.284333),(-0.375935),(-0.493801),(-0.644979),(-0.838374),(-1.085130),(-1.399276),(-1.798383),(-2.304508),(-2.945113),(-3.754725),(-4.776467),(-6.064646),(-7.684564),(-9.722439),(-12.281004),(-15.490463)});
local Util_cvToRate_unit_c2 = ffi.new("double[33]", {0.019654,0.023884,0.029025,0.035273,0.042865,0.052092,0.063305,0.076931,0.093490,0.113614,0.138069,0.167788,0.203904,0.247793,0.301130,0.365948,0.444716,0.540440,0.656774,0.798135,0.969938,1.178712,1.432426,1.740751,2.115474,2.570789,3.124094,3.796556,4.614120,5.606685,6.813908,8.280557,10.062945});
function this.Util_cvToRate_unit(cv)
   local index = this.clip(this.int((34.444444 * cv)),0,31);
   return (this.get(this.wrap_array(Util_cvToRate_unit_c0),index) + (cv * (this.get(this.wrap_array(Util_cvToRate_unit_c1),index) + (this.get(this.wrap_array(Util_cvToRate_unit_c2),index) * cv))));

end

local Saturate_soft_table_c0 = ffi.new("double[11]", {0.000000,(-0.000837),(-0.004130),(-0.011331),(-0.023628),(-0.041861),(-0.066455),(-0.097383),(-0.134146),(-0.175783),(-0.220903)});
local Saturate_soft_table_c1 = ffi.new("double[11]", {1.000234,1.003027,1.008519,1.016526,1.026781,1.038945,1.052619,1.067357,1.082688,1.098122,1.113175});
local Saturate_soft_table_c2 = ffi.new("double[11]", {(-0.001171),(-0.003500),(-0.005790),(-0.008016),(-0.010154),(-0.012182),(-0.014083),(-0.015839),(-0.017437),(-0.018867),(-0.020123)});
function this.Saturate_soft_table(x)
   local index = this.clip(this.int((1.500000 * x)),0,9);
   return (this.get(this.wrap_array(Saturate_soft_table_c0),index) + (x * (this.get(this.wrap_array(Saturate_soft_table_c1),index) + (this.get(this.wrap_array(Saturate_soft_table_c2),index) * x))));

end

function this.Saturate_soft_process(x)
   if (x == 0.000000) then
      return 0.000000;

   end
   local fixed = 0.0;
   local sign = false;
   if (x > 0.000000) then
      fixed = x;
      sign = false;

   else

      fixed = (- x);
      sign = true;

   end
   local out = 0.000000;
   if (fixed > 6.000000) then
      out = 1.000000;

   else

      out = this.Saturate_soft_table(fixed);

   end
   if sign then
      out = (- out);
   else

      out = out;
   end
   return out;

end

function this.Saturate_soft_noteOn(note,velocity,channel)

end

function this.Saturate_soft_noteOff(note,channel)

end

function this.Saturate_soft_controlChange(control,value,channel)

end

function this.Saturate_soft_default()

end

local Svf_calc_g_c0 = ffi.new("double[129]", {0.002330,0.002330,0.002330,0.002332,0.002334,0.002339,0.002345,0.002355,0.002367,0.002384,0.002406,0.002434,0.002469,0.002512,0.002564,0.002627,0.002703,0.002792,0.002897,0.003020,0.003163,0.003329,0.003520,0.003739,0.003989,0.004275,0.004598,0.004966,0.005380,0.005846,0.006371,0.006958,0.007617,0.008349,0.009169,0.010082,0.011097,0.012216,0.013457,0.014835,0.016350,0.018027,0.019880,0.021901,0.024177,0.026620,0.029309,0.032305,0.035508,0.039085,0.042961,0.047132,0.051635,0.056888,0.062349,0.068325,0.075187,0.081751,0.089900,0.097998,0.107213,0.117479,0.128467,0.140645,0.152384,0.164957,0.180620,0.196876,0.217383,0.233608,0.255074,0.277937,0.300345,0.334902,0.360034,0.392927,0.431044,0.470668,0.502125,0.548706,0.585845,0.640390,0.705687,0.766947,0.857199,0.931926,0.955894,1.047667,1.211238,1.287302,1.359961,1.525900,1.777559,1.821213,2.000695,2.067184,2.562031,2.508080,2.949113,3.936569,3.384321,4.501667,4.479607,4.709319,4.717681,5.930568,8.664774,8.453629,8.697593,9.969256,10.311537,17.026154,17.442482,20.364464,27.658995,25.526743,27.760690,33.937415,52.292663,65.356820,82.519360,85.622727,140.913994,153.280903,265.720234,385.488409,776.142793,1249.269742,1090.244278});
local Svf_calc_g_c1 = ffi.new("double[129]", {0.016145,0.016105,0.016020,0.015887,0.015700,0.015455,0.015147,0.014769,0.014315,0.013780,0.013155,0.012433,0.011607,0.010667,0.009603,0.008408,0.007068,0.005574,0.003913,0.002072,0.000038,(-0.002205),(-0.004673),(-0.007381),(-0.010349),(-0.013594),(-0.017139),(-0.021002),(-0.025214),(-0.029786),(-0.034755),(-0.040156),(-0.045999),(-0.052325),(-0.059186),(-0.066566),(-0.074590),(-0.083227),(-0.092513),(-0.102539),(-0.113342),(-0.124934),(-0.137556),(-0.150936),(-0.165494),(-0.180915),(-0.197743),(-0.215882),(-0.234857),(-0.255513),(-0.277493),(-0.300931),(-0.325376),(-0.353601),(-0.383015),(-0.412920),(-0.449157),(-0.480947),(-0.521104),(-0.559783),(-0.605884),(-0.651413),(-0.701831),(-0.758184),(-0.809563),(-0.860345),(-0.930806),(-1.001329),(-1.092007),(-1.153990),(-1.236844),(-1.327107),(-1.413789),(-1.565029),(-1.650617),(-1.770758),(-1.930161),(-2.064629),(-2.186008),(-2.344857),(-2.475820),(-2.653299),(-2.884870),(-3.101130),(-3.438192),(-3.685398),(-3.737599),(-4.008374),(-4.583202),(-4.791112),(-5.000224),(-5.557169),(-6.393678),(-6.498466),(-7.032296),(-7.188267),(-8.799336),(-8.488635),(-9.780928),(-12.999440),(-11.025426),(-14.549914),(-14.069083),(-14.666232),(-14.627071),(-17.976414),(-25.818903),(-25.420736),(-25.306335),(-28.584106),(-29.200662),(-47.790608),(-47.948688),(-55.645058),(-74.335334),(-68.008779),(-72.904784),(-87.497766),(-133.243615),(-164.218551),(-206.496450),(-210.634553),(-343.192699),(-365.869108),(-630.182525),(-900.343072),(-1797.100783),(-2855.001303),(-2461.636604)});
local Svf_calc_g_c2 = ffi.new("double[129]", {0.057350,0.060215,0.063222,0.066380,0.069695,0.073176,0.076831,0.080669,0.084698,0.088928,0.093370,0.098034,0.102931,0.108072,0.113470,0.119138,0.125090,0.131337,0.137899,0.144788,0.152021,0.159616,0.167590,0.175962,0.184756,0.193986,0.203671,0.213855,0.224536,0.235751,0.247551,0.259910,0.272909,0.286526,0.300865,0.315916,0.331755,0.348308,0.365700,0.383964,0.403079,0.423152,0.444676,0.466776,0.490416,0.514790,0.540724,0.568318,0.596239,0.626212,0.657654,0.690074,0.722979,0.761476,0.799506,0.839155,0.885159,0.924569,0.973440,1.019112,1.073789,1.129113,1.186314,1.249537,1.304662,1.357422,1.437164,1.509851,1.605739,1.667344,1.755787,1.843974,1.928461,2.082011,2.165953,2.280928,2.430995,2.559696,2.655523,2.792885,2.908195,3.073275,3.285248,3.467169,3.765072,3.986876,3.965669,4.207899,4.713541,4.845564,4.994400,5.446843,6.144788,6.163343,6.561545,6.641975,7.938960,7.567922,8.638244,11.148986,9.440932,12.156427,11.640707,11.982242,11.710453,14.290648,20.000363,19.246561,19.090325,21.262534,21.349387,34.127243,34.037782,38.708598,50.911766,46.036973,48.499666,57.648744,85.908308,104.562190,129.166100,130.220198,209.111404,220.875546,375.022130,528.949352,1040.368058,1632.109419,1391.005452});
function this.Svf_calc_g(cv)
   local index = this.clip(this.int((141.111111 * cv)),0,127);
   return (this.get(this.wrap_array(Svf_calc_g_c0),index) + (cv * (this.get(this.wrap_array(Svf_calc_g_c1),index) + (this.get(this.wrap_array(Svf_calc_g_c2),index) * cv))));

end

function this.Svf__ctx_type_1_init()
   local _ctx = {};
   _ctx.z2 = 0.000000;
   _ctx.z1 = 0.000000;
   _ctx.inv_den = 0.000000;
   _ctx.g = 0.000000;
   _ctx._inst29 = this.Util__ctx_type_1_init();
   _ctx._inst28 = this.Util__ctx_type_1_init();
   _ctx.R = 0.000000;
   this.Svf_default(_ctx);
   return _ctx;

end

function this.Svf_process_init()
   return this.Svf__ctx_type_1_init();
end

function this.Svf_process(_ctx,x,cv,q,sel)
   q = (q + 0.500000);
   if (this.Util_change(_ctx._inst28,cv) or this.Util_change(_ctx._inst29,q)) then
      _ctx.g = this.Svf_calc_g(cv);
      _ctx.R = (1.000000 / (2.000000 * (q + 0.000000)));
      _ctx.inv_den = (1.000000 / (1.000000 + (2.000000 * _ctx.R * _ctx.g) + (_ctx.g * _ctx.g)));

   end
   local high = ((x + (- (((2.000000 * _ctx.R) + _ctx.g) * _ctx.z1)) + (- _ctx.z2)) * _ctx.inv_den);
   local band = ((_ctx.g * high) + _ctx.z1);
   local low = ((_ctx.g * band) + _ctx.z2);
   local notch = (low + high);
   _ctx.z1 = ((_ctx.g * high) + band);
   _ctx.z2 = ((_ctx.g * band) + low);
   local output = 0.0;
   if (sel == 0) then
      output = low;
   else

      local _cond_37 = false;
      _cond_37 = (sel == 1);
      if _cond_37 then
         output = high;
      else

         local _cond_38 = false;
         _cond_38 = (sel == 2);
         if _cond_38 then
            output = band;
         else

            output = notch;
         end

      end

   end
   return this.Saturate_soft_process(output);

end

function this.Svf_noteOn_init()
   return this.Svf__ctx_type_1_init();
end

function this.Svf_noteOn(_ctx,note,velocity,channel)

end

function this.Svf_noteOff_init()
   return this.Svf__ctx_type_1_init();
end

function this.Svf_noteOff(_ctx,note,channel)

end

function this.Svf_controlChange_init()
   return this.Svf__ctx_type_1_init();
end

function this.Svf_controlChange(_ctx,control,value,channel)

end

function this.Svf_default_init()
   return this.Svf__ctx_type_1_init();
end

function this.Svf_default(_ctx)
   _ctx.g = 0.002330;
   _ctx.R = 1.000000;
   _ctx.inv_den = (1.000000 / (1.000000 + (_ctx.g * _ctx.g)));

end


function this.process(ctx,in0,in1,in2,in3) return this.Svf_process(ctx,in0,in1,in2,in3) end
function this.noteOn(ctx,in0,in1,in2) return this.Svf_noteOn(ctx,in0,in1,in2) end
function this.noteOff(ctx,in0,in1) return this.Svf_noteOff(ctx,in0,in1) end
function this.controlChange(ctx,in0,in1,in2) return this.Svf_controlChange(ctx,in0,in1,in2) end
function this.init() return this.Svf_process_init() end
function this.default(ctx) return this.Svf_default(ctx) end
this.config = { inputs = 5, outputs = 1, noteon_inputs = 4, noteoff_inputs = 3, controlchange_inputs = 4, is_active = true }
return this
