
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#ifndef VOICE_4_H
#define VOICE_4_H
#include <stdint.h>
#include <math.h>
#include "vultin.h"

typedef struct Util__ctx_type_0 {
   uint8_t pre;
} Util__ctx_type_0;

typedef Util__ctx_type_0 Util_edge_type;

void Util__ctx_type_0_init(Util__ctx_type_0 &_output_);

void Util_edge_init(Util__ctx_type_0 &_output_);

uint8_t Util_edge(Util__ctx_type_0 &_ctx, uint8_t x);

typedef struct Util__ctx_type_1 {
   float pre_x;
} Util__ctx_type_1;

typedef Util__ctx_type_1 Util_change_type;

void Util__ctx_type_1_init(Util__ctx_type_1 &_output_);

void Util_change_init(Util__ctx_type_1 &_output_);

uint8_t Util_change(Util__ctx_type_1 &_ctx, float x);

float Util_map(float x, float x0, float x1, float y0, float y1);

typedef struct Util__ctx_type_3 {
   float y1;
   float x1;
} Util__ctx_type_3;

typedef Util__ctx_type_3 Util_dcblock_type;

void Util__ctx_type_3_init(Util__ctx_type_3 &_output_);

void Util_dcblock_init(Util__ctx_type_3 &_output_);

float Util_dcblock(Util__ctx_type_3 &_ctx, float x0);

typedef struct Util__ctx_type_4 {
   float x;
} Util__ctx_type_4;

typedef Util__ctx_type_4 Util_smooth_type;

void Util__ctx_type_4_init(Util__ctx_type_4 &_output_);

void Util_smooth_init(Util__ctx_type_4 &_output_);

float Util_smooth(Util__ctx_type_4 &_ctx, float input);

typedef struct Util__ctx_type_5 {
   float x0;
} Util__ctx_type_5;

typedef Util__ctx_type_5 Util_average2_type;

void Util__ctx_type_5_init(Util__ctx_type_5 &_output_);

void Util_average2_init(Util__ctx_type_5 &_output_);

float Util_average2(Util__ctx_type_5 &_ctx, float x1);

float Util_cubic_clipper(float x);

static const float Util_pitchToRate_1024_c0[33] = {0.1898f,0.1913f,0.1987f,0.2194f,0.2657f,0.3564f,0.5207f,0.8016f,1.2628f,1.9966f,3.1355f,4.8683f,7.4613f,11.2877f,16.8680f,24.9233f,36.4485f,52.8099f,75.8766f,108.1966f,153.2316f,215.6711f,301.8494f,420.3017f,582.5003f,803.8319f,1104.8901f,1513.1840f,2065.3943f,2810.3466f,3812.9291f,5159.2452f,6963.3862f};
static const float Util_pitchToRate_1024_c1[33] = {0.0109f,0.0102f,0.0083f,0.0049f,(-0.0009f),(-0.0101f),(-0.0238f),(-0.0440f),(-0.0730f),(-0.1140f),(-0.1713f),(-0.2506f),(-0.3594f),(-0.5075f),(-0.7082f),(-0.9786f),(-1.3412f),(-1.8258f),(-2.4711f),(-3.3277f),(-4.4616f),(-5.9590f),(-7.9317f),(-10.5254f),(-13.9291f),(-18.3881f),(-24.2200f),(-31.8365f),(-41.7700f),(-54.7088f),(-71.5420f),(-93.4177f),(-121.8166f)};
static const float Util_pitchToRate_1024_c2[33] = {0.0004f,0.0004f,0.0006f,0.0007f,0.0009f,0.0011f,0.0014f,0.0018f,0.0022f,0.0028f,0.0035f,0.0044f,0.0056f,0.0070f,0.0088f,0.0111f,0.0139f,0.0175f,0.0220f,0.0277f,0.0348f,0.0438f,0.0551f,0.0693f,0.0872f,0.1096f,0.1379f,0.1734f,0.2181f,0.2742f,0.3449f,0.4338f,0.5455f};
float Util_pitchToRate_1024(float pitch);

static const float Util_pitchToRate_c0[33] = {0.0002f,0.0002f,0.0002f,0.0002f,0.0003f,0.0003f,0.0005f,0.0008f,0.0012f,0.0019f,0.0031f,0.0048f,0.0073f,0.0110f,0.0165f,0.0243f,0.0356f,0.0516f,0.0741f,0.1057f,0.1496f,0.2106f,0.2948f,0.4105f,0.5688f,0.7850f,1.0790f,1.4777f,2.0170f,2.7445f,3.7236f,5.0383f,6.8002f};
static const float Util_pitchToRate_c1[33] = {0.0000f,0.0000f,0.0000f,0.0000f,(-0.0000f),(-0.0000f),(-0.0000f),(-0.0000f),(-0.0001f),(-0.0001f),(-0.0002f),(-0.0002f),(-0.0004f),(-0.0005f),(-0.0007f),(-0.0010f),(-0.0013f),(-0.0018f),(-0.0024f),(-0.0032f),(-0.0044f),(-0.0058f),(-0.0077f),(-0.0103f),(-0.0136f),(-0.0180f),(-0.0237f),(-0.0311f),(-0.0408f),(-0.0534f),(-0.0699f),(-0.0912f),(-0.1190f)};
static const float Util_pitchToRate_c2[33] = {0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0001f,0.0001f,0.0001f,0.0001f,0.0001f,0.0002f,0.0002f,0.0003f,0.0003f,0.0004f,0.0005f};
float Util_pitchToRate(float pitch);

float Util_cvToPitch(float cv);

static const float Util_cvToRate_1024_c0[33] = {0.7594f,0.7629f,0.7797f,0.8257f,0.9246f,1.1124f,1.4407f,1.9834f,2.8444f,4.1683f,6.1540f,9.0732f,13.2943f,19.3136f,27.7961f,39.6283f,55.9867f,78.4269f,108.9974f,150.3878f,206.1178f,280.7811f,380.3573f,512.6116f,687.6053f,918.3474f,1221.6261f,1619.0668f,2138.4785f,2815.5636f,3696.0898f,4838.6433f,6318.1165f};
static const float Util_cvToRate_1024_c1[33] = {5.2456f,4.9989f,4.4031f,3.3191f,1.5645f,(-1.0993f),(-4.9822f),(-10.4859f),(-18.1280f),(-28.5741f),(-42.6774f),(-61.5281f),(-86.5167f),(-119.4121f),(-162.4604f),(-218.5081f),(-291.1571f),(-384.9574f),(-505.6483f),(-660.4605f),(-858.4912f),(-1111.1728f),(-1432.8575f),(-1841.5435f),(-2359.7804f),(-3015.7941f),(-3844.8864f),(-4891.1724f),(-6209.7399f),(-7869.3288f),(-9955.6558f),(-12575.5384f),(-15862.0069f)};
static const float Util_cvToRate_1024_c2[33] = {20.1256f,24.4576f,29.7220f,36.1196f,43.8942f,53.3423f,64.8241f,78.7774f,95.7340f,116.3405f,141.3825f,171.8147f,208.7973f,253.7404f,308.3573f,374.7304f,455.3902f,553.4117f,672.5321f,817.2928f,993.2130f,1206.9994f,1466.8029f,1782.5283f,2166.2129f,2632.4845f,3199.1198f,3887.7219f,4724.5438f,5741.4893f,6977.3298f,8479.1816f,10304.3030f};
float Util_cvToRate_1024(float cv);

static const float Util_cvToRate_c0[129] = {0.0007f,0.0007f,0.0007f,0.0007f,0.0007f,0.0007f,0.0007f,0.0007f,0.0008f,0.0008f,0.0008f,0.0008f,0.0008f,0.0008f,0.0008f,0.0008f,0.0009f,0.0009f,0.0009f,0.0010f,0.0010f,0.0011f,0.0011f,0.0012f,0.0013f,0.0014f,0.0015f,0.0016f,0.0017f,0.0019f,0.0020f,0.0022f,0.0024f,0.0027f,0.0029f,0.0032f,0.0035f,0.0039f,0.0043f,0.0047f,0.0052f,0.0057f,0.0063f,0.0070f,0.0077f,0.0085f,0.0093f,0.0102f,0.0113f,0.0124f,0.0136f,0.0150f,0.0164f,0.0180f,0.0198f,0.0217f,0.0237f,0.0260f,0.0284f,0.0311f,0.0339f,0.0371f,0.0404f,0.0441f,0.0481f,0.0524f,0.0571f,0.0621f,0.0676f,0.0735f,0.0799f,0.0867f,0.0942f,0.1022f,0.1109f,0.1202f,0.1303f,0.1411f,0.1528f,0.1654f,0.1790f,0.1936f,0.2093f,0.2262f,0.2443f,0.2639f,0.2849f,0.3074f,0.3317f,0.3577f,0.3856f,0.4156f,0.4478f,0.4823f,0.5194f,0.5591f,0.6017f,0.6473f,0.6963f,0.7487f,0.8048f,0.8650f,0.9294f,0.9983f,1.0722f,1.1512f,1.2357f,1.3261f,1.4229f,1.5263f,1.6369f,1.7552f,1.8816f,2.0167f,2.1611f,2.3154f,2.4802f,2.6562f,2.8442f,3.0450f,3.2593f,3.4881f,3.7323f,3.9930f,4.2711f,4.5678f,4.8844f,5.2221f,5.5822f};
static const float Util_cvToRate_c1[129] = {0.0051f,0.0051f,0.0051f,0.0051f,0.0050f,0.0049f,0.0048f,0.0047f,0.0046f,0.0044f,0.0042f,0.0040f,0.0037f,0.0034f,0.0031f,0.0027f,0.0023f,0.0018f,0.0012f,0.0007f,0.0000f,(-0.0007f),(-0.0015f),(-0.0023f),(-0.0033f),(-0.0043f),(-0.0055f),(-0.0067f),(-0.0080f),(-0.0095f),(-0.0111f),(-0.0128f),(-0.0146f),(-0.0166f),(-0.0188f),(-0.0212f),(-0.0237f),(-0.0265f),(-0.0294f),(-0.0326f),(-0.0360f),(-0.0397f),(-0.0437f),(-0.0480f),(-0.0526f),(-0.0575f),(-0.0628f),(-0.0684f),(-0.0745f),(-0.0810f),(-0.0880f),(-0.0955f),(-0.1035f),(-0.1121f),(-0.1212f),(-0.1310f),(-0.1415f),(-0.1527f),(-0.1647f),(-0.1775f),(-0.1911f),(-0.2057f),(-0.2212f),(-0.2378f),(-0.2555f),(-0.2743f),(-0.2944f),(-0.3159f),(-0.3387f),(-0.3630f),(-0.3889f),(-0.4165f),(-0.4459f),(-0.4772f),(-0.5105f),(-0.5459f),(-0.5836f),(-0.6237f),(-0.6663f),(-0.7117f),(-0.7599f),(-0.8111f),(-0.8656f),(-0.9235f),(-0.9850f),(-1.0504f),(-1.1198f),(-1.1936f),(-1.2719f),(-1.3551f),(-1.4434f),(-1.5371f),(-1.6366f),(-1.7422f),(-1.8543f),(-1.9732f),(-2.0994f),(-2.2333f),(-2.3753f),(-2.5259f),(-2.6856f),(-2.8550f),(-3.0346f),(-3.2250f),(-3.4269f),(-3.6409f),(-3.8677f),(-4.1081f),(-4.3629f),(-4.6328f),(-4.9189f),(-5.2220f),(-5.5430f),(-5.8831f),(-6.2434f),(-6.6250f),(-7.0291f),(-7.4570f),(-7.9102f),(-8.3900f),(-8.8981f),(-9.4359f),(-10.0053f),(-10.6080f),(-11.2460f),(-11.9212f),(-12.6358f),(-13.3921f),(-14.1924f)};
static const float Util_cvToRate_c2[129] = {0.0183f,0.0192f,0.0201f,0.0211f,0.0222f,0.0233f,0.0245f,0.0257f,0.0270f,0.0283f,0.0297f,0.0312f,0.0328f,0.0344f,0.0361f,0.0379f,0.0398f,0.0418f,0.0439f,0.0461f,0.0484f,0.0508f,0.0533f,0.0560f,0.0588f,0.0617f,0.0648f,0.0681f,0.0715f,0.0750f,0.0788f,0.0827f,0.0868f,0.0912f,0.0957f,0.1005f,0.1055f,0.1108f,0.1163f,0.1221f,0.1282f,0.1346f,0.1414f,0.1484f,0.1558f,0.1636f,0.1718f,0.1804f,0.1894f,0.1988f,0.2088f,0.2192f,0.2302f,0.2416f,0.2537f,0.2664f,0.2797f,0.2937f,0.3083f,0.3237f,0.3399f,0.3569f,0.3747f,0.3934f,0.4131f,0.4337f,0.4553f,0.4781f,0.5020f,0.5270f,0.5534f,0.5810f,0.6100f,0.6405f,0.6725f,0.7061f,0.7413f,0.7783f,0.8172f,0.8580f,0.9009f,0.9459f,0.9931f,1.0427f,1.0948f,1.1495f,1.2069f,1.2672f,1.3305f,1.3969f,1.4667f,1.5399f,1.6168f,1.6976f,1.7824f,1.8714f,1.9649f,2.0630f,2.1660f,2.2742f,2.3878f,2.5070f,2.6322f,2.7637f,2.9017f,3.0467f,3.1988f,3.3586f,3.5263f,3.7025f,3.8874f,4.0815f,4.2854f,4.4994f,4.7241f,4.9601f,5.2078f,5.4679f,5.7410f,6.0277f,6.3287f,6.6448f,6.9767f,7.3251f,7.6910f,8.0751f,8.4784f,8.9019f,9.3465f};
float Util_cvToRate(float cv);

float Util_pitchToCv(float pitch);

static const float Util_cvToperiod_c0[33] = {674.2460f,671.5538f,662.7618f,646.7595f,623.7994f,594.8718f,561.2983f,524.4769f,485.7314f,446.2294f,406.9474f,368.6638f,331.9687f,297.2842f,264.8877f,234.9369f,207.4931f,182.5430f,160.0169f,139.8048f,121.7696f,105.7571f,91.6051f,79.1491f,68.2272f,58.6839f,50.3717f,43.1534f,36.9020f,31.5020f,26.8485f,22.8472f,19.4138f};
static const float Util_cvToperiod_c1[33] = {(-4656.6563f),(-4481.9606f),(-4198.6861f),(-3855.7515f),(-3487.1395f),(-3115.8588f),(-2756.9303f),(-2419.6251f),(-2109.1348f),(-1827.8083f),(-1576.0630f),(-1353.0471f),(-1157.1189f),(-986.1863f),(-837.9447f),(-710.0391f),(-600.1712f),(-506.1666f),(-426.0135f),(-357.8822f),(-300.1302f),(-251.2989f),(-210.1041f),(-175.4235f),(-146.2821f),(-121.8379f),(-101.3665f),(-84.2477f),(-69.9521f),(-58.0293f),(-48.0972f),(-39.8328f),(-32.9632f)};
static const float Util_cvToperiod_c2[33] = {14548.8232f,11715.3695f,9433.7447f,7596.4773f,6117.0266f,4925.7061f,3966.4010f,3193.9253f,2571.8929f,2071.0043f,1667.6662f,1342.8802f,1081.3478f,870.7500f,701.1673f,564.6116f,454.6507f,366.1053f,294.8045f,237.3899f,191.1571f,153.9283f,123.9500f,99.8102f,80.3717f,64.7189f,52.1146f,41.9650f,33.7921f,27.2109f,21.9115f,17.6441f,14.2078f};
float Util_cvToperiod(float cv);

static const float Util_cvTokHz_c0[33] = {0.0327f,0.0329f,0.0340f,0.0369f,0.0432f,0.0556f,0.0777f,0.1151f,0.1756f,0.2707f,0.4165f,0.6356f,0.9592f,1.4308f,2.1100f,3.0780f,4.4457f,6.3629f,9.0319f,12.7247f,17.8056f,24.7617f,34.2420f,47.1090f,64.5069f,87.9496f,119.4362f,161.6023f,217.9151f,292.9296f,392.6192f,524.8066f,699.7215f};
static const float Util_cvTokHz_c1[33] = {0.2257f,0.2123f,0.1792f,0.1176f,0.0158f,(-0.1422f),(-0.3775f),(-0.7183f),(-1.2018f),(-1.8772f),(-2.8091f),(-4.0819f),(-5.8060f),(-8.1254f),(-11.2270f),(-15.3537f),(-20.8198f),(-28.0318f),(-37.5145f),(-49.9444f),(-66.1924f),(-87.3784f),(-114.9404f),(-150.7233f),(-197.0916f),(-257.0723f),(-334.5377f),(-434.4368f),(-563.0898f),(-728.5619f),(-941.1373f),(-1213.9213f),(-1563.6033f)};
static const float Util_cvTokHz_c2[33] = {0.8763f,1.0883f,1.3515f,1.6784f,2.0843f,2.5884f,3.2144f,3.9919f,4.9573f,6.1563f,7.6452f,9.4943f,11.7905f,14.6422f,18.1835f,22.5813f,28.0428f,34.8252f,43.2479f,53.7078f,66.6974f,82.8287f,102.8615f,127.7393f,158.6341f,197.0010f,244.6472f,303.8170f,377.2976f,468.5499f,581.8724f,722.6028f,897.3699f};
float Util_cvTokHz(float cv);

typedef struct Tricore__ctx_type_0 {
   uint8_t reset_state;
   float reset_phase;
   float rate;
   float phase;
   uint8_t direction;
   Util__ctx_type_0 _inst26;
   Util__ctx_type_0 _inst25;
   Util__ctx_type_1 _inst23;
} Tricore__ctx_type_0;

typedef Tricore__ctx_type_0 Tricore_process_type;

void Tricore__ctx_type_0_init(Tricore__ctx_type_0 &_output_);

void Tricore_process_init(Tricore__ctx_type_0 &_output_);

float Tricore_process(Tricore__ctx_type_0 &_ctx, float cv, float reset, float disable);

typedef Tricore__ctx_type_0 Tricore_noteOn_type;

void Tricore_noteOn_init(Tricore__ctx_type_0 &_output_);

void Tricore_noteOn(Tricore__ctx_type_0 &_ctx, int note, int velocity, int channel);

typedef Tricore__ctx_type_0 Tricore_noteOff_type;

void Tricore_noteOff_init(Tricore__ctx_type_0 &_output_);

void Tricore_noteOff(Tricore__ctx_type_0 &_ctx, int note, int channel);

typedef Tricore__ctx_type_0 Tricore_controlChange_type;

void Tricore_controlChange_init(Tricore__ctx_type_0 &_output_);

void Tricore_controlChange(Tricore__ctx_type_0 &_ctx, int control, int value, int channel);

typedef Tricore__ctx_type_0 Tricore_default_type;

void Tricore_default_init(Tricore__ctx_type_0 &_output_);

void Tricore_default(Tricore__ctx_type_0 &_ctx);

static const float Saturate_soft_table_c0[242] = {(-4.1979f),(-4.0802f),(-3.9628f),(-3.8458f),(-3.7293f),(-3.6134f),(-3.4980f),(-3.3832f),(-3.2692f),(-3.1558f),(-3.0433f),(-2.9317f),(-2.8210f),(-2.7112f),(-2.6025f),(-2.4949f),(-2.3884f),(-2.2832f),(-2.1792f),(-2.0766f),(-1.9754f),(-1.8756f),(-1.7773f),(-1.6806f),(-1.5855f),(-1.4921f),(-1.4005f),(-1.3106f),(-1.2226f),(-1.1365f),(-1.0523f),(-0.9702f),(-0.8901f),(-0.8120f),(-0.7361f),(-0.6624f),(-0.5909f),(-0.5217f),(-0.4547f),(-0.3901f),(-0.3278f),(-0.2678f),(-0.2103f),(-0.1552f),(-0.1025f),(-0.0523f),(-0.0045f),0.0408f,0.0836f,0.1240f,0.1619f,0.1974f,0.2305f,0.2611f,0.2894f,0.3152f,0.3388f,0.3600f,0.3790f,0.3958f,0.4104f,0.4228f,0.4332f,0.4416f,0.4481f,0.4526f,0.4554f,0.4564f,0.4557f,0.4535f,0.4498f,0.4446f,0.4381f,0.4304f,0.4215f,0.4115f,0.4006f,0.3888f,0.3762f,0.3629f,0.3490f,0.3346f,0.3198f,0.3047f,0.2893f,0.2737f,0.2581f,0.2425f,0.2270f,0.2117f,0.1966f,0.1818f,0.1673f,0.1533f,0.1398f,0.1267f,0.1143f,0.1024f,0.0912f,0.0806f,0.0707f,0.0616f,0.0531f,0.0453f,0.0382f,0.0319f,0.0262f,0.0212f,0.0168f,0.0131f,0.0099f,0.0073f,0.0051f,0.0034f,0.0022f,0.0013f,0.0006f,0.0003f,0.0001f,0.0000f,0.0000f,(-0.0000f),(-0.0001f),(-0.0003f),(-0.0006f),(-0.0013f),(-0.0022f),(-0.0034f),(-0.0051f),(-0.0073f),(-0.0099f),(-0.0131f),(-0.0168f),(-0.0212f),(-0.0262f),(-0.0319f),(-0.0382f),(-0.0453f),(-0.0531f),(-0.0616f),(-0.0707f),(-0.0806f),(-0.0912f),(-0.1024f),(-0.1143f),(-0.1267f),(-0.1398f),(-0.1533f),(-0.1673f),(-0.1818f),(-0.1966f),(-0.2117f),(-0.2270f),(-0.2425f),(-0.2581f),(-0.2737f),(-0.2893f),(-0.3047f),(-0.3198f),(-0.3346f),(-0.3490f),(-0.3629f),(-0.3762f),(-0.3888f),(-0.4006f),(-0.4115f),(-0.4215f),(-0.4304f),(-0.4381f),(-0.4446f),(-0.4498f),(-0.4535f),(-0.4557f),(-0.4564f),(-0.4554f),(-0.4526f),(-0.4481f),(-0.4416f),(-0.4332f),(-0.4228f),(-0.4104f),(-0.3958f),(-0.3790f),(-0.3600f),(-0.3388f),(-0.3152f),(-0.2894f),(-0.2611f),(-0.2305f),(-0.1974f),(-0.1619f),(-0.1240f),(-0.0836f),(-0.0408f),0.0045f,0.0523f,0.1025f,0.1552f,0.2103f,0.2678f,0.3278f,0.3901f,0.4547f,0.5217f,0.5909f,0.6624f,0.7361f,0.8120f,0.8901f,0.9702f,1.0523f,1.1365f,1.2226f,1.3106f,1.4005f,1.4921f,1.5855f,1.6806f,1.7773f,1.8756f,1.9754f,2.0766f,2.1792f,2.2832f,2.3884f,2.4949f,2.6025f,2.7112f,2.8210f,2.9317f,3.0433f,3.1558f,3.2692f,3.3832f,3.4980f,3.6134f,3.7293f,3.8458f,3.9628f,4.0802f,4.1979f,4.3160f};
static const float Saturate_soft_table_c1[242] = {0.6763f,0.6862f,0.6962f,0.7062f,0.7162f,0.7263f,0.7364f,0.7466f,0.7568f,0.7670f,0.7772f,0.7874f,0.7977f,0.8079f,0.8182f,0.8284f,0.8386f,0.8489f,0.8590f,0.8692f,0.8793f,0.8894f,0.8994f,0.9094f,0.9192f,0.9291f,0.9388f,0.9485f,0.9580f,0.9675f,0.9768f,0.9860f,0.9951f,1.0041f,1.0129f,1.0215f,1.0300f,1.0384f,1.0465f,1.0545f,1.0622f,1.0698f,1.0772f,1.0843f,1.0912f,1.0979f,1.1043f,1.1105f,1.1165f,1.1221f,1.1275f,1.1327f,1.1375f,1.1421f,1.1463f,1.1503f,1.1540f,1.1573f,1.1604f,1.1631f,1.1655f,1.1676f,1.1694f,1.1709f,1.1720f,1.1729f,1.1734f,1.1736f,1.1734f,1.1730f,1.1723f,1.1712f,1.1699f,1.1682f,1.1663f,1.1641f,1.1616f,1.1589f,1.1559f,1.1527f,1.1493f,1.1456f,1.1418f,1.1377f,1.1335f,1.1291f,1.1245f,1.1199f,1.1151f,1.1102f,1.1052f,1.1002f,1.0951f,1.0899f,1.0848f,1.0797f,1.0746f,1.0695f,1.0645f,1.0596f,1.0547f,1.0500f,1.0454f,1.0409f,1.0366f,1.0325f,1.0286f,1.0248f,1.0213f,1.0180f,1.0150f,1.0122f,1.0097f,1.0075f,1.0055f,1.0038f,1.0025f,1.0014f,1.0006f,1.0001f,1.0000f,1.0001f,1.0006f,1.0014f,1.0025f,1.0038f,1.0055f,1.0075f,1.0097f,1.0122f,1.0150f,1.0180f,1.0213f,1.0248f,1.0286f,1.0325f,1.0366f,1.0409f,1.0454f,1.0500f,1.0547f,1.0596f,1.0645f,1.0695f,1.0746f,1.0797f,1.0848f,1.0899f,1.0951f,1.1002f,1.1052f,1.1102f,1.1151f,1.1199f,1.1245f,1.1291f,1.1335f,1.1377f,1.1418f,1.1456f,1.1493f,1.1527f,1.1559f,1.1589f,1.1616f,1.1641f,1.1663f,1.1682f,1.1699f,1.1712f,1.1723f,1.1730f,1.1734f,1.1736f,1.1734f,1.1729f,1.1720f,1.1709f,1.1694f,1.1676f,1.1655f,1.1631f,1.1604f,1.1573f,1.1540f,1.1503f,1.1463f,1.1421f,1.1375f,1.1327f,1.1275f,1.1221f,1.1165f,1.1105f,1.1043f,1.0979f,1.0912f,1.0843f,1.0772f,1.0698f,1.0622f,1.0545f,1.0465f,1.0384f,1.0300f,1.0215f,1.0129f,1.0041f,0.9951f,0.9860f,0.9768f,0.9675f,0.9580f,0.9485f,0.9388f,0.9291f,0.9192f,0.9094f,0.8994f,0.8894f,0.8793f,0.8692f,0.8590f,0.8489f,0.8386f,0.8284f,0.8182f,0.8079f,0.7977f,0.7874f,0.7772f,0.7670f,0.7568f,0.7466f,0.7364f,0.7263f,0.7162f,0.7062f,0.6962f,0.6862f,0.6763f,0.6665f};
static const float Saturate_soft_table_c2[242] = {0.0103f,0.0105f,0.0107f,0.0110f,0.0112f,0.0114f,0.0116f,0.0118f,0.0121f,0.0123f,0.0125f,0.0128f,0.0130f,0.0132f,0.0135f,0.0137f,0.0140f,0.0142f,0.0145f,0.0147f,0.0150f,0.0152f,0.0155f,0.0157f,0.0160f,0.0163f,0.0165f,0.0168f,0.0170f,0.0173f,0.0175f,0.0178f,0.0181f,0.0183f,0.0186f,0.0188f,0.0191f,0.0193f,0.0196f,0.0198f,0.0201f,0.0203f,0.0205f,0.0208f,0.0210f,0.0212f,0.0214f,0.0217f,0.0219f,0.0221f,0.0223f,0.0224f,0.0226f,0.0228f,0.0229f,0.0231f,0.0232f,0.0234f,0.0235f,0.0236f,0.0237f,0.0238f,0.0239f,0.0239f,0.0240f,0.0240f,0.0240f,0.0241f,0.0240f,0.0240f,0.0240f,0.0239f,0.0239f,0.0238f,0.0237f,0.0236f,0.0234f,0.0233f,0.0231f,0.0229f,0.0227f,0.0224f,0.0222f,0.0219f,0.0216f,0.0213f,0.0210f,0.0206f,0.0203f,0.0199f,0.0195f,0.0190f,0.0186f,0.0181f,0.0176f,0.0171f,0.0166f,0.0161f,0.0155f,0.0149f,0.0143f,0.0137f,0.0131f,0.0125f,0.0118f,0.0111f,0.0105f,0.0098f,0.0091f,0.0083f,0.0076f,0.0069f,0.0061f,0.0054f,0.0046f,0.0039f,0.0031f,0.0023f,0.0016f,0.0008f,0.0000f,(-0.0008f),(-0.0016f),(-0.0023f),(-0.0031f),(-0.0039f),(-0.0046f),(-0.0054f),(-0.0061f),(-0.0069f),(-0.0076f),(-0.0083f),(-0.0091f),(-0.0098f),(-0.0105f),(-0.0111f),(-0.0118f),(-0.0125f),(-0.0131f),(-0.0137f),(-0.0143f),(-0.0149f),(-0.0155f),(-0.0161f),(-0.0166f),(-0.0171f),(-0.0176f),(-0.0181f),(-0.0186f),(-0.0190f),(-0.0195f),(-0.0199f),(-0.0203f),(-0.0206f),(-0.0210f),(-0.0213f),(-0.0216f),(-0.0219f),(-0.0222f),(-0.0224f),(-0.0227f),(-0.0229f),(-0.0231f),(-0.0233f),(-0.0234f),(-0.0236f),(-0.0237f),(-0.0238f),(-0.0239f),(-0.0239f),(-0.0240f),(-0.0240f),(-0.0240f),(-0.0241f),(-0.0240f),(-0.0240f),(-0.0240f),(-0.0239f),(-0.0239f),(-0.0238f),(-0.0237f),(-0.0236f),(-0.0235f),(-0.0234f),(-0.0232f),(-0.0231f),(-0.0229f),(-0.0228f),(-0.0226f),(-0.0224f),(-0.0223f),(-0.0221f),(-0.0219f),(-0.0217f),(-0.0214f),(-0.0212f),(-0.0210f),(-0.0208f),(-0.0205f),(-0.0203f),(-0.0201f),(-0.0198f),(-0.0196f),(-0.0193f),(-0.0191f),(-0.0188f),(-0.0186f),(-0.0183f),(-0.0181f),(-0.0178f),(-0.0175f),(-0.0173f),(-0.0170f),(-0.0168f),(-0.0165f),(-0.0163f),(-0.0160f),(-0.0157f),(-0.0155f),(-0.0152f),(-0.0150f),(-0.0147f),(-0.0145f),(-0.0142f),(-0.0140f),(-0.0137f),(-0.0135f),(-0.0132f),(-0.0130f),(-0.0128f),(-0.0125f),(-0.0123f),(-0.0121f),(-0.0118f),(-0.0116f),(-0.0114f),(-0.0112f),(-0.0110f),(-0.0107f),(-0.0105f),(-0.0103f),(-0.0101f)};
float Saturate_soft_table(float x);

float Saturate_soft_process(float x);

void Saturate_soft_noteOn(int note, int velocity, int channel);

void Saturate_soft_noteOff(int note, int channel);

void Saturate_soft_controlChange(int control, int value, int channel);

void Saturate_soft_default();

static const float Svf_calc_g_c0[129] = {0.0023f,0.0023f,0.0023f,0.0023f,0.0023f,0.0023f,0.0023f,0.0024f,0.0024f,0.0024f,0.0024f,0.0024f,0.0025f,0.0025f,0.0026f,0.0026f,0.0027f,0.0028f,0.0029f,0.0030f,0.0032f,0.0033f,0.0035f,0.0037f,0.0040f,0.0043f,0.0046f,0.0050f,0.0054f,0.0058f,0.0064f,0.0070f,0.0076f,0.0084f,0.0092f,0.0101f,0.0111f,0.0122f,0.0135f,0.0148f,0.0164f,0.0180f,0.0199f,0.0219f,0.0242f,0.0266f,0.0293f,0.0323f,0.0355f,0.0391f,0.0429f,0.0472f,0.0518f,0.0569f,0.0624f,0.0684f,0.0750f,0.0821f,0.0899f,0.0983f,0.1075f,0.1175f,0.1284f,0.1402f,0.1530f,0.1669f,0.1820f,0.1984f,0.2162f,0.2355f,0.2564f,0.2792f,0.3038f,0.3306f,0.3596f,0.3911f,0.4254f,0.4626f,0.5030f,0.5469f,0.5947f,0.6468f,0.7035f,0.7653f,0.8328f,0.9065f,0.9872f,1.0756f,1.1726f,1.2792f,1.3966f,1.5261f,1.6692f,1.8278f,2.0039f,2.2001f,2.4192f,2.6647f,2.9406f,3.2518f,3.6042f,4.0048f,4.4620f,4.9863f,5.5904f,6.2899f,7.1044f,8.0582f,9.1821f,10.5152f,12.1075f,14.0241f,16.3500f,19.1982f,22.7199f,27.1215f,32.6882f,39.8219f,49.0992f,61.3671f,77.9007f,100.6758f,132.8585f,179.7241f,250.4813f,362.1346f,548.3403f,881.8452f,1539.1806f};
static const float Svf_calc_g_c1[129] = {0.0161f,0.0161f,0.0160f,0.0159f,0.0157f,0.0155f,0.0151f,0.0148f,0.0143f,0.0138f,0.0132f,0.0124f,0.0116f,0.0107f,0.0096f,0.0084f,0.0071f,0.0056f,0.0039f,0.0021f,0.0000f,(-0.0022f),(-0.0047f),(-0.0074f),(-0.0103f),(-0.0136f),(-0.0171f),(-0.0210f),(-0.0252f),(-0.0298f),(-0.0348f),(-0.0402f),(-0.0460f),(-0.0523f),(-0.0592f),(-0.0666f),(-0.0746f),(-0.0832f),(-0.0925f),(-0.1026f),(-0.1134f),(-0.1250f),(-0.1375f),(-0.1510f),(-0.1654f),(-0.1810f),(-0.1976f),(-0.2155f),(-0.2348f),(-0.2554f),(-0.2774f),(-0.3011f),(-0.3264f),(-0.3536f),(-0.3827f),(-0.4138f),(-0.4471f),(-0.4827f),(-0.5208f),(-0.5616f),(-0.6051f),(-0.6518f),(-0.7016f),(-0.7549f),(-0.8118f),(-0.8727f),(-0.9378f),(-1.0074f),(-1.0818f),(-1.1614f),(-1.2465f),(-1.3375f),(-1.4349f),(-1.5392f),(-1.6508f),(-1.7703f),(-1.8984f),(-2.0358f),(-2.1832f),(-2.3414f),(-2.5113f),(-2.6941f),(-2.8907f),(-3.1026f),(-3.3311f),(-3.5779f),(-3.8448f),(-4.1338f),(-4.4473f),(-4.7880f),(-5.1589f),(-5.5636f),(-6.0061f),(-6.4911f),(-7.0241f),(-7.6115f),(-8.2606f),(-8.9804f),(-9.7813f),(-10.6754f),(-11.6777f),(-12.8057f),(-14.0806f),(-15.5284f),(-17.1805f),(-19.0754f),(-21.2608f),(-23.7963f),(-26.7561f),(-30.2344f),(-34.3516f),(-39.2625f),(-45.1691f),(-52.3377f),(-61.1239f),(-72.0097f),(-85.6583f),(-102.9990f),(-125.3594f),(-154.6792f),(-193.8640f),(-247.3946f),(-322.4157f),(-430.7744f),(-593.0511f),(-847.0657f),(-1267.3153f),(-2014.0522f),(-3474.2930f)};
static const float Svf_calc_g_c2[129] = {0.0574f,0.0602f,0.0632f,0.0664f,0.0697f,0.0732f,0.0768f,0.0807f,0.0847f,0.0889f,0.0934f,0.0980f,0.1029f,0.1081f,0.1135f,0.1191f,0.1251f,0.1313f,0.1379f,0.1448f,0.1520f,0.1596f,0.1676f,0.1760f,0.1848f,0.1940f,0.2037f,0.2139f,0.2245f,0.2358f,0.2475f,0.2599f,0.2729f,0.2865f,0.3009f,0.3159f,0.3317f,0.3483f,0.3657f,0.3840f,0.4032f,0.4234f,0.4446f,0.4668f,0.4902f,0.5148f,0.5405f,0.5676f,0.5961f,0.6260f,0.6574f,0.6904f,0.7250f,0.7614f,0.7997f,0.8399f,0.8822f,0.9267f,0.9734f,1.0225f,1.0742f,1.1285f,1.1856f,1.2458f,1.3091f,1.3757f,1.4458f,1.5197f,1.5975f,1.6795f,1.7659f,1.8571f,1.9533f,2.0548f,2.1621f,2.2754f,2.3953f,2.5222f,2.6565f,2.7989f,2.9500f,3.1104f,3.2809f,3.4624f,3.6559f,3.8624f,4.0830f,4.3192f,4.5726f,4.8447f,5.1378f,5.4540f,5.7960f,6.1669f,6.5700f,7.0097f,7.4905f,8.0182f,8.5993f,9.2415f,9.9542f,10.7483f,11.6371f,12.6366f,13.7661f,15.0493f,16.5153f,18.2002f,20.1489f,22.4179f,25.0793f,28.2251f,31.9750f,36.4857f,41.9658f,48.6963f,57.0623f,67.6004f,81.0738f,98.5920f,121.8091f,153.2636f,196.9841f,259.6186f,352.6611f,497.1339f,734.2504f,1152.2471f,1963.2117f};
float Svf_calc_g(float cv);

typedef struct Svf__ctx_type_1 {
   float z2;
   float z1;
   float inv_den;
   float g;
   Util__ctx_type_1 _inst54;
   Util__ctx_type_1 _inst53;
   float R;
} Svf__ctx_type_1;

typedef Svf__ctx_type_1 Svf_process_type;

void Svf__ctx_type_1_init(Svf__ctx_type_1 &_output_);

void Svf_process_init(Svf__ctx_type_1 &_output_);

float Svf_process(Svf__ctx_type_1 &_ctx, float x, float cv, float q, int sel);

typedef Svf__ctx_type_1 Svf_noteOn_type;

void Svf_noteOn_init(Svf__ctx_type_1 &_output_);

void Svf_noteOn(Svf__ctx_type_1 &_ctx, int note, int velocity, int channel);

typedef Svf__ctx_type_1 Svf_noteOff_type;

void Svf_noteOff_init(Svf__ctx_type_1 &_output_);

void Svf_noteOff(Svf__ctx_type_1 &_ctx, int note, int channel);

typedef Svf__ctx_type_1 Svf_controlChange_type;

void Svf_controlChange_init(Svf__ctx_type_1 &_output_);

void Svf_controlChange(Svf__ctx_type_1 &_ctx, int control, int value, int channel);

typedef Svf__ctx_type_1 Svf_default_type;

void Svf_default_init(Svf__ctx_type_1 &_output_);

void Svf_default(Svf__ctx_type_1 &_ctx);

static const float Saturate_table_c0[242] = {(-1.0000f),(-1.0000f),(-1.0000f),(-1.0000f),(-1.0000f),(-1.0000f),(-1.0000f),(-1.0000f),(-1.0000f),(-1.0000f),(-1.0000f),(-1.0000f),(-1.0000f),(-1.0000f),(-1.0000f),(-1.0000f),(-1.0000f),(-1.0000f),(-1.0000f),(-1.0000f),(-1.0000f),(-1.0000f),(-1.0000f),(-1.0000f),(-1.0000f),(-1.0000f),(-1.0000f),(-1.0000f),(-1.0000f),(-1.0000f),(-1.0000f),(-1.0000f),(-1.0000f),(-1.0000f),(-1.0000f),(-1.0000f),(-1.0000f),(-1.0000f),(-1.0000f),(-1.0000f),(-1.0000f),(-1.0000f),(-1.0000f),(-1.0000f),(-1.0000f),(-1.0000f),(-1.0000f),(-1.0000f),(-1.0000f),(-1.0000f),(-1.0000f),(-1.0000f),(-1.0000f),(-1.0000f),(-1.0000f),(-1.0000f),(-1.0000f),(-1.0000f),(-1.0000f),(-1.0000f),(-1.0000f),(-1.0000f),(-1.0000f),(-1.0000f),(-1.0000f),(-1.0000f),(-1.0000f),(-1.0000f),(-1.0000f),(-1.0000f),(-1.0000f),(-1.0000f),(-1.0000f),(-1.0000f),(-1.0000f),(-1.0000f),(-1.0000f),(-1.0000f),(-1.0000f),(-1.0000f),(-1.0000f),(-1.0000f),(-0.9999f),(-0.9999f),(-0.9999f),(-0.9998f),(-0.9997f),(-0.9996f),(-0.9994f),(-0.9992f),(-0.9989f),(-0.9985f),(-0.9979f),(-0.9970f),(-0.9959f),(-0.9942f),(-0.9920f),(-0.9890f),(-0.9849f),(-0.9793f),(-0.9717f),(-0.9615f),(-0.9478f),(-0.9297f),(-0.9057f),(-0.8744f),(-0.8340f),(-0.7824f),(-0.7179f),(-0.6387f),(-0.5445f),(-0.4367f),(-0.3198f),(-0.2026f),(-0.0977f),(-0.0198f),0.0211f,0.0267f,0.0133f,0.0018f,0.0000f,(-0.0018f),(-0.0133f),(-0.0267f),(-0.0211f),0.0198f,0.0977f,0.2026f,0.3198f,0.4367f,0.5445f,0.6387f,0.7179f,0.7824f,0.8340f,0.8744f,0.9057f,0.9297f,0.9478f,0.9615f,0.9717f,0.9793f,0.9849f,0.9890f,0.9920f,0.9942f,0.9959f,0.9970f,0.9979f,0.9985f,0.9989f,0.9992f,0.9994f,0.9996f,0.9997f,0.9998f,0.9999f,0.9999f,0.9999f,1.0000f,1.0000f,1.0000f,1.0000f,1.0000f,1.0000f,1.0000f,1.0000f,1.0000f,1.0000f,1.0000f,1.0000f,1.0000f,1.0000f,1.0000f,1.0000f,1.0000f,1.0000f,1.0000f,1.0000f,1.0000f,1.0000f,1.0000f,1.0000f,1.0000f,1.0000f,1.0000f,1.0000f,1.0000f,1.0000f,1.0000f,1.0000f,1.0000f,1.0000f,1.0000f,1.0000f,1.0000f,1.0000f,1.0000f,1.0000f,1.0000f,1.0000f,1.0000f,1.0000f,1.0000f,1.0000f,1.0000f,1.0000f,1.0000f,1.0000f,1.0000f,1.0000f,1.0000f,1.0000f,1.0000f,1.0000f,1.0000f,1.0000f,1.0000f,1.0000f,1.0000f,1.0000f,1.0000f,1.0000f,1.0000f,1.0000f,1.0000f,1.0000f,1.0000f,1.0000f,1.0000f,1.0000f,1.0000f,1.0000f,1.0000f,1.0000f,1.0000f,1.0000f,1.0000f,1.0000f,1.0000f,1.0000f,1.0000f};
static const float Saturate_table_c1[242] = {(-0.0000f),(-0.0000f),0.0000f,0.0000f,(-0.0000f),(-0.0000f),(-0.0000f),0.0000f,(-0.0000f),(-0.0000f),(-0.0000f),0.0000f,0.0000f,(-0.0000f),(-0.0000f),0.0000f,0.0000f,0.0000f,(-0.0000f),0.0000f,0.0000f,(-0.0000f),(-0.0000f),0.0000f,0.0000f,(-0.0000f),0.0000f,0.0000f,0.0000f,(-0.0000f),(-0.0000f),0.0000f,0.0000f,(-0.0000f),0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0001f,0.0001f,0.0001f,0.0002f,0.0002f,0.0003f,0.0005f,0.0007f,0.0010f,0.0014f,0.0021f,0.0030f,0.0043f,0.0061f,0.0087f,0.0125f,0.0177f,0.0252f,0.0356f,0.0502f,0.0705f,0.0985f,0.1370f,0.1889f,0.2582f,0.3484f,0.4626f,0.6010f,0.7583f,0.9205f,1.0627f,1.1532f,1.1678f,1.1121f,1.0334f,0.9967f,1.0334f,1.1121f,1.1678f,1.1532f,1.0627f,0.9205f,0.7583f,0.6010f,0.4626f,0.3484f,0.2582f,0.1889f,0.1370f,0.0985f,0.0705f,0.0502f,0.0356f,0.0252f,0.0177f,0.0125f,0.0087f,0.0061f,0.0043f,0.0030f,0.0021f,0.0014f,0.0010f,0.0007f,0.0005f,0.0003f,0.0002f,0.0002f,0.0001f,0.0001f,0.0001f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,(-0.0000f),0.0000f,0.0000f,(-0.0000f),0.0000f,0.0000f,(-0.0000f),0.0000f,0.0000f,(-0.0000f),(-0.0000f),0.0000f,0.0000f,0.0000f,0.0000f,(-0.0000f),(-0.0000f),(-0.0000f),0.0000f,(-0.0000f),0.0000f,(-0.0000f),(-0.0000f),0.0000f,0.0000f,(-0.0000f),0.0000f,(-0.0000f),0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,(-0.0000f),0.0000f,(-0.0000f)};
static const float Saturate_table_c2[242] = {0.0000f,0.0000f,(-0.0000f),0.0000f,0.0000f,0.0000f,0.0000f,(-0.0000f),0.0000f,0.0000f,0.0000f,0.0000f,(-0.0000f),0.0000f,0.0000f,0.0000f,0.0000f,(-0.0000f),0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,(-0.0000f),0.0000f,0.0000f,(-0.0000f),0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,(-0.0000f),0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0001f,0.0001f,0.0001f,0.0002f,0.0003f,0.0004f,0.0006f,0.0009f,0.0014f,0.0021f,0.0031f,0.0046f,0.0068f,0.0101f,0.0150f,0.0221f,0.0326f,0.0477f,0.0693f,0.0996f,0.1405f,0.1933f,0.2560f,0.3209f,0.3710f,0.3805f,0.3226f,0.1878f,0.0000f,(-0.1878f),(-0.3226f),(-0.3805f),(-0.3710f),(-0.3209f),(-0.2560f),(-0.1933f),(-0.1405f),(-0.0996f),(-0.0693f),(-0.0477f),(-0.0326f),(-0.0221f),(-0.0150f),(-0.0101f),(-0.0068f),(-0.0046f),(-0.0031f),(-0.0021f),(-0.0014f),(-0.0009f),(-0.0006f),(-0.0004f),(-0.0003f),(-0.0002f),(-0.0001f),(-0.0001f),(-0.0001f),(-0.0000f),(-0.0000f),(-0.0000f),(-0.0000f),(-0.0000f),(-0.0000f),(-0.0000f),(-0.0000f),(-0.0000f),(-0.0000f),(-0.0000f),(-0.0000f),(-0.0000f),(-0.0000f),(-0.0000f),(-0.0000f),(-0.0000f),(-0.0000f),(-0.0000f),(-0.0000f),(-0.0000f),(-0.0000f),(-0.0000f),(-0.0000f),(-0.0000f),(-0.0000f),(-0.0000f),(-0.0000f),(-0.0000f),(-0.0000f),(-0.0000f),(-0.0000f),(-0.0000f),(-0.0000f),(-0.0000f),(-0.0000f),(-0.0000f),(-0.0000f),(-0.0000f),(-0.0000f),(-0.0000f),(-0.0000f),(-0.0000f),(-0.0000f),(-0.0000f),(-0.0000f),(-0.0000f),(-0.0000f),(-0.0000f),(-0.0000f),(-0.0000f),(-0.0000f),(-0.0000f),(-0.0000f),(-0.0000f),(-0.0000f),(-0.0000f),(-0.0000f),(-0.0000f),(-0.0000f),(-0.0000f),(-0.0000f),(-0.0000f),(-0.0000f),(-0.0000f),0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f};
float Saturate_table(float x);

float Saturate_process(float x);

void Saturate_noteOn(int note, int velocity, int channel);

void Saturate_noteOff(int note, int channel);

void Saturate_controlChange(int control, int value, int channel);

void Saturate_default();

typedef struct Lfo__ctx_type_0 {
   float x4;
   float x3;
   float x2;
} Lfo__ctx_type_0;

typedef Lfo__ctx_type_0 Lfo_soft_type;

void Lfo__ctx_type_0_init(Lfo__ctx_type_0 &_output_);

void Lfo_soft_init(Lfo__ctx_type_0 &_output_);

float Lfo_soft(Lfo__ctx_type_0 &_ctx, float x1);

typedef struct Lfo__ctx_type_1 {
   float rate;
   float phase;
   Lfo__ctx_type_0 _inst76;
   Util__ctx_type_0 _inst74;
   Util__ctx_type_1 _inst72;
} Lfo__ctx_type_1;

typedef Lfo__ctx_type_1 Lfo_process_type;

void Lfo__ctx_type_1_init(Lfo__ctx_type_1 &_output_);

void Lfo_process_init(Lfo__ctx_type_1 &_output_);

float Lfo_process(Lfo__ctx_type_1 &_ctx, float cv, float shape, float reset);

typedef Lfo__ctx_type_1 Lfo_noteOn_type;

void Lfo_noteOn_init(Lfo__ctx_type_1 &_output_);

void Lfo_noteOn(Lfo__ctx_type_1 &_ctx, int note, int velocity, int channel);

typedef Lfo__ctx_type_1 Lfo_noteOff_type;

void Lfo_noteOff_init(Lfo__ctx_type_1 &_output_);

void Lfo_noteOff(Lfo__ctx_type_1 &_ctx, int note, int channel);

typedef Lfo__ctx_type_1 Lfo_controlChange_type;

void Lfo_controlChange_init(Lfo__ctx_type_1 &_output_);

void Lfo_controlChange(Lfo__ctx_type_1 &_ctx, int control, int value, int channel);

typedef Lfo__ctx_type_1 Lfo_default_type;

void Lfo_default_init(Lfo__ctx_type_1 &_output_);

void Lfo_default(Lfo__ctx_type_1 &_ctx);

static const float Tables_nsine_c0[129] = {0.0000f,(-0.0001f),(-0.0003f),(-0.0008f),(-0.0017f),(-0.0032f),(-0.0052f),(-0.0079f),(-0.0114f),(-0.0158f),(-0.0210f),(-0.0271f),(-0.0342f),(-0.0422f),(-0.0512f),(-0.0610f),(-0.0717f),(-0.0832f),(-0.0953f),(-0.1081f),(-0.1212f),(-0.1346f),(-0.1481f),(-0.1614f),(-0.1745f),(-0.1869f),(-0.1985f),(-0.2090f),(-0.2180f),(-0.2253f),(-0.2305f),(-0.2333f),(-0.2333f),(-0.2301f),(-0.2234f),(-0.2127f),(-0.1978f),(-0.1781f),(-0.1533f),(-0.1230f),(-0.0868f),(-0.0442f),0.0049f,0.0612f,0.1248f,0.1961f,0.2755f,0.3632f,0.4596f,0.5648f,0.6791f,0.8026f,0.9356f,1.0780f,1.2301f,1.3918f,1.5632f,1.7440f,1.9344f,2.1341f,2.3429f,2.5605f,2.7867f,3.0211f,3.2633f,3.5128f,3.7692f,4.0317f,4.2999f,4.5730f,4.8502f,5.1309f,5.4141f,5.6989f,5.9845f,6.2698f,6.5537f,6.8353f,7.1134f,7.3868f,7.6544f,7.9149f,8.1671f,8.4097f,8.6415f,8.8611f,9.0672f,9.2586f,9.4338f,9.5915f,9.7305f,9.8495f,9.9471f,10.0221f,10.0733f,10.0994f,10.0994f,10.0721f,10.0164f,9.9313f,9.8159f,9.6693f,9.4907f,9.2793f,9.0345f,8.7557f,8.4425f,8.0944f,7.7112f,7.2927f,6.8388f,6.3495f,5.8250f,5.2655f,4.6714f,4.0433f,3.3817f,2.6874f,1.9613f,1.2043f,0.4176f,(-0.3976f),(-1.2398f),(-2.1076f),(-2.9993f),(-3.9132f),(-4.8475f),(-5.8000f),(-6.7688f)};
static const float Tables_nsine_c1[129] = {6.2844f,6.2996f,6.3297f,6.3746f,6.4340f,6.5074f,6.5943f,6.6940f,6.8059f,6.9290f,7.0625f,7.2053f,7.3563f,7.5144f,7.6782f,7.8464f,8.0176f,8.1904f,8.3632f,8.5345f,8.7027f,8.8660f,9.0230f,9.1718f,9.3108f,9.4382f,9.5524f,9.6517f,9.7343f,9.7987f,9.8432f,9.8662f,9.8661f,9.8416f,9.7911f,9.7133f,9.6069f,9.4708f,9.3038f,9.1048f,8.8731f,8.6077f,8.3079f,7.9733f,7.6032f,7.1974f,6.7556f,6.2778f,5.7639f,5.2143f,4.6292f,4.0091f,3.3546f,2.6664f,1.9455f,1.1928f,0.4096f,(-0.4028f),(-1.2430f),(-2.1093f),(-3.0001f),(-3.9135f),(-4.8475f),(-5.8000f),(-6.7688f),(-7.7516f),(-8.7459f),(-9.7491f),(-10.7586f),(-11.7718f),(-12.7858f),(-13.7977f),(-14.8046f),(-15.8036f),(-16.7915f),(-17.7652f),(-18.7218f),(-19.6579f),(-20.5706f),(-21.4567f),(-22.3129f),(-23.1363f),(-23.9238f),(-24.6722f),(-25.3786f),(-26.0400f),(-26.6536f),(-27.2167f),(-27.7264f),(-28.1802f),(-28.5757f),(-28.9103f),(-29.1820f),(-29.3885f),(-29.5279f),(-29.5984f),(-29.5984f),(-29.5263f),(-29.3808f),(-29.1609f),(-28.8655f),(-28.4940f),(-28.0458f),(-27.5204f),(-26.9179f),(-26.2383f),(-25.4819f),(-24.6492f),(-23.7408f),(-22.7579f),(-21.7015f),(-20.5731f),(-19.3742f),(-18.1068f),(-16.7728f),(-15.3745f),(-13.9145f),(-12.3953f),(-10.8200f),(-9.1916f),(-7.5133f),(-5.7887f),(-4.0215f),(-2.2154f),(-0.3744f),1.4974f,3.3955f,5.3156f,7.2532f};
static const float Tables_nsine_c2[129] = {(-0.4844f),(-1.4520f),(-2.4162f),(-3.3745f),(-4.3247f),(-5.2644f),(-6.1915f),(-7.1037f),(-7.9987f),(-8.8745f),(-9.7289f),(-10.5599f),(-11.3654f),(-12.1436f),(-12.8925f),(-13.6103f),(-14.2953f),(-14.9460f),(-15.5606f),(-16.1377f),(-16.6759f),(-17.1740f),(-17.6307f),(-18.0449f),(-18.4156f),(-18.7420f),(-19.0232f),(-19.2586f),(-19.4476f),(-19.5898f),(-19.6847f),(-19.7323f),(-19.7323f),(-19.6847f),(-19.5898f),(-19.4476f),(-19.2586f),(-19.0232f),(-18.7420f),(-18.4156f),(-18.0449f),(-17.6307f),(-17.1740f),(-16.6759f),(-16.1377f),(-15.5606f),(-14.9460f),(-14.2953f),(-13.6103f),(-12.8925f),(-12.1436f),(-11.3654f),(-10.5599f),(-9.7289f),(-8.8745f),(-7.9987f),(-7.1037f),(-6.1915f),(-5.2644f),(-4.3247f),(-3.3745f),(-2.4162f),(-1.4520f),(-0.4844f),0.4844f,1.4520f,2.4162f,3.3745f,4.3247f,5.2644f,6.1915f,7.1037f,7.9987f,8.8745f,9.7289f,10.5599f,11.3654f,12.1436f,12.8925f,13.6103f,14.2953f,14.9460f,15.5606f,16.1377f,16.6759f,17.1740f,17.6307f,18.0449f,18.4156f,18.7420f,19.0232f,19.2586f,19.4476f,19.5898f,19.6847f,19.7323f,19.7323f,19.6847f,19.5898f,19.4476f,19.2586f,19.0232f,18.7420f,18.4156f,18.0449f,17.6307f,17.1740f,16.6759f,16.1377f,15.5606f,14.9460f,14.2953f,13.6103f,12.8925f,12.1436f,11.3654f,10.5599f,9.7289f,8.8745f,7.9987f,7.1037f,6.1915f,5.2644f,4.3247f,3.3745f,2.4162f,1.4520f,0.4844f,(-0.4844f)};
float Tables_nsine(float x);

typedef struct Phase__ctx_type_0 {
   float rate;
   float phase;
   Util__ctx_type_0 _inst92;
   Util__ctx_type_1 _inst90;
} Phase__ctx_type_0;

typedef Phase__ctx_type_0 Phase_process_type;

void Phase__ctx_type_0_init(Phase__ctx_type_0 &_output_);

void Phase_process_init(Phase__ctx_type_0 &_output_);

float Phase_process(Phase__ctx_type_0 &_ctx, float cv, float reset);

typedef Phase__ctx_type_0 Phase_noteOn_type;

void Phase_noteOn_init(Phase__ctx_type_0 &_output_);

void Phase_noteOn(Phase__ctx_type_0 &_ctx, int note, int velocity, int channel);

typedef Phase__ctx_type_0 Phase_noteOff_type;

void Phase_noteOff_init(Phase__ctx_type_0 &_output_);

void Phase_noteOff(Phase__ctx_type_0 &_ctx, int note, int channel);

typedef Phase__ctx_type_0 Phase_controlChange_type;

void Phase_controlChange_init(Phase__ctx_type_0 &_output_);

void Phase_controlChange(Phase__ctx_type_0 &_ctx, int control, int value, int channel);

typedef Phase__ctx_type_0 Phase_default_type;

void Phase_default_init(Phase__ctx_type_0 &_output_);

void Phase_default(Phase__ctx_type_0 &_ctx);

typedef struct Blit__ctx_type_0 {
   float scale;
   int m;
   Util__ctx_type_1 _inst101;
} Blit__ctx_type_0;

typedef Blit__ctx_type_0 Blit_pulse_train_type;

void Blit__ctx_type_0_init(Blit__ctx_type_0 &_output_);

void Blit_pulse_train_init(Blit__ctx_type_0 &_output_);

float Blit_pulse_train(Blit__ctx_type_0 &_ctx, float cv, float phase);

typedef Blit__ctx_type_0 Blit_pulse_start_type;

void Blit_pulse_start_init(Blit__ctx_type_0 &_output_);

void Blit_pulse_start(Blit__ctx_type_0 &_ctx);

typedef struct Blit__ctx_type_1 {
   float state_saw;
   float state_pulse;
   float rate;
   float output;
   Util__ctx_type_3 _inst117;
   Blit__ctx_type_0 _inst114;
   Blit__ctx_type_0 _inst113;
   Phase__ctx_type_0 _inst111;
   Util__ctx_type_1 _inst109;
} Blit__ctx_type_1;

typedef Blit__ctx_type_1 Blit_osc_blit_type;

void Blit__ctx_type_1_init(Blit__ctx_type_1 &_output_);

void Blit_osc_blit_init(Blit__ctx_type_1 &_output_);

float Blit_osc_blit(Blit__ctx_type_1 &_ctx, float cv, float pw, float wave);

typedef Blit__ctx_type_1 Blit_init_type;

void Blit_init_init(Blit__ctx_type_1 &_output_);

void Blit_init(Blit__ctx_type_1 &_ctx);

typedef struct Blit__ctx_type_2 {
   Blit__ctx_type_1 _inst120;
} Blit__ctx_type_2;

typedef Blit__ctx_type_2 Blit_process_type;

void Blit__ctx_type_2_init(Blit__ctx_type_2 &_output_);

void Blit_process_init(Blit__ctx_type_2 &_output_);

float Blit_process(Blit__ctx_type_2 &_ctx, float cv, float pw, float wave);

typedef Blit__ctx_type_2 Blit_noteOn_type;

void Blit_noteOn_init(Blit__ctx_type_2 &_output_);

void Blit_noteOn(Blit__ctx_type_2 &_ctx, int note, int velocity, int channel);

typedef Blit__ctx_type_2 Blit_noteOff_type;

void Blit_noteOff_init(Blit__ctx_type_2 &_output_);

void Blit_noteOff(Blit__ctx_type_2 &_ctx, int note, int channel);

typedef Blit__ctx_type_2 Blit_controlChange_type;

void Blit_controlChange_init(Blit__ctx_type_2 &_output_);

void Blit_controlChange(Blit__ctx_type_2 &_ctx, int control, int value, int channel);

typedef Blit__ctx_type_2 Blit_default_type;

void Blit_default_init(Blit__ctx_type_2 &_output_);

void Blit_default(Blit__ctx_type_2 &_ctx);

typedef struct Adsr__ctx_type_0 {
   float target;
   int state;
   float scale;
   float rate;
   float out;
   Util__ctx_type_4 _inst140;
   Util__ctx_type_0 _inst133;
} Adsr__ctx_type_0;

typedef Adsr__ctx_type_0 Adsr_do_type;

void Adsr__ctx_type_0_init(Adsr__ctx_type_0 &_output_);

void Adsr_do_init(Adsr__ctx_type_0 &_output_);

float Adsr_do(Adsr__ctx_type_0 &_ctx, float gate, float a, float d, float s, float r);

typedef struct Adsr__ctx_type_1 {
   float knob4;
   float knob3;
   float knob2;
   float knob1;
   Adsr__ctx_type_0 _inst142;
} Adsr__ctx_type_1;

typedef Adsr__ctx_type_1 Adsr_process_type;

void Adsr__ctx_type_1_init(Adsr__ctx_type_1 &_output_);

void Adsr_process_init(Adsr__ctx_type_1 &_output_);

float Adsr_process(Adsr__ctx_type_1 &_ctx, float gate);

typedef Adsr__ctx_type_1 Adsr_noteOn_type;

void Adsr_noteOn_init(Adsr__ctx_type_1 &_output_);

void Adsr_noteOn(Adsr__ctx_type_1 &_ctx, int note, int velocity, int channel);

typedef Adsr__ctx_type_1 Adsr_noteOff_type;

void Adsr_noteOff_init(Adsr__ctx_type_1 &_output_);

void Adsr_noteOff(Adsr__ctx_type_1 &_ctx, int note, int channel);

typedef Adsr__ctx_type_1 Adsr_controlChange_type;

void Adsr_controlChange_init(Adsr__ctx_type_1 &_output_);

void Adsr_controlChange(Adsr__ctx_type_1 &_ctx, int control, int value, int channel);

typedef Adsr__ctx_type_1 Adsr_default_type;

void Adsr_default_init(Adsr__ctx_type_1 &_output_);

void Adsr_default(Adsr__ctx_type_1 &_ctx);

typedef struct Voice_4__ctx_type_0 {
   float sustain;
   float release;
   float pw4;
   float pw3;
   float pw2;
   float pw1;
   float lfo_shape;
   float lfo_reset;
   float lfo_rate;
   float lfo_pw;
   float lfo_flt;
   float lfo_cv;
   float level4;
   float level3;
   float level2;
   float level1;
   int flt_shape;
   float flt_res;
   float flt_cut;
   float decay;
   float attack;
   Adsr__ctx_type_0 _inst169;
   Svf__ctx_type_1 _inst168;
   Tricore__ctx_type_0 _inst167;
   Blit__ctx_type_2 _inst166;
   Blit__ctx_type_2 _inst165;
   Blit__ctx_type_2 _inst164;
   Lfo__ctx_type_1 _inst163;
} Voice_4__ctx_type_0;

typedef Voice_4__ctx_type_0 Voice_4_process_type;

void Voice_4__ctx_type_0_init(Voice_4__ctx_type_0 &_output_);

void Voice_4_process_init(Voice_4__ctx_type_0 &_output_);

float Voice_4_process(Voice_4__ctx_type_0 &_ctx, float cv, float vel, float gate);

typedef Voice_4__ctx_type_0 Voice_4_noteOn_type;

void Voice_4_noteOn_init(Voice_4__ctx_type_0 &_output_);

void Voice_4_noteOn(Voice_4__ctx_type_0 &_ctx, int note, int velocity, int channel);

typedef Voice_4__ctx_type_0 Voice_4_noteOff_type;

void Voice_4_noteOff_init(Voice_4__ctx_type_0 &_output_);

void Voice_4_noteOff(Voice_4__ctx_type_0 &_ctx, int note, int channel);

typedef Voice_4__ctx_type_0 Voice_4_controlChange_type;

void Voice_4_controlChange_init(Voice_4__ctx_type_0 &_output_);

void Voice_4_controlChange(Voice_4__ctx_type_0 &_ctx, int control, int value, int channel);

typedef Voice_4__ctx_type_0 Voice_4_default_type;

void Voice_4_default_init(Voice_4__ctx_type_0 &_output_);

void Voice_4_default(Voice_4__ctx_type_0 &_ctx);



#endif // VOICE_4_H
