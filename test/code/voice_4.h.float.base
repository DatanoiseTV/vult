
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#ifndef VOICE_4_H
#define VOICE_4_H
#include <stdint.h>
#include <math.h>
#include "vultin.h"

typedef struct Util__ctx_type_0 {
   uint8_t pre;
} Util__ctx_type_0;

typedef Util__ctx_type_0 Util_edge_type;

void Util__ctx_type_0_init(Util__ctx_type_0 &_output_);

void Util_edge_init(Util__ctx_type_0 &_output_);

uint8_t Util_edge(Util__ctx_type_0 &_ctx, uint8_t x);

typedef struct Util__ctx_type_1 {
   float pre_x;
} Util__ctx_type_1;

typedef Util__ctx_type_1 Util_change_type;

void Util__ctx_type_1_init(Util__ctx_type_1 &_output_);

void Util_change_init(Util__ctx_type_1 &_output_);

uint8_t Util_change(Util__ctx_type_1 &_ctx, float x);

float Util_map(float x, float x0, float x1, float y0, float y1);

typedef struct Util__ctx_type_3 {
   float y1;
   float x1;
} Util__ctx_type_3;

typedef Util__ctx_type_3 Util_dcblock_type;

void Util__ctx_type_3_init(Util__ctx_type_3 &_output_);

void Util_dcblock_init(Util__ctx_type_3 &_output_);

float Util_dcblock(Util__ctx_type_3 &_ctx, float x0);

typedef struct Util__ctx_type_4 {
   float x;
} Util__ctx_type_4;

typedef Util__ctx_type_4 Util_smooth_type;

void Util__ctx_type_4_init(Util__ctx_type_4 &_output_);

void Util_smooth_init(Util__ctx_type_4 &_output_);

float Util_smooth(Util__ctx_type_4 &_ctx, float input);

typedef struct Util__ctx_type_5 {
   float x0;
} Util__ctx_type_5;

typedef Util__ctx_type_5 Util_average2_type;

void Util__ctx_type_5_init(Util__ctx_type_5 &_output_);

void Util_average2_init(Util__ctx_type_5 &_output_);

float Util_average2(Util__ctx_type_5 &_ctx, float x1);

static const float Util_pitchToRate_c0[33] = {0.189842f,0.191326f,0.198689f,0.219425f,0.265677f,0.356438f,0.520651f,0.801560f,1.262758f,1.996562f,3.135544f,4.868347f,7.461281f,11.287715f,16.867996f,24.923305f,36.448521f,52.809903f,75.876616f,108.197225f,153.232414f,215.672344f,301.846626f,420.298038f,582.505178f,803.812129f,1104.880165f,1513.124126f,2065.373952f,2810.230550f,3812.902888f,5159.525580f,6963.761469f};
static const float Util_pitchToRate_c1[33] = {0.010913f,0.010176f,0.008334f,0.004867f,(-0.000939f),(-0.010061f),(-0.023820f),(-0.044002f),(-0.073002f),(-0.114025f),(-0.171341f),(-0.250621f),(-0.359381f),(-0.507548f),(-0.708208f),(-0.978575f),(-1.341250f),(-1.825848f),(-2.471123f),(-3.327721f),(-4.461658f),(-5.959006f),(-7.931626f),(-10.525312f),(-13.929212f),(-18.387588f),(-24.219785f),(-31.835151f),(-41.769557f),(-54.706455f),(-71.541226f),(-93.422592f),(-121.823163f)};
static const float Util_pitchToRate_c2[33] = {0.000356f,0.000447f,0.000562f,0.000707f,0.000889f,0.001119f,0.001407f,0.001769f,0.002225f,0.002799f,0.003520f,0.004426f,0.005567f,0.007001f,0.008805f,0.011074f,0.013927f,0.017515f,0.022028f,0.027704f,0.034841f,0.043818f,0.055107f,0.069305f,0.087163f,0.109617f,0.137862f,0.173377f,0.218054f,0.274227f,0.344892f,0.433780f,0.545543f};
float Util_pitchToRate(float pitch);

float Util_cvToPitch(float cv);

static const float Util_cvToRate_c0[33] = {0.759367f,0.762877f,0.779737f,0.825652f,0.924648f,1.112398f,1.440687f,1.983392f,2.844434f,4.168310f,6.153994f,9.073195f,13.294301f,19.313616f,27.796102f,39.628290f,55.986657f,78.426750f,108.998215f,150.387464f,206.118533f,280.781675f,380.357513f,512.612775f,687.616764f,918.349028f,1221.607949f,1619.052235f,2138.629322f,2815.436671f,3696.162408f,4838.694117f,6318.211520f};
static const float Util_cvToRate_c1[33] = {5.245583f,4.998943f,4.403089f,3.319116f,1.564497f,(-1.099256f),(-4.982226f),(-10.485864f),(-18.127956f),(-28.574100f),(-42.677360f),(-61.528124f),(-86.516770f),(-119.412133f),(-162.460318f),(-218.508269f),(-291.156786f),(-384.956978f),(-505.652297f),(-660.458539f),(-858.494950f),(-1111.173376f),(-1432.858445f),(-1841.544459f),(-2359.816046f),(-3015.795467f),(-3844.838138f),(-4891.101919f),(-6210.197274f),(-7868.993868f),(-9955.778008f),(-12575.747874f),(-15862.234621f)};
static const float Util_cvToRate_c2[33] = {20.125592f,24.457572f,29.722000f,36.119582f,43.894227f,53.342343f,64.824143f,78.777366f,95.733987f,116.340471f,141.382451f,171.814646f,208.797363f,253.740413f,308.357211f,374.730622f,455.389632f,553.410816f,672.536916f,817.290611f,993.216833f,1207.000622f,1466.803875f,1782.529271f,2166.244997f,2632.487590f,3199.072620f,3887.673024f,4724.859179f,5741.245302f,6977.441755f,8479.290028f,10304.455486f};
float Util_cvToRate(float cv);

float Util_pitchToCv(float pitch);

static const float Util_cvToRate_unit_c0[33] = {0.000742f,0.000745f,0.000761f,0.000806f,0.000903f,0.001086f,0.001407f,0.001937f,0.002778f,0.004071f,0.006010f,0.008861f,0.012983f,0.018861f,0.027145f,0.038700f,0.054674f,0.076589f,0.106444f,0.146863f,0.201288f,0.274201f,0.371443f,0.500598f,0.671501f,0.896825f,1.192977f,1.581106f,2.088505f,2.749450f,3.609534f,4.725287f,6.170128f};
static const float Util_cvToRate_unit_c1[33] = {0.005123f,0.004882f,0.004300f,0.003241f,0.001528f,(-0.001073f),(-0.004865f),(-0.010240f),(-0.017703f),(-0.027904f),(-0.041677f),(-0.060086f),(-0.084489f),(-0.116613f),(-0.158653f),(-0.213387f),(-0.284333f),(-0.375935f),(-0.493801f),(-0.644979f),(-0.838374f),(-1.085130f),(-1.399276f),(-1.798383f),(-2.304508f),(-2.945113f),(-3.754725f),(-4.776467f),(-6.064646f),(-7.684564f),(-9.722439f),(-12.281004f),(-15.490463f)};
static const float Util_cvToRate_unit_c2[33] = {0.019654f,0.023884f,0.029025f,0.035273f,0.042865f,0.052092f,0.063305f,0.076931f,0.093490f,0.113614f,0.138069f,0.167788f,0.203904f,0.247793f,0.301130f,0.365948f,0.444716f,0.540440f,0.656774f,0.798135f,0.969938f,1.178712f,1.432426f,1.740751f,2.115474f,2.570789f,3.124094f,3.796556f,4.614120f,5.606685f,6.813908f,8.280557f,10.062945f};
float Util_cvToRate_unit(float cv);

typedef struct Tricore__ctx_type_0 {
   uint8_t reset_state;
   float reset_phase;
   float rate;
   float phase;
   uint8_t direction;
   Util__ctx_type_0 _inst16;
   Util__ctx_type_0 _inst15;
   Util__ctx_type_1 _inst13;
} Tricore__ctx_type_0;

typedef Tricore__ctx_type_0 Tricore_process_type;

void Tricore__ctx_type_0_init(Tricore__ctx_type_0 &_output_);

void Tricore_process_init(Tricore__ctx_type_0 &_output_);

float Tricore_process(Tricore__ctx_type_0 &_ctx, float cv, float reset, float disable);

typedef Tricore__ctx_type_0 Tricore_noteOn_type;

void Tricore_noteOn_init(Tricore__ctx_type_0 &_output_);

void Tricore_noteOn(Tricore__ctx_type_0 &_ctx, int note, int velocity, int channel);

typedef Tricore__ctx_type_0 Tricore_noteOff_type;

void Tricore_noteOff_init(Tricore__ctx_type_0 &_output_);

void Tricore_noteOff(Tricore__ctx_type_0 &_ctx, int note, int channel);

typedef Tricore__ctx_type_0 Tricore_controlChange_type;

void Tricore_controlChange_init(Tricore__ctx_type_0 &_output_);

void Tricore_controlChange(Tricore__ctx_type_0 &_ctx, int control, int value, int channel);

typedef Tricore__ctx_type_0 Tricore_default_type;

void Tricore_default_init(Tricore__ctx_type_0 &_output_);

void Tricore_default(Tricore__ctx_type_0 &_ctx);

static const float Saturate_soft_table_c0[11] = {0.000000f,(-0.000837f),(-0.004130f),(-0.011331f),(-0.023628f),(-0.041861f),(-0.066455f),(-0.097383f),(-0.134146f),(-0.175783f),(-0.220903f)};
static const float Saturate_soft_table_c1[11] = {1.000234f,1.003027f,1.008519f,1.016526f,1.026781f,1.038945f,1.052619f,1.067357f,1.082688f,1.098122f,1.113175f};
static const float Saturate_soft_table_c2[11] = {(-0.001171f),(-0.003500f),(-0.005790f),(-0.008016f),(-0.010154f),(-0.012182f),(-0.014083f),(-0.015839f),(-0.017437f),(-0.018867f),(-0.020123f)};
float Saturate_soft_table(float x);

float Saturate_soft_process(float x);

void Saturate_soft_noteOn(int note, int velocity, int channel);

void Saturate_soft_noteOff(int note, int channel);

void Saturate_soft_controlChange(int control, int value, int channel);

void Saturate_soft_default();

static const float Svf_calc_g_c0[129] = {0.002330f,0.002330f,0.002330f,0.002332f,0.002334f,0.002339f,0.002345f,0.002355f,0.002367f,0.002384f,0.002406f,0.002434f,0.002469f,0.002512f,0.002564f,0.002627f,0.002703f,0.002792f,0.002897f,0.003020f,0.003163f,0.003329f,0.003520f,0.003739f,0.003989f,0.004275f,0.004598f,0.004966f,0.005380f,0.005846f,0.006371f,0.006958f,0.007617f,0.008349f,0.009169f,0.010082f,0.011097f,0.012216f,0.013457f,0.014835f,0.016350f,0.018027f,0.019880f,0.021901f,0.024177f,0.026620f,0.029309f,0.032305f,0.035508f,0.039085f,0.042961f,0.047132f,0.051635f,0.056888f,0.062349f,0.068325f,0.075187f,0.081751f,0.089900f,0.097998f,0.107213f,0.117479f,0.128467f,0.140645f,0.152384f,0.164957f,0.180620f,0.196876f,0.217383f,0.233608f,0.255074f,0.277937f,0.300345f,0.334902f,0.360034f,0.392927f,0.431044f,0.470668f,0.502125f,0.548706f,0.585845f,0.640390f,0.705687f,0.766947f,0.857199f,0.931926f,0.955894f,1.047667f,1.211238f,1.287302f,1.359961f,1.525900f,1.777559f,1.821213f,2.000695f,2.067184f,2.562031f,2.508080f,2.949113f,3.936569f,3.384321f,4.501667f,4.479607f,4.709319f,4.717681f,5.930568f,8.664774f,8.453629f,8.697593f,9.969256f,10.311537f,17.026154f,17.442482f,20.364464f,27.658995f,25.526743f,27.760690f,33.937415f,52.292663f,65.356820f,82.519360f,85.622727f,140.913994f,153.280903f,265.720234f,385.488409f,776.142793f,1249.269742f,1090.244278f};
static const float Svf_calc_g_c1[129] = {0.016145f,0.016105f,0.016020f,0.015887f,0.015700f,0.015455f,0.015147f,0.014769f,0.014315f,0.013780f,0.013155f,0.012433f,0.011607f,0.010667f,0.009603f,0.008408f,0.007068f,0.005574f,0.003913f,0.002072f,0.000038f,(-0.002205f),(-0.004673f),(-0.007381f),(-0.010349f),(-0.013594f),(-0.017139f),(-0.021002f),(-0.025214f),(-0.029786f),(-0.034755f),(-0.040156f),(-0.045999f),(-0.052325f),(-0.059186f),(-0.066566f),(-0.074590f),(-0.083227f),(-0.092513f),(-0.102539f),(-0.113342f),(-0.124934f),(-0.137556f),(-0.150936f),(-0.165494f),(-0.180915f),(-0.197743f),(-0.215882f),(-0.234857f),(-0.255513f),(-0.277493f),(-0.300931f),(-0.325376f),(-0.353601f),(-0.383015f),(-0.412920f),(-0.449157f),(-0.480947f),(-0.521104f),(-0.559783f),(-0.605884f),(-0.651413f),(-0.701831f),(-0.758184f),(-0.809563f),(-0.860345f),(-0.930806f),(-1.001329f),(-1.092007f),(-1.153990f),(-1.236844f),(-1.327107f),(-1.413789f),(-1.565029f),(-1.650617f),(-1.770758f),(-1.930161f),(-2.064629f),(-2.186008f),(-2.344857f),(-2.475820f),(-2.653299f),(-2.884870f),(-3.101130f),(-3.438192f),(-3.685398f),(-3.737599f),(-4.008374f),(-4.583202f),(-4.791112f),(-5.000224f),(-5.557169f),(-6.393678f),(-6.498466f),(-7.032296f),(-7.188267f),(-8.799336f),(-8.488635f),(-9.780928f),(-12.999440f),(-11.025426f),(-14.549914f),(-14.069083f),(-14.666232f),(-14.627071f),(-17.976414f),(-25.818903f),(-25.420736f),(-25.306335f),(-28.584106f),(-29.200662f),(-47.790608f),(-47.948688f),(-55.645058f),(-74.335334f),(-68.008779f),(-72.904784f),(-87.497766f),(-133.243615f),(-164.218551f),(-206.496450f),(-210.634553f),(-343.192699f),(-365.869108f),(-630.182525f),(-900.343072f),(-1797.100783f),(-2855.001303f),(-2461.636604f)};
static const float Svf_calc_g_c2[129] = {0.057350f,0.060215f,0.063222f,0.066380f,0.069695f,0.073176f,0.076831f,0.080669f,0.084698f,0.088928f,0.093370f,0.098034f,0.102931f,0.108072f,0.113470f,0.119138f,0.125090f,0.131337f,0.137899f,0.144788f,0.152021f,0.159616f,0.167590f,0.175962f,0.184756f,0.193986f,0.203671f,0.213855f,0.224536f,0.235751f,0.247551f,0.259910f,0.272909f,0.286526f,0.300865f,0.315916f,0.331755f,0.348308f,0.365700f,0.383964f,0.403079f,0.423152f,0.444676f,0.466776f,0.490416f,0.514790f,0.540724f,0.568318f,0.596239f,0.626212f,0.657654f,0.690074f,0.722979f,0.761476f,0.799506f,0.839155f,0.885159f,0.924569f,0.973440f,1.019112f,1.073789f,1.129113f,1.186314f,1.249537f,1.304662f,1.357422f,1.437164f,1.509851f,1.605739f,1.667344f,1.755787f,1.843974f,1.928461f,2.082011f,2.165953f,2.280928f,2.430995f,2.559696f,2.655523f,2.792885f,2.908195f,3.073275f,3.285248f,3.467169f,3.765072f,3.986876f,3.965669f,4.207899f,4.713541f,4.845564f,4.994400f,5.446843f,6.144788f,6.163343f,6.561545f,6.641975f,7.938960f,7.567922f,8.638244f,11.148986f,9.440932f,12.156427f,11.640707f,11.982242f,11.710453f,14.290648f,20.000363f,19.246561f,19.090325f,21.262534f,21.349387f,34.127243f,34.037782f,38.708598f,50.911766f,46.036973f,48.499666f,57.648744f,85.908308f,104.562190f,129.166100f,130.220198f,209.111404f,220.875546f,375.022130f,528.949352f,1040.368058f,1632.109419f,1391.005452f};
float Svf_calc_g(float cv);

typedef struct Svf__ctx_type_1 {
   float z2;
   float z1;
   float inv_den;
   float g;
   Util__ctx_type_1 _inst52;
   Util__ctx_type_1 _inst51;
   float R;
} Svf__ctx_type_1;

typedef Svf__ctx_type_1 Svf_process_type;

void Svf__ctx_type_1_init(Svf__ctx_type_1 &_output_);

void Svf_process_init(Svf__ctx_type_1 &_output_);

float Svf_process(Svf__ctx_type_1 &_ctx, float x, float cv, float q, int sel);

typedef Svf__ctx_type_1 Svf_noteOn_type;

void Svf_noteOn_init(Svf__ctx_type_1 &_output_);

void Svf_noteOn(Svf__ctx_type_1 &_ctx, int note, int velocity, int channel);

typedef Svf__ctx_type_1 Svf_noteOff_type;

void Svf_noteOff_init(Svf__ctx_type_1 &_output_);

void Svf_noteOff(Svf__ctx_type_1 &_ctx, int note, int channel);

typedef Svf__ctx_type_1 Svf_controlChange_type;

void Svf_controlChange_init(Svf__ctx_type_1 &_output_);

void Svf_controlChange(Svf__ctx_type_1 &_ctx, int control, int value, int channel);

typedef Svf__ctx_type_1 Svf_default_type;

void Svf_default_init(Svf__ctx_type_1 &_output_);

void Svf_default(Svf__ctx_type_1 &_ctx);

static const float Saturate_table_c0[11] = {0.000000f,(-0.007122f),0.249321f,0.586047f,0.806743f,0.917595f,0.966766f,0.987103f,0.995137f,0.998208f,0.999352f};
static const float Saturate_table_c1[11] = {1.047001f,1.113257f,0.685850f,0.304651f,0.117525f,0.042540f,0.014886f,0.005099f,0.001720f,0.000574f,0.000189f};
static const float Saturate_table_c2[11] = {(-0.253198f),(-0.343842f),(-0.165755f),(-0.057906f),(-0.018252f),(-0.005573f),(-0.001686f),(-0.000508f),(-0.000153f),(-0.000046f),(-0.000014f)};
float Saturate_table(float x);

float Saturate_process(float x);

void Saturate_noteOn(int note, int velocity, int channel);

void Saturate_noteOff(int note, int channel);

void Saturate_controlChange(int control, int value, int channel);

void Saturate_default();

typedef struct Lfo__ctx_type_0 {
   float x4;
   float x3;
   float x2;
} Lfo__ctx_type_0;

typedef Lfo__ctx_type_0 Lfo_soft_type;

void Lfo__ctx_type_0_init(Lfo__ctx_type_0 &_output_);

void Lfo_soft_init(Lfo__ctx_type_0 &_output_);

float Lfo_soft(Lfo__ctx_type_0 &_ctx, float x1);

typedef struct Lfo__ctx_type_1 {
   float rate;
   float phase;
   Lfo__ctx_type_0 _inst82;
   Util__ctx_type_0 _inst80;
   Util__ctx_type_1 _inst78;
} Lfo__ctx_type_1;

typedef Lfo__ctx_type_1 Lfo_process_type;

void Lfo__ctx_type_1_init(Lfo__ctx_type_1 &_output_);

void Lfo_process_init(Lfo__ctx_type_1 &_output_);

float Lfo_process(Lfo__ctx_type_1 &_ctx, float cv, float shape, float reset);

typedef Lfo__ctx_type_1 Lfo_noteOn_type;

void Lfo_noteOn_init(Lfo__ctx_type_1 &_output_);

void Lfo_noteOn(Lfo__ctx_type_1 &_ctx, int note, int velocity, int channel);

typedef Lfo__ctx_type_1 Lfo_noteOff_type;

void Lfo_noteOff_init(Lfo__ctx_type_1 &_output_);

void Lfo_noteOff(Lfo__ctx_type_1 &_ctx, int note, int channel);

typedef Lfo__ctx_type_1 Lfo_controlChange_type;

void Lfo_controlChange_init(Lfo__ctx_type_1 &_output_);

void Lfo_controlChange(Lfo__ctx_type_1 &_ctx, int control, int value, int channel);

typedef Lfo__ctx_type_1 Lfo_default_type;

void Lfo_default_init(Lfo__ctx_type_1 &_output_);

void Lfo_default(Lfo__ctx_type_1 &_ctx);

static const float Tables_nsine_c0[129] = {0.000000f,(-0.000059f),(-0.000294f),(-0.000821f),(-0.001748f),(-0.003182f),(-0.005218f),(-0.007945f),(-0.011441f),(-0.015769f),(-0.020982f),(-0.027117f),(-0.034194f),(-0.042218f),(-0.051174f),(-0.061028f),(-0.071728f),(-0.083199f),(-0.095348f),(-0.108059f),(-0.121193f),(-0.134593f),(-0.148077f),(-0.161443f),(-0.174469f),(-0.186911f),(-0.198505f),(-0.208970f),(-0.218004f),(-0.225290f),(-0.230496f),(-0.233273f),(-0.233261f),(-0.230090f),(-0.223377f),(-0.212736f),(-0.197773f),(-0.178091f),(-0.153292f),(-0.122979f),(-0.086760f),(-0.044248f),0.004935f,0.061157f,0.124770f,0.196113f,0.275501f,0.363233f,0.459580f,0.564787f,0.679070f,0.802614f,0.935568f,1.078046f,1.230121f,1.391827f,1.563154f,1.744046f,1.934404f,2.134075f,2.342860f,2.560508f,2.786714f,3.021123f,3.263323f,3.512849f,3.769181f,4.031743f,4.299905f,4.572984f,4.850242f,5.130888f,5.414079f,5.698922f,5.984476f,6.269752f,6.553717f,6.835294f,7.113369f,7.386787f,7.654362f,7.914877f,8.167086f,8.409721f,8.641495f,8.861104f,9.067233f,9.258562f,9.433767f,9.591528f,9.730531f,9.849477f,9.947084f,10.022092f,10.073270f,10.099421f,10.099386f,10.072052f,10.016353f,9.931281f,9.815887f,9.669287f,9.490669f,9.279297f,9.034513f,8.755748f,8.442520f,8.094445f,7.711234f,7.292703f,6.838775f,6.349479f,5.824963f,5.265486f,4.671429f,4.043291f,3.381696f,2.687392f,1.961252f,1.204276f,0.417591f,(-0.397552f),(-1.239772f),(-2.107564f),(-2.999299f),(-3.913225f),(-4.847471f),(-5.800047f),(-6.768847f)};
static const float Tables_nsine_c1[129] = {6.284447f,6.299564f,6.329688f,6.374603f,6.433980f,6.507388f,6.594289f,6.694041f,6.805905f,6.929043f,7.062522f,7.205321f,7.356331f,7.514365f,7.678156f,7.846367f,8.017595f,8.190378f,8.363199f,8.534492f,8.702652f,8.866039f,9.022985f,9.171802f,9.310788f,9.438236f,9.552440f,9.651704f,9.734348f,9.798715f,9.843181f,9.866160f,9.866113f,9.841556f,9.791063f,9.713277f,9.606917f,9.470782f,9.303758f,9.104827f,8.873070f,8.607671f,8.307927f,7.973252f,7.603175f,7.197355f,6.755575f,6.277752f,5.763935f,5.214312f,4.629210f,4.009096f,3.354579f,2.666410f,1.945484f,1.192836f,0.409645f,(-0.402770f),(-1.242953f),(-2.109312f),(-3.000120f),(-3.913520f),(-4.847530f),(-5.800047f),(-6.768847f),(-7.751597f),(-8.745857f),(-9.749086f),(-10.758648f),(-11.771823f),(-12.785807f),(-13.797728f),(-14.804647f),(-15.803569f),(-16.791454f),(-17.765220f),(-18.721759f),(-19.657940f),(-20.570624f),(-21.456668f),(-22.312942f),(-23.136331f),(-23.923752f),(-24.672159f),(-25.378556f),(-26.040006f),(-26.653641f),(-27.216673f),(-27.726403f),(-28.180230f),(-28.575662f),(-28.910326f),(-29.181973f),(-29.388492f),(-29.527917f),(-29.598433f),(-29.598386f),(-29.526292f),(-29.380840f),(-29.160902f),(-28.865538f),(-28.494004f),(-28.045752f),(-27.520443f),(-26.917941f),(-26.238327f),(-25.481894f),(-24.649155f),(-23.740843f),(-22.757909f),(-21.701528f),(-20.573098f),(-19.374236f),(-18.106780f),(-16.772786f),(-15.374524f),(-13.914479f),(-12.395342f),(-10.820010f),(-9.191577f),(-7.513332f),(-5.788748f),(-4.021481f),(-2.215356f),(-0.374364f),1.497351f,3.395497f,5.315646f,7.253247f};
static const float Tables_nsine_c2[129] = {(-0.484400f),(-1.452033f),(-2.416169f),(-3.374483f),(-4.324668f),(-5.264435f),(-6.191519f),(-7.103687f),(-7.998741f),(-8.874526f),(-9.728932f),(-10.559900f),(-11.365428f),(-12.143575f),(-12.892468f),(-13.610302f),(-14.295347f),(-14.945953f),(-15.560554f),(-16.137667f),(-16.675904f),(-17.173967f),(-17.630656f),(-18.044871f),(-18.415615f),(-18.741994f),(-19.023222f),(-19.258621f),(-19.447625f),(-19.589777f),(-19.684736f),(-19.732273f),(-19.732273f),(-19.684736f),(-19.589777f),(-19.447625f),(-19.258621f),(-19.023222f),(-18.741994f),(-18.415615f),(-18.044871f),(-17.630656f),(-17.173967f),(-16.675904f),(-16.137667f),(-15.560554f),(-14.945953f),(-14.295347f),(-13.610302f),(-12.892468f),(-12.143575f),(-11.365428f),(-10.559900f),(-9.728932f),(-8.874526f),(-7.998741f),(-7.103687f),(-6.191519f),(-5.264435f),(-4.324668f),(-3.374483f),(-2.416169f),(-1.452033f),(-0.484400f),0.484400f,1.452033f,2.416169f,3.374483f,4.324668f,5.264435f,6.191519f,7.103687f,7.998741f,8.874526f,9.728932f,10.559900f,11.365428f,12.143575f,12.892468f,13.610302f,14.295347f,14.945953f,15.560554f,16.137667f,16.675904f,17.173967f,17.630656f,18.044871f,18.415615f,18.741994f,19.023222f,19.258621f,19.447625f,19.589777f,19.684736f,19.732273f,19.732273f,19.684736f,19.589777f,19.447625f,19.258621f,19.023222f,18.741994f,18.415615f,18.044871f,17.630656f,17.173967f,16.675904f,16.137667f,15.560554f,14.945953f,14.295347f,13.610302f,12.892468f,12.143575f,11.365428f,10.559900f,9.728932f,8.874526f,7.998741f,7.103687f,6.191519f,5.264435f,4.324668f,3.374483f,2.416169f,1.452033f,0.484400f,(-0.484400f)};
float Tables_nsine(float x);

typedef struct Phase__ctx_type_0 {
   float rate;
   float phase;
   Util__ctx_type_0 _inst97;
   Util__ctx_type_1 _inst95;
} Phase__ctx_type_0;

typedef Phase__ctx_type_0 Phase_process_type;

void Phase__ctx_type_0_init(Phase__ctx_type_0 &_output_);

void Phase_process_init(Phase__ctx_type_0 &_output_);

float Phase_process(Phase__ctx_type_0 &_ctx, float cv, float reset);

typedef Phase__ctx_type_0 Phase_noteOn_type;

void Phase_noteOn_init(Phase__ctx_type_0 &_output_);

void Phase_noteOn(Phase__ctx_type_0 &_ctx, int note, int velocity, int channel);

typedef Phase__ctx_type_0 Phase_noteOff_type;

void Phase_noteOff_init(Phase__ctx_type_0 &_output_);

void Phase_noteOff(Phase__ctx_type_0 &_ctx, int note, int channel);

typedef Phase__ctx_type_0 Phase_controlChange_type;

void Phase_controlChange_init(Phase__ctx_type_0 &_output_);

void Phase_controlChange(Phase__ctx_type_0 &_ctx, int control, int value, int channel);

typedef Phase__ctx_type_0 Phase_default_type;

void Phase_default_init(Phase__ctx_type_0 &_output_);

void Phase_default(Phase__ctx_type_0 &_ctx);

static const float Blit_period_c0[33] = {674.246035f,671.553838f,662.761782f,646.759522f,623.799428f,594.871802f,561.298277f,524.476942f,485.731369f,446.229382f,406.947440f,368.663774f,331.968683f,297.284156f,264.887666f,234.936857f,207.493124f,182.543016f,160.016907f,139.804832f,121.769557f,105.757117f,91.605116f,79.149088f,68.227249f,58.683895f,50.371734f,43.153355f,36.902033f,31.502025f,26.848494f,22.847166f,19.413794f};
static const float Blit_period_c1[33] = {(-4656.656311f),(-4481.960579f),(-4198.686133f),(-3855.751543f),(-3487.139455f),(-3115.858821f),(-2756.930319f),(-2419.625141f),(-2109.134753f),(-1827.808334f),(-1576.062963f),(-1353.047092f),(-1157.118864f),(-986.186250f),(-837.944665f),(-710.039113f),(-600.171234f),(-506.166566f),(-426.013463f),(-357.882151f),(-300.130190f),(-251.298904f),(-210.104105f),(-175.423450f),(-146.282114f),(-121.837895f),(-101.366537f),(-84.247726f),(-69.952082f),(-58.029259f),(-48.097248f),(-39.832833f),(-32.963186f)};
static const float Blit_period_c2[33] = {14548.823162f,11715.369522f,9433.744675f,7596.477297f,6117.026622f,4925.706117f,3966.401040f,3193.925264f,2571.892879f,2071.004308f,1667.666208f,1342.880152f,1081.347751f,870.750049f,701.167268f,564.611553f,454.650724f,366.105298f,294.804521f,237.389916f,191.157082f,153.928316f,123.950032f,99.810164f,80.371652f,64.718885f,52.114569f,41.965005f,33.792117f,27.210939f,21.911477f,17.644111f,14.207835f};
float Blit_period(float cv);

float Blit_harmonics(float cv);

float Blit_pulse_train(float m, float phase);

typedef struct Blit__ctx_type_3 {
   float state_saw;
   float state_pulse;
   float rate;
   float output;
   float m;
   Util__ctx_type_3 _inst119;
   Phase__ctx_type_0 _inst115;
   Util__ctx_type_1 _inst113;
} Blit__ctx_type_3;

typedef Blit__ctx_type_3 Blit_osc_blit_type;

void Blit__ctx_type_3_init(Blit__ctx_type_3 &_output_);

void Blit_osc_blit_init(Blit__ctx_type_3 &_output_);

float Blit_osc_blit(Blit__ctx_type_3 &_ctx, float cv, float pw, float wave);

typedef Blit__ctx_type_3 Blit_init_type;

void Blit_init_init(Blit__ctx_type_3 &_output_);

void Blit_init(Blit__ctx_type_3 &_ctx);

typedef struct Blit__ctx_type_4 {
   Blit__ctx_type_3 _inst122;
} Blit__ctx_type_4;

typedef Blit__ctx_type_4 Blit_process_type;

void Blit__ctx_type_4_init(Blit__ctx_type_4 &_output_);

void Blit_process_init(Blit__ctx_type_4 &_output_);

float Blit_process(Blit__ctx_type_4 &_ctx, float cv, float pw, float wave);

typedef Blit__ctx_type_4 Blit_noteOn_type;

void Blit_noteOn_init(Blit__ctx_type_4 &_output_);

void Blit_noteOn(Blit__ctx_type_4 &_ctx, int note, int velocity, int channel);

typedef Blit__ctx_type_4 Blit_noteOff_type;

void Blit_noteOff_init(Blit__ctx_type_4 &_output_);

void Blit_noteOff(Blit__ctx_type_4 &_ctx, int note, int channel);

typedef Blit__ctx_type_4 Blit_controlChange_type;

void Blit_controlChange_init(Blit__ctx_type_4 &_output_);

void Blit_controlChange(Blit__ctx_type_4 &_ctx, int control, int value, int channel);

typedef Blit__ctx_type_4 Blit_default_type;

void Blit_default_init(Blit__ctx_type_4 &_output_);

void Blit_default(Blit__ctx_type_4 &_ctx);

typedef struct Adsr__ctx_type_0 {
   float target;
   int state;
   float scale;
   float rate;
   float out;
   Util__ctx_type_4 _inst141;
   Util__ctx_type_0 _inst134;
} Adsr__ctx_type_0;

typedef Adsr__ctx_type_0 Adsr_do_type;

void Adsr__ctx_type_0_init(Adsr__ctx_type_0 &_output_);

void Adsr_do_init(Adsr__ctx_type_0 &_output_);

float Adsr_do(Adsr__ctx_type_0 &_ctx, float gate, float a, float d, float s, float r);

typedef struct Adsr__ctx_type_1 {
   float knob4;
   float knob3;
   float knob2;
   float knob1;
   Adsr__ctx_type_0 _inst143;
} Adsr__ctx_type_1;

typedef Adsr__ctx_type_1 Adsr_process_type;

void Adsr__ctx_type_1_init(Adsr__ctx_type_1 &_output_);

void Adsr_process_init(Adsr__ctx_type_1 &_output_);

float Adsr_process(Adsr__ctx_type_1 &_ctx, float gate);

typedef Adsr__ctx_type_1 Adsr_noteOn_type;

void Adsr_noteOn_init(Adsr__ctx_type_1 &_output_);

void Adsr_noteOn(Adsr__ctx_type_1 &_ctx, int note, int velocity, int channel);

typedef Adsr__ctx_type_1 Adsr_noteOff_type;

void Adsr_noteOff_init(Adsr__ctx_type_1 &_output_);

void Adsr_noteOff(Adsr__ctx_type_1 &_ctx, int note, int channel);

typedef Adsr__ctx_type_1 Adsr_controlChange_type;

void Adsr_controlChange_init(Adsr__ctx_type_1 &_output_);

void Adsr_controlChange(Adsr__ctx_type_1 &_ctx, int control, int value, int channel);

typedef Adsr__ctx_type_1 Adsr_default_type;

void Adsr_default_init(Adsr__ctx_type_1 &_output_);

void Adsr_default(Adsr__ctx_type_1 &_ctx);

typedef struct Voice_4__ctx_type_0 {
   float sustain;
   float release;
   float pw4;
   float pw3;
   float pw2;
   float pw1;
   float lfo_shape;
   float lfo_reset;
   float lfo_rate;
   float lfo_pw;
   float lfo_flt;
   float lfo_cv;
   float level4;
   float level3;
   float level2;
   float level1;
   int flt_shape;
   float flt_res;
   float flt_cut;
   float decay;
   float attack;
   Adsr__ctx_type_0 _inst170;
   Svf__ctx_type_1 _inst169;
   Tricore__ctx_type_0 _inst168;
   Blit__ctx_type_4 _inst167;
   Blit__ctx_type_4 _inst166;
   Blit__ctx_type_4 _inst165;
   Lfo__ctx_type_1 _inst164;
} Voice_4__ctx_type_0;

typedef Voice_4__ctx_type_0 Voice_4_process_type;

void Voice_4__ctx_type_0_init(Voice_4__ctx_type_0 &_output_);

void Voice_4_process_init(Voice_4__ctx_type_0 &_output_);

float Voice_4_process(Voice_4__ctx_type_0 &_ctx, float cv, float vel, float gate);

typedef Voice_4__ctx_type_0 Voice_4_noteOn_type;

void Voice_4_noteOn_init(Voice_4__ctx_type_0 &_output_);

void Voice_4_noteOn(Voice_4__ctx_type_0 &_ctx, int note, int velocity, int channel);

typedef Voice_4__ctx_type_0 Voice_4_noteOff_type;

void Voice_4_noteOff_init(Voice_4__ctx_type_0 &_output_);

void Voice_4_noteOff(Voice_4__ctx_type_0 &_ctx, int note, int channel);

typedef Voice_4__ctx_type_0 Voice_4_controlChange_type;

void Voice_4_controlChange_init(Voice_4__ctx_type_0 &_output_);

void Voice_4_controlChange(Voice_4__ctx_type_0 &_ctx, int control, int value, int channel);

typedef Voice_4__ctx_type_0 Voice_4_default_type;

void Voice_4_default_init(Voice_4__ctx_type_0 &_output_);

void Voice_4_default(Voice_4__ctx_type_0 &_ctx);



#endif // VOICE_4_H
