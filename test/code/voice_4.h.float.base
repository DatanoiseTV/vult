
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#ifndef VOICE_4_H
#define VOICE_4_H
#include <stdint.h>
#include <math.h>
#include "vultin.h"

typedef struct Util__ctx_type_0 {
   uint8_t pre;
} Util__ctx_type_0;

typedef Util__ctx_type_0 Util_edge_type;

void Util__ctx_type_0_init(Util__ctx_type_0 &_output_);

void Util_edge_init(Util__ctx_type_0 &_output_);

uint8_t Util_edge(Util__ctx_type_0 &_ctx, uint8_t x);

typedef struct Util__ctx_type_1 {
   float pre_x;
} Util__ctx_type_1;

typedef Util__ctx_type_1 Util_change_type;

void Util__ctx_type_1_init(Util__ctx_type_1 &_output_);

void Util_change_init(Util__ctx_type_1 &_output_);

uint8_t Util_change(Util__ctx_type_1 &_ctx, float x);

float Util_map(float x, float x0, float x1, float y0, float y1);

typedef struct Util__ctx_type_3 {
   float y1;
   float x1;
} Util__ctx_type_3;

typedef Util__ctx_type_3 Util_dcblock_type;

void Util__ctx_type_3_init(Util__ctx_type_3 &_output_);

void Util_dcblock_init(Util__ctx_type_3 &_output_);

float Util_dcblock(Util__ctx_type_3 &_ctx, float x0);

typedef struct Util__ctx_type_4 {
   float x;
} Util__ctx_type_4;

typedef Util__ctx_type_4 Util_smooth_type;

void Util__ctx_type_4_init(Util__ctx_type_4 &_output_);

void Util_smooth_init(Util__ctx_type_4 &_output_);

float Util_smooth(Util__ctx_type_4 &_ctx, float input);

typedef struct Util__ctx_type_5 {
   float x0;
} Util__ctx_type_5;

typedef Util__ctx_type_5 Util_average2_type;

void Util__ctx_type_5_init(Util__ctx_type_5 &_output_);

void Util_average2_init(Util__ctx_type_5 &_output_);

float Util_average2(Util__ctx_type_5 &_ctx, float x1);

float Util_cubic_clipper(float x);

static const float Util_pitchToRate_1024_c0[33] = {0.18980f,0.19130f,0.19860f,0.21940f,0.26560f,0.35640f,0.52060f,0.80150f,1.26270f,1.99650f,3.13550f,4.86830f,7.46120f,11.28770f,16.86800f,24.92330f,36.44850f,52.80980f,75.87660f,108.19650f,153.23160f,215.67100f,301.84940f,420.30170f,582.50030f,803.83190f,1104.89000f,1513.18400f,2065.39420f,2810.34650f,3812.92900f,5159.24510f,6963.38620f};
static const float Util_pitchToRate_1024_c1[33] = {0.01090f,0.01010f,0.00830f,0.00480f,(-0.00090f),(-0.01000f),(-0.02380f),(-0.04400f),(-0.07300f),(-0.11400f),(-0.17130f),(-0.25060f),(-0.35930f),(-0.50750f),(-0.70820f),(-0.97850f),(-1.34120f),(-1.82580f),(-2.47110f),(-3.32770f),(-4.46160f),(-5.95890f),(-7.93170f),(-10.52540f),(-13.92910f),(-18.38800f),(-24.22000f),(-31.83650f),(-41.76990f),(-54.70870f),(-71.54200f),(-93.41760f),(-121.81660f)};
static const float Util_pitchToRate_1024_c2[33] = {0.00030f,0.00040f,0.00050f,0.00070f,0.00080f,0.00110f,0.00140f,0.00170f,0.00220f,0.00270f,0.00350f,0.00440f,0.00550f,0.00700f,0.00880f,0.01100f,0.01390f,0.01750f,0.02200f,0.02770f,0.03480f,0.04380f,0.05510f,0.06930f,0.08710f,0.10960f,0.13780f,0.17330f,0.21800f,0.27420f,0.34480f,0.43370f,0.54550f};
float Util_pitchToRate_1024(float pitch);

static const float Util_pitchToRate_c0[33] = {0.00010f,0.00010f,0.00010f,0.00020f,0.00020f,0.00030f,0.00050f,0.00070f,0.00120f,0.00190f,0.00300f,0.00470f,0.00720f,0.01100f,0.01640f,0.02430f,0.03550f,0.05150f,0.07400f,0.10560f,0.14960f,0.21060f,0.29470f,0.41040f,0.56880f,0.78490f,1.07890f,1.47770f,2.01690f,2.74440f,3.72350f,5.03830f,6.80010f};
static const float Util_pitchToRate_c1[33] = {0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,(-0.00010f),(-0.00010f),(-0.00020f),(-0.00030f),(-0.00040f),(-0.00060f),(-0.00090f),(-0.00130f),(-0.00170f),(-0.00240f),(-0.00320f),(-0.00430f),(-0.00580f),(-0.00770f),(-0.01020f),(-0.01360f),(-0.01790f),(-0.02360f),(-0.03100f),(-0.04070f),(-0.05340f),(-0.06980f),(-0.09120f),(-0.11890f)};
static const float Util_pitchToRate_c2[33] = {0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00010f,0.00010f,0.00010f,0.00020f,0.00020f,0.00030f,0.00040f,0.00050f};
float Util_pitchToRate(float pitch);

float Util_cvToPitch(float cv);

static const float Util_cvToRate_1024_c0[33] = {0.75930f,0.76280f,0.77970f,0.82560f,0.92460f,1.11230f,1.44060f,1.98330f,2.84440f,4.16830f,6.15390f,9.07310f,13.29420f,19.31360f,27.79610f,39.62820f,55.98670f,78.42680f,108.99740f,150.38780f,206.11770f,280.78100f,380.35730f,512.61160f,687.60520f,918.34730f,1221.62600f,1619.06680f,2138.47840f,2815.56350f,3696.08980f,4838.64320f,6318.11650f};
static const float Util_cvToRate_1024_c1[33] = {5.24550f,4.99890f,4.40300f,3.31910f,1.56440f,(-1.09920f),(-4.98220f),(-10.48580f),(-18.12790f),(-28.57410f),(-42.67730f),(-61.52810f),(-86.51670f),(-119.41210f),(-162.46030f),(-218.50810f),(-291.15710f),(-384.95730f),(-505.64830f),(-660.46050f),(-858.49110f),(-1111.17280f),(-1432.85750f),(-1841.54350f),(-2359.78030f),(-3015.79410f),(-3844.88630f),(-4891.17230f),(-6209.73980f),(-7869.32870f),(-9955.65580f),(-12575.53830f),(-15862.00680f)};
static const float Util_cvToRate_1024_c2[33] = {20.12550f,24.45750f,29.72200f,36.11950f,43.89420f,53.34230f,64.82410f,78.77730f,95.73390f,116.34040f,141.38240f,171.81460f,208.79730f,253.74030f,308.35730f,374.73040f,455.39010f,553.41160f,672.53200f,817.29280f,993.21290f,1206.99940f,1466.80280f,1782.52830f,2166.21280f,2632.48440f,3199.11970f,3887.72180f,4724.54370f,5741.48930f,6977.32970f,8479.18150f,10304.30300f};
float Util_cvToRate_1024(float cv);

static const float Util_cvToRate_c0[129] = {0.00070f,0.00070f,0.00070f,0.00070f,0.00070f,0.00070f,0.00070f,0.00070f,0.00070f,0.00070f,0.00070f,0.00070f,0.00070f,0.00070f,0.00080f,0.00080f,0.00080f,0.00080f,0.00090f,0.00090f,0.00100f,0.00100f,0.00110f,0.00110f,0.00120f,0.00130f,0.00140f,0.00150f,0.00170f,0.00180f,0.00200f,0.00220f,0.00240f,0.00260f,0.00290f,0.00320f,0.00350f,0.00380f,0.00420f,0.00470f,0.00510f,0.00570f,0.00630f,0.00690f,0.00760f,0.00840f,0.00930f,0.01020f,0.01120f,0.01230f,0.01360f,0.01490f,0.01640f,0.01800f,0.01970f,0.02160f,0.02370f,0.02590f,0.02840f,0.03100f,0.03390f,0.03700f,0.04040f,0.04410f,0.04800f,0.05240f,0.05700f,0.06210f,0.06750f,0.07340f,0.07980f,0.08670f,0.09410f,0.10220f,0.11080f,0.12020f,0.13020f,0.14110f,0.15280f,0.16540f,0.17890f,0.19350f,0.20920f,0.22610f,0.24430f,0.26380f,0.28480f,0.30740f,0.33160f,0.35760f,0.38560f,0.41560f,0.44770f,0.48230f,0.51930f,0.55900f,0.60160f,0.64730f,0.69620f,0.74860f,0.80480f,0.86490f,0.92930f,0.99830f,1.07210f,1.15110f,1.23560f,1.32610f,1.42280f,1.52630f,1.63690f,1.75510f,1.88160f,2.01670f,2.16110f,2.31540f,2.48020f,2.65620f,2.84420f,3.04490f,3.25930f,3.48810f,3.73230f,3.99290f,4.27100f,4.56780f,4.88430f,5.22200f,5.58220f};
static const float Util_cvToRate_c1[129] = {0.00510f,0.00510f,0.00500f,0.00500f,0.00490f,0.00490f,0.00480f,0.00470f,0.00450f,0.00430f,0.00410f,0.00390f,0.00360f,0.00330f,0.00300f,0.00260f,0.00220f,0.00170f,0.00120f,0.00060f,0.00000f,(-0.00070f),(-0.00140f),(-0.00230f),(-0.00320f),(-0.00430f),(-0.00540f),(-0.00660f),(-0.00800f),(-0.00940f),(-0.01100f),(-0.01270f),(-0.01460f),(-0.01660f),(-0.01880f),(-0.02110f),(-0.02370f),(-0.02640f),(-0.02940f),(-0.03260f),(-0.03600f),(-0.03970f),(-0.04360f),(-0.04790f),(-0.05250f),(-0.05740f),(-0.06270f),(-0.06840f),(-0.07450f),(-0.08100f),(-0.08800f),(-0.09550f),(-0.10350f),(-0.11200f),(-0.12120f),(-0.13100f),(-0.14150f),(-0.15270f),(-0.16460f),(-0.17740f),(-0.19100f),(-0.20560f),(-0.22120f),(-0.23770f),(-0.25540f),(-0.27430f),(-0.29440f),(-0.31580f),(-0.33860f),(-0.36300f),(-0.38890f),(-0.41650f),(-0.44590f),(-0.47710f),(-0.51040f),(-0.54580f),(-0.58350f),(-0.62360f),(-0.66630f),(-0.71160f),(-0.75980f),(-0.81110f),(-0.86560f),(-0.92350f),(-0.98500f),(-1.05030f),(-1.11980f),(-1.19350f),(-1.27180f),(-1.35500f),(-1.44330f),(-1.53700f),(-1.63660f),(-1.74220f),(-1.85420f),(-1.97320f),(-2.09930f),(-2.23320f),(-2.37520f),(-2.52580f),(-2.68560f),(-2.85490f),(-3.03450f),(-3.22500f),(-3.42680f),(-3.64080f),(-3.86770f),(-4.10810f),(-4.36280f),(-4.63280f),(-4.91880f),(-5.22190f),(-5.54300f),(-5.88310f),(-6.24340f),(-6.62490f),(-7.02900f),(-7.45700f),(-7.91020f),(-8.39000f),(-8.89800f),(-9.43590f),(-10.00530f),(-10.60800f),(-11.24590f),(-11.92120f),(-12.63580f),(-13.39210f),(-14.19230f)};
static const float Util_cvToRate_c2[129] = {0.01820f,0.01910f,0.02010f,0.02110f,0.02210f,0.02320f,0.02440f,0.02560f,0.02690f,0.02830f,0.02970f,0.03120f,0.03270f,0.03430f,0.03610f,0.03790f,0.03980f,0.04180f,0.04380f,0.04600f,0.04830f,0.05080f,0.05330f,0.05600f,0.05870f,0.06170f,0.06480f,0.06800f,0.07140f,0.07500f,0.07870f,0.08270f,0.08680f,0.09110f,0.09570f,0.10050f,0.10550f,0.11070f,0.11630f,0.12210f,0.12820f,0.13460f,0.14130f,0.14840f,0.15580f,0.16360f,0.17170f,0.18030f,0.18930f,0.19880f,0.20870f,0.21920f,0.23010f,0.24160f,0.25370f,0.26630f,0.27960f,0.29360f,0.30830f,0.32370f,0.33980f,0.35680f,0.37460f,0.39340f,0.41300f,0.43360f,0.45530f,0.47800f,0.50190f,0.52700f,0.55330f,0.58090f,0.61000f,0.64040f,0.67240f,0.70600f,0.74130f,0.77830f,0.81720f,0.85800f,0.90080f,0.94580f,0.99310f,1.04270f,1.09480f,1.14940f,1.20680f,1.26710f,1.33040f,1.39690f,1.46660f,1.53990f,1.61680f,1.69750f,1.78230f,1.87130f,1.96480f,2.06290f,2.16600f,2.27410f,2.38770f,2.50700f,2.63220f,2.76370f,2.90170f,3.04660f,3.19880f,3.35850f,3.52630f,3.70240f,3.88730f,4.08150f,4.28530f,4.49930f,4.72410f,4.96000f,5.20770f,5.46780f,5.74090f,6.02760f,6.32870f,6.64480f,6.97660f,7.32510f,7.69090f,8.07510f,8.47840f,8.90180f,9.34640f};
float Util_cvToRate(float cv);

float Util_pitchToCv(float pitch);

static const float Util_cvToperiod_c0[33] = {674.24600f,671.55380f,662.76170f,646.75950f,623.79940f,594.87180f,561.29820f,524.47690f,485.73130f,446.22930f,406.94740f,368.66370f,331.96860f,297.28410f,264.88760f,234.93680f,207.49310f,182.54300f,160.01690f,139.80480f,121.76950f,105.75710f,91.60510f,79.14900f,68.22720f,58.68380f,50.37170f,43.15330f,36.90200f,31.50200f,26.84840f,22.84710f,19.41370f};
static const float Util_cvToperiod_c1[33] = {(-4656.65630f),(-4481.96050f),(-4198.68610f),(-3855.75150f),(-3487.13940f),(-3115.85880f),(-2756.93030f),(-2419.62510f),(-2109.13470f),(-1827.80830f),(-1576.06290f),(-1353.04700f),(-1157.11880f),(-986.18620f),(-837.94460f),(-710.03910f),(-600.17120f),(-506.16650f),(-426.01340f),(-357.88210f),(-300.13010f),(-251.29890f),(-210.10410f),(-175.42340f),(-146.28210f),(-121.83780f),(-101.36650f),(-84.24770f),(-69.95200f),(-58.02920f),(-48.09720f),(-39.83280f),(-32.96310f)};
static const float Util_cvToperiod_c2[33] = {14548.82310f,11715.36950f,9433.74460f,7596.47720f,6117.02660f,4925.70610f,3966.40100f,3193.92520f,2571.89280f,2071.00430f,1667.66620f,1342.88010f,1081.34770f,870.75000f,701.16720f,564.61150f,454.65070f,366.10520f,294.80450f,237.38990f,191.15700f,153.92830f,123.95000f,99.81010f,80.37160f,64.71880f,52.11450f,41.96500f,33.79210f,27.21090f,21.91140f,17.64410f,14.20780f};
float Util_cvToperiod(float cv);

static const float Util_cvTokHz_c0[33] = {0.03270f,0.03290f,0.03390f,0.03680f,0.04320f,0.05560f,0.07770f,0.11500f,0.17560f,0.27070f,0.41650f,0.63550f,0.95920f,1.43080f,2.10990f,3.07800f,4.44560f,6.36290f,9.03190f,12.72460f,17.80560f,24.76170f,34.24190f,47.10900f,64.50690f,87.94950f,119.43620f,161.60220f,217.91510f,292.92960f,392.61920f,524.80660f,699.72140f};
static const float Util_cvTokHz_c1[33] = {0.22570f,0.21220f,0.17910f,0.11760f,0.01570f,(-0.14210f),(-0.37740f),(-0.71820f),(-1.20170f),(-1.87720f),(-2.80900f),(-4.08180f),(-5.80600f),(-8.12530f),(-11.22700f),(-15.35370f),(-20.81970f),(-28.03170f),(-37.51450f),(-49.94440f),(-66.19240f),(-87.37840f),(-114.94030f),(-150.72330f),(-197.09150f),(-257.07220f),(-334.53760f),(-434.43670f),(-563.08980f),(-728.56180f),(-941.13720f),(-1213.92130f),(-1563.60330f)};
static const float Util_cvTokHz_c2[33] = {0.87630f,1.08820f,1.35140f,1.67830f,2.08420f,2.58830f,3.21440f,3.99180f,4.95730f,6.15620f,7.64520f,9.49420f,11.79050f,14.64210f,18.18350f,22.58130f,28.04280f,34.82510f,43.24790f,53.70770f,66.69740f,82.82870f,102.86140f,127.73930f,158.63400f,197.00090f,244.64710f,303.81700f,377.29750f,468.54990f,581.87230f,722.60270f,897.36980f};
float Util_cvTokHz(float cv);

typedef struct Tricore__ctx_type_0 {
   uint8_t reset_state;
   float reset_phase;
   float rate;
   float phase;
   uint8_t direction;
   Util__ctx_type_0 _inst26;
   Util__ctx_type_0 _inst25;
   Util__ctx_type_1 _inst23;
} Tricore__ctx_type_0;

typedef Tricore__ctx_type_0 Tricore_process_type;

void Tricore__ctx_type_0_init(Tricore__ctx_type_0 &_output_);

void Tricore_process_init(Tricore__ctx_type_0 &_output_);

float Tricore_process(Tricore__ctx_type_0 &_ctx, float cv, float reset, float disable);

typedef Tricore__ctx_type_0 Tricore_noteOn_type;

void Tricore_noteOn_init(Tricore__ctx_type_0 &_output_);

void Tricore_noteOn(Tricore__ctx_type_0 &_ctx, int note, int velocity, int channel);

typedef Tricore__ctx_type_0 Tricore_noteOff_type;

void Tricore_noteOff_init(Tricore__ctx_type_0 &_output_);

void Tricore_noteOff(Tricore__ctx_type_0 &_ctx, int note, int channel);

typedef Tricore__ctx_type_0 Tricore_controlChange_type;

void Tricore_controlChange_init(Tricore__ctx_type_0 &_output_);

void Tricore_controlChange(Tricore__ctx_type_0 &_ctx, int control, int value, int channel);

typedef Tricore__ctx_type_0 Tricore_default_type;

void Tricore_default_init(Tricore__ctx_type_0 &_output_);

void Tricore_default(Tricore__ctx_type_0 &_ctx);

static const float Saturate_soft_table_c0[242] = {(-4.19790f),(-4.08010f),(-3.96270f),(-3.84580f),(-3.72930f),(-3.61330f),(-3.49790f),(-3.38320f),(-3.26910f),(-3.15580f),(-3.04330f),(-2.93160f),(-2.82090f),(-2.71120f),(-2.60240f),(-2.49480f),(-2.38840f),(-2.28310f),(-2.17920f),(-2.07650f),(-1.97530f),(-1.87550f),(-1.77730f),(-1.68060f),(-1.58550f),(-1.49210f),(-1.40040f),(-1.31060f),(-1.22260f),(-1.13650f),(-1.05230f),(-0.97010f),(-0.89000f),(-0.81200f),(-0.73610f),(-0.66240f),(-0.59090f),(-0.52160f),(-0.45470f),(-0.39000f),(-0.32770f),(-0.26780f),(-0.21030f),(-0.15520f),(-0.10250f),(-0.05230f),(-0.00450f),0.04070f,0.08360f,0.12400f,0.16190f,0.19740f,0.23040f,0.26110f,0.28930f,0.31520f,0.33870f,0.36000f,0.37900f,0.39570f,0.41030f,0.42280f,0.43320f,0.44160f,0.44800f,0.45260f,0.45530f,0.45630f,0.45570f,0.45340f,0.44970f,0.44450f,0.43810f,0.43030f,0.42140f,0.41150f,0.40060f,0.38870f,0.37620f,0.36290f,0.34900f,0.33460f,0.31980f,0.30460f,0.28920f,0.27370f,0.25810f,0.24250f,0.22700f,0.21160f,0.19650f,0.18170f,0.16730f,0.15330f,0.13970f,0.12670f,0.11420f,0.10240f,0.09110f,0.08060f,0.07070f,0.06150f,0.05300f,0.04530f,0.03820f,0.03180f,0.02610f,0.02110f,0.01680f,0.01300f,0.00980f,0.00720f,0.00510f,0.00340f,0.00210f,0.00120f,0.00060f,0.00020f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,(-0.00020f),(-0.00060f),(-0.00120f),(-0.00210f),(-0.00340f),(-0.00510f),(-0.00720f),(-0.00980f),(-0.01300f),(-0.01680f),(-0.02110f),(-0.02610f),(-0.03180f),(-0.03820f),(-0.04530f),(-0.05300f),(-0.06150f),(-0.07070f),(-0.08060f),(-0.09110f),(-0.10240f),(-0.11420f),(-0.12670f),(-0.13970f),(-0.15330f),(-0.16730f),(-0.18170f),(-0.19650f),(-0.21160f),(-0.22700f),(-0.24250f),(-0.25810f),(-0.27370f),(-0.28920f),(-0.30460f),(-0.31980f),(-0.33460f),(-0.34900f),(-0.36290f),(-0.37620f),(-0.38870f),(-0.40060f),(-0.41150f),(-0.42140f),(-0.43030f),(-0.43810f),(-0.44450f),(-0.44970f),(-0.45340f),(-0.45570f),(-0.45630f),(-0.45530f),(-0.45260f),(-0.44800f),(-0.44160f),(-0.43320f),(-0.42280f),(-0.41030f),(-0.39570f),(-0.37900f),(-0.36000f),(-0.33870f),(-0.31520f),(-0.28930f),(-0.26110f),(-0.23040f),(-0.19740f),(-0.16190f),(-0.12400f),(-0.08360f),(-0.04070f),0.00450f,0.05230f,0.10250f,0.15520f,0.21030f,0.26780f,0.32770f,0.39000f,0.45470f,0.52160f,0.59090f,0.66240f,0.73610f,0.81200f,0.89000f,0.97010f,1.05230f,1.13650f,1.22260f,1.31060f,1.40040f,1.49210f,1.58550f,1.68060f,1.77730f,1.87550f,1.97530f,2.07650f,2.17920f,2.28310f,2.38840f,2.49480f,2.60240f,2.71120f,2.82090f,2.93160f,3.04330f,3.15580f,3.26910f,3.38320f,3.49790f,3.61330f,3.72930f,3.84580f,3.96270f,4.08010f,4.19790f,4.31590f};
static const float Saturate_soft_table_c1[242] = {0.67630f,0.68620f,0.69610f,0.70610f,0.71620f,0.72620f,0.73640f,0.74650f,0.75670f,0.76690f,0.77710f,0.78740f,0.79760f,0.80790f,0.81810f,0.82840f,0.83860f,0.84880f,0.85900f,0.86910f,0.87930f,0.88930f,0.89930f,0.90930f,0.91920f,0.92900f,0.93880f,0.94840f,0.95800f,0.96740f,0.97680f,0.98600f,0.99510f,1.00400f,1.01280f,1.02150f,1.03000f,1.03830f,1.04650f,1.05440f,1.06220f,1.06980f,1.07710f,1.08430f,1.09120f,1.09790f,1.10430f,1.11050f,1.11640f,1.12210f,1.12750f,1.13260f,1.13750f,1.14200f,1.14630f,1.15030f,1.15390f,1.15730f,1.16030f,1.16310f,1.16550f,1.16760f,1.16940f,1.17080f,1.17200f,1.17280f,1.17330f,1.17350f,1.17340f,1.17290f,1.17220f,1.17120f,1.16980f,1.16820f,1.16630f,1.16410f,1.16160f,1.15890f,1.15590f,1.15270f,1.14920f,1.14560f,1.14170f,1.13760f,1.13340f,1.12900f,1.12450f,1.11980f,1.11500f,1.11010f,1.10510f,1.10010f,1.09500f,1.08990f,1.08480f,1.07960f,1.07450f,1.06950f,1.06440f,1.05950f,1.05470f,1.04990f,1.04530f,1.04090f,1.03660f,1.03240f,1.02850f,1.02480f,1.02130f,1.01800f,1.01500f,1.01220f,1.00970f,1.00740f,1.00550f,1.00380f,1.00240f,1.00130f,1.00060f,1.00010f,0.99990f,1.00010f,1.00060f,1.00130f,1.00240f,1.00380f,1.00550f,1.00740f,1.00970f,1.01220f,1.01500f,1.01800f,1.02130f,1.02480f,1.02850f,1.03240f,1.03660f,1.04090f,1.04530f,1.04990f,1.05470f,1.05950f,1.06440f,1.06950f,1.07450f,1.07960f,1.08480f,1.08990f,1.09500f,1.10010f,1.10510f,1.11010f,1.11500f,1.11980f,1.12450f,1.12900f,1.13340f,1.13760f,1.14170f,1.14560f,1.14920f,1.15270f,1.15590f,1.15890f,1.16160f,1.16410f,1.16630f,1.16820f,1.16980f,1.17120f,1.17220f,1.17290f,1.17340f,1.17350f,1.17330f,1.17280f,1.17200f,1.17080f,1.16940f,1.16760f,1.16550f,1.16310f,1.16030f,1.15730f,1.15390f,1.15030f,1.14630f,1.14200f,1.13750f,1.13260f,1.12750f,1.12210f,1.11640f,1.11050f,1.10430f,1.09790f,1.09120f,1.08430f,1.07710f,1.06980f,1.06220f,1.05440f,1.04650f,1.03830f,1.03000f,1.02150f,1.01280f,1.00400f,0.99510f,0.98600f,0.97680f,0.96740f,0.95800f,0.94840f,0.93880f,0.92900f,0.91920f,0.90930f,0.89930f,0.88930f,0.87930f,0.86910f,0.85900f,0.84880f,0.83860f,0.82840f,0.81810f,0.80790f,0.79760f,0.78740f,0.77710f,0.76690f,0.75670f,0.74650f,0.73640f,0.72620f,0.71620f,0.70610f,0.69610f,0.68620f,0.67630f,0.66640f};
static const float Saturate_soft_table_c2[242] = {0.01030f,0.01050f,0.01070f,0.01090f,0.01110f,0.01130f,0.01160f,0.01180f,0.01200f,0.01220f,0.01250f,0.01270f,0.01300f,0.01320f,0.01340f,0.01370f,0.01390f,0.01420f,0.01440f,0.01470f,0.01490f,0.01520f,0.01540f,0.01570f,0.01590f,0.01620f,0.01650f,0.01670f,0.01700f,0.01720f,0.01750f,0.01780f,0.01800f,0.01830f,0.01850f,0.01880f,0.01900f,0.01930f,0.01950f,0.01980f,0.02000f,0.02030f,0.02050f,0.02070f,0.02100f,0.02120f,0.02140f,0.02160f,0.02180f,0.02200f,0.02220f,0.02240f,0.02260f,0.02270f,0.02290f,0.02300f,0.02320f,0.02330f,0.02340f,0.02360f,0.02370f,0.02370f,0.02380f,0.02390f,0.02390f,0.02400f,0.02400f,0.02400f,0.02400f,0.02400f,0.02390f,0.02390f,0.02380f,0.02370f,0.02360f,0.02350f,0.02340f,0.02320f,0.02300f,0.02280f,0.02260f,0.02240f,0.02210f,0.02190f,0.02160f,0.02130f,0.02090f,0.02060f,0.02020f,0.01980f,0.01940f,0.01900f,0.01850f,0.01810f,0.01760f,0.01710f,0.01660f,0.01600f,0.01550f,0.01490f,0.01430f,0.01370f,0.01310f,0.01240f,0.01180f,0.01110f,0.01040f,0.00970f,0.00900f,0.00830f,0.00760f,0.00680f,0.00610f,0.00530f,0.00460f,0.00380f,0.00310f,0.00230f,0.00150f,0.00070f,0.00000f,(-0.00070f),(-0.00150f),(-0.00230f),(-0.00310f),(-0.00380f),(-0.00460f),(-0.00530f),(-0.00610f),(-0.00680f),(-0.00760f),(-0.00830f),(-0.00900f),(-0.00970f),(-0.01040f),(-0.01110f),(-0.01180f),(-0.01240f),(-0.01310f),(-0.01370f),(-0.01430f),(-0.01490f),(-0.01550f),(-0.01600f),(-0.01660f),(-0.01710f),(-0.01760f),(-0.01810f),(-0.01850f),(-0.01900f),(-0.01940f),(-0.01980f),(-0.02020f),(-0.02060f),(-0.02090f),(-0.02130f),(-0.02160f),(-0.02190f),(-0.02210f),(-0.02240f),(-0.02260f),(-0.02280f),(-0.02300f),(-0.02320f),(-0.02340f),(-0.02350f),(-0.02360f),(-0.02370f),(-0.02380f),(-0.02390f),(-0.02390f),(-0.02400f),(-0.02400f),(-0.02400f),(-0.02400f),(-0.02400f),(-0.02390f),(-0.02390f),(-0.02380f),(-0.02370f),(-0.02370f),(-0.02360f),(-0.02340f),(-0.02330f),(-0.02320f),(-0.02300f),(-0.02290f),(-0.02270f),(-0.02260f),(-0.02240f),(-0.02220f),(-0.02200f),(-0.02180f),(-0.02160f),(-0.02140f),(-0.02120f),(-0.02100f),(-0.02070f),(-0.02050f),(-0.02030f),(-0.02000f),(-0.01980f),(-0.01950f),(-0.01930f),(-0.01900f),(-0.01880f),(-0.01850f),(-0.01830f),(-0.01800f),(-0.01780f),(-0.01750f),(-0.01720f),(-0.01700f),(-0.01670f),(-0.01650f),(-0.01620f),(-0.01590f),(-0.01570f),(-0.01540f),(-0.01520f),(-0.01490f),(-0.01470f),(-0.01440f),(-0.01420f),(-0.01390f),(-0.01370f),(-0.01340f),(-0.01320f),(-0.01300f),(-0.01270f),(-0.01250f),(-0.01220f),(-0.01200f),(-0.01180f),(-0.01160f),(-0.01130f),(-0.01110f),(-0.01090f),(-0.01070f),(-0.01050f),(-0.01030f),(-0.01010f)};
float Saturate_soft_table(float x);

float Saturate_soft_process(float x);

void Saturate_soft_noteOn(int note, int velocity, int channel);

void Saturate_soft_noteOff(int note, int channel);

void Saturate_soft_controlChange(int control, int value, int channel);

void Saturate_soft_default();

static const float Svf_calc_g_c0[129] = {0.00230f,0.00230f,0.00230f,0.00230f,0.00230f,0.00230f,0.00230f,0.00230f,0.00230f,0.00230f,0.00240f,0.00240f,0.00240f,0.00250f,0.00250f,0.00260f,0.00270f,0.00270f,0.00280f,0.00300f,0.00310f,0.00330f,0.00350f,0.00370f,0.00390f,0.00420f,0.00450f,0.00490f,0.00530f,0.00580f,0.00630f,0.00690f,0.00760f,0.00830f,0.00910f,0.01000f,0.01100f,0.01220f,0.01340f,0.01480f,0.01630f,0.01800f,0.01980f,0.02190f,0.02410f,0.02660f,0.02930f,0.03220f,0.03550f,0.03900f,0.04290f,0.04710f,0.05180f,0.05680f,0.06230f,0.06840f,0.07490f,0.08210f,0.08980f,0.09830f,0.10750f,0.11750f,0.12830f,0.14010f,0.15290f,0.16690f,0.18200f,0.19840f,0.21610f,0.23550f,0.25640f,0.27910f,0.30380f,0.33050f,0.35960f,0.39110f,0.42530f,0.46250f,0.50290f,0.54690f,0.59470f,0.64670f,0.70340f,0.76520f,0.83270f,0.90650f,0.98720f,1.07560f,1.17260f,1.27920f,1.39650f,1.52600f,1.66910f,1.82770f,2.00390f,2.20000f,2.41920f,2.66460f,2.94060f,3.25180f,3.60420f,4.00470f,4.46200f,4.98620f,5.59030f,6.28990f,7.10440f,8.05820f,9.18210f,10.51510f,12.10740f,14.02400f,16.35000f,19.19810f,22.71990f,27.12150f,32.68820f,39.82180f,49.09920f,61.36710f,77.90070f,100.67580f,132.85850f,179.72400f,250.48130f,362.13460f,548.34020f,881.84520f,1539.18060f};
static const float Svf_calc_g_c1[129] = {0.01610f,0.01610f,0.01600f,0.01580f,0.01570f,0.01540f,0.01510f,0.01470f,0.01430f,0.01370f,0.01310f,0.01240f,0.01160f,0.01060f,0.00960f,0.00840f,0.00700f,0.00550f,0.00390f,0.00200f,0.00000f,(-0.00220f),(-0.00460f),(-0.00730f),(-0.01030f),(-0.01350f),(-0.01710f),(-0.02100f),(-0.02520f),(-0.02970f),(-0.03470f),(-0.04010f),(-0.04590f),(-0.05230f),(-0.05910f),(-0.06650f),(-0.07450f),(-0.08320f),(-0.09250f),(-0.10250f),(-0.11330f),(-0.12490f),(-0.13750f),(-0.15090f),(-0.16540f),(-0.18090f),(-0.19760f),(-0.21550f),(-0.23470f),(-0.25530f),(-0.27740f),(-0.30100f),(-0.32640f),(-0.35350f),(-0.38260f),(-0.41370f),(-0.44700f),(-0.48260f),(-0.52070f),(-0.56150f),(-0.60510f),(-0.65170f),(-0.70150f),(-0.75480f),(-0.81180f),(-0.87270f),(-0.93780f),(-1.00730f),(-1.08180f),(-1.16130f),(-1.24640f),(-1.33750f),(-1.43490f),(-1.53910f),(-1.65070f),(-1.77030f),(-1.89840f),(-2.03580f),(-2.18310f),(-2.34130f),(-2.51130f),(-2.69400f),(-2.89070f),(-3.10260f),(-3.33110f),(-3.57790f),(-3.84470f),(-4.13380f),(-4.44730f),(-4.78800f),(-5.15890f),(-5.56350f),(-6.00600f),(-6.49110f),(-7.02400f),(-7.61140f),(-8.26060f),(-8.98040f),(-9.78120f),(-10.67540f),(-11.67760f),(-12.80560f),(-14.08060f),(-15.52840f),(-17.18040f),(-19.07530f),(-21.26080f),(-23.79620f),(-26.75600f),(-30.23440f),(-34.35150f),(-39.26240f),(-45.16900f),(-52.33760f),(-61.12390f),(-72.00960f),(-85.65820f),(-102.99890f),(-125.35940f),(-154.67910f),(-193.86390f),(-247.39450f),(-322.41560f),(-430.77430f),(-593.05110f),(-847.06570f),(-1267.31530f),(-2014.05210f),(-3474.29290f)};
static const float Svf_calc_g_c2[129] = {0.05730f,0.06020f,0.06320f,0.06630f,0.06960f,0.07310f,0.07680f,0.08060f,0.08460f,0.08890f,0.09330f,0.09800f,0.10290f,0.10800f,0.11340f,0.11910f,0.12500f,0.13130f,0.13780f,0.14470f,0.15200f,0.15960f,0.16750f,0.17590f,0.18470f,0.19390f,0.20360f,0.21380f,0.22450f,0.23570f,0.24750f,0.25990f,0.27290f,0.28650f,0.30080f,0.31590f,0.33170f,0.34820f,0.36570f,0.38400f,0.40320f,0.42330f,0.44450f,0.46680f,0.49020f,0.51470f,0.54050f,0.56760f,0.59600f,0.62590f,0.65730f,0.69030f,0.72500f,0.76140f,0.79970f,0.83990f,0.88220f,0.92660f,0.97330f,1.02250f,1.07410f,1.12840f,1.18560f,1.24570f,1.30900f,1.37560f,1.44580f,1.51960f,1.59740f,1.67940f,1.76590f,1.85700f,1.95320f,2.05480f,2.16200f,2.27540f,2.39530f,2.52210f,2.65640f,2.79880f,2.94990f,3.11030f,3.28090f,3.46240f,3.65580f,3.86230f,4.08300f,4.31920f,4.57250f,4.84470f,5.13780f,5.45400f,5.79600f,6.16680f,6.57000f,7.00960f,7.49050f,8.01810f,8.59920f,9.24140f,9.95410f,10.74820f,11.63700f,12.63650f,13.76600f,15.04920f,16.51530f,18.20010f,20.14880f,22.41790f,25.07920f,28.22510f,31.97490f,36.48560f,41.96570f,48.69630f,57.06220f,67.60030f,81.07370f,98.59190f,121.80900f,153.26360f,196.98410f,259.61860f,352.66110f,497.13380f,734.25030f,1152.24700f,1963.21160f};
float Svf_calc_g(float cv);

typedef struct Svf__ctx_type_1 {
   float z2;
   float z1;
   float inv_den;
   float g;
   Util__ctx_type_1 _inst54;
   Util__ctx_type_1 _inst53;
   float R;
} Svf__ctx_type_1;

typedef Svf__ctx_type_1 Svf_process_type;

void Svf__ctx_type_1_init(Svf__ctx_type_1 &_output_);

void Svf_process_init(Svf__ctx_type_1 &_output_);

float Svf_process(Svf__ctx_type_1 &_ctx, float x, float cv, float q, int sel);

typedef Svf__ctx_type_1 Svf_noteOn_type;

void Svf_noteOn_init(Svf__ctx_type_1 &_output_);

void Svf_noteOn(Svf__ctx_type_1 &_ctx, int note, int velocity, int channel);

typedef Svf__ctx_type_1 Svf_noteOff_type;

void Svf_noteOff_init(Svf__ctx_type_1 &_output_);

void Svf_noteOff(Svf__ctx_type_1 &_ctx, int note, int channel);

typedef Svf__ctx_type_1 Svf_controlChange_type;

void Svf_controlChange_init(Svf__ctx_type_1 &_output_);

void Svf_controlChange(Svf__ctx_type_1 &_ctx, int control, int value, int channel);

typedef Svf__ctx_type_1 Svf_default_type;

void Svf_default_init(Svf__ctx_type_1 &_output_);

void Svf_default(Svf__ctx_type_1 &_ctx);

static const float Saturate_table_c0[242] = {(-1.00000f),(-1.00000f),(-0.99990f),(-0.99990f),(-1.00000f),(-1.00000f),(-1.00000f),(-1.00000f),(-1.00000f),(-1.00000f),(-0.99990f),(-1.00000f),(-1.00000f),(-1.00000f),(-0.99990f),(-1.00000f),(-1.00000f),(-1.00000f),(-1.00000f),(-1.00000f),(-1.00000f),(-1.00000f),(-1.00000f),(-0.99990f),(-0.99990f),(-0.99990f),(-1.00000f),(-1.00000f),(-0.99990f),(-0.99990f),(-0.99990f),(-0.99990f),(-1.00000f),(-0.99990f),(-0.99990f),(-0.99990f),(-0.99990f),(-0.99990f),(-0.99990f),(-0.99990f),(-0.99990f),(-0.99990f),(-0.99990f),(-0.99990f),(-0.99990f),(-0.99990f),(-0.99990f),(-0.99990f),(-0.99990f),(-0.99990f),(-0.99990f),(-0.99990f),(-0.99990f),(-0.99990f),(-0.99990f),(-0.99990f),(-0.99990f),(-0.99990f),(-0.99990f),(-0.99990f),(-0.99990f),(-0.99990f),(-0.99990f),(-0.99990f),(-0.99990f),(-0.99990f),(-0.99990f),(-0.99990f),(-0.99990f),(-0.99990f),(-0.99990f),(-0.99990f),(-0.99990f),(-0.99990f),(-0.99990f),(-0.99990f),(-0.99990f),(-0.99990f),(-0.99990f),(-0.99990f),(-0.99990f),(-0.99990f),(-0.99990f),(-0.99990f),(-0.99980f),(-0.99980f),(-0.99970f),(-0.99960f),(-0.99940f),(-0.99920f),(-0.99890f),(-0.99840f),(-0.99780f),(-0.99700f),(-0.99580f),(-0.99420f),(-0.99200f),(-0.98900f),(-0.98480f),(-0.97920f),(-0.97160f),(-0.96140f),(-0.94780f),(-0.92960f),(-0.90570f),(-0.87440f),(-0.83390f),(-0.78240f),(-0.71780f),(-0.63870f),(-0.54450f),(-0.43670f),(-0.31980f),(-0.20250f),(-0.09770f),(-0.01970f),0.02110f,0.02660f,0.01320f,0.00170f,0.00000f,(-0.00170f),(-0.01320f),(-0.02660f),(-0.02110f),0.01970f,0.09770f,0.20250f,0.31980f,0.43670f,0.54450f,0.63870f,0.71780f,0.78240f,0.83390f,0.87440f,0.90570f,0.92960f,0.94780f,0.96140f,0.97160f,0.97920f,0.98480f,0.98900f,0.99200f,0.99420f,0.99580f,0.99700f,0.99780f,0.99840f,0.99890f,0.99920f,0.99940f,0.99960f,0.99970f,0.99980f,0.99980f,0.99990f,0.99990f,0.99990f,0.99990f,0.99990f,0.99990f,0.99990f,0.99990f,0.99990f,0.99990f,0.99990f,0.99990f,0.99990f,0.99990f,0.99990f,0.99990f,0.99990f,0.99990f,0.99990f,0.99990f,0.99990f,0.99990f,0.99990f,0.99990f,0.99990f,0.99990f,0.99990f,0.99990f,0.99990f,0.99990f,0.99990f,0.99990f,0.99990f,0.99990f,0.99990f,0.99990f,0.99990f,0.99990f,0.99990f,0.99990f,0.99990f,0.99990f,0.99990f,0.99990f,0.99990f,0.99990f,0.99990f,0.99990f,1.00000f,0.99990f,0.99990f,1.00000f,0.99990f,0.99990f,0.99990f,0.99990f,1.00000f,1.00000f,0.99990f,0.99990f,1.00000f,1.00000f,1.00000f,1.00000f,1.00000f,1.00000f,1.00000f,1.00000f,1.00000f,1.00000f,1.00000f,1.00000f,1.00000f,0.99990f,1.00000f,1.00000f,0.99990f,1.00000f,1.00000f,0.99990f,1.00000f,1.00000f,1.00000f,1.00000f,1.00000f};
static const float Saturate_table_c1[242] = {0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00010f,0.00010f,0.00020f,0.00030f,0.00040f,0.00060f,0.00100f,0.00140f,0.00200f,0.00290f,0.00420f,0.00610f,0.00870f,0.01240f,0.01770f,0.02510f,0.03550f,0.05010f,0.07040f,0.09850f,0.13690f,0.18890f,0.25810f,0.34840f,0.46260f,0.60100f,0.75830f,0.92040f,1.06260f,1.15320f,1.16780f,1.11210f,1.03330f,0.99670f,1.03330f,1.11210f,1.16780f,1.15320f,1.06260f,0.92040f,0.75830f,0.60100f,0.46260f,0.34840f,0.25810f,0.18890f,0.13690f,0.09850f,0.07040f,0.05010f,0.03550f,0.02510f,0.01770f,0.01240f,0.00870f,0.00610f,0.00420f,0.00290f,0.00200f,0.00140f,0.00100f,0.00060f,0.00040f,0.00030f,0.00020f,0.00010f,0.00010f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f};
static const float Saturate_table_c2[242] = {0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00010f,0.00010f,0.00020f,0.00040f,0.00060f,0.00090f,0.00130f,0.00200f,0.00300f,0.00450f,0.00680f,0.01000f,0.01490f,0.02210f,0.03250f,0.04770f,0.06930f,0.09950f,0.14050f,0.19320f,0.25590f,0.32080f,0.37090f,0.38040f,0.32260f,0.18780f,0.00000f,(-0.18780f),(-0.32260f),(-0.38040f),(-0.37090f),(-0.32080f),(-0.25590f),(-0.19320f),(-0.14050f),(-0.09950f),(-0.06930f),(-0.04770f),(-0.03250f),(-0.02210f),(-0.01490f),(-0.01000f),(-0.00680f),(-0.00450f),(-0.00300f),(-0.00200f),(-0.00130f),(-0.00090f),(-0.00060f),(-0.00040f),(-0.00020f),(-0.00010f),(-0.00010f),0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f};
float Saturate_table(float x);

float Saturate_process(float x);

void Saturate_noteOn(int note, int velocity, int channel);

void Saturate_noteOff(int note, int channel);

void Saturate_controlChange(int control, int value, int channel);

void Saturate_default();

typedef struct Lfo__ctx_type_0 {
   float x4;
   float x3;
   float x2;
} Lfo__ctx_type_0;

typedef Lfo__ctx_type_0 Lfo_soft_type;

void Lfo__ctx_type_0_init(Lfo__ctx_type_0 &_output_);

void Lfo_soft_init(Lfo__ctx_type_0 &_output_);

float Lfo_soft(Lfo__ctx_type_0 &_ctx, float x1);

typedef struct Lfo__ctx_type_1 {
   float rate;
   float phase;
   Lfo__ctx_type_0 _inst76;
   Util__ctx_type_0 _inst74;
   Util__ctx_type_1 _inst72;
} Lfo__ctx_type_1;

typedef Lfo__ctx_type_1 Lfo_process_type;

void Lfo__ctx_type_1_init(Lfo__ctx_type_1 &_output_);

void Lfo_process_init(Lfo__ctx_type_1 &_output_);

float Lfo_process(Lfo__ctx_type_1 &_ctx, float cv, float shape, float reset);

typedef Lfo__ctx_type_1 Lfo_noteOn_type;

void Lfo_noteOn_init(Lfo__ctx_type_1 &_output_);

void Lfo_noteOn(Lfo__ctx_type_1 &_ctx, int note, int velocity, int channel);

typedef Lfo__ctx_type_1 Lfo_noteOff_type;

void Lfo_noteOff_init(Lfo__ctx_type_1 &_output_);

void Lfo_noteOff(Lfo__ctx_type_1 &_ctx, int note, int channel);

typedef Lfo__ctx_type_1 Lfo_controlChange_type;

void Lfo_controlChange_init(Lfo__ctx_type_1 &_output_);

void Lfo_controlChange(Lfo__ctx_type_1 &_ctx, int control, int value, int channel);

typedef Lfo__ctx_type_1 Lfo_default_type;

void Lfo_default_init(Lfo__ctx_type_1 &_output_);

void Lfo_default(Lfo__ctx_type_1 &_ctx);

static const float Tables_nsine_c0[129] = {0.00000f,0.00000f,(-0.00020f),(-0.00080f),(-0.00170f),(-0.00310f),(-0.00520f),(-0.00790f),(-0.01140f),(-0.01570f),(-0.02090f),(-0.02710f),(-0.03410f),(-0.04220f),(-0.05110f),(-0.06100f),(-0.07170f),(-0.08310f),(-0.09530f),(-0.10800f),(-0.12110f),(-0.13450f),(-0.14800f),(-0.16140f),(-0.17440f),(-0.18690f),(-0.19850f),(-0.20890f),(-0.21800f),(-0.22520f),(-0.23040f),(-0.23320f),(-0.23320f),(-0.23000f),(-0.22330f),(-0.21270f),(-0.19770f),(-0.17800f),(-0.15320f),(-0.12290f),(-0.08670f),(-0.04420f),0.00490f,0.06110f,0.12470f,0.19610f,0.27550f,0.36320f,0.45950f,0.56470f,0.67900f,0.80260f,0.93550f,1.07800f,1.23010f,1.39180f,1.56310f,1.74400f,1.93440f,2.13400f,2.34280f,2.56050f,2.78670f,3.02110f,3.26330f,3.51280f,3.76910f,4.03170f,4.29990f,4.57290f,4.85020f,5.13080f,5.41400f,5.69890f,5.98440f,6.26970f,6.55370f,6.83520f,7.11330f,7.38670f,7.65430f,7.91480f,8.16700f,8.40970f,8.64140f,8.86110f,9.06720f,9.25850f,9.43370f,9.59150f,9.73050f,9.84940f,9.94700f,10.02200f,10.07320f,10.09940f,10.09930f,10.07200f,10.01630f,9.93120f,9.81580f,9.66920f,9.49060f,9.27920f,9.03450f,8.75570f,8.44250f,8.09440f,7.71120f,7.29270f,6.83870f,6.34940f,5.82490f,5.26540f,4.67140f,4.04320f,3.38160f,2.68730f,1.96120f,1.20420f,0.41750f,(-0.39750f),(-1.23970f),(-2.10750f),(-2.99920f),(-3.91320f),(-4.84740f),(-5.80000f),(-6.76880f)};
static const float Tables_nsine_c1[129] = {6.28440f,6.29950f,6.32960f,6.37460f,6.43390f,6.50730f,6.59420f,6.69400f,6.80590f,6.92900f,7.06250f,7.20530f,7.35630f,7.51430f,7.67810f,7.84630f,8.01750f,8.19030f,8.36310f,8.53440f,8.70260f,8.86600f,9.02290f,9.17180f,9.31070f,9.43820f,9.55240f,9.65170f,9.73430f,9.79870f,9.84310f,9.86610f,9.86610f,9.84150f,9.79100f,9.71320f,9.60690f,9.47070f,9.30370f,9.10480f,8.87300f,8.60760f,8.30790f,7.97320f,7.60310f,7.19730f,6.75550f,6.27770f,5.76390f,5.21430f,4.62920f,4.00900f,3.35450f,2.66640f,1.94540f,1.19280f,0.40960f,(-0.40270f),(-1.24290f),(-2.10930f),(-3.00010f),(-3.91350f),(-4.84750f),(-5.80000f),(-6.76880f),(-7.75150f),(-8.74580f),(-9.74900f),(-10.75860f),(-11.77180f),(-12.78580f),(-13.79770f),(-14.80460f),(-15.80350f),(-16.79140f),(-17.76520f),(-18.72170f),(-19.65790f),(-20.57060f),(-21.45660f),(-22.31290f),(-23.13630f),(-23.92370f),(-24.67210f),(-25.37850f),(-26.04000f),(-26.65360f),(-27.21660f),(-27.72640f),(-28.18020f),(-28.57560f),(-28.91030f),(-29.18190f),(-29.38840f),(-29.52790f),(-29.59840f),(-29.59830f),(-29.52620f),(-29.38080f),(-29.16090f),(-28.86550f),(-28.49400f),(-28.04570f),(-27.52040f),(-26.91790f),(-26.23830f),(-25.48180f),(-24.64910f),(-23.74080f),(-22.75790f),(-21.70150f),(-20.57300f),(-19.37420f),(-18.10670f),(-16.77270f),(-15.37450f),(-13.91440f),(-12.39530f),(-10.82000f),(-9.19150f),(-7.51330f),(-5.78870f),(-4.02140f),(-2.21530f),(-0.37430f),1.49730f,3.39540f,5.31560f,7.25320f};
static const float Tables_nsine_c2[129] = {(-0.48440f),(-1.45200f),(-2.41610f),(-3.37440f),(-4.32460f),(-5.26440f),(-6.19150f),(-7.10360f),(-7.99870f),(-8.87450f),(-9.72890f),(-10.55980f),(-11.36540f),(-12.14350f),(-12.89240f),(-13.61030f),(-14.29530f),(-14.94590f),(-15.56050f),(-16.13760f),(-16.67590f),(-17.17390f),(-17.63060f),(-18.04480f),(-18.41560f),(-18.74190f),(-19.02320f),(-19.25860f),(-19.44760f),(-19.58970f),(-19.68470f),(-19.73220f),(-19.73220f),(-19.68470f),(-19.58970f),(-19.44760f),(-19.25860f),(-19.02320f),(-18.74190f),(-18.41560f),(-18.04480f),(-17.63060f),(-17.17390f),(-16.67590f),(-16.13760f),(-15.56050f),(-14.94590f),(-14.29530f),(-13.61030f),(-12.89240f),(-12.14350f),(-11.36540f),(-10.55980f),(-9.72890f),(-8.87450f),(-7.99870f),(-7.10360f),(-6.19150f),(-5.26440f),(-4.32460f),(-3.37440f),(-2.41610f),(-1.45200f),(-0.48440f),0.48440f,1.45200f,2.41610f,3.37440f,4.32460f,5.26440f,6.19150f,7.10360f,7.99870f,8.87450f,9.72890f,10.55980f,11.36540f,12.14350f,12.89240f,13.61030f,14.29530f,14.94590f,15.56050f,16.13760f,16.67590f,17.17390f,17.63060f,18.04480f,18.41560f,18.74190f,19.02320f,19.25860f,19.44760f,19.58970f,19.68470f,19.73220f,19.73220f,19.68470f,19.58970f,19.44760f,19.25860f,19.02320f,18.74190f,18.41560f,18.04480f,17.63060f,17.17390f,16.67590f,16.13760f,15.56050f,14.94590f,14.29530f,13.61030f,12.89240f,12.14350f,11.36540f,10.55980f,9.72890f,8.87450f,7.99870f,7.10360f,6.19150f,5.26440f,4.32460f,3.37440f,2.41610f,1.45200f,0.48440f,(-0.48440f)};
float Tables_nsine(float x);

typedef struct Phase__ctx_type_0 {
   float rate;
   float phase;
   Util__ctx_type_0 _inst92;
   Util__ctx_type_1 _inst90;
} Phase__ctx_type_0;

typedef Phase__ctx_type_0 Phase_process_type;

void Phase__ctx_type_0_init(Phase__ctx_type_0 &_output_);

void Phase_process_init(Phase__ctx_type_0 &_output_);

float Phase_process(Phase__ctx_type_0 &_ctx, float cv, float reset);

typedef Phase__ctx_type_0 Phase_noteOn_type;

void Phase_noteOn_init(Phase__ctx_type_0 &_output_);

void Phase_noteOn(Phase__ctx_type_0 &_ctx, int note, int velocity, int channel);

typedef Phase__ctx_type_0 Phase_noteOff_type;

void Phase_noteOff_init(Phase__ctx_type_0 &_output_);

void Phase_noteOff(Phase__ctx_type_0 &_ctx, int note, int channel);

typedef Phase__ctx_type_0 Phase_controlChange_type;

void Phase_controlChange_init(Phase__ctx_type_0 &_output_);

void Phase_controlChange(Phase__ctx_type_0 &_ctx, int control, int value, int channel);

typedef Phase__ctx_type_0 Phase_default_type;

void Phase_default_init(Phase__ctx_type_0 &_output_);

void Phase_default(Phase__ctx_type_0 &_ctx);

typedef struct Blit__ctx_type_0 {
   float scale;
   int m;
   Util__ctx_type_1 _inst101;
} Blit__ctx_type_0;

typedef Blit__ctx_type_0 Blit_pulse_train_type;

void Blit__ctx_type_0_init(Blit__ctx_type_0 &_output_);

void Blit_pulse_train_init(Blit__ctx_type_0 &_output_);

float Blit_pulse_train(Blit__ctx_type_0 &_ctx, float cv, float phase);

typedef Blit__ctx_type_0 Blit_pulse_start_type;

void Blit_pulse_start_init(Blit__ctx_type_0 &_output_);

void Blit_pulse_start(Blit__ctx_type_0 &_ctx);

typedef struct Blit__ctx_type_1 {
   float state_saw;
   float state_pulse;
   float rate;
   float output;
   Util__ctx_type_3 _inst117;
   Blit__ctx_type_0 _inst114;
   Blit__ctx_type_0 _inst113;
   Phase__ctx_type_0 _inst111;
   Util__ctx_type_1 _inst109;
} Blit__ctx_type_1;

typedef Blit__ctx_type_1 Blit_osc_blit_type;

void Blit__ctx_type_1_init(Blit__ctx_type_1 &_output_);

void Blit_osc_blit_init(Blit__ctx_type_1 &_output_);

float Blit_osc_blit(Blit__ctx_type_1 &_ctx, float cv, float pw, float wave);

typedef Blit__ctx_type_1 Blit_init_type;

void Blit_init_init(Blit__ctx_type_1 &_output_);

void Blit_init(Blit__ctx_type_1 &_ctx);

typedef struct Blit__ctx_type_2 {
   Blit__ctx_type_1 _inst120;
} Blit__ctx_type_2;

typedef Blit__ctx_type_2 Blit_process_type;

void Blit__ctx_type_2_init(Blit__ctx_type_2 &_output_);

void Blit_process_init(Blit__ctx_type_2 &_output_);

float Blit_process(Blit__ctx_type_2 &_ctx, float cv, float pw, float wave);

typedef Blit__ctx_type_2 Blit_noteOn_type;

void Blit_noteOn_init(Blit__ctx_type_2 &_output_);

void Blit_noteOn(Blit__ctx_type_2 &_ctx, int note, int velocity, int channel);

typedef Blit__ctx_type_2 Blit_noteOff_type;

void Blit_noteOff_init(Blit__ctx_type_2 &_output_);

void Blit_noteOff(Blit__ctx_type_2 &_ctx, int note, int channel);

typedef Blit__ctx_type_2 Blit_controlChange_type;

void Blit_controlChange_init(Blit__ctx_type_2 &_output_);

void Blit_controlChange(Blit__ctx_type_2 &_ctx, int control, int value, int channel);

typedef Blit__ctx_type_2 Blit_default_type;

void Blit_default_init(Blit__ctx_type_2 &_output_);

void Blit_default(Blit__ctx_type_2 &_ctx);

typedef struct Adsr__ctx_type_0 {
   float target;
   int state;
   float scale;
   float rate;
   float out;
   Util__ctx_type_4 _inst140;
   Util__ctx_type_0 _inst133;
} Adsr__ctx_type_0;

typedef Adsr__ctx_type_0 Adsr_do_type;

void Adsr__ctx_type_0_init(Adsr__ctx_type_0 &_output_);

void Adsr_do_init(Adsr__ctx_type_0 &_output_);

float Adsr_do(Adsr__ctx_type_0 &_ctx, float gate, float a, float d, float s, float r);

typedef struct Adsr__ctx_type_1 {
   float knob4;
   float knob3;
   float knob2;
   float knob1;
   Adsr__ctx_type_0 _inst142;
} Adsr__ctx_type_1;

typedef Adsr__ctx_type_1 Adsr_process_type;

void Adsr__ctx_type_1_init(Adsr__ctx_type_1 &_output_);

void Adsr_process_init(Adsr__ctx_type_1 &_output_);

float Adsr_process(Adsr__ctx_type_1 &_ctx, float gate);

typedef Adsr__ctx_type_1 Adsr_noteOn_type;

void Adsr_noteOn_init(Adsr__ctx_type_1 &_output_);

void Adsr_noteOn(Adsr__ctx_type_1 &_ctx, int note, int velocity, int channel);

typedef Adsr__ctx_type_1 Adsr_noteOff_type;

void Adsr_noteOff_init(Adsr__ctx_type_1 &_output_);

void Adsr_noteOff(Adsr__ctx_type_1 &_ctx, int note, int channel);

typedef Adsr__ctx_type_1 Adsr_controlChange_type;

void Adsr_controlChange_init(Adsr__ctx_type_1 &_output_);

void Adsr_controlChange(Adsr__ctx_type_1 &_ctx, int control, int value, int channel);

typedef Adsr__ctx_type_1 Adsr_default_type;

void Adsr_default_init(Adsr__ctx_type_1 &_output_);

void Adsr_default(Adsr__ctx_type_1 &_ctx);

typedef struct Voice_4__ctx_type_0 {
   float sustain;
   float release;
   float pw4;
   float pw3;
   float pw2;
   float pw1;
   float lfo_shape;
   float lfo_reset;
   float lfo_rate;
   float lfo_pw;
   float lfo_flt;
   float lfo_cv;
   float level4;
   float level3;
   float level2;
   float level1;
   int flt_shape;
   float flt_res;
   float flt_cut;
   float decay;
   float attack;
   Adsr__ctx_type_0 _inst169;
   Svf__ctx_type_1 _inst168;
   Tricore__ctx_type_0 _inst167;
   Blit__ctx_type_2 _inst166;
   Blit__ctx_type_2 _inst165;
   Blit__ctx_type_2 _inst164;
   Lfo__ctx_type_1 _inst163;
} Voice_4__ctx_type_0;

typedef Voice_4__ctx_type_0 Voice_4_process_type;

void Voice_4__ctx_type_0_init(Voice_4__ctx_type_0 &_output_);

void Voice_4_process_init(Voice_4__ctx_type_0 &_output_);

float Voice_4_process(Voice_4__ctx_type_0 &_ctx, float cv, float vel, float gate);

typedef Voice_4__ctx_type_0 Voice_4_noteOn_type;

void Voice_4_noteOn_init(Voice_4__ctx_type_0 &_output_);

void Voice_4_noteOn(Voice_4__ctx_type_0 &_ctx, int note, int velocity, int channel);

typedef Voice_4__ctx_type_0 Voice_4_noteOff_type;

void Voice_4_noteOff_init(Voice_4__ctx_type_0 &_output_);

void Voice_4_noteOff(Voice_4__ctx_type_0 &_ctx, int note, int channel);

typedef Voice_4__ctx_type_0 Voice_4_controlChange_type;

void Voice_4_controlChange_init(Voice_4__ctx_type_0 &_output_);

void Voice_4_controlChange(Voice_4__ctx_type_0 &_ctx, int control, int value, int channel);

typedef Voice_4__ctx_type_0 Voice_4_default_type;

void Voice_4_default_init(Voice_4__ctx_type_0 &_output_);

void Voice_4_default(Voice_4__ctx_type_0 &_ctx);



#endif // VOICE_4_H
