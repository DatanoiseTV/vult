
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#ifndef VOICE_4_H
#define VOICE_4_H
#include <stdint.h>
#include <math.h>
#include "vultin.h"

typedef struct Util__ctx_type_0 {
   uint8_t pre;
} Util__ctx_type_0;

typedef Util__ctx_type_0 Util_edge_type;

void Util__ctx_type_0_init(Util__ctx_type_0 &_output_);

void Util_edge_init(Util__ctx_type_0 &_output_);

uint8_t Util_edge(Util__ctx_type_0 &_ctx, uint8_t x);

typedef struct Util__ctx_type_1 {
   float pre_x;
} Util__ctx_type_1;

typedef Util__ctx_type_1 Util_change_type;

void Util__ctx_type_1_init(Util__ctx_type_1 &_output_);

void Util_change_init(Util__ctx_type_1 &_output_);

uint8_t Util_change(Util__ctx_type_1 &_ctx, float x);

float Util_map(float x, float x0, float x1, float y0, float y1);

typedef struct Util__ctx_type_3 {
   float y1;
   float x1;
} Util__ctx_type_3;

typedef Util__ctx_type_3 Util_dcblock_type;

void Util__ctx_type_3_init(Util__ctx_type_3 &_output_);

void Util_dcblock_init(Util__ctx_type_3 &_output_);

float Util_dcblock(Util__ctx_type_3 &_ctx, float x0);

typedef struct Util__ctx_type_4 {
   float x;
} Util__ctx_type_4;

typedef Util__ctx_type_4 Util_smooth_type;

void Util__ctx_type_4_init(Util__ctx_type_4 &_output_);

void Util_smooth_init(Util__ctx_type_4 &_output_);

float Util_smooth(Util__ctx_type_4 &_ctx, float input);

typedef struct Util__ctx_type_5 {
   float x0;
} Util__ctx_type_5;

typedef Util__ctx_type_5 Util_average2_type;

void Util__ctx_type_5_init(Util__ctx_type_5 &_output_);

void Util_average2_init(Util__ctx_type_5 &_output_);

float Util_average2(Util__ctx_type_5 &_ctx, float x1);

float Util_cubic_clipper(float x);

static const float Util_pitchToRate_1024_c0[33] = {0.189842f,0.191326f,0.198689f,0.219425f,0.265677f,0.356438f,0.520651f,0.801560f,1.262758f,1.996562f,3.135544f,4.868346f,7.461279f,11.287725f,16.868007f,24.923329f,36.448518f,52.809890f,75.876604f,108.196579f,153.231618f,215.671056f,301.849428f,420.301718f,582.500346f,803.831942f,1104.890093f,1513.184032f,2065.394252f,2810.346575f,3812.929069f,5159.245173f,6963.386226f};
static const float Util_pitchToRate_1024_c1[33] = {0.010913f,0.010176f,0.008334f,0.004867f,(-0.000939f),(-0.010061f),(-0.023820f),(-0.044002f),(-0.073002f),(-0.114025f),(-0.171341f),(-0.250621f),(-0.359381f),(-0.507548f),(-0.708208f),(-0.978576f),(-1.341250f),(-1.825848f),(-2.471123f),(-3.327701f),(-4.461631f),(-5.958970f),(-7.931709f),(-10.525422f),(-13.929139f),(-18.388075f),(-24.220033f),(-31.836533f),(-41.769999f),(-54.708756f),(-71.542010f),(-93.417674f),(-121.816648f)};
static const float Util_pitchToRate_1024_c2[33] = {0.000356f,0.000447f,0.000562f,0.000707f,0.000889f,0.001119f,0.001407f,0.001769f,0.002225f,0.002799f,0.003520f,0.004426f,0.005567f,0.007001f,0.008805f,0.011074f,0.013927f,0.017515f,0.022028f,0.027703f,0.034841f,0.043818f,0.055108f,0.069306f,0.087163f,0.109620f,0.137864f,0.173384f,0.218056f,0.274238f,0.344895f,0.433757f,0.545514f};
float Util_pitchToRate_1024(float pitch);

static const float Util_pitchToRate_c0[33] = {0.000185f,0.000187f,0.000194f,0.000214f,0.000259f,0.000348f,0.000508f,0.000783f,0.001233f,0.001950f,0.003062f,0.004754f,0.007286f,0.011023f,0.016473f,0.024339f,0.035594f,0.051572f,0.074098f,0.105661f,0.149640f,0.210616f,0.294775f,0.410451f,0.568848f,0.784992f,1.078994f,1.477719f,2.016987f,2.744479f,3.723564f,5.038325f,6.800182f};
static const float Util_pitchToRate_c1[33] = {0.000011f,0.000010f,0.000008f,0.000005f,(-0.000001f),(-0.000010f),(-0.000023f),(-0.000043f),(-0.000071f),(-0.000111f),(-0.000167f),(-0.000245f),(-0.000351f),(-0.000496f),(-0.000692f),(-0.000956f),(-0.001310f),(-0.001783f),(-0.002413f),(-0.003250f),(-0.004357f),(-0.005819f),(-0.007746f),(-0.010279f),(-0.013603f),(-0.017957f),(-0.023652f),(-0.031090f),(-0.040791f),(-0.053427f),(-0.069865f),(-0.091228f),(-0.118962f)};
static const float Util_pitchToRate_c2[33] = {0.000000f,0.000000f,0.000001f,0.000001f,0.000001f,0.000001f,0.000001f,0.000002f,0.000002f,0.000003f,0.000003f,0.000004f,0.000005f,0.000007f,0.000009f,0.000011f,0.000014f,0.000017f,0.000022f,0.000027f,0.000034f,0.000043f,0.000054f,0.000068f,0.000085f,0.000107f,0.000135f,0.000169f,0.000213f,0.000268f,0.000337f,0.000424f,0.000533f};
float Util_pitchToRate(float pitch);

float Util_cvToPitch(float cv);

static const float Util_cvToRate_1024_c0[33] = {0.759367f,0.762877f,0.779737f,0.825652f,0.924648f,1.112398f,1.440687f,1.983392f,2.844434f,4.168311f,6.153994f,9.073195f,13.294298f,19.313614f,27.796102f,39.628263f,55.986716f,78.426878f,108.997433f,150.387804f,206.117798f,280.781091f,380.357333f,512.611648f,687.605268f,918.347360f,1221.626080f,1619.066843f,2138.478452f,2815.563557f,3696.089822f,4838.643251f,6318.116516f};
static const float Util_cvToRate_1024_c1[33] = {5.245583f,4.998943f,4.403089f,3.319116f,1.564497f,(-1.099256f),(-4.982226f),(-10.485864f),(-18.127956f),(-28.574102f),(-42.677365f),(-61.528130f),(-86.516746f),(-119.412143f),(-162.460392f),(-218.508148f),(-291.157147f),(-384.957361f),(-505.648347f),(-660.460542f),(-858.491160f),(-1111.172835f),(-1432.857517f),(-1841.543534f),(-2359.780392f),(-3015.794142f),(-3844.886359f),(-4891.172353f),(-6209.739876f),(-7869.328765f),(-9955.655805f),(-12575.538397f),(-15862.006882f)};
static const float Util_cvToRate_1024_c2[33] = {20.125592f,24.457572f,29.722000f,36.119582f,43.894227f,53.342343f,64.824142f,78.777368f,95.733988f,116.340476f,141.382456f,171.814657f,208.797308f,253.740378f,308.357324f,374.730424f,455.390158f,553.411688f,672.532093f,817.292850f,993.212978f,1206.999450f,1466.802895f,1782.528345f,2166.212866f,2632.484466f,3199.119798f,3887.721889f,4724.543762f,5741.489334f,6977.329755f,8479.181564f,10304.303011f};
float Util_cvToRate_1024(float cv);

static const float Util_cvToRate_c0[129] = {0.000742f,0.000742f,0.000742f,0.000742f,0.000743f,0.000744f,0.000747f,0.000749f,0.000754f,0.000759f,0.000766f,0.000775f,0.000786f,0.000800f,0.000816f,0.000836f,0.000860f,0.000889f,0.000922f,0.000961f,0.001007f,0.001060f,0.001120f,0.001190f,0.001270f,0.001360f,0.001463f,0.001580f,0.001712f,0.001860f,0.002027f,0.002214f,0.002423f,0.002657f,0.002917f,0.003207f,0.003528f,0.003885f,0.004280f,0.004717f,0.005200f,0.005732f,0.006319f,0.006964f,0.007674f,0.008453f,0.009308f,0.010245f,0.011272f,0.012395f,0.013622f,0.014963f,0.016427f,0.018023f,0.019763f,0.021659f,0.023722f,0.025966f,0.028405f,0.031056f,0.033934f,0.037057f,0.040444f,0.044117f,0.048096f,0.052405f,0.057070f,0.062118f,0.067577f,0.073479f,0.079856f,0.086744f,0.094181f,0.102209f,0.110870f,0.120210f,0.130281f,0.141134f,0.152828f,0.165422f,0.178982f,0.193578f,0.209283f,0.226178f,0.244346f,0.263878f,0.284871f,0.307428f,0.331660f,0.357683f,0.385623f,0.415614f,0.447799f,0.482330f,0.519370f,0.559091f,0.601678f,0.647329f,0.696253f,0.748675f,0.804832f,0.864979f,0.929386f,0.998343f,1.072156f,1.151153f,1.235683f,1.326117f,1.422851f,1.526306f,1.636930f,1.755200f,1.881624f,2.016743f,2.161133f,2.315406f,2.480212f,2.656246f,2.844245f,3.044993f,3.259324f,3.488126f,3.732342f,3.992976f,4.271094f,4.567832f,4.884395f,5.222065f,5.582204f};
static const float Util_cvToRate_c1[129] = {0.005139f,0.005126f,0.005099f,0.005057f,0.004997f,0.004920f,0.004821f,0.004701f,0.004557f,0.004386f,0.004187f,0.003958f,0.003695f,0.003395f,0.003057f,0.002677f,0.002250f,0.001775f,0.001246f,0.000661f,0.000013f,(-0.000701f),(-0.001486f),(-0.002347f),(-0.003291f),(-0.004324f),(-0.005451f),(-0.006681f),(-0.008019f),(-0.009475f),(-0.011056f),(-0.012771f),(-0.014630f),(-0.016643f),(-0.018820f),(-0.021173f),(-0.023715f),(-0.026457f),(-0.029414f),(-0.032601f),(-0.036033f),(-0.039726f),(-0.043698f),(-0.047968f),(-0.052555f),(-0.057481f),(-0.062767f),(-0.068439f),(-0.074520f),(-0.081038f),(-0.088022f),(-0.095500f),(-0.103507f),(-0.112074f),(-0.121240f),(-0.131041f),(-0.141519f),(-0.152717f),(-0.164680f),(-0.177457f),(-0.191100f),(-0.205662f),(-0.221203f),(-0.237783f),(-0.255468f),(-0.274326f),(-0.294430f),(-0.315858f),(-0.338692f),(-0.363020f),(-0.388932f),(-0.416527f),(-0.445908f),(-0.477186f),(-0.510475f),(-0.545899f),(-0.583588f),(-0.623681f),(-0.666322f),(-0.711667f),(-0.759879f),(-0.811132f),(-0.865609f),(-0.923505f),(-0.985024f),(-1.050385f),(-1.119817f),(-1.193565f),(-1.271886f),(-1.355053f),(-1.443355f),(-1.537097f),(-1.636603f),(-1.742213f),(-1.854291f),(-1.973218f),(-2.099400f),(-2.233263f),(-2.375261f),(-2.525872f),(-2.685603f),(-2.854988f),(-3.034594f),(-3.225018f),(-3.426895f),(-3.640891f),(-3.867716f),(-4.108116f),(-4.362881f),(-4.632847f),(-4.918896f),(-5.221962f),(-5.543032f),(-5.883146f),(-6.243407f),(-6.624979f),(-7.029092f),(-7.457046f),(-7.910214f),(-8.390047f),(-8.898078f),(-9.435927f),(-10.005306f),(-10.608022f),(-11.245984f),(-11.921211f),(-12.635832f),(-13.392100f),(-14.192391f)};
static const float Util_cvToRate_c2[129] = {0.018255f,0.019167f,0.020124f,0.021129f,0.022184f,0.023292f,0.024455f,0.025677f,0.026959f,0.028306f,0.029719f,0.031204f,0.032762f,0.034398f,0.036116f,0.037920f,0.039814f,0.041802f,0.043890f,0.046082f,0.048384f,0.050800f,0.053338f,0.056001f,0.058798f,0.061735f,0.064818f,0.068056f,0.071455f,0.075023f,0.078770f,0.082704f,0.086835f,0.091172f,0.095725f,0.100506f,0.105526f,0.110796f,0.116330f,0.122140f,0.128240f,0.134645f,0.141370f,0.148430f,0.155843f,0.163627f,0.171799f,0.180379f,0.189388f,0.198847f,0.208778f,0.219206f,0.230154f,0.241649f,0.253717f,0.266389f,0.279694f,0.293663f,0.308329f,0.323729f,0.339897f,0.356873f,0.374697f,0.393410f,0.413059f,0.433689f,0.455349f,0.478091f,0.501969f,0.527039f,0.553362f,0.580999f,0.610016f,0.640483f,0.672471f,0.706057f,0.741321f,0.778345f,0.817219f,0.858034f,0.900888f,0.945882f,0.993123f,1.042724f,1.094802f,1.149481f,1.206890f,1.267168f,1.330455f,1.396903f,1.466670f,1.539922f,1.616832f,1.697583f,1.782367f,1.871386f,1.964851f,2.062983f,2.166017f,2.274197f,2.387780f,2.507035f,2.632247f,2.763712f,2.901743f,3.046668f,3.198831f,3.358594f,3.526336f,3.702455f,3.887371f,4.081522f,4.285370f,4.499399f,4.724117f,4.960059f,5.207785f,5.467883f,5.740971f,6.027699f,6.328746f,6.644830f,6.976700f,7.325145f,7.690992f,8.075112f,8.478416f,8.901863f,9.346458f};
float Util_cvToRate(float cv);

float Util_pitchToCv(float pitch);

static const float Util_cvToperiod_c0[33] = {674.246035f,671.553838f,662.761782f,646.759522f,623.799428f,594.871802f,561.298277f,524.476942f,485.731369f,446.229382f,406.947440f,368.663774f,331.968683f,297.284156f,264.887666f,234.936857f,207.493124f,182.543016f,160.016907f,139.804832f,121.769557f,105.757117f,91.605116f,79.149088f,68.227249f,58.683895f,50.371734f,43.153355f,36.902033f,31.502025f,26.848494f,22.847166f,19.413794f};
static const float Util_cvToperiod_c1[33] = {(-4656.656311f),(-4481.960579f),(-4198.686133f),(-3855.751543f),(-3487.139455f),(-3115.858821f),(-2756.930319f),(-2419.625141f),(-2109.134753f),(-1827.808334f),(-1576.062963f),(-1353.047092f),(-1157.118864f),(-986.186250f),(-837.944665f),(-710.039113f),(-600.171234f),(-506.166566f),(-426.013463f),(-357.882151f),(-300.130190f),(-251.298904f),(-210.104105f),(-175.423450f),(-146.282114f),(-121.837895f),(-101.366537f),(-84.247726f),(-69.952082f),(-58.029259f),(-48.097248f),(-39.832833f),(-32.963186f)};
static const float Util_cvToperiod_c2[33] = {14548.823162f,11715.369522f,9433.744675f,7596.477297f,6117.026622f,4925.706117f,3966.401040f,3193.925264f,2571.892879f,2071.004308f,1667.666208f,1342.880152f,1081.347751f,870.750049f,701.167268f,564.611553f,454.650724f,366.105298f,294.804521f,237.389916f,191.157082f,153.928316f,123.950032f,99.810164f,80.371652f,64.718885f,52.114569f,41.965005f,33.792117f,27.210939f,21.911477f,17.644111f,14.207835f};
float Util_cvToperiod(float cv);

static const float Util_cvTokHz_c0[33] = {0.032703f,0.032916f,0.033958f,0.036857f,0.043242f,0.055616f,0.077724f,0.115069f,0.175614f,0.270739f,0.416537f,0.635567f,0.959207f,1.430818f,2.109960f,3.078021f,4.445697f,6.362909f,9.031922f,12.724677f,17.805619f,24.761735f,34.241990f,47.109042f,64.506928f,87.949557f,119.436234f,161.602273f,217.915148f,292.929619f,392.619240f,524.806645f,699.721497f};
static const float Util_cvTokHz_c1[33] = {0.225719f,0.212293f,0.179169f,0.117605f,0.015780f,(-0.142178f),(-0.377466f),(-0.718250f),(-1.201797f),(-1.877228f),(-2.809077f),(-4.081867f),(-5.806008f),(-8.125373f),(-11.227028f),(-15.353705f),(-20.819795f),(-28.031798f),(-37.514503f),(-49.944414f),(-66.192449f),(-87.378404f),(-114.940396f),(-150.723337f),(-197.091584f),(-257.072284f),(-334.537674f),(-434.436788f),(-563.089817f),(-728.561858f),(-941.137258f),(-1213.921328f),(-1563.603302f)};
static const float Util_cvTokHz_c2[33] = {0.876338f,1.088287f,1.351498f,1.678368f,2.084294f,2.588397f,3.214421f,3.991854f,4.957315f,6.156280f,7.645225f,9.494282f,11.790549f,14.642185f,18.183512f,22.581336f,28.042809f,34.825181f,43.247923f,53.707771f,66.697415f,82.828706f,102.861476f,127.739327f,158.634081f,197.000973f,244.647198f,303.817033f,377.297556f,468.549918f,581.872376f,722.602756f,897.369877f};
float Util_cvTokHz(float cv);

typedef struct Tricore__ctx_type_0 {
   uint8_t reset_state;
   float reset_phase;
   float rate;
   float phase;
   uint8_t direction;
   Util__ctx_type_0 _inst26;
   Util__ctx_type_0 _inst25;
   Util__ctx_type_1 _inst23;
} Tricore__ctx_type_0;

typedef Tricore__ctx_type_0 Tricore_process_type;

void Tricore__ctx_type_0_init(Tricore__ctx_type_0 &_output_);

void Tricore_process_init(Tricore__ctx_type_0 &_output_);

float Tricore_process(Tricore__ctx_type_0 &_ctx, float cv, float reset, float disable);

typedef Tricore__ctx_type_0 Tricore_noteOn_type;

void Tricore_noteOn_init(Tricore__ctx_type_0 &_output_);

void Tricore_noteOn(Tricore__ctx_type_0 &_ctx, int note, int velocity, int channel);

typedef Tricore__ctx_type_0 Tricore_noteOff_type;

void Tricore_noteOff_init(Tricore__ctx_type_0 &_output_);

void Tricore_noteOff(Tricore__ctx_type_0 &_ctx, int note, int channel);

typedef Tricore__ctx_type_0 Tricore_controlChange_type;

void Tricore_controlChange_init(Tricore__ctx_type_0 &_output_);

void Tricore_controlChange(Tricore__ctx_type_0 &_ctx, int control, int value, int channel);

typedef Tricore__ctx_type_0 Tricore_default_type;

void Tricore_default_init(Tricore__ctx_type_0 &_output_);

void Tricore_default(Tricore__ctx_type_0 &_ctx);

static const float Saturate_soft_table_c0[242] = {(-4.197917f),(-4.080173f),(-3.962794f),(-3.845833f),(-3.729341f),(-3.613374f),(-3.497985f),(-3.383231f),(-3.269167f),(-3.155849f),(-3.043337f),(-2.931686f),(-2.820957f),(-2.711206f),(-2.602494f),(-2.494880f),(-2.388423f),(-2.283182f),(-2.179217f),(-2.076588f),(-1.975353f),(-1.875572f),(-1.777302f),(-1.680602f),(-1.585529f),(-1.492139f),(-1.400487f),(-1.310629f),(-1.222617f),(-1.136504f),(-1.052340f),(-0.970174f),(-0.890054f),(-0.812026f),(-0.736132f),(-0.662415f),(-0.590914f),(-0.521666f),(-0.454705f),(-0.390062f),(-0.327768f),(-0.267847f),(-0.210323f),(-0.155215f),(-0.102540f),(-0.052312f),(-0.004538f),0.040774f,0.083623f,0.124011f,0.161943f,0.197429f,0.230483f,0.261122f,0.289369f,0.315250f,0.338794f,0.360037f,0.379017f,0.395778f,0.410364f,0.422829f,0.433226f,0.441614f,0.448056f,0.452617f,0.455367f,0.456378f,0.455727f,0.453492f,0.449754f,0.444597f,0.438108f,0.430373f,0.421483f,0.411529f,0.400602f,0.388794f,0.376201f,0.362913f,0.349024f,0.334626f,0.319811f,0.304668f,0.289285f,0.273749f,0.258143f,0.242548f,0.227042f,0.211699f,0.196590f,0.181783f,0.167338f,0.153314f,0.139765f,0.126738f,0.114276f,0.102417f,0.091192f,0.080628f,0.070746f,0.061560f,0.053080f,0.045309f,0.038244f,0.031879f,0.026199f,0.021186f,0.016817f,0.013061f,0.009886f,0.007254f,0.005123f,0.003447f,0.002177f,0.001261f,0.000644f,0.000269f,0.000077f,0.000008f,0.000000f,(-0.000008f),(-0.000077f),(-0.000269f),(-0.000644f),(-0.001261f),(-0.002177f),(-0.003447f),(-0.005123f),(-0.007254f),(-0.009886f),(-0.013061f),(-0.016817f),(-0.021186f),(-0.026199f),(-0.031879f),(-0.038244f),(-0.045309f),(-0.053080f),(-0.061560f),(-0.070746f),(-0.080628f),(-0.091192f),(-0.102417f),(-0.114276f),(-0.126738f),(-0.139765f),(-0.153314f),(-0.167338f),(-0.181783f),(-0.196590f),(-0.211699f),(-0.227042f),(-0.242548f),(-0.258143f),(-0.273749f),(-0.289285f),(-0.304668f),(-0.319811f),(-0.334626f),(-0.349024f),(-0.362913f),(-0.376201f),(-0.388794f),(-0.400602f),(-0.411529f),(-0.421483f),(-0.430373f),(-0.438108f),(-0.444597f),(-0.449754f),(-0.453492f),(-0.455727f),(-0.456378f),(-0.455367f),(-0.452617f),(-0.448056f),(-0.441614f),(-0.433226f),(-0.422829f),(-0.410364f),(-0.395778f),(-0.379017f),(-0.360037f),(-0.338794f),(-0.315250f),(-0.289369f),(-0.261122f),(-0.230483f),(-0.197429f),(-0.161943f),(-0.124011f),(-0.083623f),(-0.040774f),0.004538f,0.052312f,0.102540f,0.155215f,0.210323f,0.267847f,0.327768f,0.390062f,0.454705f,0.521666f,0.590914f,0.662415f,0.736132f,0.812026f,0.890054f,0.970174f,1.052340f,1.136504f,1.222617f,1.310629f,1.400487f,1.492139f,1.585529f,1.680602f,1.777302f,1.875572f,1.975353f,2.076588f,2.179217f,2.283182f,2.388423f,2.494880f,2.602494f,2.711206f,2.820957f,2.931686f,3.043337f,3.155849f,3.269167f,3.383231f,3.497985f,3.613374f,3.729341f,3.845833f,3.962794f,4.080173f,4.197917f,4.315974f};
static const float Saturate_soft_table_c1[242] = {0.676338f,0.686232f,0.696179f,0.706175f,0.716216f,0.726298f,0.736418f,0.746571f,0.756752f,0.766957f,0.777182f,0.787421f,0.797669f,0.807921f,0.818171f,0.828414f,0.838644f,0.848854f,0.859040f,0.869193f,0.879308f,0.889378f,0.899396f,0.909356f,0.919249f,0.929069f,0.938808f,0.948458f,0.958013f,0.967463f,0.976802f,0.986021f,0.995112f,1.004066f,1.012877f,1.021534f,1.030031f,1.038359f,1.046509f,1.054474f,1.062244f,1.069813f,1.077171f,1.084311f,1.091226f,1.097906f,1.104345f,1.110536f,1.116470f,1.122142f,1.127545f,1.132672f,1.137517f,1.142075f,1.146340f,1.150308f,1.153973f,1.157332f,1.160381f,1.163118f,1.165538f,1.167642f,1.169426f,1.170891f,1.172035f,1.172860f,1.173366f,1.173556f,1.173431f,1.172995f,1.172251f,1.171205f,1.169861f,1.168225f,1.166305f,1.164107f,1.161641f,1.158915f,1.155939f,1.152723f,1.149279f,1.145619f,1.141754f,1.137699f,1.133466f,1.129071f,1.124528f,1.119853f,1.115062f,1.110170f,1.105195f,1.100154f,1.095064f,1.089943f,1.084808f,1.079678f,1.074570f,1.069502f,1.064492f,1.059557f,1.054716f,1.049986f,1.045382f,1.040923f,1.036623f,1.032499f,1.028565f,1.024836f,1.021326f,1.018046f,1.015009f,1.012227f,1.009709f,1.007465f,1.005504f,1.003831f,1.002454f,1.001378f,1.000606f,1.000142f,0.999987f,1.000142f,1.000606f,1.001378f,1.002454f,1.003831f,1.005504f,1.007465f,1.009709f,1.012227f,1.015009f,1.018046f,1.021326f,1.024836f,1.028565f,1.032499f,1.036623f,1.040923f,1.045382f,1.049986f,1.054716f,1.059557f,1.064492f,1.069502f,1.074570f,1.079678f,1.084808f,1.089943f,1.095064f,1.100154f,1.105195f,1.110170f,1.115062f,1.119853f,1.124528f,1.129071f,1.133466f,1.137699f,1.141754f,1.145619f,1.149279f,1.152723f,1.155939f,1.158915f,1.161641f,1.164107f,1.166305f,1.168225f,1.169861f,1.171205f,1.172251f,1.172995f,1.173431f,1.173556f,1.173366f,1.172860f,1.172035f,1.170891f,1.169426f,1.167642f,1.165538f,1.163118f,1.160381f,1.157332f,1.153973f,1.150308f,1.146340f,1.142075f,1.137517f,1.132672f,1.127545f,1.122142f,1.116470f,1.110536f,1.104345f,1.097906f,1.091226f,1.084311f,1.077171f,1.069813f,1.062244f,1.054474f,1.046509f,1.038359f,1.030031f,1.021534f,1.012877f,1.004066f,0.995112f,0.986021f,0.976802f,0.967463f,0.958013f,0.948458f,0.938808f,0.929069f,0.919249f,0.909356f,0.899396f,0.889378f,0.879308f,0.869193f,0.859040f,0.848854f,0.838644f,0.828414f,0.818171f,0.807921f,0.797669f,0.787421f,0.777182f,0.766957f,0.756752f,0.746571f,0.736418f,0.726298f,0.716216f,0.706175f,0.696179f,0.686232f,0.676338f,0.666500f};
static const float Saturate_soft_table_c2[242] = {0.010326f,0.010534f,0.010744f,0.010958f,0.011174f,0.011393f,0.011615f,0.011840f,0.012067f,0.012297f,0.012529f,0.012764f,0.013001f,0.013240f,0.013482f,0.013726f,0.013972f,0.014219f,0.014469f,0.014720f,0.014972f,0.015227f,0.015482f,0.015738f,0.015996f,0.016254f,0.016513f,0.016772f,0.017031f,0.017290f,0.017549f,0.017808f,0.018066f,0.018323f,0.018578f,0.018833f,0.019085f,0.019335f,0.019583f,0.019829f,0.020071f,0.020310f,0.020545f,0.020777f,0.021003f,0.021226f,0.021443f,0.021654f,0.021859f,0.022059f,0.022251f,0.022436f,0.022614f,0.022783f,0.022944f,0.023096f,0.023239f,0.023372f,0.023494f,0.023606f,0.023706f,0.023795f,0.023872f,0.023936f,0.023986f,0.024024f,0.024047f,0.024056f,0.024050f,0.024029f,0.023992f,0.023939f,0.023869f,0.023782f,0.023679f,0.023558f,0.023418f,0.023261f,0.023085f,0.022891f,0.022677f,0.022444f,0.022192f,0.021921f,0.021630f,0.021319f,0.020988f,0.020638f,0.020268f,0.019878f,0.019468f,0.019039f,0.018591f,0.018123f,0.017637f,0.017132f,0.016608f,0.016067f,0.015508f,0.014932f,0.014339f,0.013730f,0.013105f,0.012465f,0.011811f,0.011143f,0.010462f,0.009768f,0.009063f,0.008347f,0.007621f,0.006886f,0.006142f,0.005391f,0.004633f,0.003870f,0.003102f,0.002330f,0.001555f,0.000778f,0.000000f,(-0.000778f),(-0.001555f),(-0.002330f),(-0.003102f),(-0.003870f),(-0.004633f),(-0.005391f),(-0.006142f),(-0.006886f),(-0.007621f),(-0.008347f),(-0.009063f),(-0.009768f),(-0.010462f),(-0.011143f),(-0.011811f),(-0.012465f),(-0.013105f),(-0.013730f),(-0.014339f),(-0.014932f),(-0.015508f),(-0.016067f),(-0.016608f),(-0.017132f),(-0.017637f),(-0.018123f),(-0.018591f),(-0.019039f),(-0.019468f),(-0.019878f),(-0.020268f),(-0.020638f),(-0.020988f),(-0.021319f),(-0.021630f),(-0.021921f),(-0.022192f),(-0.022444f),(-0.022677f),(-0.022891f),(-0.023085f),(-0.023261f),(-0.023418f),(-0.023558f),(-0.023679f),(-0.023782f),(-0.023869f),(-0.023939f),(-0.023992f),(-0.024029f),(-0.024050f),(-0.024056f),(-0.024047f),(-0.024024f),(-0.023986f),(-0.023936f),(-0.023872f),(-0.023795f),(-0.023706f),(-0.023606f),(-0.023494f),(-0.023372f),(-0.023239f),(-0.023096f),(-0.022944f),(-0.022783f),(-0.022614f),(-0.022436f),(-0.022251f),(-0.022059f),(-0.021859f),(-0.021654f),(-0.021443f),(-0.021226f),(-0.021003f),(-0.020777f),(-0.020545f),(-0.020310f),(-0.020071f),(-0.019829f),(-0.019583f),(-0.019335f),(-0.019085f),(-0.018833f),(-0.018578f),(-0.018323f),(-0.018066f),(-0.017808f),(-0.017549f),(-0.017290f),(-0.017031f),(-0.016772f),(-0.016513f),(-0.016254f),(-0.015996f),(-0.015738f),(-0.015482f),(-0.015227f),(-0.014972f),(-0.014720f),(-0.014469f),(-0.014219f),(-0.013972f),(-0.013726f),(-0.013482f),(-0.013240f),(-0.013001f),(-0.012764f),(-0.012529f),(-0.012297f),(-0.012067f),(-0.011840f),(-0.011615f),(-0.011393f),(-0.011174f),(-0.010958f),(-0.010744f),(-0.010534f),(-0.010326f),(-0.010121f)};
float Saturate_soft_table(float x);

float Saturate_soft_process(float x);

void Saturate_soft_noteOn(int note, int velocity, int channel);

void Saturate_soft_noteOff(int note, int channel);

void Saturate_soft_controlChange(int control, int value, int channel);

void Saturate_soft_default();

static const float Svf_calc_g_c0[129] = {0.002330f,0.002330f,0.002330f,0.002332f,0.002334f,0.002339f,0.002345f,0.002355f,0.002367f,0.002384f,0.002406f,0.002434f,0.002469f,0.002512f,0.002564f,0.002627f,0.002703f,0.002792f,0.002897f,0.003020f,0.003163f,0.003329f,0.003520f,0.003739f,0.003989f,0.004275f,0.004599f,0.004965f,0.005380f,0.005846f,0.006371f,0.006959f,0.007616f,0.008351f,0.009170f,0.010081f,0.011093f,0.012216f,0.013460f,0.014835f,0.016355f,0.018032f,0.019880f,0.021915f,0.024152f,0.026610f,0.029308f,0.032266f,0.035507f,0.039056f,0.042937f,0.047180f,0.051814f,0.056872f,0.062391f,0.068407f,0.074963f,0.082102f,0.089873f,0.098328f,0.107523f,0.117519f,0.128382f,0.140182f,0.152998f,0.166913f,0.182017f,0.198411f,0.216200f,0.235502f,0.256445f,0.279169f,0.303825f,0.330581f,0.359621f,0.391146f,0.425378f,0.462564f,0.502975f,0.546913f,0.594715f,0.646756f,0.703455f,0.765285f,0.832775f,0.906525f,0.987216f,1.075618f,1.172616f,1.279218f,1.396584f,1.526056f,1.669182f,1.827767f,2.003915f,2.200094f,2.419208f,2.664689f,2.940615f,3.251849f,3.604226f,4.004772f,4.462003f,4.986296f,5.590369f,6.289910f,7.104406f,8.058233f,9.182127f,10.515167f,12.107495f,14.024086f,16.350050f,19.198183f,22.719924f,27.121506f,32.688246f,39.821863f,49.099200f,61.367140f,77.900726f,100.675849f,132.858502f,179.724089f,250.481347f,362.134627f,548.340291f,881.845214f,1539.180624f};
static const float Svf_calc_g_c1[129] = {0.016145f,0.016105f,0.016020f,0.015887f,0.015700f,0.015455f,0.015147f,0.014769f,0.014315f,0.013780f,0.013155f,0.012433f,0.011607f,0.010666f,0.009603f,0.008408f,0.007068f,0.005574f,0.003913f,0.002072f,0.000038f,(-0.002205f),(-0.004673f),(-0.007381f),(-0.010348f),(-0.013594f),(-0.017138f),(-0.021003f),(-0.025211f),(-0.029787f),(-0.034759f),(-0.040152f),(-0.045999f),(-0.052330f),(-0.059179f),(-0.066584f),(-0.074581f),(-0.083212f),(-0.092521f),(-0.102554f),(-0.113361f),(-0.124994f),(-0.137509f),(-0.150966f),(-0.165429f),(-0.180965f),(-0.197646f),(-0.215548f),(-0.234754f),(-0.255350f),(-0.277430f),(-0.301091f),(-0.326439f),(-0.353586f),(-0.382653f),(-0.413766f),(-0.447062f),(-0.482687f),(-0.520796f),(-0.561556f),(-0.605146f),(-0.651755f),(-0.701588f),(-0.754865f),(-0.811821f),(-0.872709f),(-0.937803f),(-1.007396f),(-1.081805f),(-1.161373f),(-1.246472f),(-1.337503f),(-1.434906f),(-1.539157f),(-1.650775f),(-1.770330f),(-1.898445f),(-2.035805f),(-2.183166f),(-2.341362f),(-2.511317f),(-2.694058f),(-2.890730f),(-3.102612f),(-3.331139f),(-3.577926f),(-3.844796f),(-4.133812f),(-4.447323f),(-4.788005f),(-5.158923f),(-5.563598f),(-6.006091f),(-6.491103f),(-7.024099f),(-7.611454f),(-8.260641f),(-8.980450f),(-9.781273f),(-10.675448f),(-11.677696f),(-12.805669f),(-14.080648f),(-15.528428f),(-17.180469f),(-19.075376f),(-21.260850f),(-23.796255f),(-26.756050f),(-30.234416f),(-34.351569f),(-39.262482f),(-45.169098f),(-52.337689f),(-61.123918f),(-72.009676f),(-85.658276f),(-102.998963f),(-125.359415f),(-154.679171f),(-193.863954f),(-247.394573f),(-322.415669f),(-430.774376f),(-593.051114f),(-847.065734f),(-1267.315348f),(-2014.052154f),(-3474.292994f)};
static const float Svf_calc_g_c2[129] = {0.057350f,0.060215f,0.063222f,0.066380f,0.069695f,0.073176f,0.076831f,0.080669f,0.084698f,0.088928f,0.093370f,0.098034f,0.102931f,0.108072f,0.113470f,0.119138f,0.125090f,0.131338f,0.137899f,0.144788f,0.152021f,0.159615f,0.167589f,0.175962f,0.184753f,0.193984f,0.203677f,0.213854f,0.224540f,0.235761f,0.247543f,0.259915f,0.272906f,0.286547f,0.300871f,0.315913f,0.331709f,0.348296f,0.365715f,0.384008f,0.403218f,0.423393f,0.444582f,0.466835f,0.490207f,0.514756f,0.540541f,0.567626f,0.596077f,0.625966f,0.657365f,0.690355f,0.725017f,0.761439f,0.799714f,0.839938f,0.882217f,0.926659f,0.973380f,1.022505f,1.074163f,1.128495f,1.185649f,1.245782f,1.309063f,1.375673f,1.445804f,1.519663f,1.597473f,1.679472f,1.765917f,1.857087f,1.953283f,2.054832f,2.162087f,2.275438f,2.395306f,2.522155f,2.656495f,2.798887f,2.949951f,3.110375f,3.280922f,3.462445f,3.655898f,3.862351f,4.083007f,4.319229f,4.572558f,4.844750f,5.137806f,5.454018f,5.796023f,6.166860f,6.570049f,7.009682f,7.490532f,8.018195f,8.599255f,9.241494f,9.954156f,10.748275f,11.637086f,12.636560f,13.766076f,15.049300f,16.515328f,18.200192f,20.148861f,22.417929f,25.079277f,28.225104f,31.974960f,36.485695f,41.965784f,48.696303f,57.062253f,67.600366f,81.073785f,98.591968f,121.809059f,153.263633f,196.984118f,259.618609f,352.661145f,497.133891f,734.250370f,1152.247055f,1963.211680f};
float Svf_calc_g(float cv);

typedef struct Svf__ctx_type_1 {
   float z2;
   float z1;
   float inv_den;
   float g;
   Util__ctx_type_1 _inst54;
   Util__ctx_type_1 _inst53;
   float R;
} Svf__ctx_type_1;

typedef Svf__ctx_type_1 Svf_process_type;

void Svf__ctx_type_1_init(Svf__ctx_type_1 &_output_);

void Svf_process_init(Svf__ctx_type_1 &_output_);

float Svf_process(Svf__ctx_type_1 &_ctx, float x, float cv, float q, int sel);

typedef Svf__ctx_type_1 Svf_noteOn_type;

void Svf_noteOn_init(Svf__ctx_type_1 &_output_);

void Svf_noteOn(Svf__ctx_type_1 &_ctx, int note, int velocity, int channel);

typedef Svf__ctx_type_1 Svf_noteOff_type;

void Svf_noteOff_init(Svf__ctx_type_1 &_output_);

void Svf_noteOff(Svf__ctx_type_1 &_ctx, int note, int channel);

typedef Svf__ctx_type_1 Svf_controlChange_type;

void Svf_controlChange_init(Svf__ctx_type_1 &_output_);

void Svf_controlChange(Svf__ctx_type_1 &_ctx, int control, int value, int channel);

typedef Svf__ctx_type_1 Svf_default_type;

void Svf_default_init(Svf__ctx_type_1 &_output_);

void Svf_default(Svf__ctx_type_1 &_ctx);

static const float Saturate_table_c0[242] = {(-1.000000f),(-1.000000f),(-1.000000f),(-1.000000f),(-1.000000f),(-1.000000f),(-1.000000f),(-1.000000f),(-1.000000f),(-1.000000f),(-1.000000f),(-1.000000f),(-1.000000f),(-1.000000f),(-1.000000f),(-1.000000f),(-1.000000f),(-1.000000f),(-1.000000f),(-1.000000f),(-1.000000f),(-1.000000f),(-1.000000f),(-1.000000f),(-1.000000f),(-1.000000f),(-1.000000f),(-1.000000f),(-1.000000f),(-1.000000f),(-1.000000f),(-1.000000f),(-1.000000f),(-1.000000f),(-1.000000f),(-1.000000f),(-1.000000f),(-1.000000f),(-1.000000f),(-1.000000f),(-1.000000f),(-1.000000f),(-1.000000f),(-1.000000f),(-1.000000f),(-1.000000f),(-1.000000f),(-1.000000f),(-1.000000f),(-1.000000f),(-1.000000f),(-1.000000f),(-1.000000f),(-1.000000f),(-1.000000f),(-1.000000f),(-1.000000f),(-1.000000f),(-1.000000f),(-1.000000f),(-1.000000f),(-1.000000f),(-1.000000f),(-1.000000f),(-1.000000f),(-1.000000f),(-1.000000f),(-1.000000f),(-1.000000f),(-0.999999f),(-0.999999f),(-0.999999f),(-0.999998f),(-0.999997f),(-0.999996f),(-0.999994f),(-0.999992f),(-0.999988f),(-0.999983f),(-0.999976f),(-0.999965f),(-0.999951f),(-0.999930f),(-0.999901f),(-0.999860f),(-0.999802f),(-0.999720f),(-0.999605f),(-0.999445f),(-0.999220f),(-0.998906f),(-0.998469f),(-0.997862f),(-0.997020f),(-0.995855f),(-0.994249f),(-0.992041f),(-0.989018f),(-0.984891f),(-0.979283f),(-0.971696f),(-0.961485f),(-0.947822f),(-0.929662f),(-0.905713f),(-0.874421f),(-0.833984f),(-0.782442f),(-0.717866f),(-0.638728f),(-0.544527f),(-0.436708f),(-0.319822f),(-0.202552f),(-0.097704f),(-0.019758f),0.021102f,0.026671f,0.013285f,0.001788f,0.000000f,(-0.001788f),(-0.013285f),(-0.026671f),(-0.021102f),0.019758f,0.097704f,0.202552f,0.319822f,0.436708f,0.544527f,0.638728f,0.717866f,0.782442f,0.833984f,0.874421f,0.905713f,0.929662f,0.947822f,0.961485f,0.971696f,0.979283f,0.984891f,0.989018f,0.992041f,0.994249f,0.995855f,0.997020f,0.997862f,0.998469f,0.998906f,0.999220f,0.999445f,0.999605f,0.999720f,0.999802f,0.999860f,0.999901f,0.999930f,0.999951f,0.999965f,0.999976f,0.999983f,0.999988f,0.999992f,0.999994f,0.999996f,0.999997f,0.999998f,0.999999f,0.999999f,0.999999f,1.000000f,1.000000f,1.000000f,1.000000f,1.000000f,1.000000f,1.000000f,1.000000f,1.000000f,1.000000f,1.000000f,1.000000f,1.000000f,1.000000f,1.000000f,1.000000f,1.000000f,1.000000f,1.000000f,1.000000f,1.000000f,1.000000f,1.000000f,1.000000f,1.000000f,1.000000f,1.000000f,1.000000f,1.000000f,1.000000f,1.000000f,1.000000f,1.000000f,1.000000f,1.000000f,1.000000f,1.000000f,1.000000f,1.000000f,1.000000f,1.000000f,1.000000f,1.000000f,1.000000f,1.000000f,1.000000f,1.000000f,1.000000f,1.000000f,1.000000f,1.000000f,1.000000f,1.000000f,1.000000f,1.000000f,1.000000f,1.000000f,1.000000f,1.000000f,1.000000f,1.000000f,1.000000f,1.000000f,1.000000f,1.000000f,1.000000f,1.000000f,1.000000f,1.000000f,1.000000f};
static const float Saturate_table_c1[242] = {(-0.000000f),(-0.000000f),0.000000f,0.000000f,(-0.000000f),(-0.000000f),(-0.000000f),0.000000f,(-0.000000f),(-0.000000f),(-0.000000f),0.000000f,0.000000f,(-0.000000f),(-0.000000f),0.000000f,0.000000f,0.000000f,(-0.000000f),0.000000f,0.000000f,(-0.000000f),(-0.000000f),0.000000f,0.000000f,(-0.000000f),0.000000f,0.000000f,0.000000f,(-0.000000f),(-0.000000f),0.000000f,0.000000f,(-0.000000f),0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000001f,0.000001f,0.000001f,0.000002f,0.000003f,0.000004f,0.000006f,0.000008f,0.000012f,0.000017f,0.000025f,0.000036f,0.000053f,0.000077f,0.000111f,0.000161f,0.000232f,0.000336f,0.000485f,0.000699f,0.001007f,0.001448f,0.002081f,0.002987f,0.004281f,0.006124f,0.008747f,0.012467f,0.017732f,0.025159f,0.035594f,0.050190f,0.070495f,0.098546f,0.136952f,0.188926f,0.258165f,0.348441f,0.462650f,0.601023f,0.758327f,0.920489f,1.062691f,1.153214f,1.167815f,1.112124f,1.033369f,0.996707f,1.033369f,1.112124f,1.167815f,1.153214f,1.062691f,0.920489f,0.758327f,0.601023f,0.462650f,0.348441f,0.258165f,0.188926f,0.136952f,0.098546f,0.070495f,0.050190f,0.035594f,0.025159f,0.017732f,0.012467f,0.008747f,0.006124f,0.004281f,0.002987f,0.002081f,0.001448f,0.001007f,0.000699f,0.000485f,0.000336f,0.000232f,0.000161f,0.000111f,0.000077f,0.000053f,0.000036f,0.000025f,0.000017f,0.000012f,0.000008f,0.000006f,0.000004f,0.000003f,0.000002f,0.000001f,0.000001f,0.000001f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,(-0.000000f),0.000000f,0.000000f,(-0.000000f),0.000000f,0.000000f,(-0.000000f),0.000000f,0.000000f,(-0.000000f),(-0.000000f),0.000000f,0.000000f,0.000000f,0.000000f,(-0.000000f),(-0.000000f),(-0.000000f),0.000000f,(-0.000000f),0.000000f,(-0.000000f),(-0.000000f),0.000000f,0.000000f,(-0.000000f),0.000000f,(-0.000000f),0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,(-0.000000f),0.000000f,(-0.000000f)};
static const float Saturate_table_c2[242] = {0.000000f,0.000000f,(-0.000000f),0.000000f,0.000000f,0.000000f,0.000000f,(-0.000000f),0.000000f,0.000000f,0.000000f,0.000000f,(-0.000000f),0.000000f,0.000000f,0.000000f,0.000000f,(-0.000000f),0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,(-0.000000f),0.000000f,0.000000f,(-0.000000f),0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,(-0.000000f),0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000001f,0.000001f,0.000002f,0.000002f,0.000004f,0.000005f,0.000008f,0.000012f,0.000017f,0.000026f,0.000039f,0.000057f,0.000086f,0.000128f,0.000190f,0.000283f,0.000421f,0.000627f,0.000934f,0.001390f,0.002068f,0.003078f,0.004577f,0.006801f,0.010095f,0.014959f,0.022114f,0.032571f,0.047716f,0.069345f,0.099589f,0.140541f,0.193292f,0.255994f,0.320851f,0.370985f,0.380472f,0.322615f,0.187810f,0.000000f,(-0.187810f),(-0.322615f),(-0.380472f),(-0.370985f),(-0.320851f),(-0.255994f),(-0.193292f),(-0.140541f),(-0.099589f),(-0.069345f),(-0.047716f),(-0.032571f),(-0.022114f),(-0.014959f),(-0.010095f),(-0.006801f),(-0.004577f),(-0.003078f),(-0.002068f),(-0.001390f),(-0.000934f),(-0.000627f),(-0.000421f),(-0.000283f),(-0.000190f),(-0.000128f),(-0.000086f),(-0.000057f),(-0.000039f),(-0.000026f),(-0.000017f),(-0.000012f),(-0.000008f),(-0.000005f),(-0.000004f),(-0.000002f),(-0.000002f),(-0.000001f),(-0.000001f),(-0.000000f),(-0.000000f),(-0.000000f),(-0.000000f),(-0.000000f),(-0.000000f),(-0.000000f),(-0.000000f),(-0.000000f),(-0.000000f),(-0.000000f),(-0.000000f),(-0.000000f),(-0.000000f),(-0.000000f),(-0.000000f),(-0.000000f),(-0.000000f),(-0.000000f),(-0.000000f),(-0.000000f),(-0.000000f),(-0.000000f),(-0.000000f),(-0.000000f),(-0.000000f),(-0.000000f),(-0.000000f),(-0.000000f),(-0.000000f),(-0.000000f),(-0.000000f),(-0.000000f),(-0.000000f),(-0.000000f),(-0.000000f),(-0.000000f),(-0.000000f),(-0.000000f),(-0.000000f),(-0.000000f),(-0.000000f),(-0.000000f),(-0.000000f),(-0.000000f),(-0.000000f),(-0.000000f),(-0.000000f),(-0.000000f),(-0.000000f),(-0.000000f),(-0.000000f),(-0.000000f),(-0.000000f),0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f};
float Saturate_table(float x);

float Saturate_process(float x);

void Saturate_noteOn(int note, int velocity, int channel);

void Saturate_noteOff(int note, int channel);

void Saturate_controlChange(int control, int value, int channel);

void Saturate_default();

typedef struct Lfo__ctx_type_0 {
   float x4;
   float x3;
   float x2;
} Lfo__ctx_type_0;

typedef Lfo__ctx_type_0 Lfo_soft_type;

void Lfo__ctx_type_0_init(Lfo__ctx_type_0 &_output_);

void Lfo_soft_init(Lfo__ctx_type_0 &_output_);

float Lfo_soft(Lfo__ctx_type_0 &_ctx, float x1);

typedef struct Lfo__ctx_type_1 {
   float rate;
   float phase;
   Lfo__ctx_type_0 _inst76;
   Util__ctx_type_0 _inst74;
   Util__ctx_type_1 _inst72;
} Lfo__ctx_type_1;

typedef Lfo__ctx_type_1 Lfo_process_type;

void Lfo__ctx_type_1_init(Lfo__ctx_type_1 &_output_);

void Lfo_process_init(Lfo__ctx_type_1 &_output_);

float Lfo_process(Lfo__ctx_type_1 &_ctx, float cv, float shape, float reset);

typedef Lfo__ctx_type_1 Lfo_noteOn_type;

void Lfo_noteOn_init(Lfo__ctx_type_1 &_output_);

void Lfo_noteOn(Lfo__ctx_type_1 &_ctx, int note, int velocity, int channel);

typedef Lfo__ctx_type_1 Lfo_noteOff_type;

void Lfo_noteOff_init(Lfo__ctx_type_1 &_output_);

void Lfo_noteOff(Lfo__ctx_type_1 &_ctx, int note, int channel);

typedef Lfo__ctx_type_1 Lfo_controlChange_type;

void Lfo_controlChange_init(Lfo__ctx_type_1 &_output_);

void Lfo_controlChange(Lfo__ctx_type_1 &_ctx, int control, int value, int channel);

typedef Lfo__ctx_type_1 Lfo_default_type;

void Lfo_default_init(Lfo__ctx_type_1 &_output_);

void Lfo_default(Lfo__ctx_type_1 &_ctx);

static const float Tables_nsine_c0[129] = {0.000000f,(-0.000059f),(-0.000294f),(-0.000821f),(-0.001748f),(-0.003182f),(-0.005218f),(-0.007945f),(-0.011441f),(-0.015769f),(-0.020982f),(-0.027117f),(-0.034194f),(-0.042218f),(-0.051174f),(-0.061028f),(-0.071728f),(-0.083199f),(-0.095348f),(-0.108059f),(-0.121193f),(-0.134593f),(-0.148077f),(-0.161443f),(-0.174469f),(-0.186911f),(-0.198505f),(-0.208970f),(-0.218004f),(-0.225290f),(-0.230496f),(-0.233273f),(-0.233261f),(-0.230090f),(-0.223377f),(-0.212736f),(-0.197773f),(-0.178091f),(-0.153292f),(-0.122979f),(-0.086760f),(-0.044248f),0.004935f,0.061157f,0.124770f,0.196113f,0.275501f,0.363233f,0.459580f,0.564787f,0.679070f,0.802614f,0.935568f,1.078046f,1.230121f,1.391827f,1.563154f,1.744046f,1.934404f,2.134075f,2.342860f,2.560508f,2.786714f,3.021123f,3.263323f,3.512849f,3.769181f,4.031743f,4.299905f,4.572984f,4.850242f,5.130888f,5.414079f,5.698922f,5.984476f,6.269752f,6.553717f,6.835294f,7.113369f,7.386787f,7.654362f,7.914877f,8.167086f,8.409721f,8.641495f,8.861104f,9.067233f,9.258562f,9.433767f,9.591528f,9.730531f,9.849477f,9.947084f,10.022092f,10.073270f,10.099421f,10.099386f,10.072052f,10.016353f,9.931281f,9.815887f,9.669287f,9.490669f,9.279297f,9.034513f,8.755748f,8.442520f,8.094445f,7.711234f,7.292703f,6.838775f,6.349479f,5.824963f,5.265486f,4.671429f,4.043291f,3.381696f,2.687392f,1.961252f,1.204276f,0.417591f,(-0.397552f),(-1.239772f),(-2.107564f),(-2.999299f),(-3.913225f),(-4.847471f),(-5.800047f),(-6.768847f)};
static const float Tables_nsine_c1[129] = {6.284447f,6.299564f,6.329688f,6.374603f,6.433980f,6.507388f,6.594289f,6.694041f,6.805905f,6.929043f,7.062522f,7.205321f,7.356331f,7.514365f,7.678156f,7.846367f,8.017595f,8.190378f,8.363199f,8.534492f,8.702652f,8.866039f,9.022985f,9.171802f,9.310788f,9.438236f,9.552440f,9.651704f,9.734348f,9.798715f,9.843181f,9.866160f,9.866113f,9.841556f,9.791063f,9.713277f,9.606917f,9.470782f,9.303758f,9.104827f,8.873070f,8.607671f,8.307927f,7.973252f,7.603175f,7.197355f,6.755575f,6.277752f,5.763935f,5.214312f,4.629210f,4.009096f,3.354579f,2.666410f,1.945484f,1.192836f,0.409645f,(-0.402770f),(-1.242953f),(-2.109312f),(-3.000120f),(-3.913520f),(-4.847530f),(-5.800047f),(-6.768847f),(-7.751597f),(-8.745857f),(-9.749086f),(-10.758648f),(-11.771823f),(-12.785807f),(-13.797728f),(-14.804647f),(-15.803569f),(-16.791454f),(-17.765220f),(-18.721759f),(-19.657940f),(-20.570624f),(-21.456668f),(-22.312942f),(-23.136331f),(-23.923752f),(-24.672159f),(-25.378556f),(-26.040006f),(-26.653641f),(-27.216673f),(-27.726403f),(-28.180230f),(-28.575662f),(-28.910326f),(-29.181973f),(-29.388492f),(-29.527917f),(-29.598433f),(-29.598386f),(-29.526292f),(-29.380840f),(-29.160902f),(-28.865538f),(-28.494004f),(-28.045752f),(-27.520443f),(-26.917941f),(-26.238327f),(-25.481894f),(-24.649155f),(-23.740843f),(-22.757909f),(-21.701528f),(-20.573098f),(-19.374236f),(-18.106780f),(-16.772786f),(-15.374524f),(-13.914479f),(-12.395342f),(-10.820010f),(-9.191577f),(-7.513332f),(-5.788748f),(-4.021481f),(-2.215356f),(-0.374364f),1.497351f,3.395497f,5.315646f,7.253247f};
static const float Tables_nsine_c2[129] = {(-0.484400f),(-1.452033f),(-2.416169f),(-3.374483f),(-4.324668f),(-5.264435f),(-6.191519f),(-7.103687f),(-7.998741f),(-8.874526f),(-9.728932f),(-10.559900f),(-11.365428f),(-12.143575f),(-12.892468f),(-13.610302f),(-14.295347f),(-14.945953f),(-15.560554f),(-16.137667f),(-16.675904f),(-17.173967f),(-17.630656f),(-18.044871f),(-18.415615f),(-18.741994f),(-19.023222f),(-19.258621f),(-19.447625f),(-19.589777f),(-19.684736f),(-19.732273f),(-19.732273f),(-19.684736f),(-19.589777f),(-19.447625f),(-19.258621f),(-19.023222f),(-18.741994f),(-18.415615f),(-18.044871f),(-17.630656f),(-17.173967f),(-16.675904f),(-16.137667f),(-15.560554f),(-14.945953f),(-14.295347f),(-13.610302f),(-12.892468f),(-12.143575f),(-11.365428f),(-10.559900f),(-9.728932f),(-8.874526f),(-7.998741f),(-7.103687f),(-6.191519f),(-5.264435f),(-4.324668f),(-3.374483f),(-2.416169f),(-1.452033f),(-0.484400f),0.484400f,1.452033f,2.416169f,3.374483f,4.324668f,5.264435f,6.191519f,7.103687f,7.998741f,8.874526f,9.728932f,10.559900f,11.365428f,12.143575f,12.892468f,13.610302f,14.295347f,14.945953f,15.560554f,16.137667f,16.675904f,17.173967f,17.630656f,18.044871f,18.415615f,18.741994f,19.023222f,19.258621f,19.447625f,19.589777f,19.684736f,19.732273f,19.732273f,19.684736f,19.589777f,19.447625f,19.258621f,19.023222f,18.741994f,18.415615f,18.044871f,17.630656f,17.173967f,16.675904f,16.137667f,15.560554f,14.945953f,14.295347f,13.610302f,12.892468f,12.143575f,11.365428f,10.559900f,9.728932f,8.874526f,7.998741f,7.103687f,6.191519f,5.264435f,4.324668f,3.374483f,2.416169f,1.452033f,0.484400f,(-0.484400f)};
float Tables_nsine(float x);

typedef struct Phase__ctx_type_0 {
   float rate;
   float phase;
   Util__ctx_type_0 _inst92;
   Util__ctx_type_1 _inst90;
} Phase__ctx_type_0;

typedef Phase__ctx_type_0 Phase_process_type;

void Phase__ctx_type_0_init(Phase__ctx_type_0 &_output_);

void Phase_process_init(Phase__ctx_type_0 &_output_);

float Phase_process(Phase__ctx_type_0 &_ctx, float cv, float reset);

typedef Phase__ctx_type_0 Phase_noteOn_type;

void Phase_noteOn_init(Phase__ctx_type_0 &_output_);

void Phase_noteOn(Phase__ctx_type_0 &_ctx, int note, int velocity, int channel);

typedef Phase__ctx_type_0 Phase_noteOff_type;

void Phase_noteOff_init(Phase__ctx_type_0 &_output_);

void Phase_noteOff(Phase__ctx_type_0 &_ctx, int note, int channel);

typedef Phase__ctx_type_0 Phase_controlChange_type;

void Phase_controlChange_init(Phase__ctx_type_0 &_output_);

void Phase_controlChange(Phase__ctx_type_0 &_ctx, int control, int value, int channel);

typedef Phase__ctx_type_0 Phase_default_type;

void Phase_default_init(Phase__ctx_type_0 &_output_);

void Phase_default(Phase__ctx_type_0 &_ctx);

typedef struct Blit__ctx_type_0 {
   float scale;
   int m;
   Util__ctx_type_1 _inst101;
} Blit__ctx_type_0;

typedef Blit__ctx_type_0 Blit_pulse_train_type;

void Blit__ctx_type_0_init(Blit__ctx_type_0 &_output_);

void Blit_pulse_train_init(Blit__ctx_type_0 &_output_);

float Blit_pulse_train(Blit__ctx_type_0 &_ctx, float cv, float phase);

typedef Blit__ctx_type_0 Blit_pulse_start_type;

void Blit_pulse_start_init(Blit__ctx_type_0 &_output_);

void Blit_pulse_start(Blit__ctx_type_0 &_ctx);

typedef struct Blit__ctx_type_1 {
   float state_saw;
   float state_pulse;
   float rate;
   float output;
   Util__ctx_type_3 _inst117;
   Blit__ctx_type_0 _inst114;
   Blit__ctx_type_0 _inst113;
   Phase__ctx_type_0 _inst111;
   Util__ctx_type_1 _inst109;
} Blit__ctx_type_1;

typedef Blit__ctx_type_1 Blit_osc_blit_type;

void Blit__ctx_type_1_init(Blit__ctx_type_1 &_output_);

void Blit_osc_blit_init(Blit__ctx_type_1 &_output_);

float Blit_osc_blit(Blit__ctx_type_1 &_ctx, float cv, float pw, float wave);

typedef Blit__ctx_type_1 Blit_init_type;

void Blit_init_init(Blit__ctx_type_1 &_output_);

void Blit_init(Blit__ctx_type_1 &_ctx);

typedef struct Blit__ctx_type_2 {
   Blit__ctx_type_1 _inst120;
} Blit__ctx_type_2;

typedef Blit__ctx_type_2 Blit_process_type;

void Blit__ctx_type_2_init(Blit__ctx_type_2 &_output_);

void Blit_process_init(Blit__ctx_type_2 &_output_);

float Blit_process(Blit__ctx_type_2 &_ctx, float cv, float pw, float wave);

typedef Blit__ctx_type_2 Blit_noteOn_type;

void Blit_noteOn_init(Blit__ctx_type_2 &_output_);

void Blit_noteOn(Blit__ctx_type_2 &_ctx, int note, int velocity, int channel);

typedef Blit__ctx_type_2 Blit_noteOff_type;

void Blit_noteOff_init(Blit__ctx_type_2 &_output_);

void Blit_noteOff(Blit__ctx_type_2 &_ctx, int note, int channel);

typedef Blit__ctx_type_2 Blit_controlChange_type;

void Blit_controlChange_init(Blit__ctx_type_2 &_output_);

void Blit_controlChange(Blit__ctx_type_2 &_ctx, int control, int value, int channel);

typedef Blit__ctx_type_2 Blit_default_type;

void Blit_default_init(Blit__ctx_type_2 &_output_);

void Blit_default(Blit__ctx_type_2 &_ctx);

typedef struct Adsr__ctx_type_0 {
   float target;
   int state;
   float scale;
   float rate;
   float out;
   Util__ctx_type_4 _inst140;
   Util__ctx_type_0 _inst133;
} Adsr__ctx_type_0;

typedef Adsr__ctx_type_0 Adsr_do_type;

void Adsr__ctx_type_0_init(Adsr__ctx_type_0 &_output_);

void Adsr_do_init(Adsr__ctx_type_0 &_output_);

float Adsr_do(Adsr__ctx_type_0 &_ctx, float gate, float a, float d, float s, float r);

typedef struct Adsr__ctx_type_1 {
   float knob4;
   float knob3;
   float knob2;
   float knob1;
   Adsr__ctx_type_0 _inst142;
} Adsr__ctx_type_1;

typedef Adsr__ctx_type_1 Adsr_process_type;

void Adsr__ctx_type_1_init(Adsr__ctx_type_1 &_output_);

void Adsr_process_init(Adsr__ctx_type_1 &_output_);

float Adsr_process(Adsr__ctx_type_1 &_ctx, float gate);

typedef Adsr__ctx_type_1 Adsr_noteOn_type;

void Adsr_noteOn_init(Adsr__ctx_type_1 &_output_);

void Adsr_noteOn(Adsr__ctx_type_1 &_ctx, int note, int velocity, int channel);

typedef Adsr__ctx_type_1 Adsr_noteOff_type;

void Adsr_noteOff_init(Adsr__ctx_type_1 &_output_);

void Adsr_noteOff(Adsr__ctx_type_1 &_ctx, int note, int channel);

typedef Adsr__ctx_type_1 Adsr_controlChange_type;

void Adsr_controlChange_init(Adsr__ctx_type_1 &_output_);

void Adsr_controlChange(Adsr__ctx_type_1 &_ctx, int control, int value, int channel);

typedef Adsr__ctx_type_1 Adsr_default_type;

void Adsr_default_init(Adsr__ctx_type_1 &_output_);

void Adsr_default(Adsr__ctx_type_1 &_ctx);

typedef struct Voice_4__ctx_type_0 {
   float sustain;
   float release;
   float pw4;
   float pw3;
   float pw2;
   float pw1;
   float lfo_shape;
   float lfo_reset;
   float lfo_rate;
   float lfo_pw;
   float lfo_flt;
   float lfo_cv;
   float level4;
   float level3;
   float level2;
   float level1;
   int flt_shape;
   float flt_res;
   float flt_cut;
   float decay;
   float attack;
   Adsr__ctx_type_0 _inst169;
   Svf__ctx_type_1 _inst168;
   Tricore__ctx_type_0 _inst167;
   Blit__ctx_type_2 _inst166;
   Blit__ctx_type_2 _inst165;
   Blit__ctx_type_2 _inst164;
   Lfo__ctx_type_1 _inst163;
} Voice_4__ctx_type_0;

typedef Voice_4__ctx_type_0 Voice_4_process_type;

void Voice_4__ctx_type_0_init(Voice_4__ctx_type_0 &_output_);

void Voice_4_process_init(Voice_4__ctx_type_0 &_output_);

float Voice_4_process(Voice_4__ctx_type_0 &_ctx, float cv, float vel, float gate);

typedef Voice_4__ctx_type_0 Voice_4_noteOn_type;

void Voice_4_noteOn_init(Voice_4__ctx_type_0 &_output_);

void Voice_4_noteOn(Voice_4__ctx_type_0 &_ctx, int note, int velocity, int channel);

typedef Voice_4__ctx_type_0 Voice_4_noteOff_type;

void Voice_4_noteOff_init(Voice_4__ctx_type_0 &_output_);

void Voice_4_noteOff(Voice_4__ctx_type_0 &_ctx, int note, int channel);

typedef Voice_4__ctx_type_0 Voice_4_controlChange_type;

void Voice_4_controlChange_init(Voice_4__ctx_type_0 &_output_);

void Voice_4_controlChange(Voice_4__ctx_type_0 &_ctx, int control, int value, int channel);

typedef Voice_4__ctx_type_0 Voice_4_default_type;

void Voice_4_default_init(Voice_4__ctx_type_0 &_output_);

void Voice_4_default(Voice_4__ctx_type_0 &_ctx);



#endif // VOICE_4_H
