
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#include "synth2.h"

float Synth2_minFixed(){
   return 1.52588e-05f;
}

void Synth2__ctx_type_1_init(Synth2__ctx_type_1 &_output_){
   Synth2__ctx_type_1 _ctx;
   _ctx.pre_x = 0.f;
   _output_ = _ctx;
   return ;
}

void Synth2_change_init(Synth2__ctx_type_1 &_output_){
   Synth2__ctx_type_1_init(_output_);
   return ;
}

uint8_t Synth2_change(Synth2__ctx_type_1 &_ctx, float x){
   uint8_t v;
   v = (_ctx.pre_x != x);
   _ctx.pre_x = x;
   return v;
}

void Synth2__ctx_type_2_init(Synth2__ctx_type_2 &_output_){
   Synth2__ctx_type_2 _ctx;
   _ctx.pre_x = 0;
   _output_ = _ctx;
   return ;
}

void Synth2_bchange_init(Synth2__ctx_type_2 &_output_){
   Synth2__ctx_type_2_init(_output_);
   return ;
}

uint8_t Synth2_bchange(Synth2__ctx_type_2 &_ctx, uint8_t x){
   uint8_t v;
   v = (_ctx.pre_x != x);
   _ctx.pre_x = x;
   return v;
}

void Synth2__ctx_type_3_init(Synth2__ctx_type_3 &_output_){
   Synth2__ctx_type_3 _ctx;
   _ctx.pre_x = 0;
   _output_ = _ctx;
   return ;
}

void Synth2_edge_init(Synth2__ctx_type_3 &_output_){
   Synth2__ctx_type_3_init(_output_);
   return ;
}

uint8_t Synth2_edge(Synth2__ctx_type_3 &_ctx, uint8_t x){
   uint8_t v;
   v = ((_ctx.pre_x != x) && (_ctx.pre_x == 1));
   _ctx.pre_x = x;
   return v;
}

void Synth2__ctx_type_4_init(Synth2__ctx_type_4 &_output_){
   Synth2__ctx_type_4 _ctx;
   _ctx.count = 0;
   _output_ = _ctx;
   return ;
}

void Synth2_each_init(Synth2__ctx_type_4 &_output_){
   Synth2__ctx_type_4_init(_output_);
   return ;
}

uint8_t Synth2_each(Synth2__ctx_type_4 &_ctx, int n){
   uint8_t ret;
   ret = (_ctx.count == 0);
   _ctx.count = ((_ctx.count + 1) % n);
   return ret;
}

uint8_t Synth2_near_zero(float x){
   return (fabsf(x) < 0.02f);
}

void Synth2__ctx_type_6_init(Synth2__ctx_type_6 &_output_){
   Synth2__ctx_type_6 _ctx;
   _ctx.y1 = 0.f;
   _ctx.x1 = 0.f;
   _output_ = _ctx;
   return ;
}

void Synth2_dcblock_init(Synth2__ctx_type_6 &_output_){
   Synth2__ctx_type_6_init(_output_);
   return ;
}

float Synth2_dcblock(Synth2__ctx_type_6 &_ctx, float x0){
   float y0;
   y0 = (x0 + (- _ctx.x1) + (_ctx.y1 * 0.995f));
   _ctx.x1 = x0;
   _ctx.y1 = y0;
   return y0;
}

void Synth2__ctx_type_7_init(Synth2__ctx_type_7 &_output_){
   Synth2__ctx_type_7 _ctx;
   _ctx.x = 0.f;
   _output_ = _ctx;
   return ;
}

void Synth2_smooth_init(Synth2__ctx_type_7 &_output_){
   Synth2__ctx_type_7_init(_output_);
   return ;
}

float Synth2_smooth(Synth2__ctx_type_7 &_ctx, float input){
   _ctx.x = (_ctx.x + ((input + (- _ctx.x)) * 0.005f));
   return _ctx.x;
}

void Synth2__ctx_type_8_init(Synth2__ctx_type_8 &_output_){
   Synth2__ctx_type_8 _ctx;
   _ctx.pre_x = 0.f;
   _output_ = _ctx;
   return ;
}

void Synth2_lpfilter_init(Synth2__ctx_type_8 &_output_){
   Synth2__ctx_type_8_init(_output_);
   return ;
}

float Synth2_lpfilter(Synth2__ctx_type_8 &_ctx, float x){
   float ret;
   ret = ((x + _ctx.pre_x) * 0.5f);
   _ctx.pre_x = x;
   return ret;
}

float Synth2_pitchToRate(float d){
   return (0.000185392290249f * expf((0.0577623f * d)));
}

float Synth2_pulse_train(float m, float phase){
   float pi_phase;
   pi_phase = (phase * 3.14159265359f);
   float denominator1;
   denominator1 = sinf(pi_phase);
   float tmp1;
   tmp1 = 0.f;
   uint8_t _cond_3;
   _cond_3 = Synth2_near_zero(denominator1);
   if(_cond_3){
      tmp1 = 1.f;
   }
   else
   {
      tmp1 = sinf((m * pi_phase));
      tmp1 = (tmp1 / (m * denominator1));
   }
   return tmp1;
}

void Synth2__ctx_type_11_init(Synth2__ctx_type_11 &_output_){
   Synth2__ctx_type_11 _ctx;
   _ctx.state_triang = 0.f;
   _ctx.state_saw = 0.f;
   _ctx.state_pulse = 0.f;
   _ctx.rate = 0.f;
   _ctx.phase = 0.f;
   _ctx.output = 0.f;
   _ctx.m = 0.f;
   Synth2__ctx_type_1_init(_ctx._inst3);
   Synth2__ctx_type_6_init(_ctx._inst11);
   _output_ = _ctx;
   return ;
}

void Synth2_osc_init(Synth2__ctx_type_11 &_output_){
   Synth2__ctx_type_11_init(_output_);
   return ;
}

float Synth2_osc(Synth2__ctx_type_11 &_ctx, float pitch, float pw, float wave){
   float fixed_pitch;
   fixed_pitch = 0.f;
   uint8_t _cond_12;
   _cond_12 = (wave < 0.666666666667f);
   if(_cond_12){
      fixed_pitch = pitch;
   }
   else
   {
      fixed_pitch = (pitch + 12.f);
   }
   uint8_t _cond_13;
   _cond_13 = Synth2_change(_ctx._inst3,fixed_pitch);
   if(_cond_13){
      _ctx.rate = Synth2_pitchToRate(fixed_pitch);
      float p;
      p = (1.f / _ctx.rate);
      float maxHarmonics;
      maxHarmonics = floorf((p * 0.5f));
      _ctx.m = ((2.f * maxHarmonics) + 1.f);
   }
   float shift05;
   shift05 = (0.5f + (pw * 0.49f));
   float shift;
   shift = (_ctx.phase + shift05);
   uint8_t _cond_14;
   _cond_14 = (shift > 1.f);
   if(_cond_14){
      shift = (shift + (-1.f));
   }
   float tmp1;
   tmp1 = Synth2_pulse_train(_ctx.m,_ctx.phase);
   float tmp2;
   tmp2 = Synth2_pulse_train(_ctx.m,shift);
   _ctx.phase = (_ctx.phase + _ctx.rate);
   uint8_t _cond_15;
   _cond_15 = (_ctx.phase > 1.f);
   if(_cond_15){
      _ctx.phase = (_ctx.phase + (-1.f));
   }
   _ctx.state_pulse = float_clip(((_ctx.state_pulse * 0.9995f) + tmp1 + (- tmp2)),(-1.f),1.f);
   _ctx.state_saw = float_clip(((_ctx.state_saw * 0.9995f) + (((tmp1 + tmp2 + ((-2.f) * _ctx.rate)) / shift05) * 0.5f)),(-1.f),1.f);
   _ctx.state_triang = float_clip(((_ctx.state_triang * 0.9995f) + (2.f * _ctx.state_pulse * _ctx.rate)),(-1.f),1.f);
   uint8_t _cond_17;
   _cond_17 = (wave < 0.333333333333f);
   if(_cond_17){
      _ctx.output = _ctx.state_pulse;
   }
   else
   {
      uint8_t _cond_16;
      _cond_16 = (wave < 0.666666666667f);
      if(_cond_16){
         _ctx.output = (2.f * _ctx.state_saw);
      }
      else
      {
         _ctx.output = (2.f * _ctx.state_triang * (1.f + pw));
      }
   }
   _ctx.output = Synth2_dcblock(_ctx._inst11,_ctx.output);
   return float_clip((_ctx.output * 0.25f),(-1.f),1.f);
}

void Synth2__ctx_type_12_init(Synth2__ctx_type_12 &_output_){
   Synth2__ctx_type_12 _ctx;
   _ctx.dlow = 0.f;
   _ctx.dband = 0.f;
   _output_ = _ctx;
   return ;
}

void Synth2_svf_step_init(Synth2__ctx_type_12 &_output_){
   Synth2__ctx_type_12_init(_output_);
   return ;
}

float Synth2_svf_step(Synth2__ctx_type_12 &_ctx, float input, float g, float q, int sel){
   float low;
   low = (_ctx.dlow + (g * _ctx.dband));
   float high;
   high = (input + (- low) + (- (q * _ctx.dband)));
   float band;
   band = ((g * high) + _ctx.dband);
   float notch;
   notch = (high + low);
   _ctx.dband = float_clip(band,(-1.f),1.f);
   _ctx.dlow = float_clip(low,(-1.f),1.f);
   float output;
   uint8_t _cond_1;
   _cond_1 = (sel == 0);
   if(_cond_1){ output = low; }
   else
   {
      uint8_t _cond_2;
      _cond_2 = (sel == 1);
      if(_cond_2){ output = high; }
      else
      {
         uint8_t _cond_3;
         _cond_3 = (sel == 2);
         if(_cond_3){ output = band; }
         else
         { output = notch; }
      }
   }
   return output;
}

void Synth2__ctx_type_13_init(Synth2__ctx_type_13 &_output_){
   Synth2__ctx_type_13 _ctx;
   Synth2__ctx_type_12_init(_ctx.step);
   _ctx.g = 0.f;
   Synth2__ctx_type_1_init(_ctx._inst1);
   _output_ = _ctx;
   return ;
}

void Synth2_svf_init(Synth2__ctx_type_13 &_output_){
   Synth2__ctx_type_13_init(_output_);
   return ;
}

float Synth2_svf(Synth2__ctx_type_13 &_ctx, float input, float fc, float q, int sel){
   fc = float_clip(fc,0.f,1.f);
   q = float_clip(q,0.f,1.f);
   float fix_q;
   fix_q = (2.f * (1.f + (- q)));
   uint8_t _cond_3;
   _cond_3 = Synth2_change(_ctx._inst1,fc);
   if(_cond_3){
      _ctx.g = (fc * 0.5f);
   }
   float x1;
   x1 = Synth2_svf_step(_ctx.step,input,_ctx.g,fix_q,sel);
   float x2;
   x2 = Synth2_svf_step(_ctx.step,input,_ctx.g,fix_q,sel);
   return ((x1 + x2) * 0.5f);
}

void Synth2__ctx_type_14_init(Synth2__ctx_type_14 &_output_){
   Synth2__ctx_type_14 _ctx;
   _ctx.phase = 0.f;
   Synth2__ctx_type_4_init(_ctx._inst3);
   Synth2__ctx_type_3_init(_ctx._inst1);
   _output_ = _ctx;
   return ;
}

void Synth2_lfo_init(Synth2__ctx_type_14 &_output_){
   Synth2__ctx_type_14_init(_output_);
   return ;
}

float Synth2_lfo(Synth2__ctx_type_14 &_ctx, float f, uint8_t gate){
   float rate;
   rate = ((f * 100.f * Synth2_minFixed()) + Synth2_minFixed());
   uint8_t _cond_6;
   _cond_6 = Synth2_edge(_ctx._inst1,gate);
   if(_cond_6){
      _ctx.phase = 0.f;
   }
   uint8_t _cond_7;
   _cond_7 = Synth2_each(_ctx._inst3,4);
   if(_cond_7){
      _ctx.phase = (_ctx.phase + rate);
   }
   uint8_t _cond_8;
   _cond_8 = (_ctx.phase > 1.f);
   if(_cond_8){
      _ctx.phase = (_ctx.phase + (-1.f));
   }
   return (sinf((6.28318530718f * _ctx.phase)) + 0.5f);
}

void Synth2__ctx_type_15_init(Synth2__ctx_type_15 &_output_){
   Synth2__ctx_type_15 _ctx;
   _ctx.pre = 0;
   int_init_array(4,0,_ctx.notes);
   _ctx.count = 0;
   _output_ = _ctx;
   return ;
}

void Synth2_mono_noteOn_init(Synth2__ctx_type_15 &_output_){
   Synth2__ctx_type_15_init(_output_);
   return ;
}

int Synth2_mono_noteOn(Synth2__ctx_type_15 &_ctx, int n){
   uint8_t _cond_4;
   _cond_4 = (_ctx.count < 4);
   if(_cond_4){
      int_set(_ctx.notes,_ctx.count,n);
      _ctx.pre = n;
      uint8_t _cond_3;
      _cond_3 = (_ctx.count < 4);
      if(_cond_3){
         _ctx.count = (_ctx.count + 1);
      }
   }
   return _ctx.pre;
}

void Synth2_mono_noteOff_init(Synth2__ctx_type_15 &_output_){
   Synth2__ctx_type_15_init(_output_);
   return ;
}

int Synth2_mono_noteOff(Synth2__ctx_type_15 &_ctx, int n){
   uint8_t found;
   found = 0;
   int pos;
   int i;
   i = 0;
   uint8_t _cond_7;
   _cond_7 = (_ctx.count == 0);
   if(_cond_7){
      return _ctx.pre;
   }
   while(((i < 4) && bool_not(found))){
      uint8_t _cond_8;
      _cond_8 = (int_get(_ctx.notes,i) == n);
      if(_cond_8){
         pos = i;
         found = 1;
      }
      i = (i + 1);
   }
   if(found){
      int k;
      k = (pos + 1);
      while((k < 4)){
         int_set(_ctx.notes,(k + (-1)),int_get(_ctx.notes,k));
         k = (k + 1);
      }
      uint8_t _cond_9;
      _cond_9 = (found && (_ctx.count > 0));
      if(_cond_9){
         _ctx.count = (_ctx.count + (-1));
         _ctx.pre = int_get(_ctx.notes,(_ctx.count + (-1)));
      }
   }
   return _ctx.pre;
}

void Synth2_mono_isGateOn_init(Synth2__ctx_type_15 &_output_){
   Synth2__ctx_type_15_init(_output_);
   return ;
}

uint8_t Synth2_mono_isGateOn(Synth2__ctx_type_15 &_ctx){
   return (_ctx.count > 0);
}

void Synth2__ctx_type_16_init(Synth2__ctx_type_16 &_output_){
   Synth2__ctx_type_16 _ctx;
   _ctx.wave = 0.f;
   _ctx.volume = 0.f;
   _ctx.res = 0.f;
   _ctx.pw = 0.f;
   _ctx.pitch = 0.f;
   Synth2__ctx_type_15_init(_ctx.monoin);
   _ctx.lfo_rate = 0.f;
   _ctx.lfo_amt = 0.f;
   _ctx.cut = 0.f;
   _ctx.amp_s = 0.f;
   Synth2__ctx_type_13_init(_ctx._inst4);
   Synth2__ctx_type_7_init(_ctx._inst3);
   Synth2__ctx_type_11_init(_ctx._inst2);
   Synth2__ctx_type_14_init(_ctx._inst1);
   Synth2_default(_ctx);
   _output_ = _ctx;
   return ;
}

void Synth2_process_init(Synth2__ctx_type_16 &_output_){
   Synth2__ctx_type_16_init(_output_);
   return ;
}

float Synth2_process(Synth2__ctx_type_16 &_ctx, float i){
   uint8_t gate;
   gate = Synth2_mono_isGateOn(_ctx.monoin);
   float lfo1;
   lfo1 = (Synth2_lfo(_ctx._inst1,_ctx.lfo_rate,gate) * _ctx.lfo_amt);
   float o1;
   o1 = Synth2_osc(_ctx._inst2,_ctx.pitch,(_ctx.pw + lfo1),_ctx.wave);
   float amp_env;
   float _if_5;
   if(gate){ _if_5 = 1.f; }
   else
   { _if_5 = 0.f; }
   amp_env = Synth2_smooth(_ctx._inst3,_if_5);
   float output;
   output = (amp_env * Synth2_svf(_ctx._inst4,o1,_ctx.cut,_ctx.res,0));
   return (_ctx.volume * output);
}

void Synth2_noteOn_init(Synth2__ctx_type_16 &_output_){
   Synth2__ctx_type_16_init(_output_);
   return ;
}

void Synth2_noteOn(Synth2__ctx_type_16 &_ctx, int note, int velocity){
   _ctx.pitch = int_to_float(Synth2_mono_noteOn(_ctx.monoin,note));
}

void Synth2_noteOff_init(Synth2__ctx_type_16 &_output_){
   Synth2__ctx_type_16_init(_output_);
   return ;
}

void Synth2_noteOff(Synth2__ctx_type_16 &_ctx, int note){
   _ctx.pitch = int_to_float(Synth2_mono_noteOff(_ctx.monoin,note));
}

void Synth2_controlChange_init(Synth2__ctx_type_16 &_output_){
   Synth2__ctx_type_16_init(_output_);
   return ;
}

void Synth2_controlChange(Synth2__ctx_type_16 &_ctx, int control, int value){
   float value_0_1;
   value_0_1 = (int_to_float(value) * 0.00787401574803f);
   float value_m1_1;
   value_m1_1 = ((value_0_1 * 2.f) + (-1.f));
   uint8_t _cond_8;
   _cond_8 = (control == 30);
   if(_cond_8){
      _ctx.volume = value_0_1;
   }
   uint8_t _cond_9;
   _cond_9 = (control == 31);
   if(_cond_9){
      _ctx.wave = value_0_1;
   }
   uint8_t _cond_10;
   _cond_10 = (control == 32);
   if(_cond_10){
      _ctx.pw = value_0_1;
   }
   uint8_t _cond_11;
   _cond_11 = (control == 33);
   if(_cond_11){
      _ctx.lfo_rate = value_0_1;
   }
   uint8_t _cond_12;
   _cond_12 = (control == 34);
   if(_cond_12){
      _ctx.lfo_amt = value_m1_1;
   }
   uint8_t _cond_13;
   _cond_13 = (control == 35);
   if(_cond_13){
      _ctx.cut = value_0_1;
   }
   uint8_t _cond_14;
   _cond_14 = (control == 36);
   if(_cond_14){
      _ctx.res = value_0_1;
   }
}

void Synth2_default_init(Synth2__ctx_type_16 &_output_){
   Synth2__ctx_type_16_init(_output_);
   return ;
}

void Synth2_default(Synth2__ctx_type_16 &_ctx){
   _ctx.pw = 0.f;
   _ctx.pitch = 42.f;
   _ctx.cut = 1.f;
   _ctx.res = 0.f;
   _ctx.amp_s = 1.f;
   _ctx.lfo_amt = 0.5f;
   _ctx.lfo_rate = 0.f;
}


