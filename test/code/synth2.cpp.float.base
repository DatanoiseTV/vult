
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#include "synth2.h"

void Synth2__ctx_type_6_init(Synth2__ctx_type_6 &_output_){
   Synth2__ctx_type_6 _ctx;
   _ctx.y1 = 0.f;
   _ctx.x1 = 0.f;
   _output_ = _ctx;
   return ;
}

float Synth2_dcblock(Synth2__ctx_type_6 &_ctx, float x0){
   float y0;
   y0 = (x0 + (- _ctx.x1) + (0.995f * _ctx.y1));
   _ctx.x1 = x0;
   _ctx.y1 = y0;
   return y0;
}

float Synth2_pulse_train(float m, float phase){
   float pi_phase;
   pi_phase = (3.1415927f * phase);
   float denominator1;
   denominator1 = sinf(pi_phase);
   float tmp1;
   tmp1 = 0.f;
   if(Synth2_near_zero(denominator1)){
      tmp1 = 1.f;
   }
   else
   {
      tmp1 = sinf((m * pi_phase));
      tmp1 = (tmp1 / (denominator1 * m));
   }
   return tmp1;
}

void Synth2__ctx_type_11_init(Synth2__ctx_type_11 &_output_){
   Synth2__ctx_type_11 _ctx;
   _ctx.state_triang = 0.f;
   _ctx.state_saw = 0.f;
   _ctx.state_pulse = 0.f;
   _ctx.rate = 0.f;
   _ctx.phase = 0.f;
   _ctx.output = 0.f;
   _ctx.m = 0.f;
   Synth2__ctx_type_6_init(_ctx._inst24);
   Synth2__ctx_type_1_init(_ctx._inst16);
   _output_ = _ctx;
   return ;
}

float Synth2_osc(Synth2__ctx_type_11 &_ctx, float pitch, float pw, float wave){
   float fixed_pitch;
   fixed_pitch = 0.f;
   if(wave < 0.6666667f){
      fixed_pitch = pitch;
   }
   else
   {
      fixed_pitch = (12.f + pitch);
   }
   if(Synth2_change(_ctx._inst16,fixed_pitch)){
      _ctx.rate = Synth2_pitchToRate(fixed_pitch);
      float p;
      p = (1.f / _ctx.rate);
      float maxHarmonics;
      maxHarmonics = floorf((0.5f * p));
      _ctx.m = (1.f + (2.f * maxHarmonics));
   }
   float shift05;
   shift05 = (0.5f + (0.49f * pw));
   float shift;
   shift = (_ctx.phase + shift05);
   if(shift > 1.f){
      shift = (-1.f + shift);
   }
   float tmp1;
   tmp1 = Synth2_pulse_train(_ctx.m,_ctx.phase);
   float tmp2;
   tmp2 = Synth2_pulse_train(_ctx.m,shift);
   _ctx.phase = (_ctx.phase + _ctx.rate);
   if(_ctx.phase > 1.f){
      _ctx.phase = (-1.f + _ctx.phase);
   }
   _ctx.state_pulse = float_clip((tmp1 + (- tmp2) + (0.9995f * _ctx.state_pulse)),-1.f,1.f);
   _ctx.state_saw = float_clip(((0.5f * ((tmp1 + tmp2 + (-2.f * _ctx.rate)) / shift05)) + (0.9995f * _ctx.state_saw)),-1.f,1.f);
   _ctx.state_triang = float_clip(((0.9995f * _ctx.state_triang) + (2.f * _ctx.rate * _ctx.state_pulse)),-1.f,1.f);
   if(wave < 0.3333334f){
      _ctx.output = _ctx.state_pulse;
   }
   else
   {
      if(wave < 0.6666667f){
         _ctx.output = (2.f * _ctx.state_saw);
      }
      else
      {
         _ctx.output = (2.f * _ctx.state_triang * (1.f + pw));
      }
   }
   _ctx.output = Synth2_dcblock(_ctx._inst24,_ctx.output);
   return float_clip((0.25f * _ctx.output),-1.f,1.f);
}

void Synth2__ctx_type_12_init(Synth2__ctx_type_12 &_output_){
   Synth2__ctx_type_12 _ctx;
   _ctx.dlow = 0.f;
   _ctx.dband = 0.f;
   _output_ = _ctx;
   return ;
}

float Synth2_svf_step(Synth2__ctx_type_12 &_ctx, float input, float g, float q, int sel){
   float low;
   low = (_ctx.dlow + (_ctx.dband * g));
   float high;
   high = (input + (- low) + (- (_ctx.dband * q)));
   float band;
   band = (_ctx.dband + (g * high));
   float notch;
   notch = (high + low);
   _ctx.dband = float_clip(band,-1.f,1.f);
   _ctx.dlow = float_clip(low,-1.f,1.f);
   float output;
   switch(sel) {
      case 0:
         output = low;
      break;
      case 1:
         output = high;
      break;
      case 2:
         output = band;
      break;
    default: 
      output = notch;
   }
   return output;
}

void Synth2__ctx_type_13_init(Synth2__ctx_type_13 &_output_){
   Synth2__ctx_type_13 _ctx;
   Synth2__ctx_type_12_init(_ctx.step);
   _ctx.g = 0.f;
   Synth2__ctx_type_1_init(_ctx._inst27);
   _output_ = _ctx;
   return ;
}

float Synth2_svf(Synth2__ctx_type_13 &_ctx, float input, float fc, float q, int sel){
   fc = float_clip(fc,0.f,1.f);
   q = float_clip(q,0.f,1.f);
   float fix_q;
   fix_q = (2.f * (1.f + (- q)));
   if(Synth2_change(_ctx._inst27,fc)){
      _ctx.g = (0.5f * fc);
   }
   float x1;
   x1 = Synth2_svf_step(_ctx.step,input,_ctx.g,fix_q,sel);
   float x2;
   x2 = Synth2_svf_step(_ctx.step,input,_ctx.g,fix_q,sel);
   return (0.5f * (x1 + x2));
}

void Synth2__ctx_type_14_init(Synth2__ctx_type_14 &_output_){
   Synth2__ctx_type_14 _ctx;
   _ctx.phase = 0.f;
   Synth2__ctx_type_4_init(_ctx._inst32);
   Synth2__ctx_type_3_init(_ctx._inst30);
   _output_ = _ctx;
   return ;
}

float Synth2_lfo(Synth2__ctx_type_14 &_ctx, float f, uint8_t gate){
   float rate;
   rate = (1.53e-05f + (0.0015259f * f));
   if(Synth2_edge(_ctx._inst30,gate)){
      _ctx.phase = 0.f;
   }
   if(Synth2_each(_ctx._inst32,4)){
      _ctx.phase = (_ctx.phase + rate);
   }
   if(_ctx.phase > 1.f){
      _ctx.phase = (-1.f + _ctx.phase);
   }
   return (0.5f + sinf((6.2831854f * _ctx.phase)));
}

void Synth2__ctx_type_15_init(Synth2__ctx_type_15 &_output_){
   Synth2__ctx_type_15 _ctx;
   _ctx.pre = 0;
   int_init_array(4,0,_ctx.notes);
   _ctx.count = 0;
   _output_ = _ctx;
   return ;
}

int Synth2_mono_noteOn(Synth2__ctx_type_15 &_ctx, int n){
   if(_ctx.count < 4){
      int_set(_ctx.notes,_ctx.count,n);
      _ctx.pre = n;
      if(_ctx.count < 4){
         _ctx.count = (1 + _ctx.count);
      }
   }
   return _ctx.pre;
}

int Synth2_mono_noteOff(Synth2__ctx_type_15 &_ctx, int n){
   uint8_t found;
   found = false;
   int pos;
   int i;
   i = 0;
   if(_ctx.count == 0){
      return _ctx.pre;
   }
   while((i < 4) && bool_not(found)){
      if(int_get(_ctx.notes,i) == n){
         pos = i;
         found = true;
      }
      i = (1 + i);
   }
   if(found){
      int k;
      k = (1 + pos);
      while(k < 4){
         int_set(_ctx.notes,((-1) + k),int_get(_ctx.notes,k));
         k = (1 + k);
      }
      if(found && (_ctx.count > 0)){
         _ctx.count = ((-1) + _ctx.count);
         _ctx.pre = int_get(_ctx.notes,((-1) + _ctx.count));
      }
   }
   return _ctx.pre;
}

void Synth2__ctx_type_16_init(Synth2__ctx_type_16 &_output_){
   Synth2__ctx_type_16 _ctx;
   _ctx.wave = 0.f;
   _ctx.volume = 0.f;
   _ctx.res = 0.f;
   _ctx.pw = 0.f;
   _ctx.pitch = 0.f;
   Synth2__ctx_type_15_init(_ctx.monoin);
   _ctx.lfo_rate = 0.f;
   _ctx.lfo_amt = 0.f;
   _ctx.cut = 0.f;
   _ctx.amp_s = 0.f;
   Synth2__ctx_type_13_init(_ctx._inst50);
   Synth2__ctx_type_7_init(_ctx._inst49);
   Synth2__ctx_type_11_init(_ctx._inst48);
   Synth2__ctx_type_14_init(_ctx._inst47);
   Synth2_default(_ctx);
   _output_ = _ctx;
   return ;
}

float Synth2_process(Synth2__ctx_type_16 &_ctx, float i){
   uint8_t gate;
   gate = Synth2_mono_isGateOn(_ctx.monoin);
   float lfo1;
   lfo1 = (_ctx.lfo_amt * Synth2_lfo(_ctx._inst47,_ctx.lfo_rate,gate));
   float o1;
   o1 = Synth2_osc(_ctx._inst48,_ctx.pitch,(_ctx.pw + lfo1),_ctx.wave);
   float amp_env;
   float _if_80;
   if(gate){
      _if_80 = 1.f;
   }
   else
   {
      _if_80 = 0.f;
   }
   amp_env = Synth2_smooth(_ctx._inst49,_if_80);
   float output;
   output = (amp_env * Synth2_svf(_ctx._inst50,o1,_ctx.cut,_ctx.res,0));
   return (_ctx.volume * output);
}

void Synth2_controlChange(Synth2__ctx_type_16 &_ctx, int control, int value, int channel){
   float value_0_1;
   value_0_1 = (0.0078741f * int_to_float(value));
   float value_m1_1;
   value_m1_1 = (-1.f + (2.f * value_0_1));
   if(control == 30){
      _ctx.volume = value_0_1;
   }
   if(control == 31){
      _ctx.wave = value_0_1;
   }
   if(control == 32){
      _ctx.pw = value_0_1;
   }
   if(control == 33){
      _ctx.lfo_rate = value_0_1;
   }
   if(control == 34){
      _ctx.lfo_amt = value_m1_1;
   }
   if(control == 35){
      _ctx.cut = value_0_1;
   }
   if(control == 36){
      _ctx.res = value_0_1;
   }
}

void Synth2_default(Synth2__ctx_type_16 &_ctx){
   _ctx.volume = 1.f;
   _ctx.pw = 0.f;
   _ctx.pitch = 42.f;
   _ctx.cut = 1.f;
   _ctx.res = 0.f;
   _ctx.amp_s = 1.f;
   _ctx.lfo_amt = 0.5f;
   _ctx.lfo_rate = 0.f;
}


