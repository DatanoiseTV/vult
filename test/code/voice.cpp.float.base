
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#include "voice.h"

float Voice_minFixed(){
   return 1.52588e-05f;
}

void Voice__ctx_type_1_init(Voice__ctx_type_1 &_output_){
   Voice__ctx_type_1 _ctx;
   _ctx.pre_x = 0.f;
   _output_ = _ctx;
   return ;
}

void Voice_change_init(Voice__ctx_type_1 &_output_){
   Voice__ctx_type_1_init(_output_);
   return ;
}

uint8_t Voice_change(Voice__ctx_type_1 &_ctx, float x){
   uint8_t v;
   v = (_ctx.pre_x != x);
   _ctx.pre_x = x;
   return v;
}

void Voice__ctx_type_2_init(Voice__ctx_type_2 &_output_){
   Voice__ctx_type_2 _ctx;
   _ctx.pre_x = 0;
   _output_ = _ctx;
   return ;
}

void Voice_bchange_init(Voice__ctx_type_2 &_output_){
   Voice__ctx_type_2_init(_output_);
   return ;
}

uint8_t Voice_bchange(Voice__ctx_type_2 &_ctx, uint8_t x){
   uint8_t v;
   v = (_ctx.pre_x != x);
   _ctx.pre_x = x;
   return v;
}

void Voice__ctx_type_3_init(Voice__ctx_type_3 &_output_){
   Voice__ctx_type_3 _ctx;
   _ctx.pre_x = 0;
   _output_ = _ctx;
   return ;
}

void Voice_edge_init(Voice__ctx_type_3 &_output_){
   Voice__ctx_type_3_init(_output_);
   return ;
}

uint8_t Voice_edge(Voice__ctx_type_3 &_ctx, uint8_t x){
   uint8_t v;
   v = ((_ctx.pre_x != x) && (_ctx.pre_x == 1));
   _ctx.pre_x = x;
   return v;
}

void Voice__ctx_type_4_init(Voice__ctx_type_4 &_output_){
   Voice__ctx_type_4 _ctx;
   _ctx.count = 0;
   _output_ = _ctx;
   return ;
}

void Voice_each_init(Voice__ctx_type_4 &_output_){
   Voice__ctx_type_4_init(_output_);
   return ;
}

uint8_t Voice_each(Voice__ctx_type_4 &_ctx, int n){
   uint8_t ret;
   ret = (_ctx.count == 0);
   _ctx.count = ((_ctx.count + 1) % n);
   return ret;
}

uint8_t Voice_near_zero(float x){
   return (fabsf(x) < 0.02f);
}

void Voice__ctx_type_6_init(Voice__ctx_type_6 &_output_){
   Voice__ctx_type_6 _ctx;
   _ctx.y1 = 0.f;
   _ctx.x1 = 0.f;
   _output_ = _ctx;
   return ;
}

void Voice_dcblock_init(Voice__ctx_type_6 &_output_){
   Voice__ctx_type_6_init(_output_);
   return ;
}

float Voice_dcblock(Voice__ctx_type_6 &_ctx, float x0){
   float y0;
   y0 = (x0 + (- _ctx.x1) + (_ctx.y1 * 0.995f));
   _ctx.x1 = x0;
   _ctx.y1 = y0;
   return y0;
}

void Voice__ctx_type_7_init(Voice__ctx_type_7 &_output_){
   Voice__ctx_type_7 _ctx;
   _ctx.pre_x = 0.f;
   _output_ = _ctx;
   return ;
}

void Voice_lpfilter_init(Voice__ctx_type_7 &_output_){
   Voice__ctx_type_7_init(_output_);
   return ;
}

float Voice_lpfilter(Voice__ctx_type_7 &_ctx, float x){
   float ret;
   ret = ((x + _ctx.pre_x) * 0.5f);
   _ctx.pre_x = x;
   return ret;
}

float Voice_pitchToRate(float d){
   return (0.000185392290249f * expf((0.0577623f * d)));
}

float Voice_pulse_train(float m, float phase){
   float pi_phase;
   pi_phase = (phase * 3.14159265359f);
   float denominator1;
   denominator1 = sinf(pi_phase);
   float tmp1;
   tmp1 = 0.f;
   uint8_t _cond_91;
   _cond_91 = Voice_near_zero(denominator1);
   if(_cond_91){
      tmp1 = 1.f;
   }
   else
   {
      tmp1 = sinf((m * pi_phase));
      tmp1 = (tmp1 / (m * denominator1));
   }
   return tmp1;
}

void Voice__ctx_type_10_init(Voice__ctx_type_10 &_output_){
   Voice__ctx_type_10 _ctx;
   _ctx.state_triang = 0.f;
   _ctx.state_saw = 0.f;
   _ctx.state_pulse = 0.f;
   _ctx.rate = 0.f;
   _ctx.phase = 0.f;
   _ctx.output = 0.f;
   _ctx.m = 0.f;
   Voice__ctx_type_6_init(_ctx._inst23);
   Voice__ctx_type_1_init(_ctx._inst15);
   _output_ = _ctx;
   return ;
}

void Voice_osc_init(Voice__ctx_type_10 &_output_){
   Voice__ctx_type_10_init(_output_);
   return ;
}

float Voice_osc(Voice__ctx_type_10 &_ctx, float pitch, float pw, float wave){
   float fixed_pitch;
   fixed_pitch = 0.f;
   uint8_t _cond_92;
   _cond_92 = (wave < 0.666666666667f);
   if(_cond_92){
      fixed_pitch = pitch;
   }
   else
   {
      fixed_pitch = (pitch + 12.f);
   }
   uint8_t _cond_93;
   _cond_93 = Voice_change(_ctx._inst15,fixed_pitch);
   if(_cond_93){
      _ctx.rate = Voice_pitchToRate(fixed_pitch);
      float p;
      p = (1.f / _ctx.rate);
      float maxHarmonics;
      maxHarmonics = floorf((p * 0.5f));
      _ctx.m = ((2.f * maxHarmonics) + 1.f);
   }
   float shift05;
   shift05 = (0.5f + (pw * 0.49f));
   float shift;
   shift = (_ctx.phase + shift05);
   uint8_t _cond_94;
   _cond_94 = (shift > 1.f);
   if(_cond_94){
      shift = (shift + (-1.f));
   }
   float tmp1;
   tmp1 = Voice_pulse_train(_ctx.m,_ctx.phase);
   float tmp2;
   tmp2 = Voice_pulse_train(_ctx.m,shift);
   _ctx.phase = (_ctx.phase + _ctx.rate);
   uint8_t _cond_95;
   _cond_95 = (_ctx.phase > 1.f);
   if(_cond_95){
      _ctx.phase = (_ctx.phase + (-1.f));
   }
   _ctx.state_pulse = float_clip(((_ctx.state_pulse * 0.9995f) + tmp1 + (- tmp2)),(-1.f),1.f);
   _ctx.state_saw = float_clip(((_ctx.state_saw * 0.9995f) + (((tmp1 + tmp2 + ((-2.f) * _ctx.rate)) / shift05) * 0.5f)),(-1.f),1.f);
   _ctx.state_triang = float_clip(((_ctx.state_triang * 0.9995f) + (2.f * _ctx.state_pulse * _ctx.rate)),(-1.f),1.f);
   uint8_t _cond_97;
   _cond_97 = (wave < 0.333333333333f);
   if(_cond_97){
      _ctx.output = _ctx.state_pulse;
   }
   else
   {
      uint8_t _cond_96;
      _cond_96 = (wave < 0.666666666667f);
      if(_cond_96){
         _ctx.output = (2.f * _ctx.state_saw);
      }
      else
      {
         _ctx.output = (2.f * _ctx.state_triang * (1.f + pw));
      }
   }
   _ctx.output = Voice_dcblock(_ctx._inst23,_ctx.output);
   return float_clip((_ctx.output * 0.25f),(-1.f),1.f);
}

void Voice__ctx_type_11_init(Voice__ctx_type_11 &_output_){
   Voice__ctx_type_11 _ctx;
   _ctx.dlow = 0.f;
   _ctx.dband = 0.f;
   _output_ = _ctx;
   return ;
}

void Voice_svf_step_init(Voice__ctx_type_11 &_output_){
   Voice__ctx_type_11_init(_output_);
   return ;
}

float Voice_svf_step(Voice__ctx_type_11 &_ctx, float input, float g, float q, int sel){
   float low;
   low = (_ctx.dlow + (g * _ctx.dband));
   float high;
   high = (input + (- low) + (- (q * _ctx.dband)));
   float band;
   band = ((g * high) + _ctx.dband);
   float notch;
   notch = (high + low);
   _ctx.dband = float_clip(band,(-1.f),1.f);
   _ctx.dlow = float_clip(low,(-1.f),1.f);
   float output;
   uint8_t _cond_98;
   _cond_98 = (sel == 0);
   if(_cond_98){ output = low; }
   else
   {
      uint8_t _cond_140;
      _cond_140 = (sel == 1);
      if(_cond_140){ output = high; }
      else
      {
         uint8_t _cond_141;
         _cond_141 = (sel == 2);
         if(_cond_141){ output = band; }
         else
         { output = notch; }
      }
   }
   return output;
}

void Voice__ctx_type_12_init(Voice__ctx_type_12 &_output_){
   Voice__ctx_type_12 _ctx;
   Voice__ctx_type_11_init(_ctx.step);
   _ctx.g = 0.f;
   Voice__ctx_type_1_init(_ctx._inst26);
   _output_ = _ctx;
   return ;
}

void Voice_svf_init(Voice__ctx_type_12 &_output_){
   Voice__ctx_type_12_init(_output_);
   return ;
}

float Voice_svf(Voice__ctx_type_12 &_ctx, float input, float fc, float q, int sel){
   fc = float_clip(fc,0.f,1.f);
   q = float_clip(q,0.f,1.f);
   float fix_q;
   fix_q = (2.f * (1.f + (- q)));
   uint8_t _cond_99;
   _cond_99 = Voice_change(_ctx._inst26,fc);
   if(_cond_99){
      _ctx.g = (fc * 0.5f);
   }
   float x1;
   x1 = Voice_svf_step(_ctx.step,input,_ctx.g,fix_q,sel);
   float x2;
   x2 = Voice_svf_step(_ctx.step,input,_ctx.g,fix_q,sel);
   return ((x1 + x2) * 0.5f);
}

void Voice__ctx_type_13_init(Voice__ctx_type_13 &_output_){
   Voice__ctx_type_13 _ctx;
   _ctx.target = 0.f;
   _ctx.state = 0;
   _ctx.rate = 0.f;
   _ctx.out = 0.f;
   _output_ = _ctx;
   return ;
}

void Voice_adsr_init(Voice__ctx_type_13 &_output_){
   Voice__ctx_type_13_init(_output_);
   return ;
}

float Voice_adsr(Voice__ctx_type_13 &_ctx, uint8_t gate, float a, float d, float s, float r){
   _ctx.out = (_ctx.out + ((_ctx.target + (- _ctx.out)) * _ctx.rate * 0.001f));
   uint8_t _cond_100;
   _cond_100 = (_ctx.state == 0);
   if(_cond_100){
      if(gate){
         _ctx.state = 1;
      }
      _ctx.rate = r;
      _ctx.target = 0.f;
   }
   uint8_t _cond_103;
   _cond_103 = (_ctx.state == 1);
   if(_cond_103){
      uint8_t _cond_101;
      _cond_101 = bool_not(gate);
      if(_cond_101){
         _ctx.state = 0;
      }
      uint8_t _cond_102;
      _cond_102 = (_ctx.out > 1024.f);
      if(_cond_102){
         _ctx.state = 2;
      }
      _ctx.rate = a;
      _ctx.target = 1228.8f;
   }
   uint8_t _cond_105;
   _cond_105 = (_ctx.state == 2);
   if(_cond_105){
      uint8_t _cond_104;
      _cond_104 = bool_not(gate);
      if(_cond_104){
         _ctx.state = 0;
      }
      _ctx.rate = d;
      _ctx.target = (s * 1024.f);
   }
   return (_ctx.out * 0.0009765625f);
}

void Voice__ctx_type_14_init(Voice__ctx_type_14 &_output_){
   Voice__ctx_type_14 _ctx;
   _ctx.phase = 0.f;
   Voice__ctx_type_4_init(_ctx._inst39);
   Voice__ctx_type_3_init(_ctx._inst37);
   _output_ = _ctx;
   return ;
}

void Voice_lfo_init(Voice__ctx_type_14 &_output_){
   Voice__ctx_type_14_init(_output_);
   return ;
}

float Voice_lfo(Voice__ctx_type_14 &_ctx, float f, uint8_t gate){
   float rate;
   rate = ((0.00152588f * f) + 1.52588e-05f);
   uint8_t _cond_106;
   _cond_106 = Voice_edge(_ctx._inst37,gate);
   if(_cond_106){
      _ctx.phase = 0.f;
   }
   uint8_t _cond_107;
   _cond_107 = Voice_each(_ctx._inst39,4);
   if(_cond_107){
      _ctx.phase = (_ctx.phase + rate);
   }
   uint8_t _cond_108;
   _cond_108 = (_ctx.phase > 1.f);
   if(_cond_108){
      _ctx.phase = (_ctx.phase + (-1.f));
   }
   return (sinf((6.28318530718f * _ctx.phase)) + 0.5f);
}

void Voice__ctx_type_15_init(Voice__ctx_type_15 &_output_){
   Voice__ctx_type_15 _ctx;
   _ctx.pre = 0;
   _ctx.n4 = 0;
   _ctx.n3 = 0;
   _ctx.n2 = 0;
   _ctx.n1 = 0;
   _ctx.count = 0;
   _output_ = _ctx;
   return ;
}

void Voice_mono_noteOn_init(Voice__ctx_type_15 &_output_){
   Voice__ctx_type_15_init(_output_);
   return ;
}

int Voice_mono_noteOn(Voice__ctx_type_15 &_ctx, int n){
   uint8_t _cond_112;
   _cond_112 = (_ctx.count == 0);
   if(_cond_112){
      _ctx.n1 = n;
      _ctx.pre = n;
   }
   else
   {
      uint8_t _cond_111;
      _cond_111 = (_ctx.count == 1);
      if(_cond_111){
         _ctx.n2 = n;
         _ctx.pre = n;
      }
      else
      {
         uint8_t _cond_110;
         _cond_110 = (_ctx.count == 2);
         if(_cond_110){
            _ctx.n3 = n;
            _ctx.pre = n;
         }
         else
         {
            uint8_t _cond_109;
            _cond_109 = (_ctx.count == 3);
            if(_cond_109){
               _ctx.n4 = n;
            }
         }
      }
   }
   _ctx.pre = n;
   uint8_t _cond_113;
   _cond_113 = (_ctx.count <= 4);
   if(_cond_113){
      _ctx.count = (_ctx.count + 1);
   }
   return _ctx.pre;
}

void Voice_mono_noteOff_init(Voice__ctx_type_15 &_output_){
   Voice__ctx_type_15_init(_output_);
   return ;
}

int Voice_mono_noteOff(Voice__ctx_type_15 &_ctx, int n){
   uint8_t found;
   found = 0;
   uint8_t _cond_119;
   _cond_119 = (n == _ctx.n1);
   if(_cond_119){
      int _tmp_114_0;
      _tmp_114_0 = _ctx.n2;
      int _tmp_114_1;
      _tmp_114_1 = _ctx.n3;
      int _tmp_114_2;
      _tmp_114_2 = _ctx.n4;
      _ctx.n1 = _tmp_114_0;
      _ctx.n2 = _tmp_114_1;
      _ctx.n3 = _tmp_114_2;
      found = 1;
   }
   else
   {
      uint8_t _cond_118;
      _cond_118 = (n == _ctx.n2);
      if(_cond_118){
         int _tmp_115_0;
         _tmp_115_0 = _ctx.n3;
         int _tmp_115_1;
         _tmp_115_1 = _ctx.n4;
         _ctx.n2 = _tmp_115_0;
         _ctx.n3 = _tmp_115_1;
         found = 1;
      }
      else
      {
         uint8_t _cond_117;
         _cond_117 = (n == _ctx.n3);
         if(_cond_117){
            _ctx.n3 = _ctx.n4;
            found = 1;
         }
         else
         {
            uint8_t _cond_116;
            _cond_116 = (n == _ctx.n4);
            if(_cond_116){
               found = 1;
            }
         }
      }
   }
   uint8_t _cond_120;
   _cond_120 = (found && (_ctx.count > 0));
   if(_cond_120){
      _ctx.count = (_ctx.count + (-1));
   }
   uint8_t _cond_121;
   _cond_121 = (_ctx.count == 1);
   if(_cond_121){
      _ctx.pre = _ctx.n1;
   }
   uint8_t _cond_122;
   _cond_122 = (_ctx.count == 2);
   if(_cond_122){
      _ctx.pre = _ctx.n2;
   }
   uint8_t _cond_123;
   _cond_123 = (_ctx.count == 3);
   if(_cond_123){
      _ctx.pre = _ctx.n3;
   }
   uint8_t _cond_124;
   _cond_124 = (_ctx.count == 4);
   if(_cond_124){
      _ctx.pre = _ctx.n4;
   }
   return _ctx.pre;
}

void Voice_mono_isGateOn_init(Voice__ctx_type_15 &_output_){
   Voice__ctx_type_15_init(_output_);
   return ;
}

uint8_t Voice_mono_isGateOn(Voice__ctx_type_15 &_ctx){
   return (_ctx.count > 0);
}

void Voice__ctx_type_16_init(Voice__ctx_type_16 &_output_){
   Voice__ctx_type_16 _ctx;
   _ctx.wave = 0.f;
   _ctx.res = 0.f;
   _ctx.pw = 0.f;
   _ctx.pitch = 0.f;
   Voice__ctx_type_15_init(_ctx.monoin);
   _ctx.lfo_rate = 0.f;
   _ctx.lfo_amt = 0.f;
   _ctx.flt_atm = 0.f;
   _ctx.env_s = 0.f;
   _ctx.env_r = 0.f;
   _ctx.env_d = 0.f;
   _ctx.env_a = 0.f;
   _ctx.end_r = 0.f;
   _ctx.cut = 0.f;
   _ctx.amp_s = 0.f;
   _ctx.amp_r = 0.f;
   _ctx.amp_d = 0.f;
   _ctx.amp_a = 0.f;
   Voice__ctx_type_12_init(_ctx._inst70);
   Voice__ctx_type_13_init(_ctx._inst69);
   Voice__ctx_type_13_init(_ctx._inst68);
   Voice__ctx_type_10_init(_ctx._inst67);
   Voice__ctx_type_14_init(_ctx._inst66);
   Voice_default(_ctx);
   _output_ = _ctx;
   return ;
}

void Voice_process_init(Voice__ctx_type_16 &_output_){
   Voice__ctx_type_16_init(_output_);
   return ;
}

float Voice_process(Voice__ctx_type_16 &_ctx, float i){
   uint8_t gate;
   gate = Voice_mono_isGateOn(_ctx.monoin);
   float lfo1;
   lfo1 = (Voice_lfo(_ctx._inst66,_ctx.lfo_rate,gate) * _ctx.lfo_amt);
   float x;
   x = Voice_osc(_ctx._inst67,_ctx.pitch,(_ctx.pw + lfo1),_ctx.wave);
   float amp_env;
   amp_env = Voice_adsr(_ctx._inst68,gate,_ctx.amp_a,_ctx.amp_d,_ctx.amp_s,_ctx.amp_r);
   float flt_env;
   flt_env = Voice_adsr(_ctx._inst69,gate,_ctx.env_a,_ctx.env_d,_ctx.env_s,_ctx.end_r);
   float cut_mod;
   cut_mod = (_ctx.cut + (_ctx.flt_atm * flt_env));
   float output;
   output = (amp_env * Voice_svf(_ctx._inst70,x,cut_mod,_ctx.res,0));
   return output;
}

void Voice_noteOn_init(Voice__ctx_type_16 &_output_){
   Voice__ctx_type_16_init(_output_);
   return ;
}

void Voice_noteOn(Voice__ctx_type_16 &_ctx, int note, int velocity, int channel){
   _ctx.pitch = int_to_float(Voice_mono_noteOn(_ctx.monoin,note));
}

void Voice_noteOff_init(Voice__ctx_type_16 &_output_){
   Voice__ctx_type_16_init(_output_);
   return ;
}

void Voice_noteOff(Voice__ctx_type_16 &_ctx, int note, int channel){
   _ctx.pitch = int_to_float(Voice_mono_noteOff(_ctx.monoin,note));
}

void Voice_controlChange_init(Voice__ctx_type_16 &_output_){
   Voice__ctx_type_16_init(_output_);
   return ;
}

void Voice_controlChange(Voice__ctx_type_16 &_ctx, int control, int value, int channel){
   float value_0_1;
   value_0_1 = (int_to_float(value) * 0.00787401574803f);
   float value_m1_1;
   value_m1_1 = ((value_0_1 * 2.f) + (-1.f));
   uint8_t _cond_125;
   _cond_125 = (control == 30);
   if(_cond_125){
      _ctx.wave = value_0_1;
   }
   uint8_t _cond_126;
   _cond_126 = (control == 31);
   if(_cond_126){
      _ctx.pw = value_0_1;
   }
   uint8_t _cond_127;
   _cond_127 = (control == 32);
   if(_cond_127){
      _ctx.lfo_amt = value_m1_1;
   }
   uint8_t _cond_128;
   _cond_128 = (control == 33);
   if(_cond_128){
      _ctx.lfo_rate = value_0_1;
   }
   uint8_t _cond_129;
   _cond_129 = (control == 34);
   if(_cond_129){
      _ctx.amp_a = value_0_1;
   }
   uint8_t _cond_130;
   _cond_130 = (control == 35);
   if(_cond_130){
      _ctx.amp_d = value_0_1;
   }
   uint8_t _cond_131;
   _cond_131 = (control == 36);
   if(_cond_131){
      _ctx.amp_s = value_0_1;
   }
   uint8_t _cond_132;
   _cond_132 = (control == 37);
   if(_cond_132){
      _ctx.amp_r = value_0_1;
   }
   uint8_t _cond_133;
   _cond_133 = (control == 38);
   if(_cond_133){
      _ctx.cut = value_0_1;
   }
   uint8_t _cond_134;
   _cond_134 = (control == 39);
   if(_cond_134){
      _ctx.res = value_0_1;
   }
   uint8_t _cond_135;
   _cond_135 = (control == 40);
   if(_cond_135){
      _ctx.flt_atm = value_m1_1;
   }
   uint8_t _cond_136;
   _cond_136 = (control == 41);
   if(_cond_136){
      _ctx.env_a = value_0_1;
   }
   uint8_t _cond_137;
   _cond_137 = (control == 42);
   if(_cond_137){
      _ctx.env_d = value_0_1;
   }
   uint8_t _cond_138;
   _cond_138 = (control == 43);
   if(_cond_138){
      _ctx.env_s = value_0_1;
   }
   uint8_t _cond_139;
   _cond_139 = (control == 44);
   if(_cond_139){
      _ctx.env_r = value_0_1;
   }
}

void Voice_default_init(Voice__ctx_type_16 &_output_){
   Voice__ctx_type_16_init(_output_);
   return ;
}

void Voice_default(Voice__ctx_type_16 &_ctx){
   _ctx.pw = 0.f;
   _ctx.pitch = 42.f;
   _ctx.cut = 1.f;
   _ctx.res = 0.f;
   _ctx.amp_s = 1.f;
   _ctx.lfo_amt = 0.5f;
   _ctx.lfo_rate = 0.f;
}


