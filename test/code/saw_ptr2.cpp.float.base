
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#include "saw_ptr2.h"

void Util__ctx_type_3_init(Util__ctx_type_3 &_output_){
   Util__ctx_type_3 _ctx;
   _ctx.y1 = 0.0f;
   _ctx.x1 = 0.0f;
   _output_ = _ctx;
   return ;
}

float Util_dcblock(Util__ctx_type_3 &_ctx, float x0){
   float y0;
   y0 = (x0 + (- _ctx.x1) + (0.995f * _ctx.y1));
   _ctx.x1 = x0;
   _ctx.y1 = y0;
   return y0;
}

void Saw_ptr2__ctx_type_0_init(Saw_ptr2__ctx_type_0 &_output_){
   Saw_ptr2__ctx_type_0 _ctx;
   _ctx.rate = 0.0f;
   _ctx.phase = 0.0f;
   Util__ctx_type_1_init(_ctx._inst159);
   Saw_ptr2_default(_ctx);
   _output_ = _ctx;
   return ;
}

float Saw_ptr2_process(Saw_ptr2__ctx_type_0 &_ctx, float cv){
   if(Util_change(_ctx._inst159,cv)){
      _ctx.rate = Util_cvToRate(cv);
   }
   float out;
   float s1;
   s1 = _ctx.rate;
   float s2;
   s2 = (_ctx.rate + s1);
   _ctx.phase = (_ctx.phase + _ctx.rate);
   if(_ctx.phase > 1.f){
      _ctx.phase = (-1.f + _ctx.phase);
   }
   if(_ctx.phase < s1){
      float d;
      d = (_ctx.phase / _ctx.rate);
      out = (1.f + (d * (s2 + (- d))));
   }
   else
   {
      if(_ctx.phase < s2){
         float d;
         d = (_ctx.phase / _ctx.rate);
         out = (3.f + (d * (-4.f + d + s2)));
      }
      else
      {
         out = (-1.f + (2.f * _ctx.phase));
      }
   }
   return out;
}


