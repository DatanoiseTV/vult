
#ifndef SFI_FI_H
#define SFI_FI_H

#include <stdint.h>
#include <math.h>
#include "vultin.h"
#include "sfi_fi.tables.h"
#include <Audio.h>
#include <AudioStream.h>

typedef struct _tuple___real_int__ {
   fix16_t field_0;
   int field_1;
} _tuple___real_int__;

typedef struct Sfi_fi__ctx_type_0 {
   int process_ret_1;
   fix16_t process_ret_0;
} Sfi_fi__ctx_type_0;

typedef Sfi_fi__ctx_type_0 Sfi_fi_process_type;

void Sfi_fi__ctx_type_0_init(Sfi_fi__ctx_type_0 &_output_);

static_inline void Sfi_fi_process_init(Sfi_fi__ctx_type_0 &_output_){
   Sfi_fi__ctx_type_0_init(_output_);
   return ;
}

static_inline void Sfi_fi_process(Sfi_fi__ctx_type_0 &_ctx, fix16_t a, int b){
   _ctx.process_ret_0 = a;
   _ctx.process_ret_1 = b;
   return ;
}

typedef Sfi_fi__ctx_type_0 Sfi_fi_process_ret_0_type;

static_inline void Sfi_fi_process_ret_0_init(Sfi_fi__ctx_type_0 &_output_){
   Sfi_fi__ctx_type_0_init(_output_);
   return ;
}

static_inline fix16_t Sfi_fi_process_ret_0(Sfi_fi__ctx_type_0 &_ctx){
   return _ctx.process_ret_0;
};

typedef Sfi_fi__ctx_type_0 Sfi_fi_process_ret_1_type;

static_inline void Sfi_fi_process_ret_1_init(Sfi_fi__ctx_type_0 &_output_){
   Sfi_fi__ctx_type_0_init(_output_);
   return ;
}

static_inline int Sfi_fi_process_ret_1(Sfi_fi__ctx_type_0 &_ctx){
   return _ctx.process_ret_1;
};

typedef Sfi_fi__ctx_type_0 Sfi_fi_noteOn_type;

static_inline void Sfi_fi_noteOn_init(Sfi_fi__ctx_type_0 &_output_){
   Sfi_fi__ctx_type_0_init(_output_);
   return ;
}

static_inline void Sfi_fi_noteOn(Sfi_fi__ctx_type_0 &_ctx, int note, int velocity, int channel){
}

typedef Sfi_fi__ctx_type_0 Sfi_fi_noteOff_type;

static_inline void Sfi_fi_noteOff_init(Sfi_fi__ctx_type_0 &_output_){
   Sfi_fi__ctx_type_0_init(_output_);
   return ;
}

static_inline void Sfi_fi_noteOff(Sfi_fi__ctx_type_0 &_ctx, int note, int channel){
}

typedef Sfi_fi__ctx_type_0 Sfi_fi_controlChange_type;

static_inline void Sfi_fi_controlChange_init(Sfi_fi__ctx_type_0 &_output_){
   Sfi_fi__ctx_type_0_init(_output_);
   return ;
}

static_inline void Sfi_fi_controlChange(Sfi_fi__ctx_type_0 &_ctx, int control, int value, int channel){
}

typedef Sfi_fi__ctx_type_0 Sfi_fi_default_type;

static_inline void Sfi_fi_default_init(Sfi_fi__ctx_type_0 &_output_){
   Sfi_fi__ctx_type_0_init(_output_);
   return ;
}

static_inline void Sfi_fi_default(Sfi_fi__ctx_type_0 &_ctx){
}



class sfi_fi : public AudioStream
{
public:
  sfi_fi(void) : AudioStream(2, inputQueueArray)
  {
     Sfi_fi_process_init(data);
  }

  void begin() {
    Sfi_fi_default(data);
  }

  // Handles note on events
  void noteOn(int note, int velocity, int channel){
    // If the velocity is larger than zero, means that is turning on
    if(velocity) Sfi_fi_noteOn(data, note, velocity, channel);
    else         Sfi_fi_noteOff(data, note, channel);
  }

  // Handles note off events
  void noteOff(int note, int velocity, int channel) {
    Sfi_fi_noteOff(data, note, channel);

  }

  // Handles control change events
  void controlChange(int control, int value, int channel) {
    Sfi_fi_controlChange(data, control, value, channel);
  }

  virtual void update(void);

private:
  Sfi_fi_process_type data;
  audio_block_t *inputQueueArray[2];

};

#endif // SFI_FI_H
