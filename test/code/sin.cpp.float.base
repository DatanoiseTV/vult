
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#include "sin.h"

Sin__ctx_type_0 Sin__ctx_type_0_init(){
   Sin__ctx_type_0 _ctx;
   _ctx.pre_x = 0.f;
   return _ctx;
}

Sin__ctx_type_0 Sin_change_init(){ return Sin__ctx_type_0_init();}

uint8_t Sin_change(Sin__ctx_type_0 &_ctx, float x){
   uint8_t v = (_ctx.pre_x != x);
   _ctx.pre_x = x;
   return v;
}

Sin__ctx_type_1 Sin__ctx_type_1_init(){
   Sin__ctx_type_1 _ctx;
   _ctx.y2 = 0.f;
   _ctx.y1 = 0.f;
   _ctx.w = 0.f;
   _ctx.cos_w = 0.f;
   _ctx._inst0 = Sin__ctx_type_0_init();
   Sin_sc_osc_start(_ctx);
   return _ctx;
}

Sin__ctx_type_1 Sin_sc_osc_init(){ return Sin__ctx_type_1_init();}

float Sin_sc_osc(Sin__ctx_type_1 &_ctx, float pitch){
   float g = 1.f;
   if(Sin_change(_ctx._inst0,pitch)){
      float pre_w = _ctx.w;
      _ctx.w = (0.00116485f * expf((0.0577623f * pitch)));
      g = (tanf((_ctx.w * 0.5f)) / tanf((pre_w * 0.5f)));
      _ctx.cos_w = cosf(_ctx.w);
   }
   float y1_next = ((_ctx.cos_w * _ctx.y1) + ((_ctx.cos_w + 1.f) * g * _ctx.y2));
   float y2_next = (((_ctx.cos_w + (-1.f)) * _ctx.y1) + (_ctx.cos_w * g * _ctx.y2));
   _ctx.y1 = float_clip(y1_next,(-1.f),1.f);
   _ctx.y2 = float_clip(y2_next,(-1.f),1.f);
   return _ctx.y1;
}

Sin__ctx_type_1 Sin_sc_osc_start_init(){ return Sin__ctx_type_1_init();}

void Sin_sc_osc_start(Sin__ctx_type_1 &_ctx){
   _ctx.y1 = 1.f;
   _ctx.y2 = ((- _ctx.y1) * 0.5f);
}

Sin__ctx_type_2 Sin__ctx_type_2_init(){
   Sin__ctx_type_2 _ctx;
   _ctx.pitch = 0.f;
   _ctx._inst0 = Sin__ctx_type_1_init();
   Sin_default(_ctx);
   return _ctx;
}

Sin__ctx_type_2 Sin_process_init(){ return Sin__ctx_type_2_init();}

float Sin_process(Sin__ctx_type_2 &_ctx, float input){
   return Sin_sc_osc(_ctx._inst0,_ctx.pitch);
}

Sin__ctx_type_2 Sin_noteOn_init(){ return Sin__ctx_type_2_init();}

void Sin_noteOn(Sin__ctx_type_2 &_ctx, int note, int velocity){
   _ctx.pitch = int_to_float(note);
}

Sin__ctx_type_2 Sin_noteOff_init(){ return Sin__ctx_type_2_init();}

void Sin_noteOff(Sin__ctx_type_2 &_ctx, int note){
}

Sin__ctx_type_2 Sin_controlChange_init(){ return Sin__ctx_type_2_init();}

void Sin_controlChange(Sin__ctx_type_2 &_ctx, int control, int value){
}

Sin__ctx_type_2 Sin_default_init(){ return Sin__ctx_type_2_init();}

void Sin_default(Sin__ctx_type_2 &_ctx){
   _ctx.pitch = 69.f;
}


