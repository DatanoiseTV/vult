package .wav_file;

import java.util.Arrays;
import java.util.Random;
import .external.*;

public class wav_file {

static int clip(int x, int minv, int maxv) {
   if(x > maxv)
      return maxv;
   else if(x < minv)
      return minv;
   else return x;
}

static float clip(float x, float minv, float maxv) {
   if(x > maxv)
      return maxv;
   else if(x < minv)
      return minv;
   else return x;
}

int[] makeArray(int size, int init) {
   int a[] = new int[size];
   Arrays.fill(a, init);
   return a;
}

float[] makeArray(int size, float init) {
   float a[] = new float[size];
   Arrays.fill(a, init);
   return a;
}

boolean[] makeArray(int size, boolean init) {
   boolean a[] = new boolean[size];
   Arrays.fill(a, init);
   return a;
}

int int_to_fix16(int a) { return a * 0x00010000; }

int fix16_to_int(int a) { return (a >> 16); }

int fix16_add(int x, int y) { return x + y; }

int fix16_sub(int x, int y) { return x - y; }

int fix16_minus(int x) { return -x; }

float fix16_to_float(int a) { return (float)a / 0x00010000; }
int float_to_fix16(float a) {
   float temp = a * 0x00010000;
   return (int)temp;
}

int fix16_mul(int x, int y) {
   long res = (long)x * (long)y;
   return (int)(res >> 16);
}

int fix16_div(int a, int b) {
   if (b == 0)
      return 0;
   int result = (int)(((long)a << 16) / b);
   return result;
}

static boolean not(boolean x) {
   return !x;
}

static float int_to_float(int x) {
   return (float)x;
}

int float_to_int(float x) {
   return (int)x;
}

float floor(float x) {
   return (float)Math.floor(x);
}

static Random rand = new Random();

float random() {
   return rand.nextFloat();
}

int irandom() {
   return rand.nextInt();
}

float get(float[] a, int i) {
   return a[i];
}

void set(float[] a, int i, float val) {
   a[i] = val;
}

int get(int[] a, int i) {
   return a[i];
}

void set(int[] a, int i, int val) {
   a[i] = val;
}

float[] wrap_array(float x[]) {
   return x;
}

int[] wrap_array(int x[]) {
   return x;
}

float cosh(float x) {
   return (float)Math.cosh(x);
}

float cos(float x) {
   return (float)Math.cos(x);
}

float sin(float x) {
   return (float)Math.sin(x);
}

float sinh(float x) {
   return (float)Math.sinh(x);
}

float tan(float x) {
   return (float)Math.tan(x);
}

float tanh(float x) {
   return (float)Math.tanh(x);
}

float sqrt(float x) {
   return (float)Math.sqrt(x);
}

float pow(float x, float y) {
   return (float)Math.pow(x, y);
}

float exp(float x) {
   return (float)Math.exp(x);
}


float Wav_file_ext_wave_chan_0[];
         public void set_Wav_file_ext_wave_chan_0(java.nio.FloatBuffer buffer){
            Wav_file_ext_wave_chan_0 = new float[600];
            buffer.get(Wav_file_ext_wave_chan_0);
            }
private class Wav_file__ctx_type_2 {
   public int i;
 
   Wav_file__ctx_type_2(){ this.i = 0;
    } 
   Wav_file__ctx_type_2(int i){ this.i = i;
    } }

private class Wav_file__ctx_type_3 {
   public Wav_file__ctx_type_2 _inst177;
 
   Wav_file__ctx_type_3(){ this._inst177 = new Wav_file__ctx_type_2();
    } 
   Wav_file__ctx_type_3(Wav_file__ctx_type_2 _inst177){ this._inst177 = _inst177;
    } }

private class Wav_file__ctx_type_4 {
   public Wav_file__ctx_type_3 _inst1a1;
 
   Wav_file__ctx_type_4(){ this._inst1a1 = new Wav_file__ctx_type_3();
    } 
   Wav_file__ctx_type_4(Wav_file__ctx_type_3 _inst1a1){ this._inst1a1 = _inst1a1;
    } }

private int Wav_file_ext_wave_samples(){return 600;}

private float Wav_file_ext_wave(int channel, int index){
   if(channel == 0){ return wrap_array(Wav_file_ext_wave_chan_0)[(index % 600)]; }
   return 0.0f;
}

private Wav_file__ctx_type_2 Wav_file__ctx_type_2_init(){
   Wav_file__ctx_type_2 _ctx = new Wav_file__ctx_type_2(); 
   _ctx.i = 0;
   return _ctx;
}

private Wav_file__ctx_type_2 Wav_file_index_init(){return Wav_file__ctx_type_2_init();}

private int Wav_file_index(Wav_file__ctx_type_2 _ctx){
   _ctx.i = ((1 + _ctx.i) % Wav_file_ext_wave_samples());
   return _ctx.i;
}

private Wav_file__ctx_type_3 Wav_file__ctx_type_3_init(){
   Wav_file__ctx_type_3 _ctx = new Wav_file__ctx_type_3(); 
   _ctx._inst177 = Wav_file__ctx_type_2_init();
   return _ctx;
}

private Wav_file__ctx_type_3 Wav_file_osc_wave_init(){return Wav_file__ctx_type_3_init();}

private float Wav_file_osc_wave(Wav_file__ctx_type_3 _ctx, float cv){return Wav_file_ext_wave(0,Wav_file_index(_ctx._inst177));}

private Wav_file__ctx_type_4 Wav_file__ctx_type_4_init(){
   Wav_file__ctx_type_4 _ctx = new Wav_file__ctx_type_4(); 
   _ctx._inst1a1 = Wav_file__ctx_type_3_init();
   return _ctx;
}

private Wav_file__ctx_type_4 Wav_file_process_init(){return Wav_file__ctx_type_4_init();}

private float Wav_file_process(Wav_file__ctx_type_4 _ctx, float cv){return Wav_file_osc_wave(_ctx._inst1a1,cv);}

private Wav_file__ctx_type_4 Wav_file_noteOn_init(){return Wav_file__ctx_type_4_init();}

private void Wav_file_noteOn(Wav_file__ctx_type_4 _ctx, int note, int velocity, int channel){
}

private Wav_file__ctx_type_4 Wav_file_noteOff_init(){return Wav_file__ctx_type_4_init();}

private void Wav_file_noteOff(Wav_file__ctx_type_4 _ctx, int note, int channel){
}

private Wav_file__ctx_type_4 Wav_file_controlChange_init(){return Wav_file__ctx_type_4_init();}

private void Wav_file_controlChange(Wav_file__ctx_type_4 _ctx, int control, int value, int channel){
}

private Wav_file__ctx_type_4 Wav_file_default_init(){return Wav_file__ctx_type_4_init();}

private void Wav_file_default(Wav_file__ctx_type_4 _ctx){
}


}