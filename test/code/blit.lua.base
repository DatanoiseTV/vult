
local this = {}
local ffi = require("ffi")
function this.ternary(cond,then_,else_) if cond then return then_ else return else_ end end
function this.eps()             return 1e-18; end
function this.random()          return math.random(); end
function this.irandom()         return math.floor(math.random() * 4294967296); end
function this.clip(x,low,high)  return (this.ternary(x<low,low,this.ternary(x>high,high,x))); end
function this.real(x)           return x; end
function this.int(x)            local int_part,_ = math.modf(x) return int_part; end
function this.sin(x)            return math.sin(x); end
function this.cos(x)            return math.cos(x); end
function this.abs(x)            return math.abs(x); end
function this.exp(x)            return math.exp(x); end
function this.floor(x)          return math.floor(x); end
function this.tan(x)            return math.tan(x); end
function this.tanh(x)           return math.tanh(x); end
function this.sqrt(x)           return x; end
function this.set(a,i,v)        a[i]=v; end
function this.get(a,i)          return a[i]; end
function this.makeArray(size,v) local a = ffi.new("double[?]",size); for i=0,size-1 do a[i]=v end return a; end
function this.wrap_array(a)     return a; end
function this.Blit_near_zero(x)
   return (this.abs(x) < 0.020000);

end

function this.Blit__ctx_type_1_init()
   local _ctx = {};
   _ctx.pre_x = 0.000000;
   return _ctx;

end

function this.Blit_change_init()
   return this.Blit__ctx_type_1_init();
end

function this.Blit_change(_ctx,x)
   local v = (_ctx.pre_x ~= x);
   _ctx.pre_x = x;
   return v;

end

function this.Blit__ctx_type_2_init()
   local _ctx = {};
   _ctx.y1 = 0.000000;
   _ctx.x1 = 0.000000;
   return _ctx;

end

function this.Blit_dcblock_init()
   return this.Blit__ctx_type_2_init();
end

function this.Blit_dcblock(_ctx,x0)
   local y0 = (x0 + (- _ctx.x1) + (_ctx.y1 * 0.995000));
   _ctx.x1 = x0;
   _ctx.y1 = y0;
   return y0;

end

function this.Blit_pitchToRate(d)
   return (0.000185 * this.exp((0.057762 * d)));

end

function this.Blit_pulse_train(m,phase)
   local pi_phase = (phase * 3.141593);
   local denominator1 = this.sin(pi_phase);
   local tmp1 = 0.000000;
   if this.Blit_near_zero(denominator1) then
      tmp1 = 1.000000;

   else

      tmp1 = this.sin((m * pi_phase));
      tmp1 = (tmp1 / (m * denominator1));

   end
   return tmp1;

end

function this.Blit__ctx_type_5_init()
   local _ctx = {};
   _ctx.state_triang = 0.000000;
   _ctx.state_saw = 0.000000;
   _ctx.state_pulse = 0.000000;
   _ctx.rate = 0.000000;
   _ctx.phase = 0.000000;
   _ctx.output = 0.000000;
   _ctx.m = 0.000000;
   _ctx._inst18 = this.Blit__ctx_type_2_init();
   _ctx._inst10 = this.Blit__ctx_type_1_init();
   return _ctx;

end

function this.Blit_osc_init()
   return this.Blit__ctx_type_5_init();
end

function this.Blit_osc(_ctx,pitch,pw,wave)
   local fixed_pitch = 0.000000;
   if (wave < 0.666667) then
      fixed_pitch = pitch;

   else

      fixed_pitch = (pitch + 12.000000);

   end
   if this.Blit_change(_ctx._inst10,fixed_pitch) then
      _ctx.rate = this.Blit_pitchToRate(fixed_pitch);
      local p = 0.0;
      p = (1.000000 / _ctx.rate);
      local maxHarmonics = 0.0;
      maxHarmonics = this.floor((p * 0.500000));
      _ctx.m = ((2.000000 * maxHarmonics) + 1.000000);

   end
   local shift05 = (0.500000 + (pw * 0.490000));
   local shift = (_ctx.phase + shift05);
   if (shift > 1.000000) then
      shift = (shift + (-1.000000));

   end
   local tmp1 = this.Blit_pulse_train(_ctx.m,_ctx.phase);
   local tmp2 = this.Blit_pulse_train(_ctx.m,shift);
   _ctx.phase = (_ctx.phase + _ctx.rate);
   if (_ctx.phase > 1.000000) then
      _ctx.phase = (_ctx.phase + (-1.000000));

   end
   _ctx.state_pulse = this.clip(((_ctx.state_pulse * 0.999500) + tmp1 + (- tmp2)),(-1.000000),1.000000);
   _ctx.state_saw = this.clip(((_ctx.state_saw * 0.999500) + (((tmp1 + tmp2 + ((-2.000000) * _ctx.rate)) / shift05) * 0.500000)),(-1.000000),1.000000);
   _ctx.state_triang = this.clip(((_ctx.state_triang * 0.999500) + (2.000000 * _ctx.state_pulse * _ctx.rate)),(-1.000000),1.000000);
   if (wave < 0.333333) then
      _ctx.output = _ctx.state_pulse;

   else

      local _cond_33 = false;
      _cond_33 = (wave < 0.666667);
      if _cond_33 then
         _ctx.output = (2.000000 * _ctx.state_saw);

      else

         _ctx.output = (2.000000 * _ctx.state_triang * (1.000000 + pw));

      end

   end
   _ctx.output = this.Blit_dcblock(_ctx._inst18,_ctx.output);
   return this.clip((_ctx.output * 0.250000),(-1.000000),1.000000);

end

function this.Blit__ctx_type_6_init()
   local _ctx = {};
   _ctx.wave = 0.000000;
   _ctx.pw = 0.000000;
   _ctx.pitch = 0.000000;
   _ctx._inst20 = this.Blit__ctx_type_5_init();
   return _ctx;

end

function this.Blit_process_init()
   return this.Blit__ctx_type_6_init();
end

function this.Blit_process(_ctx,input)
   return this.Blit_osc(_ctx._inst20,_ctx.pitch,_ctx.pw,_ctx.wave);

end

function this.Blit_noteOn_init()
   return this.Blit__ctx_type_6_init();
end

function this.Blit_noteOn(_ctx,note,velocity,channel)
   _ctx.pitch = this.real(note);

end

function this.Blit_noteOff_init()
   return this.Blit__ctx_type_6_init();
end

function this.Blit_noteOff(_ctx,note,channel)

end

function this.Blit_controlChange_init()
   return this.Blit__ctx_type_6_init();
end

function this.Blit_controlChange(_ctx,control,value,channel)
   if (control == 30) then
      _ctx.pw = (this.real(value) * 0.007874);

   end
   if (control == 31) then
      _ctx.wave = (this.real(value) * 0.007874);

   end

end

function this.Blit_default_init()
   return this.Blit__ctx_type_6_init();
end

function this.Blit_default(_ctx)
   _ctx.pw = 0.000000;
   _ctx.wave = 45.000000;
   _ctx.pitch = 45.000000;

end


function this.process(ctx,in0) return this.Blit_process(ctx,in0) end
function this.noteOn(ctx,in0,in1,in2) return this.Blit_noteOn(ctx,in0,in1,in2) end
function this.noteOff(ctx,in0,in1) return this.Blit_noteOff(ctx,in0,in1) end
function this.controlChange(ctx,in0,in1,in2) return this.Blit_controlChange(ctx,in0,in1,in2) end
function this.init() return this.Blit_process_init() end
function this.default(ctx) return this.Blit_default(ctx) end
this.config = { inputs = 2, outputs = 1, noteon_inputs = 4, noteoff_inputs = 3, controlchange_inputs = 4, is_active = true }
return this
