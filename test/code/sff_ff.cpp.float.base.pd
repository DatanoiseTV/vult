
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#include "sff_ff.h"

void Sff_ff__ctx_type_0_init(Sff_ff__ctx_type_0 &_output_){
   Sff_ff__ctx_type_0 _ctx;
   _ctx.process_ret_1 = 0.f;
   _ctx.process_ret_0 = 0.f;
   _output_ = _ctx;
   return ;
}



extern "C" {

static t_class *sff_ff_tilde_class;

typedef struct _sff_ff_tilde {
   t_object  x_obj;
   float dummy;
   Sff_ff_process_type data;
} t_sff_ff_tilde;

t_int *sff_ff_tilde_perform(t_int *w)
{
   t_sff_ff_tilde *x = (t_sff_ff_tilde *)(w[1]);

   t_sample *in_0 = (t_sample *)(w[2]); 
   t_sample *in_1 = (t_sample *)(w[3]); 
   t_sample *out_0 = (t_sample *)(w[4]); 
   t_sample *out_1 = (t_sample *)(w[5]); 

   int n = (int)(w[6]); 

   while (n--) {
    Sff_ff_process(x->data,(float) *(in_0++),(float) *(in_1++)); 
   *(out_0++) = (float) Sff_ff_process_ret_0(x->data); 
   *(out_1++) = (float) Sff_ff_process_ret_1(x->data); 

   }

   return (w+7);
}

void sff_ff_tilde_dsp(t_sff_ff_tilde *x, t_signal **sp)
{
   dsp_add(sff_ff_tilde_perform, 6,
   x, 
   sp[0]->s_vec, 
   sp[1]->s_vec, 
   sp[2]->s_vec, 
   sp[3]->s_vec, 

   sp[0]->s_n);
}

void *sff_ff_tilde_new()
{
   t_sff_ff_tilde *x = (t_sff_ff_tilde *)pd_new(sff_ff_tilde_class);

   Sff_ff_process_init(x->data); 
   Sff_ff_default(x->data); 

   inlet_new(&x->x_obj, &x->x_obj.ob_pd, &s_signal, &s_signal); 

   outlet_new(&x->x_obj, &s_signal); 
   outlet_new(&x->x_obj, &s_signal); 

   return (void *)x;
}

void sff_ff_tilde_delete(t_sff_ff_tilde *x){

}

void sff_ff_noteOn(t_sff_ff_tilde *x, t_floatarg note, t_floatarg velocity, t_floatarg channel){
   if((int)velocity) Sff_ff_noteOn(x->data,(int)note,(int)velocity,(int)channel);
   else Sff_ff_noteOff(x->data,(int)note,(int)channel);
}


void sff_ff_noteOff(t_sff_ff_tilde *x, t_floatarg note, t_floatarg channel) {
   Sff_ff_noteOff(x->data,(int)note,(int)channel);
}


void sff_ff_controlChange(t_sff_ff_tilde *x, t_floatarg control, t_floatarg value, t_floatarg channel) {
   Sff_ff_controlChange(x->data,(int)control,(int)value,(int)channel);
}


void sff_ff_tilde_setup(void) {
   sff_ff_tilde_class = class_new(gensym("sff_ff~"),
      (t_newmethod)sff_ff_tilde_new, // constructor function
      (t_method)sff_ff_tilde_delete, // destructor function
      sizeof(t_sff_ff_tilde), // size of the object
      CLASS_DEFAULT, // type of object
      A_NULL); // arguments passed

   class_addmethod(sff_ff_tilde_class, (t_method)sff_ff_tilde_dsp, gensym("dsp"), A_NULL);
   CLASS_MAINSIGNALIN(sff_ff_tilde_class, t_sff_ff_tilde, dummy);

   class_addmethod(sff_ff_tilde_class, (t_method)sff_ff_noteOn,        gensym("noteOn"),        A_DEFFLOAT, A_DEFFLOAT, A_DEFFLOAT, A_NULL);
   class_addmethod(sff_ff_tilde_class, (t_method)sff_ff_noteOff,       gensym("noteOff"),       A_DEFFLOAT, A_DEFFLOAT, A_NULL);
   class_addmethod(sff_ff_tilde_class, (t_method)sff_ff_controlChange, gensym("controlChange"), A_DEFFLOAT, A_DEFFLOAT, A_DEFFLOAT, A_NULL);
}

} // extern "C"
