
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#include "kick.h"

void Noise__ctx_type_0_init(Noise__ctx_type_0 &_output_){
   Noise__ctx_type_0 _ctx;
   _ctx.w1 = 0x0 /* 0.000000 */;
   _output_ = _ctx;
   return ;
}

void Noise_pinker_init(Noise__ctx_type_0 &_output_){
   Noise__ctx_type_0_init(_output_);
   return ;
}

fix16_t Noise_pinker(Noise__ctx_type_0 &_ctx, fix16_t x){
   fix16_t b0;
   b0 = 0x718 /* 0.027713 */;
   fix16_t b1;
   b1 = 0x718 /* 0.027713 */;
   fix16_t a1;
   a1 = (-0xf1cf /* -0.944574 */);
   fix16_t w0;
   w0 = (x + (- fix_mul(a1,_ctx.w1)));
   fix16_t y0;
   y0 = (fix_mul(b0,w0) + fix_mul(b1,_ctx.w1));
   _ctx.w1 = w0;
   return y0;
}

void Noise__ctx_type_1_init(Noise__ctx_type_1 &_output_){
   Noise__ctx_type_1 _ctx;
   _ctx.x2 = 0;
   _ctx.x1 = 0;
   Noise__ctx_type_0_init(_ctx._inst2);
   _output_ = _ctx;
   return ;
}

void Noise_process_init(Noise__ctx_type_1 &_output_){
   Noise__ctx_type_1_init(_output_);
   return ;
}

fix16_t Noise_process(Noise__ctx_type_1 &_ctx, fix16_t color){
   _ctx.x1 = (((_ctx.x1 * 17389) + 7919) % 32768);
   fix16_t y1;
   y1 = fix_mul(int_to_fix(_ctx.x1),0x2 /* 0.000031 */);
   _ctx.x2 = (((_ctx.x2 * 27449) + 12553) % 32768);
   fix16_t y2;
   y2 = fix_mul(int_to_fix(_ctx.x2),0x2 /* 0.000031 */);
   fix16_t out;
   uint8_t _cond_7;
   _cond_7 = (color > 0x8000 /* 0.500000 */);
   if(_cond_7){ out = Noise_pinker(_ctx._inst2,(y1 + (- y2))); }
   else
   { out = (y1 + (- y2)); }
   return fix_mul(0x20000 /* 2.000000 */,out);
}

void Noise_noteOn_init(Noise__ctx_type_1 &_output_){
   Noise__ctx_type_1_init(_output_);
   return ;
}

void Noise_noteOn(Noise__ctx_type_1 &_ctx, int note, int velocity, int channel){
}

void Noise_noteOff_init(Noise__ctx_type_1 &_output_){
   Noise__ctx_type_1_init(_output_);
   return ;
}

void Noise_noteOff(Noise__ctx_type_1 &_ctx, int note, int channel){
}

void Noise_controlChange_init(Noise__ctx_type_1 &_output_){
   Noise__ctx_type_1_init(_output_);
   return ;
}

void Noise_controlChange(Noise__ctx_type_1 &_ctx, int control, int value, int channel){
}

void Noise_default_init(Noise__ctx_type_1 &_output_){
   Noise__ctx_type_1_init(_output_);
   return ;
}

void Noise_default(Noise__ctx_type_1 &_ctx){
}

void Util__ctx_type_0_init(Util__ctx_type_0 &_output_){
   Util__ctx_type_0 _ctx;
   _ctx.pre = 0;
   _output_ = _ctx;
   return ;
}

void Util_edge_init(Util__ctx_type_0 &_output_){
   Util__ctx_type_0_init(_output_);
   return ;
}

uint8_t Util_edge(Util__ctx_type_0 &_ctx, uint8_t x){
   uint8_t ret;
   ret = (x && bool_not(_ctx.pre));
   _ctx.pre = x;
   return ret;
}

void Util__ctx_type_1_init(Util__ctx_type_1 &_output_){
   Util__ctx_type_1 _ctx;
   _ctx.pre_x = 0x0 /* 0.000000 */;
   _output_ = _ctx;
   return ;
}

void Util_change_init(Util__ctx_type_1 &_output_){
   Util__ctx_type_1_init(_output_);
   return ;
}

uint8_t Util_change(Util__ctx_type_1 &_ctx, fix16_t x){
   uint8_t v;
   v = (_ctx.pre_x != x);
   _ctx.pre_x = x;
   return v;
}

fix16_t Util_map(fix16_t x, fix16_t x0, fix16_t x1, fix16_t y0, fix16_t y1){
   return (fix_div(fix_mul((x + (- x0)),(y1 + (- y0))),(x1 + (- x0))) + y0);
}

void Util__ctx_type_3_init(Util__ctx_type_3 &_output_){
   Util__ctx_type_3 _ctx;
   _ctx.y1 = 0x0 /* 0.000000 */;
   _ctx.x1 = 0x0 /* 0.000000 */;
   _output_ = _ctx;
   return ;
}

void Util_dcblock_init(Util__ctx_type_3 &_output_){
   Util__ctx_type_3_init(_output_);
   return ;
}

fix16_t Util_dcblock(Util__ctx_type_3 &_ctx, fix16_t x0){
   fix16_t y0;
   y0 = (x0 + (- _ctx.x1) + fix_mul(_ctx.y1,0xfeb8 /* 0.995000 */));
   _ctx.x1 = x0;
   _ctx.y1 = y0;
   return y0;
}

void Util__ctx_type_4_init(Util__ctx_type_4 &_output_){
   Util__ctx_type_4 _ctx;
   _ctx.x = 0x0 /* 0.000000 */;
   _output_ = _ctx;
   return ;
}

void Util_smooth_init(Util__ctx_type_4 &_output_){
   Util__ctx_type_4_init(_output_);
   return ;
}

fix16_t Util_smooth(Util__ctx_type_4 &_ctx, fix16_t input){
   _ctx.x = (_ctx.x + fix_mul((input + (- _ctx.x)),0x147 /* 0.005000 */));
   return _ctx.x;
}

void Util__ctx_type_5_init(Util__ctx_type_5 &_output_){
   Util__ctx_type_5 _ctx;
   _ctx.x0 = 0x0 /* 0.000000 */;
   _output_ = _ctx;
   return ;
}

void Util_average2_init(Util__ctx_type_5 &_output_){
   Util__ctx_type_5_init(_output_);
   return ;
}

fix16_t Util_average2(Util__ctx_type_5 &_ctx, fix16_t x1){
   fix16_t result;
   result = fix_mul((_ctx.x0 + x1),0x8000 /* 0.500000 */);
   _ctx.x0 = x1;
   return result;
}

fix16_t Util_cubic_clipper(fix16_t x){
   uint8_t _cond_29;
   _cond_29 = (x <= (-0xaaaa /* -0.666667 */));
   if(_cond_29){
      return (-0xaaaa /* -0.666667 */);
   }
   else
   {
      uint8_t _cond_28;
      _cond_28 = (x >= 0xaaaa /* 0.666667 */);
      if(_cond_28){
         return 0xaaaa /* 0.666667 */;
      }
      else
      {
         return (x + fix_mul(fix_mul(fix_mul((-0x5555 /* -0.333333 */),x),x),x));
      }
   }
}

fix16_t Util_pitchToRate_1024(fix16_t pitch){
   int index;
   index = int_clip(fix_to_int(fix_mul(0x3e7c /* 0.244094 */,pitch)),0,31);
   return (fix_wrap_array(Util_pitchToRate_1024_c0)[index] + fix_mul(pitch,(fix_wrap_array(Util_pitchToRate_1024_c1)[index] + fix_mul(fix_wrap_array(Util_pitchToRate_1024_c2)[index],pitch))));
}

fix16_t Util_pitchToRate(fix16_t pitch){
   int index;
   index = int_clip(fix_to_int(fix_mul(0x3e7c /* 0.244094 */,pitch)),0,31);
   return (fix_wrap_array(Util_pitchToRate_c0)[index] + fix_mul(pitch,(fix_wrap_array(Util_pitchToRate_c1)[index] + fix_mul(fix_wrap_array(Util_pitchToRate_c2)[index],pitch))));
}

fix16_t Util_cvToPitch(fix16_t cv){
   return (fix_mul(cv,0x780000 /* 120.000000 */) + 0x180000 /* 24.000000 */);
}

fix16_t Util_cvToRate_1024(fix16_t cv){
   int index;
   index = int_clip(fix_to_int(fix_mul(0x2271c7 /* 34.444444 */,cv)),0,31);
   return (fix_wrap_array(Util_cvToRate_1024_c0)[index] + fix_mul(cv,(fix_wrap_array(Util_cvToRate_1024_c1)[index] + fix_mul(fix_wrap_array(Util_cvToRate_1024_c2)[index],cv))));
}

fix16_t Util_cvToRate(fix16_t cv){
   int index;
   index = int_clip(fix_to_int(fix_mul(0x2271c7 /* 34.444444 */,cv)),0,31);
   return (fix_wrap_array(Util_cvToRate_c0)[index] + fix_mul(cv,(fix_wrap_array(Util_cvToRate_c1)[index] + fix_mul(fix_wrap_array(Util_cvToRate_c2)[index],cv))));
}

fix16_t Util_pitchToCv(fix16_t pitch){
   return fix_mul(0x222 /* 0.008333 */,((-0x180000 /* -24.000000 */) + pitch));
}

fix16_t Util_cvToperiod(fix16_t cv){
   int index;
   index = int_clip(fix_to_int(fix_mul(0x1f0000 /* 31.000000 */,cv)),0,31);
   return (fix_wrap_array(Util_cvToperiod_c0)[index] + fix_mul(cv,(fix_wrap_array(Util_cvToperiod_c1)[index] + fix_mul(fix_wrap_array(Util_cvToperiod_c2)[index],cv))));
}

fix16_t Util_cvTokHz(fix16_t cv){
   int index;
   index = int_clip(fix_to_int(fix_mul(0x1f0000 /* 31.000000 */,cv)),0,31);
   return (fix_wrap_array(Util_cvTokHz_c0)[index] + fix_mul(cv,(fix_wrap_array(Util_cvTokHz_c1)[index] + fix_mul(fix_wrap_array(Util_cvTokHz_c2)[index],cv))));
}

void Tricore__ctx_type_0_init(Tricore__ctx_type_0 &_output_){
   Tricore__ctx_type_0 _ctx;
   _ctx.reset_state = 0;
   _ctx.reset_phase = 0x0 /* 0.000000 */;
   _ctx.rate = 0x0 /* 0.000000 */;
   _ctx.phase = 0x0 /* 0.000000 */;
   _ctx.direction = 0;
   Util__ctx_type_0_init(_ctx._inst34);
   Util__ctx_type_0_init(_ctx._inst33);
   Util__ctx_type_1_init(_ctx._inst31);
   Tricore_default(_ctx);
   _output_ = _ctx;
   return ;
}

void Tricore_process_init(Tricore__ctx_type_0 &_output_){
   Tricore__ctx_type_0_init(_output_);
   return ;
}

fix16_t Tricore_process(Tricore__ctx_type_0 &_ctx, fix16_t cv, fix16_t reset, fix16_t disable){
   fix16_t out;
   out = 0x0 /* 0.000000 */;
   uint8_t _cond_46;
   _cond_46 = Util_change(_ctx._inst31,cv);
   if(_cond_46){
      _ctx.rate = fix_mul(0x40000 /* 4.000000 */,Util_cvToRate_1024(cv));
   }
   fix16_t new_phase;
   fix16_t _if_47;
   if(_ctx.direction){ _if_47 = _ctx.rate; }
   else
   { _if_47 = (- _ctx.rate); }
   new_phase = (_ctx.phase + _if_47);
   uint8_t bdisable;
   bdisable = (disable > 0x8000 /* 0.500000 */);
   uint8_t _cond_48;
   _cond_48 = (Util_edge(_ctx._inst33,(reset > 0x0 /* 0.000000 */)) || Util_edge(_ctx._inst34,bdisable));
   if(_cond_48){
      _ctx.reset_phase = _ctx.phase;
      _ctx.reset_state = 1;
      new_phase = 0x0 /* 0.000000 */;
   }
   uint8_t _cond_50;
   _cond_50 = (new_phase > 0x4000000 /* 1024.000000 */);
   if(_cond_50){
      new_phase = (0x4000000 /* 1024.000000 */ + (- (new_phase + (-0x4000000 /* -1024.000000 */))));
      _ctx.direction = 0;
   }
   else
   {
      uint8_t _cond_49;
      _cond_49 = (new_phase < (-0x4000000 /* -1024.000000 */));
      if(_cond_49){
         _ctx.direction = 1;
      }
   }
   if(bdisable){ _ctx.phase = 0x0 /* 0.000000 */; }
   else
   { _ctx.phase = new_phase; }
   if(_ctx.reset_state){
      uint8_t _cond_52;
      _cond_52 = ((fix_abs(_ctx.reset_phase) > 0xa0000 /* 10.000000 */) || bdisable);
      if(_cond_52){
         fix16_t reset_speed;
         if(bdisable){ reset_speed = 0x28f /* 0.010000 */; }
         else
         { reset_speed = 0x8000 /* 0.500000 */; }
         _ctx.reset_phase = (_ctx.reset_phase + (- fix_mul(_ctx.reset_phase,reset_speed)));
      }
      else
      {
         uint8_t _cond_51;
         _cond_51 = (_ctx.reset_phase > 0xa0000 /* 10.000000 */);
         if(bool_not(_cond_51)){ _ctx.reset_phase = 0x0 /* 0.000000 */; }
         _ctx.reset_state = 0;
         _ctx.direction = 1;
      }
      out = _ctx.reset_phase;
   }
   out = (out + _ctx.phase);
   return fix_mul(out,0x40 /* 0.000977 */);
}

void Tricore_noteOn_init(Tricore__ctx_type_0 &_output_){
   Tricore__ctx_type_0_init(_output_);
   return ;
}

void Tricore_noteOn(Tricore__ctx_type_0 &_ctx, int note, int velocity, int channel){
}

void Tricore_noteOff_init(Tricore__ctx_type_0 &_output_){
   Tricore__ctx_type_0_init(_output_);
   return ;
}

void Tricore_noteOff(Tricore__ctx_type_0 &_ctx, int note, int channel){
}

void Tricore_controlChange_init(Tricore__ctx_type_0 &_output_){
   Tricore__ctx_type_0_init(_output_);
   return ;
}

void Tricore_controlChange(Tricore__ctx_type_0 &_ctx, int control, int value, int channel){
}

void Tricore_default_init(Tricore__ctx_type_0 &_output_){
   Tricore__ctx_type_0_init(_output_);
   return ;
}

void Tricore_default(Tricore__ctx_type_0 &_ctx){
   _ctx.rate = 0xc265 /* 0.759367 */;
}

void Swept__ctx_type_0_init(Swept__ctx_type_0 &_output_){
   Swept__ctx_type_0 _ctx;
   _ctx.out = 0x0 /* 0.000000 */;
   Util__ctx_type_0_init(_ctx._inst54);
   _output_ = _ctx;
   return ;
}

void Swept_process_init(Swept__ctx_type_0 &_output_){
   Swept__ctx_type_0_init(_output_);
   return ;
}

fix16_t Swept_process(Swept__ctx_type_0 &_ctx, fix16_t gate, fix16_t start, fix16_t end, fix16_t rate){
   fix16_t a_rate;
   a_rate = fix_div(0x10000 /* 1.000000 */,(fix_mul(0x640000 /* 100.000000 */,rate) + 0x28f /* 0.010000 */));
   uint8_t bgate;
   bgate = (gate > 0x8000 /* 0.500000 */);
   _ctx.out = (_ctx.out + fix_mul(fix_mul((fix_mul(end,0x4000000 /* 1024.000000 */) + (- _ctx.out)),rate),0x106 /* 0.004000 */));
   uint8_t _cond_60;
   _cond_60 = Util_edge(_ctx._inst54,bgate);
   if(_cond_60){
      _ctx.out = fix_mul(start,0x4000000 /* 1024.000000 */);
   }
   return fix_mul(_ctx.out,0x40 /* 0.000977 */);
}

void Swept_noteOn_init(Swept__ctx_type_0 &_output_){
   Swept__ctx_type_0_init(_output_);
   return ;
}

void Swept_noteOn(Swept__ctx_type_0 &_ctx, int note, int velocity, int channel){
}

void Swept_noteOff_init(Swept__ctx_type_0 &_output_){
   Swept__ctx_type_0_init(_output_);
   return ;
}

void Swept_noteOff(Swept__ctx_type_0 &_ctx, int note, int channel){
}

void Swept_controlChange_init(Swept__ctx_type_0 &_output_){
   Swept__ctx_type_0_init(_output_);
   return ;
}

void Swept_controlChange(Swept__ctx_type_0 &_ctx, int control, int value, int channel){
}

void Swept_default_init(Swept__ctx_type_0 &_output_){
   Swept__ctx_type_0_init(_output_);
   return ;
}

void Swept_default(Swept__ctx_type_0 &_ctx){
}

fix16_t Saturate_table(fix16_t x){
   int index;
   index = int_clip(fix_to_int((x + 0xc0000 /* 12.000000 */)),0,24);
   return (fix_wrap_array(Saturate_table_c0)[index] + fix_mul(x,(fix_wrap_array(Saturate_table_c1)[index] + fix_mul(fix_wrap_array(Saturate_table_c2)[index],x))));
}

fix16_t Saturate_process(fix16_t x){
   return Saturate_table(x);
}

void Saturate_noteOn(int note, int velocity, int channel){
}

void Saturate_noteOff(int note, int channel){
}

void Saturate_controlChange(int control, int value, int channel){
}

void Saturate_default(){
}

void Ahr__ctx_type_0_init(Ahr__ctx_type_0 &_output_){
   Ahr__ctx_type_0 _ctx;
   _ctx.target = 0x0 /* 0.000000 */;
   _ctx.state = 0;
   _ctx.rate = 0x0 /* 0.000000 */;
   _ctx.out = 0x0 /* 0.000000 */;
   _ctx.hold_phase = 0x0 /* 0.000000 */;
   Util__ctx_type_0_init(_ctx._inst70);
   Util__ctx_type_0_init(_ctx._inst68);
   _output_ = _ctx;
   return ;
}

void Ahr_do_init(Ahr__ctx_type_0 &_output_){
   Ahr__ctx_type_0_init(_output_);
   return ;
}

void Ahr_do(Ahr__ctx_type_0 &_ctx, fix16_t gate, fix16_t a, fix16_t h, fix16_t r, _tuple___real_real__ &_output_){
   int release;
   release = 0;
   int attack;
   attack = 1;
   int hold;
   hold = 2;
   int reset;
   reset = 3;
   uint8_t bgate;
   bgate = (gate > 0x0 /* 0.000000 */);
   uint8_t _cond_87;
   _cond_87 = Util_edge(_ctx._inst68,bgate);
   if(_cond_87){
      _ctx.state = reset;
   }
   fix16_t resetting;
   uint8_t _cond_96;
   _cond_96 = (_ctx.state == reset);
   if(_cond_96){ resetting = 0x10000 /* 1.000000 */; }
   else
   { resetting = 0x0 /* 0.000000 */; }
   uint8_t _cond_88;
   _cond_88 = Util_edge(_ctx._inst70,(_ctx.out > 0x4000000 /* 1024.000000 */));
   if(_cond_88){
      _ctx.hold_phase = 0x0 /* 0.000000 */;
      _ctx.state = hold;
   }
   uint8_t _cond_89;
   _cond_89 = ((_ctx.out < 0xa0000 /* 10.000000 */) && (_ctx.state == reset));
   if(_cond_89){
      _ctx.state = attack;
   }
   uint8_t _cond_90;
   _cond_90 = ((_ctx.hold_phase > 0x640000 /* 100.000000 */) && (_ctx.state == hold));
   if(_cond_90){
      _ctx.state = release;
   }
   uint8_t _cond_91;
   _cond_91 = (_ctx.state == reset);
   if(_cond_91){
      _ctx.rate = 0xfd77 /* 0.990099 */;
      _ctx.target = 0x0 /* 0.000000 */;
   }
   uint8_t _cond_92;
   _cond_92 = (_ctx.state == attack);
   if(_cond_92){
      _ctx.rate = fix_div(0x10000 /* 1.000000 */,(fix_mul(0x640000 /* 100.000000 */,a) + 0x28f /* 0.010000 */));
      _ctx.target = 0x4cccccc /* 1228.800000 */;
   }
   uint8_t _cond_93;
   _cond_93 = (_ctx.state == hold);
   if(_cond_93){
      fix16_t hrate;
      hrate = fix_div(0x10000 /* 1.000000 */,(fix_mul(0x640000 /* 100.000000 */,h) + 0x28f /* 0.010000 */));
      _ctx.hold_phase = (_ctx.hold_phase + hrate);
   }
   uint8_t _cond_94;
   _cond_94 = (_ctx.state == release);
   if(_cond_94){
      _ctx.rate = fix_div(0x10000 /* 1.000000 */,(fix_mul(0x640000 /* 100.000000 */,r) + 0x28f /* 0.010000 */));
      _ctx.target = 0x0 /* 0.000000 */;
   }
   _ctx.out = (_ctx.out + fix_mul(fix_mul((_ctx.target + (- _ctx.out)),_ctx.rate),0x147 /* 0.005000 */));
   _tuple___real_real__ _tuple_95;
   {
      _tuple_95.field_0 = fix_clip(fix_mul(_ctx.out,0x40 /* 0.000977 */),0x0 /* 0.000000 */,0x10000 /* 1.000000 */);
      _tuple_95.field_1 = resetting;
   }
   _output_ = _tuple_95;
   return ;
}

void Ahr__ctx_type_1_init(Ahr__ctx_type_1 &_output_){
   Ahr__ctx_type_1 _ctx;
   _ctx.knob3 = 0x0 /* 0.000000 */;
   _ctx.knob2 = 0x0 /* 0.000000 */;
   _ctx.knob1 = 0x0 /* 0.000000 */;
   Ahr__ctx_type_0_init(_ctx._inst79);
   _output_ = _ctx;
   return ;
}

void Ahr_process_init(Ahr__ctx_type_1 &_output_){
   Ahr__ctx_type_1_init(_output_);
   return ;
}

void Ahr_process(Ahr__ctx_type_1 &_ctx, fix16_t gate, _tuple___real_real__ &_output_){
   _tuple___real_real__ _call_98;
   Ahr_do(_ctx._inst79,gate,_ctx.knob1,_ctx.knob2,_ctx.knob3,_call_98);
   _output_ = _call_98;
   return ;
}

void Ahr_noteOn_init(Ahr__ctx_type_1 &_output_){
   Ahr__ctx_type_1_init(_output_);
   return ;
}

void Ahr_noteOn(Ahr__ctx_type_1 &_ctx, int note, int velocity, int channel){
}

void Ahr_noteOff_init(Ahr__ctx_type_1 &_output_){
   Ahr__ctx_type_1_init(_output_);
   return ;
}

void Ahr_noteOff(Ahr__ctx_type_1 &_ctx, int note, int channel){
}

void Ahr_controlChange_init(Ahr__ctx_type_1 &_output_){
   Ahr__ctx_type_1_init(_output_);
   return ;
}

void Ahr_controlChange(Ahr__ctx_type_1 &_ctx, int control, int value, int channel){
   uint8_t _cond_100;
   _cond_100 = (control == 1);
   if(_cond_100){
      _ctx.knob1 = fix_mul(int_to_fix(value),0x204 /* 0.007874 */);
   }
   uint8_t _cond_101;
   _cond_101 = (control == 2);
   if(_cond_101){
      _ctx.knob2 = fix_mul(int_to_fix(value),0x204 /* 0.007874 */);
   }
   uint8_t _cond_102;
   _cond_102 = (control == 3);
   if(_cond_102){
      _ctx.knob3 = fix_mul(int_to_fix(value),0x204 /* 0.007874 */);
   }
}

void Ahr_default_init(Ahr__ctx_type_1 &_output_){
   Ahr__ctx_type_1_init(_output_);
   return ;
}

void Ahr_default(Ahr__ctx_type_1 &_ctx){
   _ctx.knob1 = 0x0 /* 0.000000 */;
   _ctx.knob2 = 0x8000 /* 0.500000 */;
   _ctx.knob3 = 0x8000 /* 0.500000 */;
}

void Kick__ctx_type_0_init(Kick__ctx_type_0 &_output_){
   Kick__ctx_type_0 _ctx;
   Noise__ctx_type_1_init(_ctx._inst116);
   Ahr__ctx_type_0_init(_ctx._inst115);
   Tricore__ctx_type_0_init(_ctx._inst114);
   Swept__ctx_type_0_init(_ctx._inst113);
   Ahr__ctx_type_0_init(_ctx._inst112);
   _output_ = _ctx;
   return ;
}

void Kick_do_init(Kick__ctx_type_0 &_output_){
   Kick__ctx_type_0_init(_output_);
   return ;
}

fix16_t Kick_do(Kick__ctx_type_0 &_ctx, fix16_t gate, fix16_t odecay, fix16_t pitch, fix16_t swept, fix16_t noise){
   fix16_t osc_env;
   fix16_t env_reset;
   _tuple___real_real__ _call_127;
   Ahr_do(_ctx._inst112,gate,0x147 /* 0.005000 */,(0x1999 /* 0.100000 */ + odecay),(odecay + 0x28f /* 0.010000 */),_call_127);
   osc_env = _call_127.field_0;env_reset = _call_127.field_1;
   fix16_t cv;
   cv = Swept_process(_ctx._inst113,(0x10000 /* 1.000000 */ + (- env_reset)),(pitch + fix_mul(swept,0x6666 /* 0.400000 */)),pitch,0x1999 /* 0.100000 */);
   fix16_t osc;
   osc = Tricore_process(_ctx._inst114,cv,0x0 /* 0.000000 */,env_reset);
   fix16_t osc_sat;
   osc_sat = Saturate_process(fix_mul(0x18000 /* 1.500000 */,osc));
   fix16_t noise_env;
   _tuple___real_real__ _call_128;
   Ahr_do(_ctx._inst115,gate,0x41 /* 0.001000 */,0x28f /* 0.010000 */,(fix_mul(noise,0x28f /* 0.010000 */) + 0x41 /* 0.001000 */),_call_128);
   noise_env = _call_128.field_0;
   fix16_t noise_osc;
   noise_osc = fix_mul(fix_mul(noise,Noise_process(_ctx._inst116,0x10000 /* 1.000000 */)),0x5555 /* 0.333333 */);
   return (fix_mul(osc_env,osc_sat) + fix_mul(noise_env,noise_osc));
}

void Kick__ctx_type_1_init(Kick__ctx_type_1 &_output_){
   Kick__ctx_type_1 _ctx;
   _ctx.swept = 0x0 /* 0.000000 */;
   _ctx.pitch = 0x0 /* 0.000000 */;
   _ctx.odecay = 0x0 /* 0.000000 */;
   _ctx.noise = 0x0 /* 0.000000 */;
   Kick__ctx_type_0_init(_ctx._inst118);
   _output_ = _ctx;
   return ;
}

void Kick_process_init(Kick__ctx_type_1 &_output_){
   Kick__ctx_type_1_init(_output_);
   return ;
}

fix16_t Kick_process(Kick__ctx_type_1 &_ctx, fix16_t gate){
   return Kick_do(_ctx._inst118,gate,_ctx.odecay,_ctx.pitch,_ctx.swept,_ctx.noise);
}

void Kick_noteOn_init(Kick__ctx_type_1 &_output_){
   Kick__ctx_type_1_init(_output_);
   return ;
}

void Kick_noteOn(Kick__ctx_type_1 &_ctx, int note, int velocity, int channel){
}

void Kick_noteOff_init(Kick__ctx_type_1 &_output_){
   Kick__ctx_type_1_init(_output_);
   return ;
}

void Kick_noteOff(Kick__ctx_type_1 &_ctx, int note, int channel){
}

void Kick_controlChange_init(Kick__ctx_type_1 &_output_){
   Kick__ctx_type_1_init(_output_);
   return ;
}

void Kick_controlChange(Kick__ctx_type_1 &_ctx, int control, int value, int channel){
   uint8_t _cond_131;
   _cond_131 = (control == 30);
   if(_cond_131){
      _ctx.odecay = fix_mul(int_to_fix(value),0x204 /* 0.007874 */);
   }
   uint8_t _cond_132;
   _cond_132 = (control == 31);
   if(_cond_132){
      _ctx.pitch = Util_map(int_to_fix(value),0x0 /* 0.000000 */,0x7f0000 /* 127.000000 */,0x0 /* 0.000000 */,0x1999 /* 0.100000 */);
   }
   uint8_t _cond_133;
   _cond_133 = (control == 32);
   if(_cond_133){
      _ctx.swept = fix_mul(int_to_fix(value),0x204 /* 0.007874 */);
   }
   uint8_t _cond_134;
   _cond_134 = (control == 33);
   if(_cond_134){
      _ctx.noise = fix_mul(int_to_fix(value),0x204 /* 0.007874 */);
   }
}

void Kick_default_init(Kick__ctx_type_1 &_output_){
   Kick__ctx_type_1_init(_output_);
   return ;
}

void Kick_default(Kick__ctx_type_1 &_ctx){
}


