#ifndef SYNTH1_H
#define SYNTH1_H
#include <stdint.h>
#include <math.h>
#include "vultin.h"

typedef struct _ctx_type_0 {
   int32_t x;
} _ctx_type_0;

typedef _ctx_type_0 smooth_type;

_ctx_type_0 _Synth1__ctx_type_0_init();

_ctx_type_0 _Synth1_smooth_init();

int32_t _Synth1_smooth(_ctx_type_0 &_ctx, int32_t input);

typedef struct _ctx_type_1 {
   int32_t pre_x;
} _ctx_type_1;

typedef _ctx_type_1 change_type;

_ctx_type_1 _Synth1__ctx_type_1_init();

_ctx_type_1 _Synth1_change_init();

uint8_t _Synth1_change(_ctx_type_1 &_ctx, int32_t x);

typedef struct _ctx_type_2 {
   int pre_x;
} _ctx_type_2;

typedef _ctx_type_2 edge_type;

_ctx_type_2 _Synth1__ctx_type_2_init();

_ctx_type_2 _Synth1_edge_init();

uint8_t _Synth1_edge(_ctx_type_2 &_ctx, int x);

typedef struct _ctx_type_3 {
   int count;
} _ctx_type_3;

typedef _ctx_type_3 each_type;

_ctx_type_3 _Synth1__ctx_type_3_init();

_ctx_type_3 _Synth1_each_init();

uint8_t _Synth1_each(_ctx_type_3 &_ctx, int n);

int32_t _Synth1_pitchToRate(int32_t d);

typedef struct _ctx_type_5 {
   int32_t rate;
   int32_t phase;
   _ctx_type_1 _inst0;
} _ctx_type_5;

typedef _ctx_type_5 phasor_type;

_ctx_type_5 _Synth1__ctx_type_5_init();

_ctx_type_5 _Synth1_phasor_init();

int32_t _Synth1_phasor(_ctx_type_5 &_ctx, int32_t pitch, uint8_t reset);

typedef struct _ctx_type_6 {
   int32_t phase;
   _ctx_type_2 _inst0;
} _ctx_type_6;

typedef _ctx_type_6 lfo_type;

_ctx_type_6 _Synth1__ctx_type_6_init();

_ctx_type_6 _Synth1_lfo_init();

int32_t _Synth1_lfo(_ctx_type_6 &_ctx, int32_t f, int gate);

typedef struct _ctx_type_7 {
   int32_t volume;
   int32_t pre_phase1;
   int32_t pitch;
   int32_t n4;
   int32_t n3;
   int32_t n2;
   int32_t n1;
   int32_t lfo_rate;
   int32_t lfo_amt;
   int gate;
   int32_t detune;
   int count;
   _ctx_type_0 _inst5;
   _ctx_type_0 _inst4;
   _ctx_type_5 _inst3;
   _ctx_type_0 _inst2;
   _ctx_type_5 _inst1;
   _ctx_type_6 _inst0;
} _ctx_type_7;

typedef _ctx_type_7 process_type;

_ctx_type_7 _Synth1__ctx_type_7_init();

_ctx_type_7 _Synth1_process_init();

int32_t _Synth1_process(_ctx_type_7 &_ctx, int32_t input);

typedef _ctx_type_7 noteOn_type;

_ctx_type_7 _Synth1_noteOn_init();

void _Synth1_noteOn(_ctx_type_7 &_ctx, int32_t note, int velocity);

typedef _ctx_type_7 noteOff_type;

_ctx_type_7 _Synth1_noteOff_init();

void _Synth1_noteOff(_ctx_type_7 &_ctx, int32_t note);

typedef _ctx_type_7 controlChange_type;

_ctx_type_7 _Synth1_controlChange_init();

void _Synth1_controlChange(_ctx_type_7 &_ctx, int control, int32_t value);

typedef _ctx_type_7 default_type;

_ctx_type_7 _Synth1_default_init();

void _Synth1_default_(_ctx_type_7 &_ctx);



#endif // SYNTH1_H
