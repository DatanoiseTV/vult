
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#ifndef SYNTH1_H
#define SYNTH1_H
#include <stdint.h>
#include <math.h>
#include "vultin.h"
#include "synth1.tables.h"

typedef struct Synth1__ctx_type_0 {
   fix16_t x;
} Synth1__ctx_type_0;

typedef Synth1__ctx_type_0 Synth1_smooth_type;

static_inline void Synth1__ctx_type_0_init(Synth1__ctx_type_0 &_output_){
   Synth1__ctx_type_0 _ctx;
   _ctx.x = 0x0 /* 0.000000 */;
   _output_ = _ctx;
   return ;
}

static_inline void Synth1_smooth_init(Synth1__ctx_type_0 &_output_){
   Synth1__ctx_type_0_init(_output_);
   return ;
}

static_inline fix16_t Synth1_smooth(Synth1__ctx_type_0 &_ctx, fix16_t input){
   _ctx.x = (_ctx.x + fix_mul(0x147 /* 0.005000 */,(input + (- _ctx.x))));
   return _ctx.x;
}

typedef struct Synth1__ctx_type_1 {
   fix16_t pre_x;
} Synth1__ctx_type_1;

typedef Synth1__ctx_type_1 Synth1_change_type;

static_inline void Synth1__ctx_type_1_init(Synth1__ctx_type_1 &_output_){
   Synth1__ctx_type_1 _ctx;
   _ctx.pre_x = 0x0 /* 0.000000 */;
   _output_ = _ctx;
   return ;
}

static_inline void Synth1_change_init(Synth1__ctx_type_1 &_output_){
   Synth1__ctx_type_1_init(_output_);
   return ;
}

static_inline uint8_t Synth1_change(Synth1__ctx_type_1 &_ctx, fix16_t x){
   uint8_t v;
   v = (_ctx.pre_x != x);
   _ctx.pre_x = x;
   return v;
}

typedef struct Synth1__ctx_type_2 {
   int pre_x;
} Synth1__ctx_type_2;

typedef Synth1__ctx_type_2 Synth1_edge_type;

static_inline void Synth1__ctx_type_2_init(Synth1__ctx_type_2 &_output_){
   Synth1__ctx_type_2 _ctx;
   _ctx.pre_x = 0;
   _output_ = _ctx;
   return ;
}

static_inline void Synth1_edge_init(Synth1__ctx_type_2 &_output_){
   Synth1__ctx_type_2_init(_output_);
   return ;
}

static_inline uint8_t Synth1_edge(Synth1__ctx_type_2 &_ctx, int x){
   uint8_t v;
   v = ((_ctx.pre_x != x) && (_ctx.pre_x == 0));
   _ctx.pre_x = x;
   return v;
}

typedef struct Synth1__ctx_type_3 {
   int count;
} Synth1__ctx_type_3;

typedef Synth1__ctx_type_3 Synth1_each_type;

static_inline void Synth1__ctx_type_3_init(Synth1__ctx_type_3 &_output_){
   Synth1__ctx_type_3 _ctx;
   _ctx.count = 0;
   _output_ = _ctx;
   return ;
}

static_inline void Synth1_each_init(Synth1__ctx_type_3 &_output_){
   Synth1__ctx_type_3_init(_output_);
   return ;
}

static_inline uint8_t Synth1_each(Synth1__ctx_type_3 &_ctx, int n){
   uint8_t ret;
   ret = (_ctx.count == 0);
   _ctx.count = ((1 + _ctx.count) % n);
   return ret;
}

static_inline fix16_t Synth1_pitchToRate(fix16_t d){
   return fix_mul(0xc /* 0.000185 */,fix_exp(fix_mul(0xec9 /* 0.057762 */,d)));
};

typedef struct Synth1__ctx_type_5 {
   fix16_t rate;
   fix16_t phase;
   Synth1__ctx_type_1 _inst1113;
} Synth1__ctx_type_5;

typedef Synth1__ctx_type_5 Synth1_phasor_type;

void Synth1__ctx_type_5_init(Synth1__ctx_type_5 &_output_);

static_inline void Synth1_phasor_init(Synth1__ctx_type_5 &_output_){
   Synth1__ctx_type_5_init(_output_);
   return ;
}

fix16_t Synth1_phasor(Synth1__ctx_type_5 &_ctx, fix16_t pitch, uint8_t reset);

typedef struct Synth1__ctx_type_6 {
   fix16_t phase;
   Synth1__ctx_type_2 _inst1146;
} Synth1__ctx_type_6;

typedef Synth1__ctx_type_6 Synth1_lfo_type;

void Synth1__ctx_type_6_init(Synth1__ctx_type_6 &_output_);

static_inline void Synth1_lfo_init(Synth1__ctx_type_6 &_output_){
   Synth1__ctx_type_6_init(_output_);
   return ;
}

fix16_t Synth1_lfo(Synth1__ctx_type_6 &_ctx, fix16_t f, int gate);

typedef struct Synth1__ctx_type_7 {
   fix16_t volume;
   fix16_t pre_phase1;
   fix16_t pitch;
   int n4;
   int n3;
   int n2;
   int n1;
   fix16_t lfo_rate;
   fix16_t lfo_amt;
   int gate;
   fix16_t detune;
   int count;
   Synth1__ctx_type_0 _inst6201;
   Synth1__ctx_type_0 _inst5201;
   Synth1__ctx_type_5 _inst4162;
   Synth1__ctx_type_0 _inst3201;
   Synth1__ctx_type_5 _inst2162;
   Synth1__ctx_type_6 _inst1200;
} Synth1__ctx_type_7;

typedef Synth1__ctx_type_7 Synth1_process_type;

void Synth1__ctx_type_7_init(Synth1__ctx_type_7 &_output_);

static_inline void Synth1_process_init(Synth1__ctx_type_7 &_output_){
   Synth1__ctx_type_7_init(_output_);
   return ;
}

fix16_t Synth1_process(Synth1__ctx_type_7 &_ctx, fix16_t input);

typedef Synth1__ctx_type_7 Synth1_noteOn_type;

static_inline void Synth1_noteOn_init(Synth1__ctx_type_7 &_output_){
   Synth1__ctx_type_7_init(_output_);
   return ;
}

void Synth1_noteOn(Synth1__ctx_type_7 &_ctx, int note, int velocity, int channel);

typedef Synth1__ctx_type_7 Synth1_noteOff_type;

static_inline void Synth1_noteOff_init(Synth1__ctx_type_7 &_output_){
   Synth1__ctx_type_7_init(_output_);
   return ;
}

void Synth1_noteOff(Synth1__ctx_type_7 &_ctx, int note, int channel);

typedef Synth1__ctx_type_7 Synth1_controlChange_type;

static_inline void Synth1_controlChange_init(Synth1__ctx_type_7 &_output_){
   Synth1__ctx_type_7_init(_output_);
   return ;
}

void Synth1_controlChange(Synth1__ctx_type_7 &_ctx, int control, fix16_t value, int channel);

typedef Synth1__ctx_type_7 Synth1_default_type;

static_inline void Synth1_default_init(Synth1__ctx_type_7 &_output_){
   Synth1__ctx_type_7_init(_output_);
   return ;
}

void Synth1_default(Synth1__ctx_type_7 &_ctx);



#endif // SYNTH1_H
