#ifndef SYNTH1_H
#define SYNTH1_H
#include <stdint.h>
#include <math.h>
#include "vultin.h"

typedef struct Synth1__ctx_type_0 {
   int32_t x;
} Synth1__ctx_type_0;

typedef Synth1__ctx_type_0 Synth1_smooth_type;

Synth1__ctx_type_0 Synth1__ctx_type_0_init();

Synth1__ctx_type_0 Synth1_smooth_init();

int32_t Synth1_smooth(Synth1__ctx_type_0 &_ctx, int32_t input);

typedef struct Synth1__ctx_type_1 {
   int32_t pre_x;
} Synth1__ctx_type_1;

typedef Synth1__ctx_type_1 Synth1_change_type;

Synth1__ctx_type_1 Synth1__ctx_type_1_init();

Synth1__ctx_type_1 Synth1_change_init();

uint8_t Synth1_change(Synth1__ctx_type_1 &_ctx, int32_t x);

typedef struct Synth1__ctx_type_2 {
   int pre_x;
} Synth1__ctx_type_2;

typedef Synth1__ctx_type_2 Synth1_edge_type;

Synth1__ctx_type_2 Synth1__ctx_type_2_init();

Synth1__ctx_type_2 Synth1_edge_init();

uint8_t Synth1_edge(Synth1__ctx_type_2 &_ctx, int x);

typedef struct Synth1__ctx_type_3 {
   int count;
} Synth1__ctx_type_3;

typedef Synth1__ctx_type_3 Synth1_each_type;

Synth1__ctx_type_3 Synth1__ctx_type_3_init();

Synth1__ctx_type_3 Synth1_each_init();

uint8_t Synth1_each(Synth1__ctx_type_3 &_ctx, int n);

int32_t Synth1_pitchToRate(int32_t d);

typedef struct Synth1__ctx_type_5 {
   int32_t rate;
   int32_t phase;
   Synth1__ctx_type_1 _inst0;
} Synth1__ctx_type_5;

typedef Synth1__ctx_type_5 Synth1_phasor_type;

Synth1__ctx_type_5 Synth1__ctx_type_5_init();

Synth1__ctx_type_5 Synth1_phasor_init();

int32_t Synth1_phasor(Synth1__ctx_type_5 &_ctx, int32_t pitch, uint8_t reset);

typedef struct Synth1__ctx_type_6 {
   int32_t phase;
   Synth1__ctx_type_2 _inst0;
} Synth1__ctx_type_6;

typedef Synth1__ctx_type_6 Synth1_lfo_type;

Synth1__ctx_type_6 Synth1__ctx_type_6_init();

Synth1__ctx_type_6 Synth1_lfo_init();

int32_t Synth1_lfo(Synth1__ctx_type_6 &_ctx, int32_t f, int gate);

typedef struct Synth1__ctx_type_7 {
   int32_t volume;
   int32_t pre_phase1;
   int32_t pitch;
   int32_t n4;
   int32_t n3;
   int32_t n2;
   int32_t n1;
   int32_t lfo_rate;
   int32_t lfo_amt;
   int gate;
   int32_t detune;
   int count;
   Synth1__ctx_type_0 _inst5;
   Synth1__ctx_type_0 _inst4;
   Synth1__ctx_type_5 _inst3;
   Synth1__ctx_type_0 _inst2;
   Synth1__ctx_type_5 _inst1;
   Synth1__ctx_type_6 _inst0;
} Synth1__ctx_type_7;

typedef Synth1__ctx_type_7 Synth1_process_type;

Synth1__ctx_type_7 Synth1__ctx_type_7_init();

Synth1__ctx_type_7 Synth1_process_init();

int32_t Synth1_process(Synth1__ctx_type_7 &_ctx, int32_t input);

typedef Synth1__ctx_type_7 Synth1_noteOn_type;

Synth1__ctx_type_7 Synth1_noteOn_init();

void Synth1_noteOn(Synth1__ctx_type_7 &_ctx, int32_t note, int velocity);

typedef Synth1__ctx_type_7 Synth1_noteOff_type;

Synth1__ctx_type_7 Synth1_noteOff_init();

void Synth1_noteOff(Synth1__ctx_type_7 &_ctx, int32_t note);

typedef Synth1__ctx_type_7 Synth1_controlChange_type;

Synth1__ctx_type_7 Synth1_controlChange_init();

void Synth1_controlChange(Synth1__ctx_type_7 &_ctx, int control, int32_t value);

typedef Synth1__ctx_type_7 Synth1_default_type;

Synth1__ctx_type_7 Synth1_default_init();

void Synth1_default_(Synth1__ctx_type_7 &_ctx);



#endif // SYNTH1_H
