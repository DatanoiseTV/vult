
#ifndef AF_F_H
#define AF_F_H

#include <stdint.h>
#include <math.h>
#include "vultin.h"
#include "AudioStream.h"

typedef struct Af_f__ctx_type_0 {
   int x;
} Af_f__ctx_type_0;

typedef Af_f__ctx_type_0 Af_f_process_type;

static_inline void Af_f__ctx_type_0_init(Af_f__ctx_type_0 &_output_){
   Af_f__ctx_type_0 _ctx;
   _ctx.x = 0;
   _output_ = _ctx;
   return ;
}

static_inline void Af_f_process_init(Af_f__ctx_type_0 &_output_){
   Af_f__ctx_type_0_init(_output_);
   return ;
}

static_inline fix16_t Af_f_process(Af_f__ctx_type_0 &_ctx, fix16_t input){
   _ctx.x = (1 + _ctx.x);
   return fix_mul(input,input);
}

typedef Af_f__ctx_type_0 Af_f_noteOn_type;

static_inline void Af_f_noteOn_init(Af_f__ctx_type_0 &_output_){
   Af_f__ctx_type_0_init(_output_);
   return ;
}

static_inline void Af_f_noteOn(Af_f__ctx_type_0 &_ctx, int note, int velocity, int channel){
}

typedef Af_f__ctx_type_0 Af_f_noteOff_type;

static_inline void Af_f_noteOff_init(Af_f__ctx_type_0 &_output_){
   Af_f__ctx_type_0_init(_output_);
   return ;
}

static_inline void Af_f_noteOff(Af_f__ctx_type_0 &_ctx, int note, int channel){
}

typedef Af_f__ctx_type_0 Af_f_controlChange_type;

static_inline void Af_f_controlChange_init(Af_f__ctx_type_0 &_output_){
   Af_f__ctx_type_0_init(_output_);
   return ;
}

static_inline void Af_f_controlChange(Af_f__ctx_type_0 &_ctx, int control, int value, int channel){
}

typedef Af_f__ctx_type_0 Af_f_default_type;

static_inline void Af_f_default_init(Af_f__ctx_type_0 &_output_){
   Af_f__ctx_type_0_init(_output_);
   return ;
}

static_inline void Af_f_default(Af_f__ctx_type_0 &_ctx){
}



class af_f : public AudioStream
{
public:
  af_f(void) : AudioStream(1, inputQueueArray)
  {
     Af_f_process_init(data);
  }

  void begin() {
    Af_f_default(data);
  }

  // Handles note on events
  void noteOn(int note, int velocity, int channel){
    // If the velocity is larger than zero, means that is turning on
    if(velocity) Af_f_noteOn(data, note, velocity, channel);
    else         Af_f_noteOff(data, note, channel);
  }

  // Handles note off events
  void noteOff(int note, int velocity, int channel) {
    Af_f_noteOff(data, note, channel);

  }

  // Handles control change events
  void controlChange(int control, int value, int channel) {
    Af_f_controlChange(data, control, value, channel);
  }

  virtual void update(void);

private:
  Af_f_process_type data;
  audio_block_t *inputQueueArray[1];

};

#endif // AF_F_H
