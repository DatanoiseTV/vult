
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#include "phasedist.h"

void Phasedist__ctx_type_0_init(Phasedist__ctx_type_0 &_output_){
   Phasedist__ctx_type_0 _ctx;
   _ctx.x = 0.f;
   _output_ = _ctx;
   return ;
}

void Phasedist_smooth_init(Phasedist__ctx_type_0 &_output_){
   Phasedist__ctx_type_0_init(_output_);
   return ;
}

float Phasedist_smooth(Phasedist__ctx_type_0 &_ctx, float input){
   _ctx.x = (_ctx.x + ((input + (- _ctx.x)) * 0.005f));
   return _ctx.x;
}

void Phasedist__ctx_type_1_init(Phasedist__ctx_type_1 &_output_){
   Phasedist__ctx_type_1 _ctx;
   _ctx.pre_x = 0.f;
   _output_ = _ctx;
   return ;
}

void Phasedist_change_init(Phasedist__ctx_type_1 &_output_){
   Phasedist__ctx_type_1_init(_output_);
   return ;
}

uint8_t Phasedist_change(Phasedist__ctx_type_1 &_ctx, float x){
   uint8_t v;
   v = (_ctx.pre_x != x);
   _ctx.pre_x = x;
   return v;
}

float Phasedist_pitchToRate(float d){
   return (0.000185392290249f * expf((0.0577623f * d)));
}

void Phasedist__ctx_type_3_init(Phasedist__ctx_type_3 &_output_){
   Phasedist__ctx_type_3 _ctx;
   _ctx.rate = 0.f;
   _ctx.phase = 0.f;
   Phasedist__ctx_type_1_init(_ctx._inst4);
   _output_ = _ctx;
   return ;
}

void Phasedist_phasor_init(Phasedist__ctx_type_3 &_output_){
   Phasedist__ctx_type_3_init(_output_);
   return ;
}

float Phasedist_phasor(Phasedist__ctx_type_3 &_ctx, float pitch, uint8_t reset){
   uint8_t _cond_17;
   _cond_17 = Phasedist_change(_ctx._inst4,pitch);
   if(_cond_17){
      _ctx.rate = Phasedist_pitchToRate(pitch);
   }
   if(reset){ _ctx.phase = 0.f; }
   else
   { _ctx.phase = fmodf((_ctx.phase + _ctx.rate),1.f); }
   return _ctx.phase;
}

void Phasedist__ctx_type_4_init(Phasedist__ctx_type_4 &_output_){
   Phasedist__ctx_type_4 _ctx;
   _ctx.volume = 0.f;
   _ctx.pre_phase1 = 0.f;
   _ctx.pitch = 0.f;
   _ctx.detune = 0.f;
   Phasedist__ctx_type_3_init(_ctx._inst9);
   Phasedist__ctx_type_0_init(_ctx._inst8);
   Phasedist__ctx_type_3_init(_ctx._inst7);
   Phasedist__ctx_type_0_init(_ctx._inst10);
   _output_ = _ctx;
   return ;
}

void Phasedist_process_init(Phasedist__ctx_type_4 &_output_){
   Phasedist__ctx_type_4_init(_output_);
   return ;
}

float Phasedist_process(Phasedist__ctx_type_4 &_ctx, float input){
   float phase1;
   phase1 = Phasedist_phasor(_ctx._inst7,_ctx.pitch,0);
   float comp;
   comp = (1.f + (- phase1));
   uint8_t reset;
   reset = ((_ctx.pre_phase1 + (- phase1)) > 0.5f);
   _ctx.pre_phase1 = phase1;
   float phase2;
   phase2 = Phasedist_phasor(_ctx._inst9,(_ctx.pitch + (Phasedist_smooth(_ctx._inst8,_ctx.detune) * 32.f)),reset);
   float sine;
   sine = sinf((6.28318530718f * phase2));
   return (Phasedist_smooth(_ctx._inst10,_ctx.volume) * sine * comp);
}

void Phasedist_noteOn_init(Phasedist__ctx_type_4 &_output_){
   Phasedist__ctx_type_4_init(_output_);
   return ;
}

void Phasedist_noteOn(Phasedist__ctx_type_4 &_ctx, int note, int velocity, int channel){
   _ctx.pitch = int_to_float(note);
}

void Phasedist_noteOff_init(Phasedist__ctx_type_4 &_output_){
   Phasedist__ctx_type_4_init(_output_);
   return ;
}

void Phasedist_noteOff(Phasedist__ctx_type_4 &_ctx, int note, int channel){
}

void Phasedist_controlChange_init(Phasedist__ctx_type_4 &_output_){
   Phasedist__ctx_type_4_init(_output_);
   return ;
}

void Phasedist_controlChange(Phasedist__ctx_type_4 &_ctx, int control, int value, int channel){
   uint8_t _cond_18;
   _cond_18 = (control == 30);
   if(_cond_18){
      _ctx.volume = (int_to_float(value) * 0.00787401574803f);
   }
   uint8_t _cond_19;
   _cond_19 = (control == 31);
   if(_cond_19){
      _ctx.detune = (int_to_float(value) * 0.00787401574803f);
   }
}

void Phasedist_default_init(Phasedist__ctx_type_4 &_output_){
   Phasedist__ctx_type_4_init(_output_);
   return ;
}

void Phasedist_default(Phasedist__ctx_type_4 &_ctx){
   _ctx.volume = 1.f;
   _ctx.pitch = 45.f;
   _ctx.detune = 0.f;
}


