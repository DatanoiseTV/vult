
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#include "phasedist.h"

void Phasedist__ctx_type_3_init(Phasedist__ctx_type_3 &_output_){
   Phasedist__ctx_type_3 _ctx;
   _ctx.rate = 0.f;
   _ctx.phase = 0.f;
   Phasedist__ctx_type_1_init(_ctx._inst4);
   _output_ = _ctx;
   return ;
}

float Phasedist_phasor(Phasedist__ctx_type_3 &_ctx, float pitch, uint8_t reset){
   if(Phasedist_change(_ctx._inst4,pitch)){
      _ctx.rate = Phasedist_pitchToRate(pitch);
   }
   if(reset){
      _ctx.phase = 0.f;
   }
   else
   {
      _ctx.phase = (_ctx.phase + _ctx.rate);
   }
   if(_ctx.phase > 1.f){
      _ctx.phase = (-1.f + _ctx.phase);
   }
   return _ctx.phase;
}

void Phasedist__ctx_type_4_init(Phasedist__ctx_type_4 &_output_){
   Phasedist__ctx_type_4 _ctx;
   _ctx.volume = 0.f;
   _ctx.pre_phase1 = 0.f;
   _ctx.pitch = 0.f;
   _ctx.detune = 0.f;
   Phasedist__ctx_type_3_init(_ctx._inst9);
   Phasedist__ctx_type_0_init(_ctx._inst8);
   Phasedist__ctx_type_3_init(_ctx._inst7);
   Phasedist__ctx_type_0_init(_ctx._inst10);
   _output_ = _ctx;
   return ;
}

float Phasedist_process(Phasedist__ctx_type_4 &_ctx, float input){
   float phase1;
   phase1 = Phasedist_phasor(_ctx._inst7,_ctx.pitch,false);
   float comp;
   comp = (1.f + (- phase1));
   uint8_t reset;
   reset = ((_ctx.pre_phase1 + (- phase1)) > 0.5f);
   _ctx.pre_phase1 = phase1;
   float phase2;
   phase2 = Phasedist_phasor(_ctx._inst9,(_ctx.pitch + (32.f * Phasedist_smooth(_ctx._inst8,_ctx.detune))),reset);
   float sine;
   sine = sinf((6.2831854f * phase2));
   return (comp * sine * Phasedist_smooth(_ctx._inst10,_ctx.volume));
}


