
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#include "rescomb.h"

float Saturate_soft_table(float x){
   int index;
   index = int_clip(float_to_int((5.0000f * (x + 24.0000f))),0,240);
   return (float_wrap_array(Saturate_soft_table_c0)[index] + (x * (float_wrap_array(Saturate_soft_table_c1)[index] + (float_wrap_array(Saturate_soft_table_c2)[index] * x))));
}

float Saturate_soft_process(float x){
   return Saturate_soft_table(x);
}

void Saturate_soft_noteOn(int note, int velocity, int channel){
}

void Saturate_soft_noteOff(int note, int channel){
}

void Saturate_soft_controlChange(int control, int value, int channel){
}

void Saturate_soft_default(){
}

void Util__ctx_type_0_init(Util__ctx_type_0 &_output_){
   Util__ctx_type_0 _ctx;
   _ctx.pre = 0;
   _output_ = _ctx;
   return ;
}

void Util_edge_init(Util__ctx_type_0 &_output_){
   Util__ctx_type_0_init(_output_);
   return ;
}

uint8_t Util_edge(Util__ctx_type_0 &_ctx, uint8_t x){
   uint8_t ret;
   ret = (x && bool_not(_ctx.pre));
   _ctx.pre = x;
   return ret;
}

void Util__ctx_type_1_init(Util__ctx_type_1 &_output_){
   Util__ctx_type_1 _ctx;
   _ctx.pre_x = 0.0000f;
   _output_ = _ctx;
   return ;
}

void Util_change_init(Util__ctx_type_1 &_output_){
   Util__ctx_type_1_init(_output_);
   return ;
}

uint8_t Util_change(Util__ctx_type_1 &_ctx, float x){
   uint8_t v;
   v = (_ctx.pre_x != x);
   _ctx.pre_x = x;
   return v;
}

float Util_map(float x, float x0, float x1, float y0, float y1){
   return ((((x + (- x0)) * (y1 + (- y0))) / (x1 + (- x0))) + y0);
}

void Util__ctx_type_3_init(Util__ctx_type_3 &_output_){
   Util__ctx_type_3 _ctx;
   _ctx.y1 = 0.0000f;
   _ctx.x1 = 0.0000f;
   _output_ = _ctx;
   return ;
}

void Util_dcblock_init(Util__ctx_type_3 &_output_){
   Util__ctx_type_3_init(_output_);
   return ;
}

float Util_dcblock(Util__ctx_type_3 &_ctx, float x0){
   float y0;
   y0 = (x0 + (- _ctx.x1) + (_ctx.y1 * 0.9950f));
   _ctx.x1 = x0;
   _ctx.y1 = y0;
   return y0;
}

void Util__ctx_type_4_init(Util__ctx_type_4 &_output_){
   Util__ctx_type_4 _ctx;
   _ctx.x = 0.0000f;
   _output_ = _ctx;
   return ;
}

void Util_smooth_init(Util__ctx_type_4 &_output_){
   Util__ctx_type_4_init(_output_);
   return ;
}

float Util_smooth(Util__ctx_type_4 &_ctx, float input){
   _ctx.x = (_ctx.x + ((input + (- _ctx.x)) * 0.0050f));
   return _ctx.x;
}

void Util__ctx_type_5_init(Util__ctx_type_5 &_output_){
   Util__ctx_type_5 _ctx;
   _ctx.x0 = 0.0000f;
   _output_ = _ctx;
   return ;
}

void Util_average2_init(Util__ctx_type_5 &_output_){
   Util__ctx_type_5_init(_output_);
   return ;
}

float Util_average2(Util__ctx_type_5 &_ctx, float x1){
   float result;
   result = ((_ctx.x0 + x1) * 0.5000f);
   _ctx.x0 = x1;
   return result;
}

float Util_cubic_clipper(float x){
   uint8_t _cond_27;
   _cond_27 = (x <= (-0.6667f));
   if(_cond_27){
      return (-0.6667f);
   }
   else
   {
      uint8_t _cond_26;
      _cond_26 = (x >= 0.6667f);
      if(_cond_26){
         return 0.6667f;
      }
      else
      {
         return (x + ((-0.3333f) * x * x * x));
      }
   }
}

float Util_pitchToRate_1024(float pitch){
   int index;
   index = int_clip(float_to_int((0.2441f * pitch)),0,31);
   return (float_wrap_array(Util_pitchToRate_1024_c0)[index] + (pitch * (float_wrap_array(Util_pitchToRate_1024_c1)[index] + (float_wrap_array(Util_pitchToRate_1024_c2)[index] * pitch))));
}

float Util_pitchToRate(float pitch){
   int index;
   index = int_clip(float_to_int((0.2441f * pitch)),0,31);
   return (float_wrap_array(Util_pitchToRate_c0)[index] + (pitch * (float_wrap_array(Util_pitchToRate_c1)[index] + (float_wrap_array(Util_pitchToRate_c2)[index] * pitch))));
}

float Util_cvToPitch(float cv){
   return ((cv * 120.0000f) + 24.0000f);
}

float Util_cvToRate_1024(float cv){
   int index;
   index = int_clip(float_to_int((34.4444f * cv)),0,31);
   return (float_wrap_array(Util_cvToRate_1024_c0)[index] + (cv * (float_wrap_array(Util_cvToRate_1024_c1)[index] + (float_wrap_array(Util_cvToRate_1024_c2)[index] * cv))));
}

float Util_cvToRate(float cv){
   int index;
   index = int_clip(float_to_int((141.1111f * cv)),0,127);
   return (float_wrap_array(Util_cvToRate_c0)[index] + (cv * (float_wrap_array(Util_cvToRate_c1)[index] + (float_wrap_array(Util_cvToRate_c2)[index] * cv))));
}

float Util_pitchToCv(float pitch){
   return (0.0083f * ((-24.0000f) + pitch));
}

float Util_cvToperiod(float cv){
   int index;
   index = int_clip(float_to_int((31.0000f * cv)),0,31);
   return (float_wrap_array(Util_cvToperiod_c0)[index] + (cv * (float_wrap_array(Util_cvToperiod_c1)[index] + (float_wrap_array(Util_cvToperiod_c2)[index] * cv))));
}

float Util_cvTokHz(float cv){
   int index;
   index = int_clip(float_to_int((31.0000f * cv)),0,31);
   return (float_wrap_array(Util_cvTokHz_c0)[index] + (cv * (float_wrap_array(Util_cvTokHz_c1)[index] + (float_wrap_array(Util_cvTokHz_c2)[index] * cv))));
}

void Rescomb__ctx_type_0_init(Rescomb__ctx_type_0 &_output_){
   Rescomb__ctx_type_0 _ctx;
   _ctx.write_pos = 0;
   float_init_array(675,0.0000f,_ctx.buffer);
   _output_ = _ctx;
   return ;
}

void Rescomb_delay_init(Rescomb__ctx_type_0 &_output_){
   Rescomb__ctx_type_0_init(_output_);
   return ;
}

float Rescomb_delay(Rescomb__ctx_type_0 &_ctx, float x, float cv){
   _ctx.write_pos = ((_ctx.write_pos + 1) % 675);
   float_set(_ctx.buffer,_ctx.write_pos,x);
   float r_size;
   r_size = 675.0000f;
   float r_index;
   r_index = fmodf((int_to_float(_ctx.write_pos) + (- Util_cvToperiod(cv))),r_size);
   uint8_t _cond_41;
   _cond_41 = (r_index < 0.0000f);
   if(_cond_41){ r_index = (r_size + r_index); }
   int t1;
   t1 = float_to_int(floorf(r_index));
   int t2;
   t2 = ((t1 + 1) % 675);
   float decimal;
   decimal = (r_index + (- int_to_float(t1)));
   float x1;
   x1 = float_get(_ctx.buffer,t1);
   float x2;
   x2 = float_get(_ctx.buffer,t2);
   float ret;
   ret = (((x2 + (- x1)) * decimal) + x1);
   return ret;
}

float Rescomb_toneCurve(float tone){
   int index;
   index = int_clip(float_to_int((26.2500f * (tone + 1.2000f))),0,63);
   return (float_wrap_array(Rescomb_toneCurve_c0)[index] + (tone * (float_wrap_array(Rescomb_toneCurve_c1)[index] + (float_wrap_array(Rescomb_toneCurve_c2)[index] * tone))));
}

void Rescomb__ctx_type_2_init(Rescomb__ctx_type_2 &_output_){
   Rescomb__ctx_type_2 _ctx;
   _ctx.stone = 0.0000f;
   _ctx.output = 0.0000f;
   Rescomb__ctx_type_0_init(_ctx._inst34);
   Util__ctx_type_3_init(_ctx._inst33);
   Util__ctx_type_1_init(_ctx._inst31);
   _output_ = _ctx;
   return ;
}

void Rescomb_do_init(Rescomb__ctx_type_2 &_output_){
   Rescomb__ctx_type_2_init(_output_);
   return ;
}

float Rescomb_do(Rescomb__ctx_type_2 &_ctx, float in, float cv, float tone, float res){
   uint8_t _cond_43;
   _cond_43 = Util_change(_ctx._inst31,tone);
   if(_cond_43){
      _ctx.stone = Rescomb_toneCurve(tone);
   }
   float feedback;
   feedback = Util_dcblock(_ctx._inst33,(_ctx.output * res));
   float saturated_input;
   saturated_input = Saturate_soft_process((in + feedback));
   _ctx.output = ((_ctx.stone * Rescomb_delay(_ctx._inst34,saturated_input,cv)) + in);
   return Saturate_soft_process(_ctx.output);
}

void Rescomb__ctx_type_3_init(Rescomb__ctx_type_3 &_output_){
   Rescomb__ctx_type_3 _ctx;
   Rescomb__ctx_type_2_init(_ctx._inst36);
   _output_ = _ctx;
   return ;
}

void Rescomb_process_init(Rescomb__ctx_type_3 &_output_){
   Rescomb__ctx_type_3_init(_output_);
   return ;
}

float Rescomb_process(Rescomb__ctx_type_3 &_ctx, float in, float cv, float tone, float res){
   return Rescomb_do(_ctx._inst36,in,cv,tone,res);
}

void Rescomb_noteOn_init(Rescomb__ctx_type_3 &_output_){
   Rescomb__ctx_type_3_init(_output_);
   return ;
}

void Rescomb_noteOn(Rescomb__ctx_type_3 &_ctx, int note, int velocity, int channel){
}

void Rescomb_noteOff_init(Rescomb__ctx_type_3 &_output_){
   Rescomb__ctx_type_3_init(_output_);
   return ;
}

void Rescomb_noteOff(Rescomb__ctx_type_3 &_ctx, int note, int channel){
}

void Rescomb_controlChange_init(Rescomb__ctx_type_3 &_output_){
   Rescomb__ctx_type_3_init(_output_);
   return ;
}

void Rescomb_controlChange(Rescomb__ctx_type_3 &_ctx, int control, int value, int channel){
}

void Rescomb_default_init(Rescomb__ctx_type_3 &_output_){
   Rescomb__ctx_type_3_init(_output_);
   return ;
}

void Rescomb_default(Rescomb__ctx_type_3 &_ctx){
}


