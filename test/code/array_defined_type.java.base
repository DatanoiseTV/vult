package vult.com.array_defined_type;

import java.util.Arrays;
import java.util.Random;
import vult.com.external.*;

public class array_defined_type {

static int clip(int x, int minv, int maxv) {
   if(x > maxv)
      return maxv;
   else if(x < minv)
      return minv;
   else return x;
}

static float clip(float x, float minv, float maxv) {
   if(x > maxv)
      return maxv;
   else if(x < minv)
      return minv;
   else return x;
}

int[] makeArray(int size, int init) {
   int a[] = new int[size];
   Arrays.fill(a, init);
   return a;
}

float[] makeArray(int size, float init) {
   float a[] = new float[size];
   Arrays.fill(a, init);
   return a;
}

boolean[] makeArray(int size, boolean init) {
   boolean a[] = new boolean[size];
   Arrays.fill(a, init);
   return a;
}

int int_to_fix16(int a) { return a * 0x00010000; }

int fix16_to_int(int a) { return (a >> 16); }

int fix16_add(int x, int y) { return x + y; }

int fix16_sub(int x, int y) { return x - y; }

int fix16_minus(int x) { return -x; }

float fix16_to_float(int a) { return (float)a / 0x00010000; }
int float_to_fix16(float a) {
   float temp = a * 0x00010000;
   return (int)temp;
}

int fix16_mul(int x, int y) {
   long res = (long)x * (long)y;
   return (int)(res >> 16);
}

int fix16_div(int a, int b) {
   if (b == 0)
      return 0;
   int result = (int)(((long)a << 16) / b);
   return result;
}

static boolean not(boolean x) {
   return !x;
}

static float int_to_float(int x) {
   return (float)x;
}

int float_to_int(float x) {
   return (int)x;
}

float floor(float x) {
   return (float)Math.floor(x);
}

static Random rand = new Random();

float random() {
   return rand.nextFloat();
}

int irandom() {
   return rand.nextInt();
}

float get(float[] a, int i) {
   return a[i];
}

void set(float[] a, int i, float val) {
   a[i] = val;
}

int get(int[] a, int i) {
   return a[i];
}

void set(int[] a, int i, int val) {
   a[i] = val;
}

float[] wrap_array(float x[]) {
   return x;
}

int[] wrap_array(int x[]) {
   return x;
}

float cosh(float x) {
   return (float)Math.cosh(x);
}

float cos(float x) {
   return (float)Math.cos(x);
}

float sin(float x) {
   return (float)Math.sin(x);
}

float sinh(float x) {
   return (float)Math.sinh(x);
}

float tan(float x) {
   return (float)Math.tan(x);
}

float tanh(float x) {
   return (float)Math.tanh(x);
}

float sqrt(float x) {
   return (float)Math.sqrt(x);
}

float pow(float x, float y) {
   return (float)Math.pow(x, y);
}

float exp(float x) {
   return (float)Math.exp(x);
}


private class Array_defined_type_dot {
   public float x;
   public float y;
 
   Array_defined_type_dot(){ this.x = 0.0f;
   this.y = 0.0f;
    } 
   Array_defined_type_dot(float x,float y){ this.x = x;
   this.y = y;
    } }

private class Array_defined_type__ctx_type_0 {
   public Array_defined_type_dot p1[];
 
   Array_defined_type__ctx_type_0(){ this.p1 = new Array_defined_type_dot[]{new Array_defined_type_dot(),new Array_defined_type_dot(),new Array_defined_type_dot(),new Array_defined_type_dot(),new Array_defined_type_dot(),new Array_defined_type_dot(),new Array_defined_type_dot(),new Array_defined_type_dot(),new Array_defined_type_dot(),new Array_defined_type_dot(),new Array_defined_type_dot(),new Array_defined_type_dot()};
    } 
   Array_defined_type__ctx_type_0(Array_defined_type_dot p1[]){ this.p1 = p1;
    } }

private class Array_defined_type__ctx_type_1 {
   public Array_defined_type__ctx_type_0 _inst1b1;
 
   Array_defined_type__ctx_type_1(){ this._inst1b1 = new Array_defined_type__ctx_type_0();
    } 
   Array_defined_type__ctx_type_1(Array_defined_type__ctx_type_0 _inst1b1){ this._inst1b1 = _inst1b1;
    } }

private Array_defined_type_dot Array_defined_type_dot_init(){
   Array_defined_type_dot _ctx = new Array_defined_type_dot(); 
   _ctx.y = 0.0f;
   _ctx.x = 0.0f;
   return _ctx;
}

private Array_defined_type__ctx_type_0 Array_defined_type__ctx_type_0_init(){
   Array_defined_type__ctx_type_0 _ctx = new Array_defined_type__ctx_type_0(); 
   _ctx.p1 = makeArray(12,Array_defined_type_dot_init());
   return _ctx;
}

private Array_defined_type__ctx_type_0 Array_defined_type_foo_init(){return Array_defined_type__ctx_type_0_init();}

private void Array_defined_type_foo(Array_defined_type__ctx_type_0 _ctx){
}

private Array_defined_type__ctx_type_1 Array_defined_type__ctx_type_1_init(){
   Array_defined_type__ctx_type_1 _ctx = new Array_defined_type__ctx_type_1(); 
   _ctx._inst1b1 = Array_defined_type__ctx_type_0_init();
   return _ctx;
}

private Array_defined_type__ctx_type_1 Array_defined_type_process_init(){return Array_defined_type__ctx_type_1_init();}

private float Array_defined_type_process(Array_defined_type__ctx_type_1 _ctx, float input){
   Array_defined_type_foo(_ctx._inst1b1);
   return input;
}

private Array_defined_type__ctx_type_1 Array_defined_type_noteOn_init(){return Array_defined_type__ctx_type_1_init();}

private void Array_defined_type_noteOn(Array_defined_type__ctx_type_1 _ctx, int note, int velocity, int channel){
}

private Array_defined_type__ctx_type_1 Array_defined_type_noteOff_init(){return Array_defined_type__ctx_type_1_init();}

private void Array_defined_type_noteOff(Array_defined_type__ctx_type_1 _ctx, int note, int channel){
}

private Array_defined_type__ctx_type_1 Array_defined_type_controlChange_init(){return Array_defined_type__ctx_type_1_init();}

private void Array_defined_type_controlChange(Array_defined_type__ctx_type_1 _ctx, int control, int value, int channel){
}

private Array_defined_type__ctx_type_1 Array_defined_type_default_init(){return Array_defined_type__ctx_type_1_init();}

private void Array_defined_type_default(Array_defined_type__ctx_type_1 _ctx){
}


}