
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#include "tricore.h"

void Util__ctx_type_3_init(Util__ctx_type_3 &_output_){
   Util__ctx_type_3 _ctx;
   _ctx.y1 = 0.f;
   _ctx.x1 = 0.f;
   _output_ = _ctx;
   return ;
}

float Util_dcblock(Util__ctx_type_3 &_ctx, float x0){
   float y0;
   y0 = (x0 + (- _ctx.x1) + (0.995f * _ctx.y1));
   _ctx.x1 = x0;
   _ctx.y1 = y0;
   return y0;
}

void Tricore__ctx_type_0_init(Tricore__ctx_type_0 &_output_){
   Tricore__ctx_type_0 _ctx;
   _ctx.reset_state = false;
   _ctx.reset_phase = 0.f;
   _ctx.rate = 0.f;
   _ctx.phase = 0.f;
   _ctx.direction = false;
   Util__ctx_type_0_init(_ctx._inst23);
   Util__ctx_type_0_init(_ctx._inst22);
   Util__ctx_type_1_init(_ctx._inst20);
   Tricore_default(_ctx);
   _output_ = _ctx;
   return ;
}

float Tricore_process(Tricore__ctx_type_0 &_ctx, float cv, float reset, float disable){
   float out;
   out = 0.f;
   if(Util_change(_ctx._inst20,cv)){
      _ctx.rate = (4.f * Util_cvToRate_1024(cv));
   }
   float new_phase;
   float _if_39;
   if(_ctx.direction){
      _if_39 = _ctx.rate;
   }
   else
   {
      _if_39 = (- _ctx.rate);
   }
   new_phase = (_ctx.phase + _if_39);
   uint8_t bdisable;
   bdisable = (disable > 0.5f);
   if(Util_edge(_ctx._inst22,(reset > 0.f)) || Util_edge(_ctx._inst23,bdisable)){
      _ctx.reset_phase = _ctx.phase;
      _ctx.reset_state = true;
      new_phase = 0.f;
   }
   if(new_phase > 1024.f){
      new_phase = (1024.f + (- (-1024.f + new_phase)));
      _ctx.direction = false;
   }
   else
   {
      if(new_phase < -1024.f){
         _ctx.direction = true;
      }
   }
   if(bdisable){
      _ctx.phase = 0.f;
   }
   else
   {
      _ctx.phase = new_phase;
   }
   if(_ctx.reset_state){
      if((fabsf(_ctx.reset_phase) > 10.f) || bdisable){
         float reset_speed;
         if(bdisable){
            reset_speed = 0.01f;
         }
         else
         {
            reset_speed = 0.5f;
         }
         _ctx.reset_phase = (_ctx.reset_phase + (- (_ctx.reset_phase * reset_speed)));
      }
      else
      {
         uint8_t _cond_43;
         _cond_43 = (_ctx.reset_phase > 10.f);
         if(bool_not(_cond_43)){
            _ctx.reset_phase = 0.f;
         }
         _ctx.reset_state = false;
         _ctx.direction = true;
      }
      out = _ctx.reset_phase;
   }
   out = (_ctx.phase + out);
   return (0.0009766f * out);
}


