
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#ifndef BENCH_H
#define BENCH_H
#include <stdint.h>
#include <math.h>
#include "vultin.h"

uint8_t Bench_near_zero(float x);

static const float Bench_pitchToRate_c0[33] = {0.000185f,0.000187f,0.000194f,0.000214f,0.000259f,0.000348f,0.000508f,0.000783f,0.001233f,0.001950f,0.003062f,0.004754f,0.007286f,0.011023f,0.016473f,0.024339f,0.035594f,0.051572f,0.074099f,0.105662f,0.149642f,0.210618f,0.294773f,0.410449f,0.568856f,0.784977f,1.078990f,1.477668f,2.016978f,2.744381f,3.723559f,5.038629f,6.800589f};
static const float Bench_pitchToRate_c1[33] = {0.000011f,0.000010f,0.000008f,0.000005f,(-0.000001f),(-0.000010f),(-0.000023f),(-0.000043f),(-0.000071f),(-0.000111f),(-0.000167f),(-0.000245f),(-0.000351f),(-0.000496f),(-0.000692f),(-0.000956f),(-0.001310f),(-0.001783f),(-0.002413f),(-0.003250f),(-0.004357f),(-0.005819f),(-0.007746f),(-0.010279f),(-0.013603f),(-0.017957f),(-0.023652f),(-0.031089f),(-0.040791f),(-0.053425f),(-0.069865f),(-0.091234f),(-0.118969f)};
static const float Bench_pitchToRate_c2[33] = {0.000000f,0.000000f,0.000001f,0.000001f,0.000001f,0.000001f,0.000001f,0.000002f,0.000002f,0.000003f,0.000003f,0.000004f,0.000005f,0.000007f,0.000009f,0.000011f,0.000014f,0.000017f,0.000022f,0.000027f,0.000034f,0.000043f,0.000054f,0.000068f,0.000085f,0.000107f,0.000135f,0.000169f,0.000213f,0.000268f,0.000337f,0.000424f,0.000533f};
float Bench_pitchToRate(float d);

static const float Bench_cvToRate_c0[33] = {0.000109f,0.000151f,0.000206f,0.000279f,0.000376f,0.000501f,0.000661f,0.000860f,0.001102f,0.001388f,0.001712f,0.002057f,0.002398f,0.002692f,0.002891f,0.002966f,0.002966f,0.003165f,0.004357f,0.008457f,0.019649f,0.046546f,0.106173f,0.231177f,0.482734f,0.973374f,1.906978f,3.648305f,6.842964f,12.623166f,22.958585f,41.251682f,73.343276f};
static const float Bench_cvToRate_c1[33] = {0.000019f,0.000028f,0.000041f,0.000059f,0.000085f,0.000121f,0.000172f,0.000243f,0.000341f,0.000472f,0.000645f,0.000868f,0.001142f,0.001458f,0.001782f,0.002029f,0.002018f,0.001400f,(-0.000482f),(-0.004817f),(-0.013711f),(-0.030834f),(-0.062493f),(-0.119419f),(-0.219705f),(-0.393635f),(-0.691587f),(-1.196919f),(-2.046922f),(-3.466801f),(-5.824649f),(-9.720185f),(-16.127720f)};
static const float Bench_cvToRate_c2[33] = {0.000001f,0.000001f,0.000002f,0.000003f,0.000005f,0.000008f,0.000012f,0.000018f,0.000028f,0.000043f,0.000066f,0.000102f,0.000157f,0.000242f,0.000374f,0.000576f,0.000888f,0.001370f,0.002113f,0.003259f,0.005025f,0.007750f,0.011953f,0.018434f,0.028429f,0.043843f,0.067615f,0.104276f,0.160816f,0.248012f,0.382487f,0.589876f,0.909714f};
float Bench_cvToRate(float cv);

static const float Bench_otanh_c0[33] = {(-0.999989f),(-0.999975f),(-0.999931f),(-0.999817f),(-0.999516f),(-0.998739f),(-0.996764f),(-0.991844f),(-0.979903f),(-0.951884f),(-0.889177f),(-0.758820f),(-0.521641f),(-0.197113f),0.015439f,0.000000f,0.000000f,(-0.015439f),0.197113f,0.521641f,0.758820f,0.889177f,0.951884f,0.979903f,0.991844f,0.996764f,0.998739f,0.999516f,0.999817f,0.999931f,0.999975f,0.999989f,0.999995f};
static const float Bench_otanh_c1[33] = {0.000002f,0.000006f,0.000017f,0.000048f,0.000138f,0.000391f,0.001098f,0.003057f,0.008410f,0.022784f,0.060373f,0.154335f,0.368522f,0.759358f,1.134520f,1.042518f,1.042518f,1.134520f,0.759358f,0.368522f,0.154335f,0.060373f,0.022784f,0.008410f,0.003057f,0.001098f,0.000391f,0.000138f,0.000048f,0.000017f,0.000006f,0.000002f,0.000001f};
static const float Bench_otanh_c2[33] = {0.000000f,0.000000f,0.000001f,0.000003f,0.000010f,0.000030f,0.000094f,0.000289f,0.000889f,0.002732f,0.008364f,0.025293f,0.073638f,0.191281f,0.356816f,0.242051f,(-0.242051f),(-0.356816f),(-0.191281f),(-0.073638f),(-0.025293f),(-0.008364f),(-0.002732f),(-0.000889f),(-0.000289f),(-0.000094f),(-0.000030f),(-0.000010f),(-0.000003f),(-0.000001f),(-0.000000f),(-0.000000f),(-0.000000f)};
float Bench_otanh(float x);

static const float Bench_osin_table_c0[129] = {(-0.000000f),(-0.000008f),(-0.000038f),(-0.000105f),(-0.000225f),(-0.000411f),(-0.000679f),(-0.001042f),(-0.001514f),(-0.002109f),(-0.002838f),(-0.003715f),(-0.004751f),(-0.005957f),(-0.007345f),(-0.008923f),(-0.010700f),(-0.012685f),(-0.014888f),(-0.017308f),(-0.019955f),(-0.022839f),(-0.025953f),(-0.029312f),(-0.032905f),(-0.036722f),(-0.040813f),(-0.045118f),(-0.049629f),(-0.054421f),(-0.059420f),(-0.064674f),(-0.070044f),(-0.075674f),(-0.081509f),(-0.087493f),(-0.093628f),(-0.099864f),(-0.106349f),(-0.112817f),(-0.119625f),(-0.126007f),(-0.132927f),(-0.139517f),(-0.146559f),(-0.153451f),(-0.159610f),(-0.166885f),(-0.172530f),(-0.178839f),(-0.186004f),(-0.191243f),(-0.197796f),(-0.202271f),(-0.206125f),(-0.211988f),(-0.215932f),(-0.220193f),(-0.227281f),(-0.228385f),(-0.231242f),(-0.230797f),(-0.233873f),(-0.238633f),(-0.225660f),(-0.231332f),(-0.243947f),(-0.223099f),(-0.221825f),(-0.217393f),(-0.218040f),(-0.215365f),(-0.194217f),(-0.183516f),(-0.169532f),(-0.172745f),(-0.148364f),(-0.132921f),(-0.124959f),(-0.100212f),(-0.090938f),(-0.044562f),(-0.054425f),0.001049f,0.002033f,0.035995f,0.027905f,0.089716f,0.136848f,0.176165f,0.199116f,0.252990f,0.275900f,0.309444f,0.324745f,0.392132f,0.427874f,0.509048f,0.546721f,0.534998f,0.706054f,0.754917f,0.824874f,0.971612f,0.928143f,1.036225f,1.182441f,1.191092f,1.299743f,1.256961f,1.890715f,1.453732f,1.948986f,1.478734f,1.495686f,2.011178f,1.493637f,1.629685f,4.158053f,4.385466f,2.290062f,2.422288f,2.507535f,2.639007f,2.181678f,2.849300f,2.972793f,3.082973f,2.563551f};
static const float Bench_osin_table_c1[129] = {1.000051f,1.000660f,1.001877f,1.003701f,1.006126f,1.009150f,1.012767f,1.016969f,1.021750f,1.027100f,1.033009f,1.039467f,1.046462f,1.053980f,1.062008f,1.070530f,1.079528f,1.088989f,1.098895f,1.109216f,1.119949f,1.131079f,1.142551f,1.154378f,1.166500f,1.178904f,1.191586f,1.204504f,1.217712f,1.230968f,1.244514f,1.258156f,1.271888f,1.285726f,1.299704f,1.313396f,1.327117f,1.340822f,1.354293f,1.368318f,1.381844f,1.394292f,1.407118f,1.420913f,1.434107f,1.446680f,1.458532f,1.469497f,1.481530f,1.488794f,1.498377f,1.511411f,1.518143f,1.526427f,1.534681f,1.536873f,1.544699f,1.553641f,1.558855f,1.555876f,1.564717f,1.567205f,1.579057f,1.581423f,1.563014f,1.563252f,1.593135f,1.560170f,1.565418f,1.562001f,1.562564f,1.540688f,1.523995f,1.512351f,1.488195f,1.497791f,1.488144f,1.506517f,1.436557f,1.440698f,1.388449f,1.362101f,1.367590f,1.349761f,1.369187f,1.312449f,1.299535f,1.274467f,1.259258f,1.142085f,1.071607f,1.125073f,1.081280f,1.015525f,0.930016f,0.929467f,0.926993f,0.830052f,0.733113f,0.659428f,0.722232f,0.659659f,0.611804f,0.653129f,0.516031f,0.455595f,0.438406f,0.377567f,0.315380f,0.239248f,0.242515f,0.129443f,0.062916f,(-0.007284f),(-0.062047f),(-0.173137f),(-0.172944f),(-0.207809f),(-0.691306f),(-0.837591f),(-0.487564f),(-0.541086f),(-0.614241f),(-0.694590f),(-0.615837f),(-0.841580f),(-0.915244f),(-0.990932f),(-0.854964f)};
static const float Bench_osin_table_c2[129] = {(-0.006172f),(-0.018511f),(-0.030839f),(-0.043149f),(-0.055432f),(-0.067681f),(-0.079889f),(-0.092049f),(-0.104152f),(-0.116192f),(-0.128160f),(-0.140052f),(-0.151858f),(-0.163569f),(-0.175187f),(-0.186693f),(-0.198083f),(-0.209357f),(-0.220506f),(-0.231501f),(-0.242372f),(-0.253103f),(-0.263675f),(-0.274068f),(-0.284325f),(-0.294344f),(-0.304275f),(-0.313925f),(-0.323477f),(-0.332702f),(-0.341919f),(-0.350845f),(-0.359549f),(-0.367788f),(-0.376294f),(-0.384406f),(-0.391870f),(-0.399435f),(-0.406574f),(-0.413587f),(-0.421090f),(-0.426855f),(-0.432673f),(-0.439720f),(-0.445656f),(-0.451737f),(-0.456269f),(-0.461404f),(-0.465966f),(-0.468720f),(-0.472836f),(-0.478999f),(-0.481056f),(-0.484679f),(-0.486791f),(-0.485688f),(-0.491236f),(-0.493958f),(-0.495775f),(-0.495489f),(-0.497076f),(-0.498236f),(-0.506077f),(-0.505513f),(-0.496879f),(-0.497021f),(-0.513113f),(-0.494646f),(-0.499243f),(-0.497348f),(-0.502916f),(-0.493444f),(-0.483921f),(-0.483231f),(-0.475870f),(-0.481524f),(-0.477846f),(-0.480350f),(-0.457070f),(-0.465376f),(-0.449796f),(-0.436060f),(-0.449949f),(-0.441653f),(-0.447251f),(-0.426776f),(-0.441272f),(-0.433692f),(-0.431058f),(-0.389097f),(-0.368218f),(-0.385463f),(-0.378954f),(-0.353455f),(-0.325848f),(-0.349282f),(-0.357152f),(-0.322215f),(-0.270027f),(-0.247896f),(-0.298665f),(-0.288973f),(-0.277646f),(-0.315053f),(-0.255505f),(-0.248218f),(-0.273684f),(-0.225559f),(-0.255106f),(-0.206505f),(-0.257199f),(-0.186347f),(-0.239884f),(-0.138681f),(-0.125941f),(-0.160150f),(-0.098556f),(-0.089017f),(-0.219011f),(-0.189367f),(-0.084284f),(-0.068491f),(-0.058547f),(-0.045631f),(-0.025660f),(-0.020873f),(-0.009187f),0.002929f,0.011511f};
float Bench_osin_table(float x);

float Bench_osin(float x);

typedef struct Bench__ctx_type_6 {
   float y1;
   float x1;
} Bench__ctx_type_6;

typedef Bench__ctx_type_6 Bench_dcblock_type;

void Bench__ctx_type_6_init(Bench__ctx_type_6 &_output_);

void Bench_dcblock_init(Bench__ctx_type_6 &_output_);

float Bench_dcblock(Bench__ctx_type_6 &_ctx, float x0);

typedef struct Bench__ctx_type_7 {
   float pre_x;
} Bench__ctx_type_7;

typedef Bench__ctx_type_7 Bench_change_type;

void Bench__ctx_type_7_init(Bench__ctx_type_7 &_output_);

void Bench_change_init(Bench__ctx_type_7 &_output_);

uint8_t Bench_change(Bench__ctx_type_7 &_ctx, float x);

typedef struct Bench__ctx_type_8 {
   float phase;
   float inc;
   Bench__ctx_type_7 _inst9;
} Bench__ctx_type_8;

typedef Bench__ctx_type_8 Bench_osc_saw_type;

void Bench__ctx_type_8_init(Bench__ctx_type_8 &_output_);

void Bench_osc_saw_init(Bench__ctx_type_8 &_output_);

float Bench_osc_saw(Bench__ctx_type_8 &_ctx, float cv);

typedef Bench__ctx_type_8 Bench_init_type;

void Bench_init_init(Bench__ctx_type_8 &_output_);

void Bench_init(Bench__ctx_type_8 &_ctx);

float Bench_pulse_train(float m, float phase);

typedef struct Bench__ctx_type_10 {
   float state_triang;
   float state_saw;
   float state_pulse;
   float rate;
   float phase;
   float output;
   float m;
   Bench__ctx_type_6 _inst30;
   Bench__ctx_type_7 _inst22;
} Bench__ctx_type_10;

typedef Bench__ctx_type_10 Bench_osc_blit_type;

void Bench__ctx_type_10_init(Bench__ctx_type_10 &_output_);

void Bench_osc_blit_init(Bench__ctx_type_10 &_output_);

float Bench_osc_blit(Bench__ctx_type_10 &_ctx, float cv, float pw, float wave);

typedef Bench__ctx_type_10 Bench_init_blit_type;

void Bench_init_blit_init(Bench__ctx_type_10 &_output_);

void Bench_init_blit(Bench__ctx_type_10 &_ctx);

float Bench_map(float x, float x0, float x1, float y0, float y1);

typedef struct Bench__ctx_type_12 {
   float dlow;
   float dband;
} Bench__ctx_type_12;

typedef Bench__ctx_type_12 Bench_svf_step_type;

void Bench__ctx_type_12_init(Bench__ctx_type_12 &_output_);

void Bench_svf_step_init(Bench__ctx_type_12 &_output_);

float Bench_svf_step(Bench__ctx_type_12 &_ctx, float input, float g, float q, int sel);

static const float Bench_cv_to_g_c0[33] = {(-8.010426f),(-3.546207f),(-1.478840f),(-0.575231f),(-0.205810f),(-0.066036f),(-0.017618f),(-0.002284f),0.002404f,0.004181f,0.005354f,0.006462f,0.007533f,0.008456f,0.009084f,0.009319f,0.009319f,0.009942f,0.013684f,0.026546f,0.061588f,0.145478f,0.330087f,0.712245f,1.466064f,2.893671f,5.501678f,10.111821f,18.014672f,31.174450f,52.490150f,86.112365f,137.805377f};
static const float Bench_cv_to_g_c1[33] = {(-1.803533f),(-0.853566f),(-0.382390f),(-0.160709f),(-0.062583f),(-0.022111f),(-0.006703f),(-0.001287f),0.000576f,0.001386f,0.002013f,0.002725f,0.003588f,0.004582f,0.005599f,0.006373f,0.006340f,0.004398f,(-0.001512f),(-0.015110f),(-0.042959f),(-0.096365f),(-0.194393f),(-0.368450f),(-0.669023f),(-1.175223f),(-2.007785f),(-3.346094f),(-5.449613f),(-8.683635f),(-13.548725f),(-20.712239f),(-31.039049f)};
static const float Bench_cv_to_g_c2[33] = {(-0.102285f),(-0.051748f),(-0.024902f),(-0.011306f),(-0.004790f),(-0.001860f),(-0.000634f),(-0.000156f),0.000029f,0.000121f,0.000205f,0.000320f,0.000493f,0.000761f,0.001173f,0.001810f,0.002791f,0.004304f,0.006636f,0.010230f,0.015763f,0.024262f,0.037276f,0.057094f,0.087056f,0.131928f,0.198373f,0.295499f,0.435473f,0.634163f,0.911764f,1.293326f,1.809077f};
float Bench_cv_to_g(float cv);

typedef struct Bench__ctx_type_14 {
   Bench__ctx_type_12 step;
   float g;
   Bench__ctx_type_7 _inst36;
} Bench__ctx_type_14;

typedef Bench__ctx_type_14 Bench_flt_svf_type;

void Bench__ctx_type_14_init(Bench__ctx_type_14 &_output_);

void Bench_flt_svf_init(Bench__ctx_type_14 &_output_);

float Bench_flt_svf(Bench__ctx_type_14 &_ctx, float input, float cv, float q, int sel);

typedef struct Bench__ctx_type_15 {
   Bench__ctx_type_14 _inst44;
   Bench__ctx_type_10 _inst43;
   Bench__ctx_type_8 _inst42;
   Bench__ctx_type_8 _inst41;
   Bench__ctx_type_8 _inst40;
   Bench__ctx_type_8 _inst39;
} Bench__ctx_type_15;

typedef Bench__ctx_type_15 Bench_process_type;

void Bench__ctx_type_15_init(Bench__ctx_type_15 &_output_);

void Bench_process_init(Bench__ctx_type_15 &_output_);

float Bench_process(Bench__ctx_type_15 &_ctx);

typedef Bench__ctx_type_15 Bench_noteOn_type;

void Bench_noteOn_init(Bench__ctx_type_15 &_output_);

void Bench_noteOn(Bench__ctx_type_15 &_ctx, int note, int velocity, int channel);

typedef Bench__ctx_type_15 Bench_noteOff_type;

void Bench_noteOff_init(Bench__ctx_type_15 &_output_);

void Bench_noteOff(Bench__ctx_type_15 &_ctx, int note, int channel);

typedef Bench__ctx_type_15 Bench_controlChange_type;

void Bench_controlChange_init(Bench__ctx_type_15 &_output_);

void Bench_controlChange(Bench__ctx_type_15 &_ctx, int control, int value, int channel);

typedef Bench__ctx_type_15 Bench_default_type;

void Bench_default_init(Bench__ctx_type_15 &_output_);

void Bench_default(Bench__ctx_type_15 &_ctx);



#endif // BENCH_H
