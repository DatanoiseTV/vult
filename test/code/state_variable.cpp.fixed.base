
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#include "state_variable.h"

void State_variable__ctx_type_0_init(State_variable__ctx_type_0 &_output_){
   State_variable__ctx_type_0 _ctx;
   _ctx.pre_x = 0x0 /* 0.000000 */;
   _output_ = _ctx;
   return ;
}

void State_variable_change_init(State_variable__ctx_type_0 &_output_){
   State_variable__ctx_type_0_init(_output_);
   return ;
}

uint8_t State_variable_change(State_variable__ctx_type_0 &_ctx, fix16_t x){
   uint8_t v = (_ctx.pre_x != x);
   _ctx.pre_x = x;
   return v;
}

void State_variable__ctx_type_1_init(State_variable__ctx_type_1 &_output_){
   State_variable__ctx_type_1 _ctx;
   _ctx.dlow = 0x0 /* 0.000000 */;
   _ctx.dband = 0x0 /* 0.000000 */;
   _output_ = _ctx;
   return ;
}

void State_variable_svf_step_init(State_variable__ctx_type_1 &_output_){
   State_variable__ctx_type_1_init(_output_);
   return ;
}

fix16_t State_variable_svf_step(State_variable__ctx_type_1 &_ctx, fix16_t input, fix16_t g, fix16_t q, int sel){
   fix16_t low = fix_add(_ctx.dlow,fix_mul(g,_ctx.dband));
   fix16_t high = fix_add(fix_add(input,(- low)),(- fix_mul(q,_ctx.dband)));
   fix16_t band = fix_add(fix_mul(g,high),_ctx.dband);
   fix16_t notch = fix_add(high,low);
   _ctx.dband = fix_clip(band,(-0x10000 /* -1.000000 */),0x10000 /* 1.000000 */);
   _ctx.dlow = fix_clip(low,(-0x10000 /* -1.000000 */),0x10000 /* 1.000000 */);
   fix16_t output;
   uint8_t _cond_1 = (sel == 0);
   if(_cond_1){ output = low; }
   else
   {
      uint8_t _cond_2 = (sel == 1);
      if(_cond_2){ output = high; }
      else
      {
         uint8_t _cond_3 = (sel == 2);
         if(_cond_3){ output = band; }
         else
         { output = notch; }
      }
   }
   return output;
}

void State_variable__ctx_type_2_init(State_variable__ctx_type_2 &_output_){
   State_variable__ctx_type_2 _ctx;
   State_variable__ctx_type_1_init(_ctx.step);
   _ctx.g = 0x0 /* 0.000000 */;
   State_variable__ctx_type_0_init(_ctx._inst1);
   _output_ = _ctx;
   return ;
}

void State_variable_svf_init(State_variable__ctx_type_2 &_output_){
   State_variable__ctx_type_2_init(_output_);
   return ;
}

fix16_t State_variable_svf(State_variable__ctx_type_2 &_ctx, fix16_t input, fix16_t fc, fix16_t q, int sel){
   fc = fix_clip(fc,0x0 /* 0.000000 */,0x10000 /* 1.000000 */);
   q = fix_clip(q,0x0 /* 0.000000 */,0x10000 /* 1.000000 */);
   fix16_t fix_q = fix_mul(0x20000 /* 2.000000 */,fix_add(0x10000 /* 1.000000 */,(- q)));
   uint8_t _cond_3 = State_variable_change(_ctx._inst1,fc);
   if(_cond_3){
      _ctx.g = fix_mul(fc,0x8000 /* 0.500000 */);
   }
   fix16_t x1 = State_variable_svf_step(_ctx.step,input,_ctx.g,fix_q,sel);
   fix16_t x2 = State_variable_svf_step(_ctx.step,input,_ctx.g,fix_q,sel);
   return fix_mul(fix_add(x1,x2),0x8000 /* 0.500000 */);
}


