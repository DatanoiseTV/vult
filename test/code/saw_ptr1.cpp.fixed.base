
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#include "saw_ptr1.h"

void Util__ctx_type_3_init(Util__ctx_type_3 &_output_){
   Util__ctx_type_3 _ctx;
   _ctx.y1 = 0x0 /* 0.000000 */;
   _ctx.x1 = 0x0 /* 0.000000 */;
   _output_ = _ctx;
   return ;
}

fix16_t Util_dcblock(Util__ctx_type_3 &_ctx, fix16_t x0){
   fix16_t y0;
   y0 = (x0 + (- _ctx.x1) + fix_mul(0xfeb8 /* 0.995000 */,_ctx.y1));
   _ctx.x1 = x0;
   _ctx.y1 = y0;
   return y0;
}

void Saw_ptr1__ctx_type_0_init(Saw_ptr1__ctx_type_0 &_output_){
   Saw_ptr1__ctx_type_0 _ctx;
   _ctx.rate = 0x0 /* 0.000000 */;
   _ctx.phase = 0x0 /* 0.000000 */;
   Util__ctx_type_1_init(_ctx._inst159);
   Saw_ptr1_default(_ctx);
   _output_ = _ctx;
   return ;
}

fix16_t Saw_ptr1_process(Saw_ptr1__ctx_type_0 &_ctx, fix16_t cv){
   if(Util_change(_ctx._inst159,cv)){
      _ctx.rate = Util_cvToRate(cv);
   }
   fix16_t out;
   fix16_t s1;
   s1 = _ctx.rate;
   fix16_t dc;
   dc = -0x10000 /* -1.000000 */;
   _ctx.phase = (_ctx.phase + _ctx.rate);
   if(_ctx.phase > 0x10000 /* 1.000000 */){
      _ctx.phase = (-0x10000 /* -1.000000 */ + _ctx.phase);
   }
   if(_ctx.phase < s1){
      fix16_t d;
      d = fix_div(_ctx.phase,_ctx.rate);
      out = (0x20000 /* 2.000000 */ + dc + (- (d << 1)));
   }
   else
   {
      out = ((- dc) + (_ctx.phase << 1));
   }
   return out;
}


