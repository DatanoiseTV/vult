package .voice_4;

import java.util.Arrays;
import java.util.Random;
import .external.*;

public class voice_4 {

static int clip(int x, int minv, int maxv) {
   if(x > maxv)
      return maxv;
   else if(x < minv)
      return minv;
   else return x;
}

static float clip(float x, float minv, float maxv) {
   if(x > maxv)
      return maxv;
   else if(x < minv)
      return minv;
   else return x;
}

int[] makeArray(int size, int init) {
   int a[] = new int[size];
   Arrays.fill(a, init);
   return a;
}

float[] makeArray(int size, float init) {
   float a[] = new float[size];
   Arrays.fill(a, init);
   return a;
}

boolean[] makeArray(int size, boolean init) {
   boolean a[] = new boolean[size];
   Arrays.fill(a, init);
   return a;
}

int int_to_fix16(int a) { return a * 0x00010000; }

int fix16_to_int(int a) { return (a >> 16); }

int fix16_add(int x, int y) { return x + y; }

int fix16_sub(int x, int y) { return x - y; }

int fix16_minus(int x) { return -x; }

float fix16_to_float(int a) { return (float)a / 0x00010000; }
int float_to_fix16(float a) {
   float temp = a * 0x00010000;
   return (int)temp;
}

int fix16_mul(int x, int y) {
   long res = (long)x * (long)y;
   return (int)(res >> 16);
}

int fix16_div(int a, int b) {
   if (b == 0)
      return 0;
   int result = (int)(((long)a << 16) / b);
   return result;
}

static boolean not(boolean x) {
   return !x;
}

static float int_to_float(int x) {
   return (float)x;
}

int float_to_int(float x) {
   return (int)x;
}

float floor(float x) {
   return (float)Math.floor(x);
}

static Random rand = new Random();

float random() {
   return rand.nextFloat();
}

int irandom() {
   return rand.nextInt();
}

float get(float[] a, int i) {
   return a[i];
}

void set(float[] a, int i, float val) {
   a[i] = val;
}

int get(int[] a, int i) {
   return a[i];
}

void set(int[] a, int i, int val) {
   a[i] = val;
}

float[] wrap_array(float x[]) {
   return x;
}

int[] wrap_array(int x[]) {
   return x;
}

float cosh(float x) {
   return (float)Math.cosh(x);
}

float cos(float x) {
   return (float)Math.cos(x);
}

float sin(float x) {
   return (float)Math.sin(x);
}

float sinh(float x) {
   return (float)Math.sinh(x);
}

float tan(float x) {
   return (float)Math.tan(x);
}

float tanh(float x) {
   return (float)Math.tanh(x);
}

float sqrt(float x) {
   return (float)Math.sqrt(x);
}

float pow(float x, float y) {
   return (float)Math.pow(x, y);
}

float exp(float x) {
   return (float)Math.exp(x);
}


private class Util__ctx_type_0 {
   public boolean pre;
 
   Util__ctx_type_0(){ this.pre = false;
    } 
   Util__ctx_type_0(boolean pre){ this.pre = pre;
    } }

private class Util__ctx_type_1 {
   public float pre_x;
 
   Util__ctx_type_1(){ this.pre_x = 0.0f;
    } 
   Util__ctx_type_1(float pre_x){ this.pre_x = pre_x;
    } }

private class Util__ctx_type_3 {
   public float y1;
   public float x1;
 
   Util__ctx_type_3(){ this.y1 = 0.0f;
   this.x1 = 0.0f;
    } 
   Util__ctx_type_3(float y1,float x1){ this.y1 = y1;
   this.x1 = x1;
    } }

private class Util__ctx_type_4 {
   public float x;
 
   Util__ctx_type_4(){ this.x = 0.0f;
    } 
   Util__ctx_type_4(float x){ this.x = x;
    } }

private class Util__ctx_type_5 {
   public float x0;
 
   Util__ctx_type_5(){ this.x0 = 0.0f;
    } 
   Util__ctx_type_5(float x0){ this.x0 = x0;
    } }

float Util_pitchToRate_1024_c0[];
         public void set_Util_pitchToRate_1024_c0(java.nio.FloatBuffer buffer){
            Util_pitchToRate_1024_c0 = new float[32];
            buffer.get(Util_pitchToRate_1024_c0);
            }
float Util_pitchToRate_1024_c1[];
         public void set_Util_pitchToRate_1024_c1(java.nio.FloatBuffer buffer){
            Util_pitchToRate_1024_c1 = new float[32];
            buffer.get(Util_pitchToRate_1024_c1);
            }
float Util_pitchToRate_1024_c2[];
         public void set_Util_pitchToRate_1024_c2(java.nio.FloatBuffer buffer){
            Util_pitchToRate_1024_c2 = new float[32];
            buffer.get(Util_pitchToRate_1024_c2);
            }
float Util_pitchToRate_c0[];
         public void set_Util_pitchToRate_c0(java.nio.FloatBuffer buffer){
            Util_pitchToRate_c0 = new float[32];
            buffer.get(Util_pitchToRate_c0);
            }
float Util_pitchToRate_c1[];
         public void set_Util_pitchToRate_c1(java.nio.FloatBuffer buffer){
            Util_pitchToRate_c1 = new float[32];
            buffer.get(Util_pitchToRate_c1);
            }
float Util_pitchToRate_c2[];
         public void set_Util_pitchToRate_c2(java.nio.FloatBuffer buffer){
            Util_pitchToRate_c2 = new float[32];
            buffer.get(Util_pitchToRate_c2);
            }
float Util_cvToRate_1024_c0[];
         public void set_Util_cvToRate_1024_c0(java.nio.FloatBuffer buffer){
            Util_cvToRate_1024_c0 = new float[32];
            buffer.get(Util_cvToRate_1024_c0);
            }
float Util_cvToRate_1024_c1[];
         public void set_Util_cvToRate_1024_c1(java.nio.FloatBuffer buffer){
            Util_cvToRate_1024_c1 = new float[32];
            buffer.get(Util_cvToRate_1024_c1);
            }
float Util_cvToRate_1024_c2[];
         public void set_Util_cvToRate_1024_c2(java.nio.FloatBuffer buffer){
            Util_cvToRate_1024_c2 = new float[32];
            buffer.get(Util_cvToRate_1024_c2);
            }
float Util_cvToRate_c0[];
         public void set_Util_cvToRate_c0(java.nio.FloatBuffer buffer){
            Util_cvToRate_c0 = new float[128];
            buffer.get(Util_cvToRate_c0);
            }
float Util_cvToRate_c1[];
         public void set_Util_cvToRate_c1(java.nio.FloatBuffer buffer){
            Util_cvToRate_c1 = new float[128];
            buffer.get(Util_cvToRate_c1);
            }
float Util_cvToRate_c2[];
         public void set_Util_cvToRate_c2(java.nio.FloatBuffer buffer){
            Util_cvToRate_c2 = new float[128];
            buffer.get(Util_cvToRate_c2);
            }
float Util_cvToperiod_c0[];
         public void set_Util_cvToperiod_c0(java.nio.FloatBuffer buffer){
            Util_cvToperiod_c0 = new float[32];
            buffer.get(Util_cvToperiod_c0);
            }
float Util_cvToperiod_c1[];
         public void set_Util_cvToperiod_c1(java.nio.FloatBuffer buffer){
            Util_cvToperiod_c1 = new float[32];
            buffer.get(Util_cvToperiod_c1);
            }
float Util_cvToperiod_c2[];
         public void set_Util_cvToperiod_c2(java.nio.FloatBuffer buffer){
            Util_cvToperiod_c2 = new float[32];
            buffer.get(Util_cvToperiod_c2);
            }
float Util_cvTokHz_c0[];
         public void set_Util_cvTokHz_c0(java.nio.FloatBuffer buffer){
            Util_cvTokHz_c0 = new float[32];
            buffer.get(Util_cvTokHz_c0);
            }
float Util_cvTokHz_c1[];
         public void set_Util_cvTokHz_c1(java.nio.FloatBuffer buffer){
            Util_cvTokHz_c1 = new float[32];
            buffer.get(Util_cvTokHz_c1);
            }
float Util_cvTokHz_c2[];
         public void set_Util_cvTokHz_c2(java.nio.FloatBuffer buffer){
            Util_cvTokHz_c2 = new float[32];
            buffer.get(Util_cvTokHz_c2);
            }
private class Tricore__ctx_type_0 {
   public boolean reset_state;
   public float reset_phase;
   public float rate;
   public float phase;
   public boolean direction;
   public Util__ctx_type_0 _inst451;
   public Util__ctx_type_0 _inst351;
   public Util__ctx_type_1 _inst13b;
 
   Tricore__ctx_type_0(){ this.reset_state = false;
   this.reset_phase = 0.0f;
   this.rate = 0.0f;
   this.phase = 0.0f;
   this.direction = false;
   this._inst451 = new Util__ctx_type_0();
   this._inst351 = new Util__ctx_type_0();
   this._inst13b = new Util__ctx_type_1();
    } 
   Tricore__ctx_type_0(boolean reset_state,float reset_phase,float rate,float phase,boolean direction,Util__ctx_type_0 _inst451,Util__ctx_type_0 _inst351,Util__ctx_type_1 _inst13b){ this.reset_state = reset_state;
   this.reset_phase = reset_phase;
   this.rate = rate;
   this.phase = phase;
   this.direction = direction;
   this._inst451 = _inst451;
   this._inst351 = _inst351;
   this._inst13b = _inst13b;
    } }

float Saturate_soft_tanh_table_c0[];
         public void set_Saturate_soft_tanh_table_c0(java.nio.FloatBuffer buffer){
            Saturate_soft_tanh_table_c0 = new float[241];
            buffer.get(Saturate_soft_tanh_table_c0);
            }
float Saturate_soft_tanh_table_c1[];
         public void set_Saturate_soft_tanh_table_c1(java.nio.FloatBuffer buffer){
            Saturate_soft_tanh_table_c1 = new float[241];
            buffer.get(Saturate_soft_tanh_table_c1);
            }
float Saturate_soft_tanh_table_c2[];
         public void set_Saturate_soft_tanh_table_c2(java.nio.FloatBuffer buffer){
            Saturate_soft_tanh_table_c2 = new float[241];
            buffer.get(Saturate_soft_tanh_table_c2);
            }
float Svf_calc_g_c0[];
         public void set_Svf_calc_g_c0(java.nio.FloatBuffer buffer){
            Svf_calc_g_c0 = new float[128];
            buffer.get(Svf_calc_g_c0);
            }
float Svf_calc_g_c1[];
         public void set_Svf_calc_g_c1(java.nio.FloatBuffer buffer){
            Svf_calc_g_c1 = new float[128];
            buffer.get(Svf_calc_g_c1);
            }
float Svf_calc_g_c2[];
         public void set_Svf_calc_g_c2(java.nio.FloatBuffer buffer){
            Svf_calc_g_c2 = new float[128];
            buffer.get(Svf_calc_g_c2);
            }
private class Svf__ctx_type_4 {
   public float z2;
   public float z1;
   public float inv_den;
   public float g;
   public Util__ctx_type_1 _inst23b;
   public Util__ctx_type_1 _inst13b;
   public float R;
 
   Svf__ctx_type_4(){ this.z2 = 0.0f;
   this.z1 = 0.0f;
   this.inv_den = 0.0f;
   this.g = 0.0f;
   this._inst23b = new Util__ctx_type_1();
   this._inst13b = new Util__ctx_type_1();
   this.R = 0.0f;
    } 
   Svf__ctx_type_4(float z2,float z1,float inv_den,float g,Util__ctx_type_1 _inst23b,Util__ctx_type_1 _inst13b,float R){ this.z2 = z2;
   this.z1 = z1;
   this.inv_den = inv_den;
   this.g = g;
   this._inst23b = _inst23b;
   this._inst13b = _inst13b;
   this.R = R;
    } }

float Saturate_tanh_table_c0[];
         public void set_Saturate_tanh_table_c0(java.nio.FloatBuffer buffer){
            Saturate_tanh_table_c0 = new float[241];
            buffer.get(Saturate_tanh_table_c0);
            }
float Saturate_tanh_table_c1[];
         public void set_Saturate_tanh_table_c1(java.nio.FloatBuffer buffer){
            Saturate_tanh_table_c1 = new float[241];
            buffer.get(Saturate_tanh_table_c1);
            }
float Saturate_tanh_table_c2[];
         public void set_Saturate_tanh_table_c2(java.nio.FloatBuffer buffer){
            Saturate_tanh_table_c2 = new float[241];
            buffer.get(Saturate_tanh_table_c2);
            }
private class Lfo__ctx_type_0 {
   public float x4;
   public float x3;
   public float x2;
 
   Lfo__ctx_type_0(){ this.x4 = 0.0f;
   this.x3 = 0.0f;
   this.x2 = 0.0f;
    } 
   Lfo__ctx_type_0(float x4,float x3,float x2){ this.x4 = x4;
   this.x3 = x3;
   this.x2 = x2;
    } }

private class Lfo__ctx_type_1 {
   public float rate;
   public float phase;
   public Lfo__ctx_type_0 _inst59b;
   public Util__ctx_type_0 _inst351;
   public Util__ctx_type_1 _inst13b;
 
   Lfo__ctx_type_1(){ this.rate = 0.0f;
   this.phase = 0.0f;
   this._inst59b = new Lfo__ctx_type_0();
   this._inst351 = new Util__ctx_type_0();
   this._inst13b = new Util__ctx_type_1();
    } 
   Lfo__ctx_type_1(float rate,float phase,Lfo__ctx_type_0 _inst59b,Util__ctx_type_0 _inst351,Util__ctx_type_1 _inst13b){ this.rate = rate;
   this.phase = phase;
   this._inst59b = _inst59b;
   this._inst351 = _inst351;
   this._inst13b = _inst13b;
    } }

float Tables_nsine_c0[];
         public void set_Tables_nsine_c0(java.nio.FloatBuffer buffer){
            Tables_nsine_c0 = new float[128];
            buffer.get(Tables_nsine_c0);
            }
float Tables_nsine_c1[];
         public void set_Tables_nsine_c1(java.nio.FloatBuffer buffer){
            Tables_nsine_c1 = new float[128];
            buffer.get(Tables_nsine_c1);
            }
float Tables_nsine_c2[];
         public void set_Tables_nsine_c2(java.nio.FloatBuffer buffer){
            Tables_nsine_c2 = new float[128];
            buffer.get(Tables_nsine_c2);
            }
private class Phase__ctx_type_0 {
   public float rate;
   public float phase;
   public Util__ctx_type_0 _inst351;
   public Util__ctx_type_1 _inst13b;
 
   Phase__ctx_type_0(){ this.rate = 0.0f;
   this.phase = 0.0f;
   this._inst351 = new Util__ctx_type_0();
   this._inst13b = new Util__ctx_type_1();
    } 
   Phase__ctx_type_0(float rate,float phase,Util__ctx_type_0 _inst351,Util__ctx_type_1 _inst13b){ this.rate = rate;
   this.phase = phase;
   this._inst351 = _inst351;
   this._inst13b = _inst13b;
    } }

private class Blit__ctx_type_0 {
   public float scale;
   public int m;
   public Util__ctx_type_1 _inst13b;
 
   Blit__ctx_type_0(){ this.scale = 0.0f;
   this.m = 0;
   this._inst13b = new Util__ctx_type_1();
    } 
   Blit__ctx_type_0(float scale,int m,Util__ctx_type_1 _inst13b){ this.scale = scale;
   this.m = m;
   this._inst13b = _inst13b;
    } }

private class Blit__ctx_type_1 {
   public float state_saw;
   public float state_pulse;
   public float rate;
   public float output;
   public Blit__ctx_type_0 _inst846;
   public Blit__ctx_type_0 _inst746;
   public Phase__ctx_type_0 _inst5cd;
   public Util__ctx_type_1 _inst33b;
   public Util__ctx_type_3 _inst117d;
 
   Blit__ctx_type_1(){ this.state_saw = 0.0f;
   this.state_pulse = 0.0f;
   this.rate = 0.0f;
   this.output = 0.0f;
   this._inst846 = new Blit__ctx_type_0();
   this._inst746 = new Blit__ctx_type_0();
   this._inst5cd = new Phase__ctx_type_0();
   this._inst33b = new Util__ctx_type_1();
   this._inst117d = new Util__ctx_type_3();
    } 
   Blit__ctx_type_1(float state_saw,float state_pulse,float rate,float output,Blit__ctx_type_0 _inst846,Blit__ctx_type_0 _inst746,Phase__ctx_type_0 _inst5cd,Util__ctx_type_1 _inst33b,Util__ctx_type_3 _inst117d){ this.state_saw = state_saw;
   this.state_pulse = state_pulse;
   this.rate = rate;
   this.output = output;
   this._inst846 = _inst846;
   this._inst746 = _inst746;
   this._inst5cd = _inst5cd;
   this._inst33b = _inst33b;
   this._inst117d = _inst117d;
    } }

private class Blit__ctx_type_2 {
   public Blit__ctx_type_1 _inst14c;
 
   Blit__ctx_type_2(){ this._inst14c = new Blit__ctx_type_1();
    } 
   Blit__ctx_type_2(Blit__ctx_type_1 _inst14c){ this._inst14c = _inst14c;
    } }

private class Adsr__ctx_type_0 {
   public float target;
   public int state;
   public float scale;
   public float rate;
   public float out;
   public Util__ctx_type_4 _inst955;
   public Util__ctx_type_0 _inst251;
 
   Adsr__ctx_type_0(){ this.target = 0.0f;
   this.state = 0;
   this.scale = 0.0f;
   this.rate = 0.0f;
   this.out = 0.0f;
   this._inst955 = new Util__ctx_type_4();
   this._inst251 = new Util__ctx_type_0();
    } 
   Adsr__ctx_type_0(float target,int state,float scale,float rate,float out,Util__ctx_type_4 _inst955,Util__ctx_type_0 _inst251){ this.target = target;
   this.state = state;
   this.scale = scale;
   this.rate = rate;
   this.out = out;
   this._inst955 = _inst955;
   this._inst251 = _inst251;
    } }

private class Adsr__ctx_type_1 {
   public float knob4;
   public float knob3;
   public float knob2;
   public float knob1;
   public Adsr__ctx_type_0 _inst16;
 
   Adsr__ctx_type_1(){ this.knob4 = 0.0f;
   this.knob3 = 0.0f;
   this.knob2 = 0.0f;
   this.knob1 = 0.0f;
   this._inst16 = new Adsr__ctx_type_0();
    } 
   Adsr__ctx_type_1(float knob4,float knob3,float knob2,float knob1,Adsr__ctx_type_0 _inst16){ this.knob4 = knob4;
   this.knob3 = knob3;
   this.knob2 = knob2;
   this.knob1 = knob1;
   this._inst16 = _inst16;
    } }

private class Voice_4__ctx_type_0 {
   public float sustain;
   public float release;
   public float pw4;
   public float pw3;
   public float pw2;
   public float pw1;
   public float lfo_shape;
   public float lfo_reset;
   public float lfo_rate;
   public float lfo_pw;
   public float lfo_flt;
   public float lfo_cv;
   public float level4;
   public float level3;
   public float level2;
   public float level1;
   public int flt_shape;
   public float flt_res;
   public float flt_cut;
   public float decay;
   public float attack;
   public Adsr__ctx_type_0 _inst76;
   public Svf__ctx_type_4 _inst612;
   public Tricore__ctx_type_0 _inst541;
   public Blit__ctx_type_2 _inst44f;
   public Blit__ctx_type_2 _inst34f;
   public Blit__ctx_type_2 _inst24f;
   public Lfo__ctx_type_1 _inst15;
 
   Voice_4__ctx_type_0(){ this.sustain = 0.0f;
   this.release = 0.0f;
   this.pw4 = 0.0f;
   this.pw3 = 0.0f;
   this.pw2 = 0.0f;
   this.pw1 = 0.0f;
   this.lfo_shape = 0.0f;
   this.lfo_reset = 0.0f;
   this.lfo_rate = 0.0f;
   this.lfo_pw = 0.0f;
   this.lfo_flt = 0.0f;
   this.lfo_cv = 0.0f;
   this.level4 = 0.0f;
   this.level3 = 0.0f;
   this.level2 = 0.0f;
   this.level1 = 0.0f;
   this.flt_shape = 0;
   this.flt_res = 0.0f;
   this.flt_cut = 0.0f;
   this.decay = 0.0f;
   this.attack = 0.0f;
   this._inst76 = new Adsr__ctx_type_0();
   this._inst612 = new Svf__ctx_type_4();
   this._inst541 = new Tricore__ctx_type_0();
   this._inst44f = new Blit__ctx_type_2();
   this._inst34f = new Blit__ctx_type_2();
   this._inst24f = new Blit__ctx_type_2();
   this._inst15 = new Lfo__ctx_type_1();
    } 
   Voice_4__ctx_type_0(float sustain,float release,float pw4,float pw3,float pw2,float pw1,float lfo_shape,float lfo_reset,float lfo_rate,float lfo_pw,float lfo_flt,float lfo_cv,float level4,float level3,float level2,float level1,int flt_shape,float flt_res,float flt_cut,float decay,float attack,Adsr__ctx_type_0 _inst76,Svf__ctx_type_4 _inst612,Tricore__ctx_type_0 _inst541,Blit__ctx_type_2 _inst44f,Blit__ctx_type_2 _inst34f,Blit__ctx_type_2 _inst24f,Lfo__ctx_type_1 _inst15){ this.sustain = sustain;
   this.release = release;
   this.pw4 = pw4;
   this.pw3 = pw3;
   this.pw2 = pw2;
   this.pw1 = pw1;
   this.lfo_shape = lfo_shape;
   this.lfo_reset = lfo_reset;
   this.lfo_rate = lfo_rate;
   this.lfo_pw = lfo_pw;
   this.lfo_flt = lfo_flt;
   this.lfo_cv = lfo_cv;
   this.level4 = level4;
   this.level3 = level3;
   this.level2 = level2;
   this.level1 = level1;
   this.flt_shape = flt_shape;
   this.flt_res = flt_res;
   this.flt_cut = flt_cut;
   this.decay = decay;
   this.attack = attack;
   this._inst76 = _inst76;
   this._inst612 = _inst612;
   this._inst541 = _inst541;
   this._inst44f = _inst44f;
   this._inst34f = _inst34f;
   this._inst24f = _inst24f;
   this._inst15 = _inst15;
    } }

private Util__ctx_type_0 Util__ctx_type_0_init(){
   Util__ctx_type_0 _ctx = new Util__ctx_type_0(); 
   _ctx.pre = false;
   return _ctx;
}

private Util__ctx_type_0 Util_edge_init(){return Util__ctx_type_0_init();}

private boolean Util_edge(Util__ctx_type_0 _ctx, boolean x){
   boolean ret = (x && not(_ctx.pre)); 
   _ctx.pre = x;
   return ret;
}

private Util__ctx_type_1 Util__ctx_type_1_init(){
   Util__ctx_type_1 _ctx = new Util__ctx_type_1(); 
   _ctx.pre_x = 0.0f;
   return _ctx;
}

private Util__ctx_type_1 Util_change_init(){return Util__ctx_type_1_init();}

private boolean Util_change(Util__ctx_type_1 _ctx, float x){
   boolean v = (_ctx.pre_x != x); 
   _ctx.pre_x = x;
   return v;
}

private float Util_map(float x, float x0, float x1, float y0, float y1){return (y0 + (((x + (- x0)) * (y1 + (- y0))) / (x1 + (- x0))));}

private Util__ctx_type_3 Util__ctx_type_3_init(){
   Util__ctx_type_3 _ctx = new Util__ctx_type_3(); 
   _ctx.y1 = 0.0f;
   _ctx.x1 = 0.0f;
   return _ctx;
}

private Util__ctx_type_3 Util_dcblock_init(){return Util__ctx_type_3_init();}

private float Util_dcblock(Util__ctx_type_3 _ctx, float x0){
   float y0 = (x0 + (- _ctx.x1) + (0.995f * _ctx.y1)); 
   _ctx.x1 = x0;
   _ctx.y1 = y0;
   return y0;
}

private Util__ctx_type_4 Util__ctx_type_4_init(){
   Util__ctx_type_4 _ctx = new Util__ctx_type_4(); 
   _ctx.x = 0.0f;
   return _ctx;
}

private Util__ctx_type_4 Util_smooth_init(){return Util__ctx_type_4_init();}

private float Util_smooth(Util__ctx_type_4 _ctx, float input){
   _ctx.x = (_ctx.x + (0.005f * (input + (- _ctx.x))));
   return _ctx.x;
}

private Util__ctx_type_5 Util__ctx_type_5_init(){
   Util__ctx_type_5 _ctx = new Util__ctx_type_5(); 
   _ctx.x0 = 0.0f;
   return _ctx;
}

private Util__ctx_type_5 Util_average2_init(){return Util__ctx_type_5_init();}

private float Util_average2(Util__ctx_type_5 _ctx, float x1){
   float result = (0.5f * (_ctx.x0 + x1)); 
   _ctx.x0 = x1;
   return result;
}

private float Util_cubic_clipper(float x){if(x <= -0.6666666f){ return -0.6666666f; }
else
{ if(x >= 0.6666667f){ return 0.6666667f; }
else
{ return (x + (-0.3333333f * x * x * x)); } }}

private float Util_pitchToRate_1024_raw_c0(int index){return Util_pitchToRate_1024_c0[index];}

private float Util_pitchToRate_1024_raw_c1(int index){return Util_pitchToRate_1024_c1[index];}

private float Util_pitchToRate_1024_raw_c2(int index){return Util_pitchToRate_1024_c2[index];}

private float Util_pitchToRate_1024(float pitch){
   int index = clip(float_to_int((0.2440945f * pitch)),0,31); 
   return (wrap_array(Util_pitchToRate_1024_c0)[index] + (pitch * (wrap_array(Util_pitchToRate_1024_c1)[index] + (pitch * wrap_array(Util_pitchToRate_1024_c2)[index]))));
}

private float Util_pitchToRate_raw_c0(int index){return Util_pitchToRate_c0[index];}

private float Util_pitchToRate_raw_c1(int index){return Util_pitchToRate_c1[index];}

private float Util_pitchToRate_raw_c2(int index){return Util_pitchToRate_c2[index];}

private float Util_pitchToRate(float pitch){
   int index = clip(float_to_int((0.2440945f * pitch)),0,31); 
   return (wrap_array(Util_pitchToRate_c0)[index] + (pitch * (wrap_array(Util_pitchToRate_c1)[index] + (pitch * wrap_array(Util_pitchToRate_c2)[index]))));
}

private float Util_cvToPitch(float cv){return (24.f + (120.f * cv));}

private float Util_cvToRate_1024_raw_c0(int index){return Util_cvToRate_1024_c0[index];}

private float Util_cvToRate_1024_raw_c1(int index){return Util_cvToRate_1024_c1[index];}

private float Util_cvToRate_1024_raw_c2(int index){return Util_cvToRate_1024_c2[index];}

private float Util_cvToRate_1024(float cv){
   int index = clip(float_to_int((34.4444445f * cv)),0,31); 
   return (wrap_array(Util_cvToRate_1024_c0)[index] + (cv * (wrap_array(Util_cvToRate_1024_c1)[index] + (cv * wrap_array(Util_cvToRate_1024_c2)[index]))));
}

private float Util_cvToRate_raw_c0(int index){return Util_cvToRate_c0[index];}

private float Util_cvToRate_raw_c1(int index){return Util_cvToRate_c1[index];}

private float Util_cvToRate_raw_c2(int index){return Util_cvToRate_c2[index];}

private float Util_cvToRate(float cv){
   int index = clip(float_to_int((141.1111112f * cv)),0,127); 
   return (wrap_array(Util_cvToRate_c0)[index] + (cv * (wrap_array(Util_cvToRate_c1)[index] + (cv * wrap_array(Util_cvToRate_c2)[index]))));
}

private float Util_pitchToCv(float pitch){return (0.0083334f * (-24.f + pitch));}

private float Util_cvToperiod_raw_c0(int index){return Util_cvToperiod_c0[index];}

private float Util_cvToperiod_raw_c1(int index){return Util_cvToperiod_c1[index];}

private float Util_cvToperiod_raw_c2(int index){return Util_cvToperiod_c2[index];}

private float Util_cvToperiod(float cv){
   int index = clip(float_to_int((31.f * cv)),0,31); 
   return (wrap_array(Util_cvToperiod_c0)[index] + (cv * (wrap_array(Util_cvToperiod_c1)[index] + (cv * wrap_array(Util_cvToperiod_c2)[index]))));
}

private float Util_cvTokHz_raw_c0(int index){return Util_cvTokHz_c0[index];}

private float Util_cvTokHz_raw_c1(int index){return Util_cvTokHz_c1[index];}

private float Util_cvTokHz_raw_c2(int index){return Util_cvTokHz_c2[index];}

private float Util_cvTokHz(float cv){
   int index = clip(float_to_int((31.f * cv)),0,31); 
   return (wrap_array(Util_cvTokHz_c0)[index] + (cv * (wrap_array(Util_cvTokHz_c1)[index] + (cv * wrap_array(Util_cvTokHz_c2)[index]))));
}

private Tricore__ctx_type_0 Tricore__ctx_type_0_init(){
   Tricore__ctx_type_0 _ctx = new Tricore__ctx_type_0(); 
   _ctx.reset_state = false;
   _ctx.reset_phase = 0.0f;
   _ctx.rate = 0.0f;
   _ctx.phase = 0.0f;
   _ctx.direction = false;
   _ctx._inst451 = Util__ctx_type_0_init();
   _ctx._inst351 = Util__ctx_type_0_init();
   _ctx._inst13b = Util__ctx_type_1_init();
   Tricore_default(_ctx);
   return _ctx;
}

private Tricore__ctx_type_0 Tricore_process_init(){return Tricore__ctx_type_0_init();}

private float Tricore_process(Tricore__ctx_type_0 _ctx, float cv, float reset, float disable){
   float out = 0.0f; 
   if(Util_change(_ctx._inst13b,cv)){ _ctx.rate = (4.f * Util_cvToRate_1024(cv)); }
   float new_phase = 0.0f; 
   float _if_13 = 0.0f; 
   if_ctx.direction{ _if_13 = _ctx.rate; }
   else
   { _if_13 = (- _ctx.rate); }
   new_phase = (_ctx.phase + _if_13);
   boolean bdisable = (disable > 0.5f); 
   if(Util_edge(_ctx._inst351,(reset > 0.0f)) || Util_edge(_ctx._inst451,bdisable)){
      _ctx.reset_phase = _ctx.phase;
      _ctx.reset_state = true;
      new_phase = 0.0f;
   }
   if(new_phase > 1024.f){
      new_phase = (1024.f + (- (-1024.f + new_phase)));
      _ctx.direction = false;
   }
   else
   { if(new_phase < -1024.f){ _ctx.direction = true; } }
   if(bdisable){ _ctx.phase = 0.0f; }
   else
   { _ctx.phase = new_phase; }
   if_ctx.reset_state{
      if((Math.abs(_ctx.reset_phase) > 10.f) || bdisable){
         float reset_speed = 0.0f; 
         if(bdisable){ reset_speed = 0.01f; }
         else
         { reset_speed = 0.5f; }
         _ctx.reset_phase = (_ctx.reset_phase + (- (_ctx.reset_phase * reset_speed)));
      }
      else
      {
         boolean _cond_17 = (_ctx.reset_phase > 10.f); 
         if(not(_cond_17)){ _ctx.reset_phase = 0.0f; }
         _ctx.reset_state = false;
         _ctx.direction = true;
      }
      out = _ctx.reset_phase;
   }
   out = (_ctx.phase + out);
   return (0.0009766f * out);
}

private Tricore__ctx_type_0 Tricore_noteOn_init(){return Tricore__ctx_type_0_init();}

private void Tricore_noteOn(Tricore__ctx_type_0 _ctx, int note, int velocity, int channel){
}

private Tricore__ctx_type_0 Tricore_noteOff_init(){return Tricore__ctx_type_0_init();}

private void Tricore_noteOff(Tricore__ctx_type_0 _ctx, int note, int channel){
}

private Tricore__ctx_type_0 Tricore_controlChange_init(){return Tricore__ctx_type_0_init();}

private void Tricore_controlChange(Tricore__ctx_type_0 _ctx, int control, int value, int channel){
}

private Tricore__ctx_type_0 Tricore_default_init(){return Tricore__ctx_type_0_init();}

private void Tricore_default(Tricore__ctx_type_0 _ctx){_ctx.rate = 0.7593668f;}

private float Saturate_soft_tanh_table_raw_c0(int index){return Saturate_soft_tanh_table_c0[index];}

private float Saturate_soft_tanh_table_raw_c1(int index){return Saturate_soft_tanh_table_c1[index];}

private float Saturate_soft_tanh_table_raw_c2(int index){return Saturate_soft_tanh_table_c2[index];}

private float Saturate_soft_tanh_table(float x){
   int index = clip(float_to_int((5.f * (24.f + x))),0,240); 
   return (wrap_array(Saturate_soft_tanh_table_c0)[index] + (x * (wrap_array(Saturate_soft_tanh_table_c1)[index] + (x * wrap_array(Saturate_soft_tanh_table_c2)[index]))));
}

private float Saturate_soft_process(float x){return Saturate_soft_tanh_table(x);}

private void Saturate_soft_noteOn(int note, int velocity, int channel){
}

private void Saturate_soft_noteOff(int note, int channel){
}

private void Saturate_soft_controlChange(int control, int value, int channel){
}

private void Saturate_soft_default(){
}

private float Svf_calc_g_raw_c0(int index){return Svf_calc_g_c0[index];}

private float Svf_calc_g_raw_c1(int index){return Svf_calc_g_c1[index];}

private float Svf_calc_g_raw_c2(int index){return Svf_calc_g_c2[index];}

private float Svf_calc_g(float cv){
   int index = clip(float_to_int((141.1111112f * cv)),0,127); 
   return (wrap_array(Svf_calc_g_c0)[index] + (cv * (wrap_array(Svf_calc_g_c1)[index] + (cv * wrap_array(Svf_calc_g_c2)[index]))));
}

private Svf__ctx_type_4 Svf__ctx_type_4_init(){
   Svf__ctx_type_4 _ctx = new Svf__ctx_type_4(); 
   _ctx.z2 = 0.0f;
   _ctx.z1 = 0.0f;
   _ctx.inv_den = 0.0f;
   _ctx.g = 0.0f;
   _ctx._inst23b = Util__ctx_type_1_init();
   _ctx._inst13b = Util__ctx_type_1_init();
   _ctx.R = 0.0f;
   Svf_default(_ctx);
   return _ctx;
}

private Svf__ctx_type_4 Svf_process_init(){return Svf__ctx_type_4_init();}

private float Svf_process(Svf__ctx_type_4 _ctx, float x, float cv, float q, int sel){
   q = (0.5f + q);
   if(Util_change(_ctx._inst13b,cv) || Util_change(_ctx._inst23b,q)){
      _ctx.g = Svf_calc_g(cv);
      _ctx.R = (1.f / (2.f * (1e-07f + q)));
      _ctx.inv_den = (1.f / (1.f + (2.f * _ctx.R * _ctx.g) + (_ctx.g * _ctx.g)));
   }
   float high = (_ctx.inv_den * (x + (- _ctx.z2) + (- (_ctx.z1 * (_ctx.g + (2.f * _ctx.R)))))); 
   float band = (_ctx.z1 + (_ctx.g * high)); 
   float low = (_ctx.z2 + (_ctx.g * band)); 
   float notch = (high + low); 
   _ctx.z1 = (band + (_ctx.g * high));
   _ctx.z2 = (low + (_ctx.g * band));
   float output = 0.0f; 
   switch(sel) {
      case 0:
         output = low;
      break;
      case 1:
         output = high;
      break;
      case 2:
         output = band;
      break;
    default: 
      output = notch;
   }
   return Saturate_soft_process(output);
}

private Svf__ctx_type_4 Svf_noteOn_init(){return Svf__ctx_type_4_init();}

private void Svf_noteOn(Svf__ctx_type_4 _ctx, int note, int velocity, int channel){
}

private Svf__ctx_type_4 Svf_noteOff_init(){return Svf__ctx_type_4_init();}

private void Svf_noteOff(Svf__ctx_type_4 _ctx, int note, int channel){
}

private Svf__ctx_type_4 Svf_controlChange_init(){return Svf__ctx_type_4_init();}

private void Svf_controlChange(Svf__ctx_type_4 _ctx, int control, int value, int channel){
}

private Svf__ctx_type_4 Svf_default_init(){return Svf__ctx_type_4_init();}

private void Svf_default(Svf__ctx_type_4 _ctx){
   _ctx.g = 0.0023298f;
   _ctx.R = 1.f;
   _ctx.inv_den = (1.f / (1.f + (_ctx.g * _ctx.g)));
}

private float Saturate_tanh_table_raw_c0(int index){return Saturate_tanh_table_c0[index];}

private float Saturate_tanh_table_raw_c1(int index){return Saturate_tanh_table_c1[index];}

private float Saturate_tanh_table_raw_c2(int index){return Saturate_tanh_table_c2[index];}

private float Saturate_tanh_table(float x){
   int index = clip(float_to_int((5.f * (24.f + x))),0,240); 
   return (wrap_array(Saturate_tanh_table_c0)[index] + (x * (wrap_array(Saturate_tanh_table_c1)[index] + (x * wrap_array(Saturate_tanh_table_c2)[index]))));
}

private float Saturate_process(float x){return Saturate_tanh_table(x);}

private void Saturate_noteOn(int note, int velocity, int channel){
}

private void Saturate_noteOff(int note, int channel){
}

private void Saturate_controlChange(int control, int value, int channel){
}

private void Saturate_default(){
}

private Lfo__ctx_type_0 Lfo__ctx_type_0_init(){
   Lfo__ctx_type_0 _ctx = new Lfo__ctx_type_0(); 
   _ctx.x4 = 0.0f;
   _ctx.x3 = 0.0f;
   _ctx.x2 = 0.0f;
   return _ctx;
}

private Lfo__ctx_type_0 Lfo_soft_init(){return Lfo__ctx_type_0_init();}

private float Lfo_soft(Lfo__ctx_type_0 _ctx, float x1){
   float o = (0.25f * (_ctx.x2 + _ctx.x3 + _ctx.x4 + x1)); 
   float _tmp_1_0 = x1; 
   float _tmp_1_1 = _ctx.x2; 
   float _tmp_1_2 = _ctx.x3; 
   _ctx.x2 = _tmp_1_0;
   _ctx.x3 = _tmp_1_1;
   _ctx.x4 = _tmp_1_2;
   return o;
}

private Lfo__ctx_type_1 Lfo__ctx_type_1_init(){
   Lfo__ctx_type_1 _ctx = new Lfo__ctx_type_1(); 
   _ctx.rate = 0.0f;
   _ctx.phase = 0.0f;
   _ctx._inst59b = Lfo__ctx_type_0_init();
   _ctx._inst351 = Util__ctx_type_0_init();
   _ctx._inst13b = Util__ctx_type_1_init();
   return _ctx;
}

private Lfo__ctx_type_1 Lfo_process_init(){return Lfo__ctx_type_1_init();}

private float Lfo_process(Lfo__ctx_type_1 _ctx, float cv, float shape, float reset){
   if(Util_change(_ctx._inst13b,cv)){ _ctx.rate = Util_cvToRate((-0.3f + cv)); }
   _ctx.phase = (_ctx.phase + _ctx.rate);
   if(_ctx.phase > 2.f){ _ctx.phase = (-2.f + _ctx.phase); }
   boolean breset = (reset > 0.0f); 
   if(Util_edge(_ctx._inst351,breset)){ _ctx.phase = 0.0f; }
   float tmp = (-1.f + _ctx.phase); 
   float o = 0.0f; 
   if(shape < 1.f){ o = tmp; }
   else
   { if(shape < 2.f){ o = (-1.f + (2.f * Math.abs(tmp))); }
   else
   { if(tmp > 0.0f){ o = 1.f; }
   else
   { o = 0.0f; } } }
   return Lfo_soft(_ctx._inst59b,o);
}

private Lfo__ctx_type_1 Lfo_noteOn_init(){return Lfo__ctx_type_1_init();}

private void Lfo_noteOn(Lfo__ctx_type_1 _ctx, int note, int velocity, int channel){
}

private Lfo__ctx_type_1 Lfo_noteOff_init(){return Lfo__ctx_type_1_init();}

private void Lfo_noteOff(Lfo__ctx_type_1 _ctx, int note, int channel){
}

private Lfo__ctx_type_1 Lfo_controlChange_init(){return Lfo__ctx_type_1_init();}

private void Lfo_controlChange(Lfo__ctx_type_1 _ctx, int control, int value, int channel){
}

private Lfo__ctx_type_1 Lfo_default_init(){return Lfo__ctx_type_1_init();}

private void Lfo_default(Lfo__ctx_type_1 _ctx){
}

private float Tables_nsine_raw_c0(int index){return Tables_nsine_c0[index];}

private float Tables_nsine_raw_c1(int index){return Tables_nsine_c1[index];}

private float Tables_nsine_raw_c2(int index){return Tables_nsine_c2[index];}

private float Tables_nsine(float x){
   int index = clip(float_to_int((127.f * x)),0,127); 
   return (wrap_array(Tables_nsine_c0)[index] + (x * (wrap_array(Tables_nsine_c1)[index] + (x * wrap_array(Tables_nsine_c2)[index]))));
}

private Phase__ctx_type_0 Phase__ctx_type_0_init(){
   Phase__ctx_type_0 _ctx = new Phase__ctx_type_0(); 
   _ctx.rate = 0.0f;
   _ctx.phase = 0.0f;
   _ctx._inst351 = Util__ctx_type_0_init();
   _ctx._inst13b = Util__ctx_type_1_init();
   Phase_default(_ctx);
   return _ctx;
}

private Phase__ctx_type_0 Phase_process_init(){return Phase__ctx_type_0_init();}

private float Phase_process(Phase__ctx_type_0 _ctx, float cv, float reset){
   if(Util_change(_ctx._inst13b,cv)){ _ctx.rate = Util_cvToRate_1024(cv); }
   if(Util_edge(_ctx._inst351,(reset > 0.5f))){ _ctx.phase = 0.0f; }
   else
   { _ctx.phase = (_ctx.phase + _ctx.rate); }
   if(_ctx.phase > 1024.f){ _ctx.phase = (-1024.f + _ctx.phase); }
   return (0.0009766f * _ctx.phase);
}

private Phase__ctx_type_0 Phase_noteOn_init(){return Phase__ctx_type_0_init();}

private void Phase_noteOn(Phase__ctx_type_0 _ctx, int note, int velocity, int channel){
}

private Phase__ctx_type_0 Phase_noteOff_init(){return Phase__ctx_type_0_init();}

private void Phase_noteOff(Phase__ctx_type_0 _ctx, int note, int channel){
}

private Phase__ctx_type_0 Phase_controlChange_init(){return Phase__ctx_type_0_init();}

private void Phase_controlChange(Phase__ctx_type_0 _ctx, int control, int value, int channel){
}

private Phase__ctx_type_0 Phase_default_init(){return Phase__ctx_type_0_init();}

private void Phase_default(Phase__ctx_type_0 _ctx){_ctx.rate = 0.7593668f;}

private Blit__ctx_type_0 Blit__ctx_type_0_init(){
   Blit__ctx_type_0 _ctx = new Blit__ctx_type_0(); 
   _ctx.scale = 0.0f;
   _ctx.m = 0;
   _ctx._inst13b = Util__ctx_type_1_init();
   Blit_pulse_start(_ctx);
   return _ctx;
}

private Blit__ctx_type_0 Blit_pulse_train_init(){return Blit__ctx_type_0_init();}

private float Blit_pulse_train(Blit__ctx_type_0 _ctx, float cv, float phase){
   if(Util_change(_ctx._inst13b,cv)){
      _ctx.m = (1 + (float_to_int(Util_cvToperiod(cv)) << 1));
      _ctx.scale = (2.f * Util_cvToperiod(cv));
   }
   float pi_phase = (0.5f * phase); 
   float denominator = Tables_nsine(pi_phase); 
   float out = 0.0f; 
   if(denominator <= 1e-07f){ out = 1.f; }
   else
   {
      float m_phase = ((pi_phase * int_to_float(_ctx.m)) % 1.f); 
      float numerator = Tables_nsine(m_phase); 
      out = (numerator / (_ctx.scale * denominator));
   }
   return out;
}

private Blit__ctx_type_0 Blit_pulse_start_init(){return Blit__ctx_type_0_init();}

private void Blit_pulse_start(Blit__ctx_type_0 _ctx){
   _ctx.m = 1349;
   _ctx.scale = 1349.4920696f;
}

private Blit__ctx_type_1 Blit__ctx_type_1_init(){
   Blit__ctx_type_1 _ctx = new Blit__ctx_type_1(); 
   _ctx.state_saw = 0.0f;
   _ctx.state_pulse = 0.0f;
   _ctx.rate = 0.0f;
   _ctx.output = 0.0f;
   _ctx._inst846 = Blit__ctx_type_0_init();
   _ctx._inst746 = Blit__ctx_type_0_init();
   _ctx._inst5cd = Phase__ctx_type_0_init();
   _ctx._inst33b = Util__ctx_type_1_init();
   _ctx._inst117d = Util__ctx_type_3_init();
   Blit_init(_ctx);
   return _ctx;
}

private Blit__ctx_type_1 Blit_osc_blit_init(){return Blit__ctx_type_1_init();}

private float Blit_osc_blit(Blit__ctx_type_1 _ctx, float cv, float pw, float wave){
   float fixed_cv = 0.0f; 
   if(wave < 1.f){ fixed_cv = cv; }
   else
   { fixed_cv = (-0.1f + cv); }
   if(Util_change(_ctx._inst33b,fixed_cv)){ _ctx.rate = Util_cvToRate(fixed_cv); }
   float phase = Phase_process(_ctx._inst5cd,fixed_cv,0.0f); 
   float shift05 = (0.5f + (0.49f * pw)); 
   float shift = (phase + shift05); 
   if(shift > 1.f){ shift = (-1.f + shift); }
   float pulse1 = Blit_pulse_train(_ctx._inst746,fixed_cv,phase); 
   float pulse2 = Blit_pulse_train(_ctx._inst846,fixed_cv,shift); 
   _ctx.state_pulse = (pulse1 + (- pulse2) + (0.9995f * _ctx.state_pulse));
   _ctx.state_saw = ((0.5f * ((pulse1 + pulse2 + (-2.f * _ctx.rate)) / shift05)) + (0.9995f * _ctx.state_saw));
   if(wave < 1.f){ _ctx.output = _ctx.state_pulse; }
   else
   { _ctx.output = (2.f * _ctx.state_saw); }
   _ctx.output = Util_dcblock(_ctx._inst117d,_ctx.output);
   return _ctx.output;
}

private Blit__ctx_type_1 Blit_init_init(){return Blit__ctx_type_1_init();}

private void Blit_init(Blit__ctx_type_1 _ctx){_ctx.rate = 0.0007416f;}

private Blit__ctx_type_2 Blit__ctx_type_2_init(){
   Blit__ctx_type_2 _ctx = new Blit__ctx_type_2(); 
   _ctx._inst14c = Blit__ctx_type_1_init();
   return _ctx;
}

private Blit__ctx_type_2 Blit_process_init(){return Blit__ctx_type_2_init();}

private float Blit_process(Blit__ctx_type_2 _ctx, float cv, float pw, float wave){return Blit_osc_blit(_ctx._inst14c,cv,pw,wave);}

private Blit__ctx_type_2 Blit_noteOn_init(){return Blit__ctx_type_2_init();}

private void Blit_noteOn(Blit__ctx_type_2 _ctx, int note, int velocity, int channel){
}

private Blit__ctx_type_2 Blit_noteOff_init(){return Blit__ctx_type_2_init();}

private void Blit_noteOff(Blit__ctx_type_2 _ctx, int note, int channel){
}

private Blit__ctx_type_2 Blit_controlChange_init(){return Blit__ctx_type_2_init();}

private void Blit_controlChange(Blit__ctx_type_2 _ctx, int control, int value, int channel){
}

private Blit__ctx_type_2 Blit_default_init(){return Blit__ctx_type_2_init();}

private void Blit_default(Blit__ctx_type_2 _ctx){
}

private Adsr__ctx_type_0 Adsr__ctx_type_0_init(){
   Adsr__ctx_type_0 _ctx = new Adsr__ctx_type_0(); 
   _ctx.target = 0.0f;
   _ctx.state = 0;
   _ctx.scale = 0.0f;
   _ctx.rate = 0.0f;
   _ctx.out = 0.0f;
   _ctx._inst955 = Util__ctx_type_4_init();
   _ctx._inst251 = Util__ctx_type_0_init();
   return _ctx;
}

private Adsr__ctx_type_0 Adsr_do_init(){return Adsr__ctx_type_0_init();}

private float Adsr_do(Adsr__ctx_type_0 _ctx, float gate, float a, float d, float s, float r){
   float a_rate = (1.f / (0.01f + (100.f * a))); 
   float d_rate = (1.f / (0.01f + (100.f * d))); 
   float r_rate = (1.f / (0.01f + (100.f * r))); 
   _ctx.out = (_ctx.out + (0.004f * _ctx.rate * (_ctx.target + (- _ctx.out))));
   boolean bgate = (gate > 0.0f); 
   if(_ctx.state == 0){
      if(Util_edge(_ctx._inst251,bgate)){
         _ctx.state = 1;
         _ctx.scale = (0.2f * gate);
      }
      _ctx.rate = r_rate;
      _ctx.target = 0.0f;
   }
   if(_ctx.state == 1){
      if(not(bgate)){ _ctx.state = 0; }
      if(_ctx.out > 1024.f){ _ctx.state = 2; }
      _ctx.rate = a_rate;
      _ctx.target = 1228.8f;
   }
   if(_ctx.state == 2){
      if(not(bgate)){ _ctx.state = 0; }
      _ctx.rate = d_rate;
      _ctx.target = (1024.f * s);
   }
   return (Util_smooth(_ctx._inst955,_ctx.scale) * clip((0.0009766f * _ctx.out),0.0f,1.f));
}

private Adsr__ctx_type_1 Adsr__ctx_type_1_init(){
   Adsr__ctx_type_1 _ctx = new Adsr__ctx_type_1(); 
   _ctx.knob4 = 0.0f;
   _ctx.knob3 = 0.0f;
   _ctx.knob2 = 0.0f;
   _ctx.knob1 = 0.0f;
   _ctx._inst16 = Adsr__ctx_type_0_init();
   return _ctx;
}

private Adsr__ctx_type_1 Adsr_process_init(){return Adsr__ctx_type_1_init();}

private float Adsr_process(Adsr__ctx_type_1 _ctx, float gate){return Adsr_do(_ctx._inst16,gate,_ctx.knob1,_ctx.knob2,_ctx.knob3,_ctx.knob4);}

private Adsr__ctx_type_1 Adsr_noteOn_init(){return Adsr__ctx_type_1_init();}

private void Adsr_noteOn(Adsr__ctx_type_1 _ctx, int note, int velocity, int channel){
}

private Adsr__ctx_type_1 Adsr_noteOff_init(){return Adsr__ctx_type_1_init();}

private void Adsr_noteOff(Adsr__ctx_type_1 _ctx, int note, int channel){
}

private Adsr__ctx_type_1 Adsr_controlChange_init(){return Adsr__ctx_type_1_init();}

private void Adsr_controlChange(Adsr__ctx_type_1 _ctx, int control, int value, int channel){
   if(control == 1){ _ctx.knob1 = (0.0078741f * int_to_float(value)); }
   if(control == 2){ _ctx.knob2 = (0.0078741f * int_to_float(value)); }
   if(control == 3){ _ctx.knob3 = (0.0078741f * int_to_float(value)); }
   if(control == 4){ _ctx.knob4 = (0.0078741f * int_to_float(value)); }
}

private Adsr__ctx_type_1 Adsr_default_init(){return Adsr__ctx_type_1_init();}

private void Adsr_default(Adsr__ctx_type_1 _ctx){
   _ctx.knob1 = 0.0f;
   _ctx.knob2 = 0.5f;
   _ctx.knob3 = 1.f;
   _ctx.knob4 = 0.5f;
}

private Voice_4__ctx_type_0 Voice_4__ctx_type_0_init(){
   Voice_4__ctx_type_0 _ctx = new Voice_4__ctx_type_0(); 
   _ctx.sustain = 0.0f;
   _ctx.release = 0.0f;
   _ctx.pw4 = 0.0f;
   _ctx.pw3 = 0.0f;
   _ctx.pw2 = 0.0f;
   _ctx.pw1 = 0.0f;
   _ctx.lfo_shape = 0.0f;
   _ctx.lfo_reset = 0.0f;
   _ctx.lfo_rate = 0.0f;
   _ctx.lfo_pw = 0.0f;
   _ctx.lfo_flt = 0.0f;
   _ctx.lfo_cv = 0.0f;
   _ctx.level4 = 0.0f;
   _ctx.level3 = 0.0f;
   _ctx.level2 = 0.0f;
   _ctx.level1 = 0.0f;
   _ctx.flt_shape = 0;
   _ctx.flt_res = 0.0f;
   _ctx.flt_cut = 0.0f;
   _ctx.decay = 0.0f;
   _ctx.attack = 0.0f;
   _ctx._inst76 = Adsr__ctx_type_0_init();
   _ctx._inst612 = Svf__ctx_type_4_init();
   _ctx._inst541 = Tricore__ctx_type_0_init();
   _ctx._inst44f = Blit__ctx_type_2_init();
   _ctx._inst34f = Blit__ctx_type_2_init();
   _ctx._inst24f = Blit__ctx_type_2_init();
   _ctx._inst15 = Lfo__ctx_type_1_init();
   return _ctx;
}

private Voice_4__ctx_type_0 Voice_4_process_init(){return Voice_4__ctx_type_0_init();}

private float Voice_4_process(Voice_4__ctx_type_0 _ctx, float cv, float vel, float gate){
   float lfo = Lfo_process(_ctx._inst15,_ctx.lfo_rate,_ctx.lfo_shape,(_ctx.lfo_reset * gate)); 
   float mod_pw = (_ctx.lfo_pw * lfo); 
   float mod_cv = (_ctx.lfo_cv * lfo); 
   float mod_flt = (_ctx.lfo_flt * lfo); 
   float o1 = Blit_process(_ctx._inst24f,(0.0001f + cv + mod_cv),(_ctx.pw1 + mod_pw),0.0f); 
   float o2 = Blit_process(_ctx._inst34f,(0.0002f + cv + mod_cv),(_ctx.pw2 + mod_pw),1.f); 
   float o3 = Blit_process(_ctx._inst44f,(_ctx.pw3 + cv + mod_cv),(_ctx.pw1 + mod_pw),0.0f); 
   float sub = Saturate_process((Tricore_process(_ctx._inst541,(cv + mod_cv),0.0f,1.f) * (2.f + (5.f * _ctx.pw4)))); 
   float o = ((_ctx.level1 * o1) + (_ctx.level2 * o2) + (_ctx.level3 * o3) + (_ctx.level4 * sub)); 
   float f = Svf_process(_ctx._inst612,o,(_ctx.flt_cut + mod_flt),_ctx.flt_res,_ctx.flt_shape); 
   float env = Adsr_do(_ctx._inst76,gate,_ctx.attack,_ctx.decay,_ctx.sustain,_ctx.release); 
   return (env * f);
}

private Voice_4__ctx_type_0 Voice_4_noteOn_init(){return Voice_4__ctx_type_0_init();}

private void Voice_4_noteOn(Voice_4__ctx_type_0 _ctx, int note, int velocity, int channel){
}

private Voice_4__ctx_type_0 Voice_4_noteOff_init(){return Voice_4__ctx_type_0_init();}

private void Voice_4_noteOff(Voice_4__ctx_type_0 _ctx, int note, int channel){
}

private Voice_4__ctx_type_0 Voice_4_controlChange_init(){return Voice_4__ctx_type_0_init();}

private void Voice_4_controlChange(Voice_4__ctx_type_0 _ctx, int control, int value, int channel){
   if(control == 30){ _ctx.level1 = (0.0078741f * int_to_float(value)); }
   if(control == 31){ _ctx.level2 = (0.0078741f * int_to_float(value)); }
   if(control == 32){ _ctx.level3 = (0.0078741f * int_to_float(value)); }
   if(control == 33){ _ctx.level4 = (0.0078741f * int_to_float(value)); }
   if(control == 34){ _ctx.pw1 = (0.0078741f * int_to_float(value)); }
   if(control == 35){ _ctx.pw2 = (0.0078741f * int_to_float(value)); }
   if(control == 36){ _ctx.pw3 = (0.0007875f * int_to_float(value)); }
   if(control == 37){ _ctx.pw4 = (0.0078741f * int_to_float(value)); }
   if(control == 38){ _ctx.lfo_rate = Util_map(int_to_float(value),0.0f,127.f,-0.4f,0.1f); }
   if(control == 39){ _ctx.lfo_shape = (0.0236221f * int_to_float(value)); }
   if(control == 40){ _ctx.lfo_pw = Util_map(int_to_float(value),0.0f,127.f,-1.f,1.f); }
   if(control == 41){ _ctx.lfo_cv = Util_map(int_to_float(value),0.0f,127.f,-0.1f,0.1f); }
   if(control == 42){ _ctx.lfo_flt = Util_map(int_to_float(value),0.0f,127.f,-0.3f,0.3f); }
   if(control == 43){ if(value > 0){ _ctx.lfo_reset = 1.f; }
   else
   { _ctx.lfo_reset = 0.0f; } }
   if(control == 44){ _ctx.flt_cut = Util_map(int_to_float(value),0.0f,127.f,-0.2f,0.5f); }
   if(control == 45){ _ctx.flt_res = (0.0078741f * int_to_float(value)); }
   if(control == 46){ _ctx.flt_shape = ((value << 2) / 127); }
   if(control == 47){ _ctx.attack = (0.0078741f * int_to_float(value)); }
   if(control == 48){ _ctx.decay = (0.0078741f * int_to_float(value)); }
   if(control == 49){ _ctx.sustain = (0.0078741f * int_to_float(value)); }
   if(control == 50){ _ctx.release = (0.0078741f * int_to_float(value)); }
}

private Voice_4__ctx_type_0 Voice_4_default_init(){return Voice_4__ctx_type_0_init();}

private void Voice_4_default(Voice_4__ctx_type_0 _ctx){
}


}