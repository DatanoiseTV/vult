
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#include "sfi_fi.h"

void Sfi_fi_process(float a, int b, _tuple___real_int__ &_output_){
   _tuple___real_int__ _tuple_5;
   {
      _tuple_5.field_0 = a;
      _tuple_5.field_1 = b;
   }
   _output_ = _tuple_5;
   return ;
}

void Sfi_fi_noteOn(int note, int velocity, int channel){
}

void Sfi_fi_noteOff(int note, int channel){
}

void Sfi_fi_controlChange(int control, int value, int channel){
}

void Sfi_fi_default(){
}



extern "C" {

static t_class *sfi_fi_tilde_class;

typedef struct _sfi_fi_tilde {
   t_object  x_obj;
   float dummy;
   float data;
} t_sfi_fi_tilde;

t_int *sfi_fi_tilde_perform(t_int *w)
{
   t_sfi_fi_tilde *x = (t_sfi_fi_tilde *)(w[1]);

   t_sample *in_0 = (t_sample *)(w[2]); 
   t_sample *in_1 = (t_sample *)(w[3]); 
   t_sample *out_0 = (t_sample *)(w[4]); 
   t_sample *out_1 = (t_sample *)(w[5]); 

   int n = (int)(w[6]); 

   while (n--) {
   _tuple___real_int__ ret;  Sfi_fi_process((float) *(in_0++),float_to_int(*(in_1++)),ret); 
   *(out_0++) = (float) ret.field_0; 
   *(out_1++) = int_to_float(ret.field_1); 

   }

   return (w+7);
}

void sfi_fi_tilde_dsp(t_sfi_fi_tilde *x, t_signal **sp)
{
   dsp_add(sfi_fi_tilde_perform, 6,
   x, 
   sp[0]->s_vec, 
   sp[1]->s_vec, 
   sp[2]->s_vec, 
   sp[3]->s_vec, 

   sp[0]->s_n);
}

void *sfi_fi_tilde_new()
{
   t_sfi_fi_tilde *x = (t_sfi_fi_tilde *)pd_new(sfi_fi_tilde_class);

   
   

   inlet_new(&x->x_obj, &x->x_obj.ob_pd, &s_signal, &s_signal); 

   outlet_new(&x->x_obj, &s_signal); 
   outlet_new(&x->x_obj, &s_signal); 

   return (void *)x;
}

void sfi_fi_tilde_delete(t_sfi_fi_tilde *x){

}

void sfi_fi_noteOn(t_sfi_fi_tilde *x, t_floatarg note, t_floatarg velocity, t_floatarg channel){
   if((int)velocity) Sfi_fi_noteOn((int)note,(int)velocity,(int)channel);
   else Sfi_fi_noteOff((int)note,(int)channel);
}


void sfi_fi_noteOff(t_sfi_fi_tilde *x, t_floatarg note, t_floatarg channel) {
   Sfi_fi_noteOff((int)note,(int)channel);
}


void sfi_fi_controlChange(t_sfi_fi_tilde *x, t_floatarg control, t_floatarg value, t_floatarg channel) {
   Sfi_fi_controlChange((int)control,(int)value,(int)channel);
}


void sfi_fi_tilde_setup(void) {
   sfi_fi_tilde_class = class_new(gensym("sfi_fi~"),
      (t_newmethod)sfi_fi_tilde_new, // constructor function
      (t_method)sfi_fi_tilde_delete, // destructor function
      sizeof(t_sfi_fi_tilde), // size of the object
      CLASS_DEFAULT, // type of object
      A_NULL); // arguments passed

   class_addmethod(sfi_fi_tilde_class, (t_method)sfi_fi_tilde_dsp, gensym("dsp"), A_NULL);
   CLASS_MAINSIGNALIN(sfi_fi_tilde_class, t_sfi_fi_tilde, dummy);

   class_addmethod(sfi_fi_tilde_class, (t_method)sfi_fi_noteOn,        gensym("noteOn"),        A_DEFFLOAT, A_DEFFLOAT, A_DEFFLOAT, A_NULL);
   class_addmethod(sfi_fi_tilde_class, (t_method)sfi_fi_noteOff,       gensym("noteOff"),       A_DEFFLOAT, A_DEFFLOAT, A_NULL);
   class_addmethod(sfi_fi_tilde_class, (t_method)sfi_fi_controlChange, gensym("controlChange"), A_DEFFLOAT, A_DEFFLOAT, A_DEFFLOAT, A_NULL);
}

} // extern "C"
