
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#include "phd.h"

void Util__ctx_type_3_init(Util__ctx_type_3 &_output_){
   Util__ctx_type_3 _ctx;
   _ctx.y1 = 0.0f;
   _ctx.x1 = 0.0f;
   _output_ = _ctx;
   return ;
}

float Util_dcblock(Util__ctx_type_3 &_ctx, float x0){
   float y0;
   y0 = (x0 + (- _ctx.x1) + (0.995f * _ctx.y1));
   _ctx.x1 = x0;
   _ctx.y1 = y0;
   return y0;
}

void Phase__ctx_type_0_init(Phase__ctx_type_0 &_output_){
   Phase__ctx_type_0 _ctx;
   _ctx.rate = 0.0f;
   _ctx.phase = 0.0f;
   Util__ctx_type_0_init(_ctx._inst381);
   Util__ctx_type_1_init(_ctx._inst159);
   Phase_default(_ctx);
   _output_ = _ctx;
   return ;
}

float Phase_process(Phase__ctx_type_0 &_ctx, float cv, float reset){
   if(Util_change(_ctx._inst159,cv)){
      _ctx.rate = Util_cvToRate_1024(cv);
   }
   if(Util_edge(_ctx._inst381,(reset > 0.5f))){
      _ctx.phase = 0.0f;
   }
   else
   {
      _ctx.phase = (_ctx.phase + _ctx.rate);
   }
   if(_ctx.phase > 1024.f){
      _ctx.phase = (-1024.f + _ctx.phase);
   }
   return (0.0009766f * _ctx.phase);
}

void Phd__ctx_type_0_init(Phd__ctx_type_0 &_output_){
   Phd__ctx_type_0 _ctx;
   _ctx.pre_phase1 = 0.0f;
   Phase__ctx_type_0_init(_ctx._inst3205);
   Util__ctx_type_4_init(_ctx._inst285);
   Phase__ctx_type_0_init(_ctx._inst1205);
   _output_ = _ctx;
   return ;
}

float Phd_process(Phd__ctx_type_0 &_ctx, float cv, float detune){
   float phase1;
   phase1 = Phase_process(_ctx._inst1205,cv,0.0f);
   float comp;
   comp = (1.f + (- phase1));
   float reset;
   reset = (_ctx.pre_phase1 + (- phase1));
   _ctx.pre_phase1 = phase1;
   float phase2;
   phase2 = Phase_process(_ctx._inst3205,(cv + Util_smooth(_ctx._inst285,(0.5f * detune))),reset);
   float sine;
   sine = Tables_nsine(phase2);
   return (comp * sine);
}


