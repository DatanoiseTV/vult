
local this = {}
local ffi = require("ffi")
function this.ternary(cond,then_,else_) if cond then return then_ else return else_ end end
function this.eps()             return 1e-18; end
function this.pi()              return 3.1415926535897932384; end
function this.random()          return math.random(); end
function this.irandom()         return math.floor(math.random() * 4294967296); end
function this.clip(x,low,high)  return (this.ternary(x<low,low,this.ternary(x>high,high,x))); end
function this.real(x)           return x; end
function this.int(x)            local int_part,_ = math.modf(x) return int_part; end
function this.sin(x)            return math.sin(x); end
function this.cos(x)            return math.cos(x); end
function this.abs(x)            return math.abs(x); end
function this.exp(x)            return math.exp(x); end
function this.floor(x)          return math.floor(x); end
function this.tan(x)            return math.tan(x); end
function this.tanh(x)           return math.tanh(x); end
function this.sqrt(x)           return x; end
function this.set(a,i,v)        a[i+1]=v; end
function this.get(a,i)          return a[i+1]; end
function this.makeArray(size,v) local a = {}; for i=1,size do a[i]=v end return a; end
function this.wrap_array(a)     return a; end
function this.Util__ctx_type_0_init()
   local _ctx = {};
   _ctx.pre = false;
   return _ctx;

end

function this.Util_edge_init()
   return this.Util__ctx_type_0_init();
end

function this.Util_edge(_ctx,x)
   local ret = (x and (_ctx.pre == false));
   _ctx.pre = x;
   return ret;

end

function this.Util__ctx_type_1_init()
   local _ctx = {};
   _ctx.pre_x = 0.000000;
   return _ctx;

end

function this.Util_change_init()
   return this.Util__ctx_type_1_init();
end

function this.Util_change(_ctx,x)
   local v = (_ctx.pre_x ~= x);
   _ctx.pre_x = x;
   return v;

end

function this.Util_map(x,x0,x1,y0,y1)
   return ((((x + (- x0)) * (y1 + (- y0))) / (x1 + (- x0))) + y0);

end

function this.Util__ctx_type_3_init()
   local _ctx = {};
   _ctx.y1 = 0.000000;
   _ctx.x1 = 0.000000;
   return _ctx;

end

function this.Util_dcblock_init()
   return this.Util__ctx_type_3_init();
end

function this.Util_dcblock(_ctx,x0)
   local y0 = (x0 + (- _ctx.x1) + (_ctx.y1 * 0.995000));
   _ctx.x1 = x0;
   _ctx.y1 = y0;
   return y0;

end

function this.Util__ctx_type_4_init()
   local _ctx = {};
   _ctx.x = 0.000000;
   return _ctx;

end

function this.Util_smooth_init()
   return this.Util__ctx_type_4_init();
end

function this.Util_smooth(_ctx,input)
   _ctx.x = (_ctx.x + ((input + (- _ctx.x)) * 0.005000));
   return _ctx.x;

end

function this.Util__ctx_type_5_init()
   local _ctx = {};
   _ctx.x0 = 0.000000;
   return _ctx;

end

function this.Util_average2_init()
   return this.Util__ctx_type_5_init();
end

function this.Util_average2(_ctx,x1)
   local result = ((_ctx.x0 + x1) * 0.500000);
   _ctx.x0 = x1;
   return result;

end

function this.Util_cubic_clipper(x)
   if (x <= (-0.666667)) then
      return (-0.666667);

   else

      local _cond_20 = false;
      _cond_20 = (x >= 0.666667);
      if _cond_20 then
         return 0.666667;

      else

         return (x + ((-0.333333) * x * x * x));

      end

   end

end

local Util_pitchToRate_1024_c0 = {0.189842,0.191326,0.198689,0.219425,0.265677,0.356438,0.520651,0.801560,1.262758,1.996562,3.135544,4.868346,7.461279,11.287725,16.868007,24.923329,36.448518,52.809890,75.876604,108.196579,153.231618,215.671056,301.849428,420.301718,582.500346,803.831942,1104.890093,1513.184032,2065.394252,2810.346575,3812.929069,5159.245173,6963.386226};
local Util_pitchToRate_1024_c1 = {0.010913,0.010176,0.008334,0.004867,(-0.000939),(-0.010061),(-0.023820),(-0.044002),(-0.073002),(-0.114025),(-0.171341),(-0.250621),(-0.359381),(-0.507548),(-0.708208),(-0.978576),(-1.341250),(-1.825848),(-2.471123),(-3.327701),(-4.461631),(-5.958970),(-7.931709),(-10.525422),(-13.929139),(-18.388075),(-24.220033),(-31.836533),(-41.769999),(-54.708756),(-71.542010),(-93.417674),(-121.816648)};
local Util_pitchToRate_1024_c2 = {0.000356,0.000447,0.000562,0.000707,0.000889,0.001119,0.001407,0.001769,0.002225,0.002799,0.003520,0.004426,0.005567,0.007001,0.008805,0.011074,0.013927,0.017515,0.022028,0.027703,0.034841,0.043818,0.055108,0.069306,0.087163,0.109620,0.137864,0.173384,0.218056,0.274238,0.344895,0.433757,0.545514};
function this.Util_pitchToRate_1024(pitch)
   local index = this.clip(this.int((0.244094 * pitch)),0,31);
   return (Util_pitchToRate_1024_c0[index+1] + (pitch * (Util_pitchToRate_1024_c1[index+1] + (Util_pitchToRate_1024_c2[index+1] * pitch))));

end

local Util_pitchToRate_c0 = {0.000185,0.000187,0.000194,0.000214,0.000259,0.000348,0.000508,0.000783,0.001233,0.001950,0.003062,0.004754,0.007286,0.011023,0.016473,0.024339,0.035594,0.051572,0.074098,0.105661,0.149640,0.210616,0.294775,0.410451,0.568848,0.784992,1.078994,1.477719,2.016987,2.744479,3.723564,5.038325,6.800182};
local Util_pitchToRate_c1 = {0.000011,0.000010,0.000008,0.000005,(-0.000001),(-0.000010),(-0.000023),(-0.000043),(-0.000071),(-0.000111),(-0.000167),(-0.000245),(-0.000351),(-0.000496),(-0.000692),(-0.000956),(-0.001310),(-0.001783),(-0.002413),(-0.003250),(-0.004357),(-0.005819),(-0.007746),(-0.010279),(-0.013603),(-0.017957),(-0.023652),(-0.031090),(-0.040791),(-0.053427),(-0.069865),(-0.091228),(-0.118962)};
local Util_pitchToRate_c2 = {0.000000,0.000000,0.000001,0.000001,0.000001,0.000001,0.000001,0.000002,0.000002,0.000003,0.000003,0.000004,0.000005,0.000007,0.000009,0.000011,0.000014,0.000017,0.000022,0.000027,0.000034,0.000043,0.000054,0.000068,0.000085,0.000107,0.000135,0.000169,0.000213,0.000268,0.000337,0.000424,0.000533};
function this.Util_pitchToRate(pitch)
   local index = this.clip(this.int((0.244094 * pitch)),0,31);
   return (Util_pitchToRate_c0[index+1] + (pitch * (Util_pitchToRate_c1[index+1] + (Util_pitchToRate_c2[index+1] * pitch))));

end

function this.Util_cvToPitch(cv)
   return ((cv * 120.000000) + 24.000000);

end

local Util_cvToRate_1024_c0 = {0.759367,0.762877,0.779737,0.825652,0.924648,1.112398,1.440687,1.983392,2.844434,4.168311,6.153994,9.073195,13.294298,19.313614,27.796102,39.628263,55.986716,78.426878,108.997433,150.387804,206.117798,280.781091,380.357333,512.611648,687.605268,918.347360,1221.626080,1619.066843,2138.478452,2815.563557,3696.089822,4838.643251,6318.116516};
local Util_cvToRate_1024_c1 = {5.245583,4.998943,4.403089,3.319116,1.564497,(-1.099256),(-4.982226),(-10.485864),(-18.127956),(-28.574102),(-42.677365),(-61.528130),(-86.516746),(-119.412143),(-162.460392),(-218.508148),(-291.157147),(-384.957361),(-505.648347),(-660.460542),(-858.491160),(-1111.172835),(-1432.857517),(-1841.543534),(-2359.780392),(-3015.794142),(-3844.886359),(-4891.172353),(-6209.739876),(-7869.328765),(-9955.655805),(-12575.538397),(-15862.006882)};
local Util_cvToRate_1024_c2 = {20.125592,24.457572,29.722000,36.119582,43.894227,53.342343,64.824142,78.777368,95.733988,116.340476,141.382456,171.814657,208.797308,253.740378,308.357324,374.730424,455.390158,553.411688,672.532093,817.292850,993.212978,1206.999450,1466.802895,1782.528345,2166.212866,2632.484466,3199.119798,3887.721889,4724.543762,5741.489334,6977.329755,8479.181564,10304.303011};
function this.Util_cvToRate_1024(cv)
   local index = this.clip(this.int((34.444444 * cv)),0,31);
   return (Util_cvToRate_1024_c0[index+1] + (cv * (Util_cvToRate_1024_c1[index+1] + (Util_cvToRate_1024_c2[index+1] * cv))));

end

local Util_cvToRate_c0 = {0.000742,0.000742,0.000742,0.000742,0.000743,0.000744,0.000747,0.000749,0.000754,0.000759,0.000766,0.000775,0.000786,0.000800,0.000816,0.000836,0.000860,0.000889,0.000922,0.000961,0.001007,0.001060,0.001120,0.001190,0.001270,0.001360,0.001463,0.001580,0.001712,0.001860,0.002027,0.002214,0.002423,0.002657,0.002917,0.003207,0.003528,0.003885,0.004280,0.004717,0.005200,0.005732,0.006319,0.006964,0.007674,0.008453,0.009308,0.010245,0.011272,0.012395,0.013622,0.014963,0.016427,0.018023,0.019763,0.021659,0.023722,0.025966,0.028405,0.031056,0.033934,0.037057,0.040444,0.044117,0.048096,0.052405,0.057070,0.062118,0.067577,0.073479,0.079856,0.086744,0.094181,0.102209,0.110870,0.120210,0.130281,0.141134,0.152828,0.165422,0.178982,0.193578,0.209283,0.226178,0.244346,0.263878,0.284871,0.307428,0.331660,0.357683,0.385623,0.415614,0.447799,0.482330,0.519370,0.559091,0.601678,0.647329,0.696253,0.748675,0.804832,0.864979,0.929386,0.998343,1.072156,1.151153,1.235683,1.326117,1.422851,1.526306,1.636930,1.755200,1.881624,2.016743,2.161133,2.315406,2.480212,2.656246,2.844245,3.044993,3.259324,3.488126,3.732342,3.992976,4.271094,4.567832,4.884395,5.222065,5.582204};
local Util_cvToRate_c1 = {0.005139,0.005126,0.005099,0.005057,0.004997,0.004920,0.004821,0.004701,0.004557,0.004386,0.004187,0.003958,0.003695,0.003395,0.003057,0.002677,0.002250,0.001775,0.001246,0.000661,0.000013,(-0.000701),(-0.001486),(-0.002347),(-0.003291),(-0.004324),(-0.005451),(-0.006681),(-0.008019),(-0.009475),(-0.011056),(-0.012771),(-0.014630),(-0.016643),(-0.018820),(-0.021173),(-0.023715),(-0.026457),(-0.029414),(-0.032601),(-0.036033),(-0.039726),(-0.043698),(-0.047968),(-0.052555),(-0.057481),(-0.062767),(-0.068439),(-0.074520),(-0.081038),(-0.088022),(-0.095500),(-0.103507),(-0.112074),(-0.121240),(-0.131041),(-0.141519),(-0.152717),(-0.164680),(-0.177457),(-0.191100),(-0.205662),(-0.221203),(-0.237783),(-0.255468),(-0.274326),(-0.294430),(-0.315858),(-0.338692),(-0.363020),(-0.388932),(-0.416527),(-0.445908),(-0.477186),(-0.510475),(-0.545899),(-0.583588),(-0.623681),(-0.666322),(-0.711667),(-0.759879),(-0.811132),(-0.865609),(-0.923505),(-0.985024),(-1.050385),(-1.119817),(-1.193565),(-1.271886),(-1.355053),(-1.443355),(-1.537097),(-1.636603),(-1.742213),(-1.854291),(-1.973218),(-2.099400),(-2.233263),(-2.375261),(-2.525872),(-2.685603),(-2.854988),(-3.034594),(-3.225018),(-3.426895),(-3.640891),(-3.867716),(-4.108116),(-4.362881),(-4.632847),(-4.918896),(-5.221962),(-5.543032),(-5.883146),(-6.243407),(-6.624979),(-7.029092),(-7.457046),(-7.910214),(-8.390047),(-8.898078),(-9.435927),(-10.005306),(-10.608022),(-11.245984),(-11.921211),(-12.635832),(-13.392100),(-14.192391)};
local Util_cvToRate_c2 = {0.018255,0.019167,0.020124,0.021129,0.022184,0.023292,0.024455,0.025677,0.026959,0.028306,0.029719,0.031204,0.032762,0.034398,0.036116,0.037920,0.039814,0.041802,0.043890,0.046082,0.048384,0.050800,0.053338,0.056001,0.058798,0.061735,0.064818,0.068056,0.071455,0.075023,0.078770,0.082704,0.086835,0.091172,0.095725,0.100506,0.105526,0.110796,0.116330,0.122140,0.128240,0.134645,0.141370,0.148430,0.155843,0.163627,0.171799,0.180379,0.189388,0.198847,0.208778,0.219206,0.230154,0.241649,0.253717,0.266389,0.279694,0.293663,0.308329,0.323729,0.339897,0.356873,0.374697,0.393410,0.413059,0.433689,0.455349,0.478091,0.501969,0.527039,0.553362,0.580999,0.610016,0.640483,0.672471,0.706057,0.741321,0.778345,0.817219,0.858034,0.900888,0.945882,0.993123,1.042724,1.094802,1.149481,1.206890,1.267168,1.330455,1.396903,1.466670,1.539922,1.616832,1.697583,1.782367,1.871386,1.964851,2.062983,2.166017,2.274197,2.387780,2.507035,2.632247,2.763712,2.901743,3.046668,3.198831,3.358594,3.526336,3.702455,3.887371,4.081522,4.285370,4.499399,4.724117,4.960059,5.207785,5.467883,5.740971,6.027699,6.328746,6.644830,6.976700,7.325145,7.690992,8.075112,8.478416,8.901863,9.346458};
function this.Util_cvToRate(cv)
   local index = this.clip(this.int((141.111111 * cv)),0,127);
   return (Util_cvToRate_c0[index+1] + (cv * (Util_cvToRate_c1[index+1] + (Util_cvToRate_c2[index+1] * cv))));

end

function this.Util_pitchToCv(pitch)
   return (0.008333 * ((-24.000000) + pitch));

end

local Util_cvToperiod_c0 = {674.246035,671.553838,662.761782,646.759522,623.799428,594.871802,561.298277,524.476942,485.731369,446.229382,406.947440,368.663774,331.968683,297.284156,264.887666,234.936857,207.493124,182.543016,160.016907,139.804832,121.769557,105.757117,91.605116,79.149088,68.227249,58.683895,50.371734,43.153355,36.902033,31.502025,26.848494,22.847166,19.413794};
local Util_cvToperiod_c1 = {(-4656.656311),(-4481.960579),(-4198.686133),(-3855.751543),(-3487.139455),(-3115.858821),(-2756.930319),(-2419.625141),(-2109.134753),(-1827.808334),(-1576.062963),(-1353.047092),(-1157.118864),(-986.186250),(-837.944665),(-710.039113),(-600.171234),(-506.166566),(-426.013463),(-357.882151),(-300.130190),(-251.298904),(-210.104105),(-175.423450),(-146.282114),(-121.837895),(-101.366537),(-84.247726),(-69.952082),(-58.029259),(-48.097248),(-39.832833),(-32.963186)};
local Util_cvToperiod_c2 = {14548.823162,11715.369522,9433.744675,7596.477297,6117.026622,4925.706117,3966.401040,3193.925264,2571.892879,2071.004308,1667.666208,1342.880152,1081.347751,870.750049,701.167268,564.611553,454.650724,366.105298,294.804521,237.389916,191.157082,153.928316,123.950032,99.810164,80.371652,64.718885,52.114569,41.965005,33.792117,27.210939,21.911477,17.644111,14.207835};
function this.Util_cvToperiod(cv)
   local index = this.clip(this.int((31.000000 * cv)),0,31);
   return (Util_cvToperiod_c0[index+1] + (cv * (Util_cvToperiod_c1[index+1] + (Util_cvToperiod_c2[index+1] * cv))));

end

local Util_cvTokHz_c0 = {0.032703,0.032916,0.033958,0.036857,0.043242,0.055616,0.077724,0.115069,0.175614,0.270739,0.416537,0.635567,0.959207,1.430818,2.109960,3.078021,4.445697,6.362909,9.031922,12.724677,17.805619,24.761735,34.241990,47.109042,64.506928,87.949557,119.436234,161.602273,217.915148,292.929619,392.619240,524.806645,699.721497};
local Util_cvTokHz_c1 = {0.225719,0.212293,0.179169,0.117605,0.015780,(-0.142178),(-0.377466),(-0.718250),(-1.201797),(-1.877228),(-2.809077),(-4.081867),(-5.806008),(-8.125373),(-11.227028),(-15.353705),(-20.819795),(-28.031798),(-37.514503),(-49.944414),(-66.192449),(-87.378404),(-114.940396),(-150.723337),(-197.091584),(-257.072284),(-334.537674),(-434.436788),(-563.089817),(-728.561858),(-941.137258),(-1213.921328),(-1563.603302)};
local Util_cvTokHz_c2 = {0.876338,1.088287,1.351498,1.678368,2.084294,2.588397,3.214421,3.991854,4.957315,6.156280,7.645225,9.494282,11.790549,14.642185,18.183512,22.581336,28.042809,34.825181,43.247923,53.707771,66.697415,82.828706,102.861476,127.739327,158.634081,197.000973,244.647198,303.817033,377.297556,468.549918,581.872376,722.602756,897.369877};
function this.Util_cvTokHz(cv)
   local index = this.clip(this.int((31.000000 * cv)),0,31);
   return (Util_cvTokHz_c0[index+1] + (cv * (Util_cvTokHz_c1[index+1] + (Util_cvTokHz_c2[index+1] * cv))));

end

function this.Tricore__ctx_type_0_init()
   local _ctx = {};
   _ctx.reset_state = false;
   _ctx.reset_phase = 0.000000;
   _ctx.rate = 0.000000;
   _ctx.phase = 0.000000;
   _ctx.direction = false;
   _ctx._inst26 = this.Util__ctx_type_0_init();
   _ctx._inst25 = this.Util__ctx_type_0_init();
   _ctx._inst23 = this.Util__ctx_type_1_init();
   this.Tricore_default(_ctx);
   return _ctx;

end

function this.Tricore_process_init()
   return this.Tricore__ctx_type_0_init();
end

function this.Tricore_process(_ctx,cv,reset,disable)
   local out = 0.000000;
   if this.Util_change(_ctx._inst23,cv) then
      _ctx.rate = (4.000000 * this.Util_cvToRate_1024(cv));

   end
   local new_phase = 0.0;
   local _if_39 = 0.0;
   if _ctx.direction then
      _if_39 = _ctx.rate;
   else

      _if_39 = (- _ctx.rate);
   end
   new_phase = (_ctx.phase + _if_39);
   local bdisable = (disable > 0.500000);
   if (this.Util_edge(_ctx._inst25,(reset > 0.000000)) or this.Util_edge(_ctx._inst26,bdisable)) then
      _ctx.reset_phase = _ctx.phase;
      _ctx.reset_state = true;
      new_phase = 0.000000;

   end
   if (new_phase > 1024.000000) then
      new_phase = (1024.000000 + (- (new_phase + (-1024.000000))));
      _ctx.direction = false;

   else

      local _cond_41 = false;
      _cond_41 = (new_phase < (-1024.000000));
      if _cond_41 then
         _ctx.direction = true;

      end

   end
   if bdisable then
      _ctx.phase = 0.000000;
   else

      _ctx.phase = new_phase;
   end
   if _ctx.reset_state then
      local _cond_44 = false;
      _cond_44 = ((this.abs(_ctx.reset_phase) > 10.000000) or bdisable);
      if _cond_44 then
         local reset_speed = 0.0;
         if bdisable then
            reset_speed = 0.010000;
         else

            reset_speed = 0.500000;
         end
         _ctx.reset_phase = (_ctx.reset_phase + (- (_ctx.reset_phase * reset_speed)));

      else

         local _cond_43 = false;
         _cond_43 = (_ctx.reset_phase > 10.000000);
         if (not _cond_43) then
            _ctx.reset_phase = 0.000000;
         end
         _ctx.reset_state = false;
         _ctx.direction = true;

      end
      out = _ctx.reset_phase;

   end
   out = (out + _ctx.phase);
   return (out * 0.000977);

end

function this.Tricore_noteOn_init()
   return this.Tricore__ctx_type_0_init();
end

function this.Tricore_noteOn(_ctx,note,velocity,channel)

end

function this.Tricore_noteOff_init()
   return this.Tricore__ctx_type_0_init();
end

function this.Tricore_noteOff(_ctx,note,channel)

end

function this.Tricore_controlChange_init()
   return this.Tricore__ctx_type_0_init();
end

function this.Tricore_controlChange(_ctx,control,value,channel)

end

function this.Tricore_default_init()
   return this.Tricore__ctx_type_0_init();
end

function this.Tricore_default(_ctx)
   _ctx.rate = 0.759367;

end

local Saturate_soft_table_c0 = {(-4.197917),(-4.080173),(-3.962794),(-3.845833),(-3.729341),(-3.613374),(-3.497985),(-3.383231),(-3.269167),(-3.155849),(-3.043337),(-2.931686),(-2.820957),(-2.711206),(-2.602494),(-2.494880),(-2.388423),(-2.283182),(-2.179217),(-2.076588),(-1.975353),(-1.875572),(-1.777302),(-1.680602),(-1.585529),(-1.492139),(-1.400487),(-1.310629),(-1.222617),(-1.136504),(-1.052340),(-0.970174),(-0.890054),(-0.812026),(-0.736132),(-0.662415),(-0.590914),(-0.521666),(-0.454705),(-0.390062),(-0.327768),(-0.267847),(-0.210323),(-0.155215),(-0.102540),(-0.052312),(-0.004538),0.040774,0.083623,0.124011,0.161943,0.197429,0.230483,0.261122,0.289369,0.315250,0.338794,0.360037,0.379017,0.395778,0.410364,0.422829,0.433226,0.441614,0.448056,0.452617,0.455367,0.456378,0.455727,0.453492,0.449754,0.444597,0.438108,0.430373,0.421483,0.411529,0.400602,0.388794,0.376201,0.362913,0.349024,0.334626,0.319811,0.304668,0.289285,0.273749,0.258143,0.242548,0.227042,0.211699,0.196590,0.181783,0.167338,0.153314,0.139765,0.126738,0.114276,0.102417,0.091192,0.080628,0.070746,0.061560,0.053080,0.045309,0.038244,0.031879,0.026199,0.021186,0.016817,0.013061,0.009886,0.007254,0.005123,0.003447,0.002177,0.001261,0.000644,0.000269,0.000077,0.000008,0.000000,(-0.000008),(-0.000077),(-0.000269),(-0.000644),(-0.001261),(-0.002177),(-0.003447),(-0.005123),(-0.007254),(-0.009886),(-0.013061),(-0.016817),(-0.021186),(-0.026199),(-0.031879),(-0.038244),(-0.045309),(-0.053080),(-0.061560),(-0.070746),(-0.080628),(-0.091192),(-0.102417),(-0.114276),(-0.126738),(-0.139765),(-0.153314),(-0.167338),(-0.181783),(-0.196590),(-0.211699),(-0.227042),(-0.242548),(-0.258143),(-0.273749),(-0.289285),(-0.304668),(-0.319811),(-0.334626),(-0.349024),(-0.362913),(-0.376201),(-0.388794),(-0.400602),(-0.411529),(-0.421483),(-0.430373),(-0.438108),(-0.444597),(-0.449754),(-0.453492),(-0.455727),(-0.456378),(-0.455367),(-0.452617),(-0.448056),(-0.441614),(-0.433226),(-0.422829),(-0.410364),(-0.395778),(-0.379017),(-0.360037),(-0.338794),(-0.315250),(-0.289369),(-0.261122),(-0.230483),(-0.197429),(-0.161943),(-0.124011),(-0.083623),(-0.040774),0.004538,0.052312,0.102540,0.155215,0.210323,0.267847,0.327768,0.390062,0.454705,0.521666,0.590914,0.662415,0.736132,0.812026,0.890054,0.970174,1.052340,1.136504,1.222617,1.310629,1.400487,1.492139,1.585529,1.680602,1.777302,1.875572,1.975353,2.076588,2.179217,2.283182,2.388423,2.494880,2.602494,2.711206,2.820957,2.931686,3.043337,3.155849,3.269167,3.383231,3.497985,3.613374,3.729341,3.845833,3.962794,4.080173,4.197917,4.315974};
local Saturate_soft_table_c1 = {0.676338,0.686232,0.696179,0.706175,0.716216,0.726298,0.736418,0.746571,0.756752,0.766957,0.777182,0.787421,0.797669,0.807921,0.818171,0.828414,0.838644,0.848854,0.859040,0.869193,0.879308,0.889378,0.899396,0.909356,0.919249,0.929069,0.938808,0.948458,0.958013,0.967463,0.976802,0.986021,0.995112,1.004066,1.012877,1.021534,1.030031,1.038359,1.046509,1.054474,1.062244,1.069813,1.077171,1.084311,1.091226,1.097906,1.104345,1.110536,1.116470,1.122142,1.127545,1.132672,1.137517,1.142075,1.146340,1.150308,1.153973,1.157332,1.160381,1.163118,1.165538,1.167642,1.169426,1.170891,1.172035,1.172860,1.173366,1.173556,1.173431,1.172995,1.172251,1.171205,1.169861,1.168225,1.166305,1.164107,1.161641,1.158915,1.155939,1.152723,1.149279,1.145619,1.141754,1.137699,1.133466,1.129071,1.124528,1.119853,1.115062,1.110170,1.105195,1.100154,1.095064,1.089943,1.084808,1.079678,1.074570,1.069502,1.064492,1.059557,1.054716,1.049986,1.045382,1.040923,1.036623,1.032499,1.028565,1.024836,1.021326,1.018046,1.015009,1.012227,1.009709,1.007465,1.005504,1.003831,1.002454,1.001378,1.000606,1.000142,0.999987,1.000142,1.000606,1.001378,1.002454,1.003831,1.005504,1.007465,1.009709,1.012227,1.015009,1.018046,1.021326,1.024836,1.028565,1.032499,1.036623,1.040923,1.045382,1.049986,1.054716,1.059557,1.064492,1.069502,1.074570,1.079678,1.084808,1.089943,1.095064,1.100154,1.105195,1.110170,1.115062,1.119853,1.124528,1.129071,1.133466,1.137699,1.141754,1.145619,1.149279,1.152723,1.155939,1.158915,1.161641,1.164107,1.166305,1.168225,1.169861,1.171205,1.172251,1.172995,1.173431,1.173556,1.173366,1.172860,1.172035,1.170891,1.169426,1.167642,1.165538,1.163118,1.160381,1.157332,1.153973,1.150308,1.146340,1.142075,1.137517,1.132672,1.127545,1.122142,1.116470,1.110536,1.104345,1.097906,1.091226,1.084311,1.077171,1.069813,1.062244,1.054474,1.046509,1.038359,1.030031,1.021534,1.012877,1.004066,0.995112,0.986021,0.976802,0.967463,0.958013,0.948458,0.938808,0.929069,0.919249,0.909356,0.899396,0.889378,0.879308,0.869193,0.859040,0.848854,0.838644,0.828414,0.818171,0.807921,0.797669,0.787421,0.777182,0.766957,0.756752,0.746571,0.736418,0.726298,0.716216,0.706175,0.696179,0.686232,0.676338,0.666500};
local Saturate_soft_table_c2 = {0.010326,0.010534,0.010744,0.010958,0.011174,0.011393,0.011615,0.011840,0.012067,0.012297,0.012529,0.012764,0.013001,0.013240,0.013482,0.013726,0.013972,0.014219,0.014469,0.014720,0.014972,0.015227,0.015482,0.015738,0.015996,0.016254,0.016513,0.016772,0.017031,0.017290,0.017549,0.017808,0.018066,0.018323,0.018578,0.018833,0.019085,0.019335,0.019583,0.019829,0.020071,0.020310,0.020545,0.020777,0.021003,0.021226,0.021443,0.021654,0.021859,0.022059,0.022251,0.022436,0.022614,0.022783,0.022944,0.023096,0.023239,0.023372,0.023494,0.023606,0.023706,0.023795,0.023872,0.023936,0.023986,0.024024,0.024047,0.024056,0.024050,0.024029,0.023992,0.023939,0.023869,0.023782,0.023679,0.023558,0.023418,0.023261,0.023085,0.022891,0.022677,0.022444,0.022192,0.021921,0.021630,0.021319,0.020988,0.020638,0.020268,0.019878,0.019468,0.019039,0.018591,0.018123,0.017637,0.017132,0.016608,0.016067,0.015508,0.014932,0.014339,0.013730,0.013105,0.012465,0.011811,0.011143,0.010462,0.009768,0.009063,0.008347,0.007621,0.006886,0.006142,0.005391,0.004633,0.003870,0.003102,0.002330,0.001555,0.000778,0.000000,(-0.000778),(-0.001555),(-0.002330),(-0.003102),(-0.003870),(-0.004633),(-0.005391),(-0.006142),(-0.006886),(-0.007621),(-0.008347),(-0.009063),(-0.009768),(-0.010462),(-0.011143),(-0.011811),(-0.012465),(-0.013105),(-0.013730),(-0.014339),(-0.014932),(-0.015508),(-0.016067),(-0.016608),(-0.017132),(-0.017637),(-0.018123),(-0.018591),(-0.019039),(-0.019468),(-0.019878),(-0.020268),(-0.020638),(-0.020988),(-0.021319),(-0.021630),(-0.021921),(-0.022192),(-0.022444),(-0.022677),(-0.022891),(-0.023085),(-0.023261),(-0.023418),(-0.023558),(-0.023679),(-0.023782),(-0.023869),(-0.023939),(-0.023992),(-0.024029),(-0.024050),(-0.024056),(-0.024047),(-0.024024),(-0.023986),(-0.023936),(-0.023872),(-0.023795),(-0.023706),(-0.023606),(-0.023494),(-0.023372),(-0.023239),(-0.023096),(-0.022944),(-0.022783),(-0.022614),(-0.022436),(-0.022251),(-0.022059),(-0.021859),(-0.021654),(-0.021443),(-0.021226),(-0.021003),(-0.020777),(-0.020545),(-0.020310),(-0.020071),(-0.019829),(-0.019583),(-0.019335),(-0.019085),(-0.018833),(-0.018578),(-0.018323),(-0.018066),(-0.017808),(-0.017549),(-0.017290),(-0.017031),(-0.016772),(-0.016513),(-0.016254),(-0.015996),(-0.015738),(-0.015482),(-0.015227),(-0.014972),(-0.014720),(-0.014469),(-0.014219),(-0.013972),(-0.013726),(-0.013482),(-0.013240),(-0.013001),(-0.012764),(-0.012529),(-0.012297),(-0.012067),(-0.011840),(-0.011615),(-0.011393),(-0.011174),(-0.010958),(-0.010744),(-0.010534),(-0.010326),(-0.010121)};
function this.Saturate_soft_table(x)
   local index = this.clip(this.int((5.000000 * (x + 24.000000))),0,240);
   return (Saturate_soft_table_c0[index+1] + (x * (Saturate_soft_table_c1[index+1] + (Saturate_soft_table_c2[index+1] * x))));

end

function this.Saturate_soft_process(x)
   return this.Saturate_soft_table(x);

end

function this.Saturate_soft_noteOn(note,velocity,channel)

end

function this.Saturate_soft_noteOff(note,channel)

end

function this.Saturate_soft_controlChange(control,value,channel)

end

function this.Saturate_soft_default()

end

local Svf_calc_g_c0 = {0.002330,0.002330,0.002330,0.002332,0.002334,0.002339,0.002345,0.002355,0.002367,0.002384,0.002406,0.002434,0.002469,0.002512,0.002564,0.002627,0.002703,0.002792,0.002897,0.003020,0.003163,0.003329,0.003520,0.003739,0.003989,0.004275,0.004599,0.004965,0.005380,0.005846,0.006371,0.006959,0.007616,0.008351,0.009170,0.010081,0.011093,0.012216,0.013460,0.014835,0.016355,0.018032,0.019880,0.021915,0.024152,0.026610,0.029308,0.032266,0.035507,0.039056,0.042937,0.047180,0.051814,0.056872,0.062391,0.068407,0.074963,0.082102,0.089873,0.098328,0.107523,0.117519,0.128382,0.140182,0.152998,0.166913,0.182017,0.198411,0.216200,0.235502,0.256445,0.279169,0.303825,0.330581,0.359621,0.391146,0.425378,0.462564,0.502975,0.546913,0.594715,0.646756,0.703455,0.765285,0.832775,0.906525,0.987216,1.075618,1.172616,1.279218,1.396584,1.526056,1.669182,1.827767,2.003915,2.200094,2.419208,2.664689,2.940615,3.251849,3.604226,4.004772,4.462003,4.986296,5.590369,6.289910,7.104406,8.058233,9.182127,10.515167,12.107495,14.024086,16.350050,19.198183,22.719924,27.121506,32.688246,39.821863,49.099200,61.367140,77.900726,100.675849,132.858502,179.724089,250.481347,362.134627,548.340291,881.845214,1539.180624};
local Svf_calc_g_c1 = {0.016145,0.016105,0.016020,0.015887,0.015700,0.015455,0.015147,0.014769,0.014315,0.013780,0.013155,0.012433,0.011607,0.010666,0.009603,0.008408,0.007068,0.005574,0.003913,0.002072,0.000038,(-0.002205),(-0.004673),(-0.007381),(-0.010348),(-0.013594),(-0.017138),(-0.021003),(-0.025211),(-0.029787),(-0.034759),(-0.040152),(-0.045999),(-0.052330),(-0.059179),(-0.066584),(-0.074581),(-0.083212),(-0.092521),(-0.102554),(-0.113361),(-0.124994),(-0.137509),(-0.150966),(-0.165429),(-0.180965),(-0.197646),(-0.215548),(-0.234754),(-0.255350),(-0.277430),(-0.301091),(-0.326439),(-0.353586),(-0.382653),(-0.413766),(-0.447062),(-0.482687),(-0.520796),(-0.561556),(-0.605146),(-0.651755),(-0.701588),(-0.754865),(-0.811821),(-0.872709),(-0.937803),(-1.007396),(-1.081805),(-1.161373),(-1.246472),(-1.337503),(-1.434906),(-1.539157),(-1.650775),(-1.770330),(-1.898445),(-2.035805),(-2.183166),(-2.341362),(-2.511317),(-2.694058),(-2.890730),(-3.102612),(-3.331139),(-3.577926),(-3.844796),(-4.133812),(-4.447323),(-4.788005),(-5.158923),(-5.563598),(-6.006091),(-6.491103),(-7.024099),(-7.611454),(-8.260641),(-8.980450),(-9.781273),(-10.675448),(-11.677696),(-12.805669),(-14.080648),(-15.528428),(-17.180469),(-19.075376),(-21.260850),(-23.796255),(-26.756050),(-30.234416),(-34.351569),(-39.262482),(-45.169098),(-52.337689),(-61.123918),(-72.009676),(-85.658276),(-102.998963),(-125.359415),(-154.679171),(-193.863954),(-247.394573),(-322.415669),(-430.774376),(-593.051114),(-847.065734),(-1267.315348),(-2014.052154),(-3474.292994)};
local Svf_calc_g_c2 = {0.057350,0.060215,0.063222,0.066380,0.069695,0.073176,0.076831,0.080669,0.084698,0.088928,0.093370,0.098034,0.102931,0.108072,0.113470,0.119138,0.125090,0.131338,0.137899,0.144788,0.152021,0.159615,0.167589,0.175962,0.184753,0.193984,0.203677,0.213854,0.224540,0.235761,0.247543,0.259915,0.272906,0.286547,0.300871,0.315913,0.331709,0.348296,0.365715,0.384008,0.403218,0.423393,0.444582,0.466835,0.490207,0.514756,0.540541,0.567626,0.596077,0.625966,0.657365,0.690355,0.725017,0.761439,0.799714,0.839938,0.882217,0.926659,0.973380,1.022505,1.074163,1.128495,1.185649,1.245782,1.309063,1.375673,1.445804,1.519663,1.597473,1.679472,1.765917,1.857087,1.953283,2.054832,2.162087,2.275438,2.395306,2.522155,2.656495,2.798887,2.949951,3.110375,3.280922,3.462445,3.655898,3.862351,4.083007,4.319229,4.572558,4.844750,5.137806,5.454018,5.796023,6.166860,6.570049,7.009682,7.490532,8.018195,8.599255,9.241494,9.954156,10.748275,11.637086,12.636560,13.766076,15.049300,16.515328,18.200192,20.148861,22.417929,25.079277,28.225104,31.974960,36.485695,41.965784,48.696303,57.062253,67.600366,81.073785,98.591968,121.809059,153.263633,196.984118,259.618609,352.661145,497.133891,734.250370,1152.247055,1963.211680};
function this.Svf_calc_g(cv)
   local index = this.clip(this.int((141.111111 * cv)),0,127);
   return (Svf_calc_g_c0[index+1] + (cv * (Svf_calc_g_c1[index+1] + (Svf_calc_g_c2[index+1] * cv))));

end

function this.Svf__ctx_type_1_init()
   local _ctx = {};
   _ctx.z2 = 0.000000;
   _ctx.z1 = 0.000000;
   _ctx.inv_den = 0.000000;
   _ctx.g = 0.000000;
   _ctx._inst54 = this.Util__ctx_type_1_init();
   _ctx._inst53 = this.Util__ctx_type_1_init();
   _ctx.R = 0.000000;
   this.Svf_default(_ctx);
   return _ctx;

end

function this.Svf_process_init()
   return this.Svf__ctx_type_1_init();
end

function this.Svf_process(_ctx,x,cv,q,sel)
   q = (q + 0.500000);
   if (this.Util_change(_ctx._inst53,cv) or this.Util_change(_ctx._inst54,q)) then
      _ctx.g = this.Svf_calc_g(cv);
      _ctx.R = (1.000000 / (2.000000 * (q + 0.000000)));
      _ctx.inv_den = (1.000000 / (1.000000 + (2.000000 * _ctx.R * _ctx.g) + (_ctx.g * _ctx.g)));

   end
   local high = ((x + (- (((2.000000 * _ctx.R) + _ctx.g) * _ctx.z1)) + (- _ctx.z2)) * _ctx.inv_den);
   local band = ((_ctx.g * high) + _ctx.z1);
   local low = ((_ctx.g * band) + _ctx.z2);
   local notch = (low + high);
   _ctx.z1 = ((_ctx.g * high) + band);
   _ctx.z2 = ((_ctx.g * band) + low);
   local output = 0.0;
   if (sel == 0) then
      output = low;
   else

      local _cond_62 = false;
      _cond_62 = (sel == 1);
      if _cond_62 then
         output = high;
      else

         local _cond_63 = false;
         _cond_63 = (sel == 2);
         if _cond_63 then
            output = band;
         else

            output = notch;
         end

      end

   end
   return this.Saturate_soft_process(output);

end

function this.Svf_noteOn_init()
   return this.Svf__ctx_type_1_init();
end

function this.Svf_noteOn(_ctx,note,velocity,channel)

end

function this.Svf_noteOff_init()
   return this.Svf__ctx_type_1_init();
end

function this.Svf_noteOff(_ctx,note,channel)

end

function this.Svf_controlChange_init()
   return this.Svf__ctx_type_1_init();
end

function this.Svf_controlChange(_ctx,control,value,channel)

end

function this.Svf_default_init()
   return this.Svf__ctx_type_1_init();
end

function this.Svf_default(_ctx)
   _ctx.g = 0.002330;
   _ctx.R = 1.000000;
   _ctx.inv_den = (1.000000 / (1.000000 + (_ctx.g * _ctx.g)));

end

local Saturate_table_c0 = {};
local Saturate_table_c1 = {};
local Saturate_table_c2 = {};
function this.Saturate_table(x)
   local index = this.clip(this.int((5.000000 * (x + 24.000000))),0,240);
   return (Saturate_table_c0[index+1] + (x * (Saturate_table_c1[index+1] + (Saturate_table_c2[index+1] * x))));

end

function this.Saturate_process(x)
   return this.Saturate_table(x);

end

function this.Saturate_noteOn(note,velocity,channel)

end

function this.Saturate_noteOff(note,channel)

end

function this.Saturate_controlChange(control,value,channel)

end

function this.Saturate_default()

end

function this.Lfo__ctx_type_0_init()
   local _ctx = {};
   _ctx.x4 = 0.000000;
   _ctx.x3 = 0.000000;
   _ctx.x2 = 0.000000;
   return _ctx;

end

function this.Lfo_soft_init()
   return this.Lfo__ctx_type_0_init();
end

function this.Lfo_soft(_ctx,x1)
   local o = ((x1 + _ctx.x2 + _ctx.x3 + _ctx.x4) * 0.250000);
   local _tmp_81_0 = x1;
   local _tmp_81_1 = _ctx.x2;
   local _tmp_81_2 = _ctx.x3;
   _ctx.x2 = _tmp_81_0;
   _ctx.x3 = _tmp_81_1;
   _ctx.x4 = _tmp_81_2;
   return o;

end

function this.Lfo__ctx_type_1_init()
   local _ctx = {};
   _ctx.rate = 0.000000;
   _ctx.phase = 0.000000;
   _ctx._inst76 = this.Lfo__ctx_type_0_init();
   _ctx._inst74 = this.Util__ctx_type_0_init();
   _ctx._inst72 = this.Util__ctx_type_1_init();
   return _ctx;

end

function this.Lfo_process_init()
   return this.Lfo__ctx_type_1_init();
end

function this.Lfo_process(_ctx,cv,shape,reset)
   if this.Util_change(_ctx._inst72,cv) then
      _ctx.rate = this.Util_cvToRate((cv + (-0.300000)));

   end
   _ctx.phase = (_ctx.phase + _ctx.rate);
   if (_ctx.phase > 2.000000) then
      _ctx.phase = (_ctx.phase + (-2.000000));
   end
   local breset = (reset > 0.000000);
   if this.Util_edge(_ctx._inst74,breset) then
      _ctx.phase = 0.000000;

   end
   local tmp = (_ctx.phase + (-1.000000));
   local o = 0.0;
   if (shape < 1.000000) then
      o = tmp;
   else

      local _cond_86 = false;
      _cond_86 = (shape < 2.000000);
      if _cond_86 then
         o = ((this.abs(tmp) * 2.000000) + (-1.000000));
      else

         local _cond_87 = false;
         _cond_87 = (tmp > 0.000000);
         if _cond_87 then
            o = 1.000000;
         else

            o = 0.000000;
         end

      end

   end
   return this.Lfo_soft(_ctx._inst76,o);

end

function this.Lfo_noteOn_init()
   return this.Lfo__ctx_type_1_init();
end

function this.Lfo_noteOn(_ctx,note,velocity,channel)

end

function this.Lfo_noteOff_init()
   return this.Lfo__ctx_type_1_init();
end

function this.Lfo_noteOff(_ctx,note,channel)

end

function this.Lfo_controlChange_init()
   return this.Lfo__ctx_type_1_init();
end

function this.Lfo_controlChange(_ctx,control,value,channel)

end

function this.Lfo_default_init()
   return this.Lfo__ctx_type_1_init();
end

function this.Lfo_default(_ctx)

end

local Tables_nsine_c0 = {0.000000,(-0.000059),(-0.000294),(-0.000821),(-0.001748),(-0.003182),(-0.005218),(-0.007945),(-0.011441),(-0.015769),(-0.020982),(-0.027117),(-0.034194),(-0.042218),(-0.051174),(-0.061028),(-0.071728),(-0.083199),(-0.095348),(-0.108059),(-0.121193),(-0.134593),(-0.148077),(-0.161443),(-0.174469),(-0.186911),(-0.198505),(-0.208970),(-0.218004),(-0.225290),(-0.230496),(-0.233273),(-0.233261),(-0.230090),(-0.223377),(-0.212736),(-0.197773),(-0.178091),(-0.153292),(-0.122979),(-0.086760),(-0.044248),0.004935,0.061157,0.124770,0.196113,0.275501,0.363233,0.459580,0.564787,0.679070,0.802614,0.935568,1.078046,1.230121,1.391827,1.563154,1.744046,1.934404,2.134075,2.342860,2.560508,2.786714,3.021123,3.263323,3.512849,3.769181,4.031743,4.299905,4.572984,4.850242,5.130888,5.414079,5.698922,5.984476,6.269752,6.553717,6.835294,7.113369,7.386787,7.654362,7.914877,8.167086,8.409721,8.641495,8.861104,9.067233,9.258562,9.433767,9.591528,9.730531,9.849477,9.947084,10.022092,10.073270,10.099421,10.099386,10.072052,10.016353,9.931281,9.815887,9.669287,9.490669,9.279297,9.034513,8.755748,8.442520,8.094445,7.711234,7.292703,6.838775,6.349479,5.824963,5.265486,4.671429,4.043291,3.381696,2.687392,1.961252,1.204276,0.417591,(-0.397552),(-1.239772),(-2.107564),(-2.999299),(-3.913225),(-4.847471),(-5.800047),(-6.768847)};
local Tables_nsine_c1 = {6.284447,6.299564,6.329688,6.374603,6.433980,6.507388,6.594289,6.694041,6.805905,6.929043,7.062522,7.205321,7.356331,7.514365,7.678156,7.846367,8.017595,8.190378,8.363199,8.534492,8.702652,8.866039,9.022985,9.171802,9.310788,9.438236,9.552440,9.651704,9.734348,9.798715,9.843181,9.866160,9.866113,9.841556,9.791063,9.713277,9.606917,9.470782,9.303758,9.104827,8.873070,8.607671,8.307927,7.973252,7.603175,7.197355,6.755575,6.277752,5.763935,5.214312,4.629210,4.009096,3.354579,2.666410,1.945484,1.192836,0.409645,(-0.402770),(-1.242953),(-2.109312),(-3.000120),(-3.913520),(-4.847530),(-5.800047),(-6.768847),(-7.751597),(-8.745857),(-9.749086),(-10.758648),(-11.771823),(-12.785807),(-13.797728),(-14.804647),(-15.803569),(-16.791454),(-17.765220),(-18.721759),(-19.657940),(-20.570624),(-21.456668),(-22.312942),(-23.136331),(-23.923752),(-24.672159),(-25.378556),(-26.040006),(-26.653641),(-27.216673),(-27.726403),(-28.180230),(-28.575662),(-28.910326),(-29.181973),(-29.388492),(-29.527917),(-29.598433),(-29.598386),(-29.526292),(-29.380840),(-29.160902),(-28.865538),(-28.494004),(-28.045752),(-27.520443),(-26.917941),(-26.238327),(-25.481894),(-24.649155),(-23.740843),(-22.757909),(-21.701528),(-20.573098),(-19.374236),(-18.106780),(-16.772786),(-15.374524),(-13.914479),(-12.395342),(-10.820010),(-9.191577),(-7.513332),(-5.788748),(-4.021481),(-2.215356),(-0.374364),1.497351,3.395497,5.315646,7.253247};
local Tables_nsine_c2 = {(-0.484400),(-1.452033),(-2.416169),(-3.374483),(-4.324668),(-5.264435),(-6.191519),(-7.103687),(-7.998741),(-8.874526),(-9.728932),(-10.559900),(-11.365428),(-12.143575),(-12.892468),(-13.610302),(-14.295347),(-14.945953),(-15.560554),(-16.137667),(-16.675904),(-17.173967),(-17.630656),(-18.044871),(-18.415615),(-18.741994),(-19.023222),(-19.258621),(-19.447625),(-19.589777),(-19.684736),(-19.732273),(-19.732273),(-19.684736),(-19.589777),(-19.447625),(-19.258621),(-19.023222),(-18.741994),(-18.415615),(-18.044871),(-17.630656),(-17.173967),(-16.675904),(-16.137667),(-15.560554),(-14.945953),(-14.295347),(-13.610302),(-12.892468),(-12.143575),(-11.365428),(-10.559900),(-9.728932),(-8.874526),(-7.998741),(-7.103687),(-6.191519),(-5.264435),(-4.324668),(-3.374483),(-2.416169),(-1.452033),(-0.484400),0.484400,1.452033,2.416169,3.374483,4.324668,5.264435,6.191519,7.103687,7.998741,8.874526,9.728932,10.559900,11.365428,12.143575,12.892468,13.610302,14.295347,14.945953,15.560554,16.137667,16.675904,17.173967,17.630656,18.044871,18.415615,18.741994,19.023222,19.258621,19.447625,19.589777,19.684736,19.732273,19.732273,19.684736,19.589777,19.447625,19.258621,19.023222,18.741994,18.415615,18.044871,17.630656,17.173967,16.675904,16.137667,15.560554,14.945953,14.295347,13.610302,12.892468,12.143575,11.365428,10.559900,9.728932,8.874526,7.998741,7.103687,6.191519,5.264435,4.324668,3.374483,2.416169,1.452033,0.484400,(-0.484400)};
function this.Tables_nsine(x)
   local index = this.clip(this.int((127.000000 * x)),0,127);
   return (Tables_nsine_c0[index+1] + (x * (Tables_nsine_c1[index+1] + (Tables_nsine_c2[index+1] * x))));

end

function this.Phase__ctx_type_0_init()
   local _ctx = {};
   _ctx.rate = 0.000000;
   _ctx.phase = 0.000000;
   _ctx._inst92 = this.Util__ctx_type_0_init();
   _ctx._inst90 = this.Util__ctx_type_1_init();
   this.Phase_default(_ctx);
   return _ctx;

end

function this.Phase_process_init()
   return this.Phase__ctx_type_0_init();
end

function this.Phase_process(_ctx,cv,reset)
   if this.Util_change(_ctx._inst90,cv) then
      _ctx.rate = this.Util_cvToRate_1024(cv);

   end
   if this.Util_edge(_ctx._inst92,(reset > 0.500000)) then
      _ctx.phase = 0.000000;
   else

      _ctx.phase = (_ctx.phase + _ctx.rate);
   end
   if (_ctx.phase > 1024.000000) then
      _ctx.phase = (_ctx.phase + (-1024.000000));
   end
   return (_ctx.phase * 0.000977);

end

function this.Phase_noteOn_init()
   return this.Phase__ctx_type_0_init();
end

function this.Phase_noteOn(_ctx,note,velocity,channel)

end

function this.Phase_noteOff_init()
   return this.Phase__ctx_type_0_init();
end

function this.Phase_noteOff(_ctx,note,channel)

end

function this.Phase_controlChange_init()
   return this.Phase__ctx_type_0_init();
end

function this.Phase_controlChange(_ctx,control,value,channel)

end

function this.Phase_default_init()
   return this.Phase__ctx_type_0_init();
end

function this.Phase_default(_ctx)
   _ctx.rate = 0.759367;

end

function this.Blit__ctx_type_0_init()
   local _ctx = {};
   _ctx.scale = 0.000000;
   _ctx.m = 0;
   _ctx._inst101 = this.Util__ctx_type_1_init();
   this.Blit_pulse_start(_ctx);
   return _ctx;

end

function this.Blit_pulse_train_init()
   return this.Blit__ctx_type_0_init();
end

function this.Blit_pulse_train(_ctx,cv,phase)
   if this.Util_change(_ctx._inst101,cv) then
      _ctx.m = ((2 * this.int(this.Util_cvToperiod(cv))) + 1);
      _ctx.scale = (2.000000 * this.Util_cvToperiod(cv));

   end
   local pi_phase = (phase * 0.500000);
   local denominator = this.Tables_nsine(pi_phase);
   local out = 0.000000;
   if (denominator <= 0.000000) then
      out = 1.000000;

   else

      local m_phase = 0.0;
      m_phase = ((this.real(_ctx.m) * pi_phase) % 1.000000);
      local numerator = 0.0;
      numerator = this.Tables_nsine(m_phase);
      out = (numerator / (_ctx.scale * denominator));

   end
   return out;

end

function this.Blit_pulse_start_init()
   return this.Blit__ctx_type_0_init();
end

function this.Blit_pulse_start(_ctx)
   _ctx.m = 1349;
   _ctx.scale = 1349.492070;

end

function this.Blit__ctx_type_1_init()
   local _ctx = {};
   _ctx.state_saw = 0.000000;
   _ctx.state_pulse = 0.000000;
   _ctx.rate = 0.000000;
   _ctx.output = 0.000000;
   _ctx._inst117 = this.Util__ctx_type_3_init();
   _ctx._inst114 = this.Blit__ctx_type_0_init();
   _ctx._inst113 = this.Blit__ctx_type_0_init();
   _ctx._inst111 = this.Phase__ctx_type_0_init();
   _ctx._inst109 = this.Util__ctx_type_1_init();
   this.Blit_init(_ctx);
   return _ctx;

end

function this.Blit_osc_blit_init()
   return this.Blit__ctx_type_1_init();
end

function this.Blit_osc_blit(_ctx,cv,pw,wave)
   local fixed_cv = 0.000000;
   if (wave < 1.000000) then
      fixed_cv = cv;

   else

      fixed_cv = (cv + (-0.100000));

   end
   if this.Util_change(_ctx._inst109,fixed_cv) then
      _ctx.rate = this.Util_cvToRate(fixed_cv);

   end
   local phase = this.Phase_process(_ctx._inst111,fixed_cv,0.000000);
   local shift05 = (0.500000 + (pw * 0.490000));
   local shift = (phase + shift05);
   if (shift > 1.000000) then
      shift = (shift + (-1.000000));

   end
   local pulse1 = this.Blit_pulse_train(_ctx._inst113,fixed_cv,phase);
   local pulse2 = this.Blit_pulse_train(_ctx._inst114,fixed_cv,shift);
   _ctx.state_pulse = ((_ctx.state_pulse * 0.999500) + pulse1 + (- pulse2));
   _ctx.state_saw = ((_ctx.state_saw * 0.999500) + (((pulse1 + pulse2 + ((-2.000000) * _ctx.rate)) / shift05) * 0.500000));
   if (wave < 1.000000) then
      _ctx.output = _ctx.state_pulse;

   else

      _ctx.output = (2.000000 * _ctx.state_saw);

   end
   _ctx.output = this.Util_dcblock(_ctx._inst117,_ctx.output);
   return _ctx.output;

end

function this.Blit_init_init()
   return this.Blit__ctx_type_1_init();
end

function this.Blit_init(_ctx)
   _ctx.rate = 0.000742;

end

function this.Blit__ctx_type_2_init()
   local _ctx = {};
   _ctx._inst120 = this.Blit__ctx_type_1_init();
   return _ctx;

end

function this.Blit_process_init()
   return this.Blit__ctx_type_2_init();
end

function this.Blit_process(_ctx,cv,pw,wave)
   return this.Blit_osc_blit(_ctx._inst120,cv,pw,wave);

end

function this.Blit_noteOn_init()
   return this.Blit__ctx_type_2_init();
end

function this.Blit_noteOn(_ctx,note,velocity,channel)

end

function this.Blit_noteOff_init()
   return this.Blit__ctx_type_2_init();
end

function this.Blit_noteOff(_ctx,note,channel)

end

function this.Blit_controlChange_init()
   return this.Blit__ctx_type_2_init();
end

function this.Blit_controlChange(_ctx,control,value,channel)

end

function this.Blit_default_init()
   return this.Blit__ctx_type_2_init();
end

function this.Blit_default(_ctx)

end

function this.Adsr__ctx_type_0_init()
   local _ctx = {};
   _ctx.target = 0.000000;
   _ctx.state = 0;
   _ctx.scale = 0.000000;
   _ctx.rate = 0.000000;
   _ctx.out = 0.000000;
   _ctx._inst140 = this.Util__ctx_type_4_init();
   _ctx._inst133 = this.Util__ctx_type_0_init();
   return _ctx;

end

function this.Adsr_do_init()
   return this.Adsr__ctx_type_0_init();
end

function this.Adsr_do(_ctx,gate,a,d,s,r)
   local a_rate = (1.000000 / ((100.000000 * a) + 0.010000));
   local d_rate = (1.000000 / ((100.000000 * d) + 0.010000));
   local r_rate = (1.000000 / ((100.000000 * r) + 0.010000));
   _ctx.out = (_ctx.out + ((_ctx.target + (- _ctx.out)) * _ctx.rate * 0.004000));
   local bgate = (gate > 0.000000);
   if (_ctx.state == 0) then
      local _cond_151 = false;
      _cond_151 = this.Util_edge(_ctx._inst133,bgate);
      if _cond_151 then
         _ctx.state = 1;
         _ctx.scale = (gate * 0.200000);

      end
      _ctx.rate = r_rate;
      _ctx.target = 0.000000;

   end
   if (_ctx.state == 1) then
      local _cond_153 = false;
      _cond_153 = (bgate == false);
      if _cond_153 then
         _ctx.state = 0;

      end
      local _cond_154 = false;
      _cond_154 = (_ctx.out > 1024.000000);
      if _cond_154 then
         _ctx.state = 2;

      end
      _ctx.rate = a_rate;
      _ctx.target = 1228.800000;

   end
   if (_ctx.state == 2) then
      local _cond_156 = false;
      _cond_156 = (bgate == false);
      if _cond_156 then
         _ctx.state = 0;

      end
      _ctx.rate = d_rate;
      _ctx.target = (s * 1024.000000);

   end
   return (this.Util_smooth(_ctx._inst140,_ctx.scale) * this.clip((_ctx.out * 0.000977),0.000000,1.000000));

end

function this.Adsr__ctx_type_1_init()
   local _ctx = {};
   _ctx.knob4 = 0.000000;
   _ctx.knob3 = 0.000000;
   _ctx.knob2 = 0.000000;
   _ctx.knob1 = 0.000000;
   _ctx._inst142 = this.Adsr__ctx_type_0_init();
   return _ctx;

end

function this.Adsr_process_init()
   return this.Adsr__ctx_type_1_init();
end

function this.Adsr_process(_ctx,gate)
   return this.Adsr_do(_ctx._inst142,gate,_ctx.knob1,_ctx.knob2,_ctx.knob3,_ctx.knob4);

end

function this.Adsr_noteOn_init()
   return this.Adsr__ctx_type_1_init();
end

function this.Adsr_noteOn(_ctx,note,velocity,channel)

end

function this.Adsr_noteOff_init()
   return this.Adsr__ctx_type_1_init();
end

function this.Adsr_noteOff(_ctx,note,channel)

end

function this.Adsr_controlChange_init()
   return this.Adsr__ctx_type_1_init();
end

function this.Adsr_controlChange(_ctx,control,value,channel)
   if (control == 1) then
      _ctx.knob1 = (this.real(value) * 0.007874);

   end
   if (control == 2) then
      _ctx.knob2 = (this.real(value) * 0.007874);

   end
   if (control == 3) then
      _ctx.knob3 = (this.real(value) * 0.007874);

   end
   if (control == 4) then
      _ctx.knob4 = (this.real(value) * 0.007874);

   end

end

function this.Adsr_default_init()
   return this.Adsr__ctx_type_1_init();
end

function this.Adsr_default(_ctx)
   _ctx.knob1 = 0.000000;
   _ctx.knob2 = 0.500000;
   _ctx.knob3 = 1.000000;
   _ctx.knob4 = 0.500000;

end

function this.Voice_4__ctx_type_0_init()
   local _ctx = {};
   _ctx.sustain = 0.000000;
   _ctx.release = 0.000000;
   _ctx.pw4 = 0.000000;
   _ctx.pw3 = 0.000000;
   _ctx.pw2 = 0.000000;
   _ctx.pw1 = 0.000000;
   _ctx.lfo_shape = 0.000000;
   _ctx.lfo_reset = 0.000000;
   _ctx.lfo_rate = 0.000000;
   _ctx.lfo_pw = 0.000000;
   _ctx.lfo_flt = 0.000000;
   _ctx.lfo_cv = 0.000000;
   _ctx.level4 = 0.000000;
   _ctx.level3 = 0.000000;
   _ctx.level2 = 0.000000;
   _ctx.level1 = 0.000000;
   _ctx.flt_shape = 0;
   _ctx.flt_res = 0.000000;
   _ctx.flt_cut = 0.000000;
   _ctx.decay = 0.000000;
   _ctx.attack = 0.000000;
   _ctx._inst169 = this.Adsr__ctx_type_0_init();
   _ctx._inst168 = this.Svf__ctx_type_1_init();
   _ctx._inst167 = this.Tricore__ctx_type_0_init();
   _ctx._inst166 = this.Blit__ctx_type_2_init();
   _ctx._inst165 = this.Blit__ctx_type_2_init();
   _ctx._inst164 = this.Blit__ctx_type_2_init();
   _ctx._inst163 = this.Lfo__ctx_type_1_init();
   return _ctx;

end

function this.Voice_4_process_init()
   return this.Voice_4__ctx_type_0_init();
end

function this.Voice_4_process(_ctx,cv,vel,gate)
   local lfo = this.Lfo_process(_ctx._inst163,_ctx.lfo_rate,_ctx.lfo_shape,(gate * _ctx.lfo_reset));
   local mod_pw = (_ctx.lfo_pw * lfo);
   local mod_cv = (_ctx.lfo_cv * lfo);
   local mod_flt = (_ctx.lfo_flt * lfo);
   local o1 = this.Blit_process(_ctx._inst164,(cv + 0.000100 + mod_cv),(_ctx.pw1 + mod_pw),0.000000);
   local o2 = this.Blit_process(_ctx._inst165,(cv + 0.000200 + mod_cv),(_ctx.pw2 + mod_pw),1.000000);
   local o3 = this.Blit_process(_ctx._inst166,(cv + _ctx.pw3 + mod_cv),(_ctx.pw1 + mod_pw),0.000000);
   local sub = this.Saturate_process((((5.000000 * _ctx.pw4) + 2.000000) * this.Tricore_process(_ctx._inst167,(cv + mod_cv),0.000000,1.000000)));
   local o = ((_ctx.level1 * o1) + (_ctx.level2 * o2) + (_ctx.level3 * o3) + (_ctx.level4 * sub));
   local f = this.Svf_process(_ctx._inst168,o,(_ctx.flt_cut + mod_flt),_ctx.flt_res,_ctx.flt_shape);
   local env = this.Adsr_do(_ctx._inst169,gate,_ctx.attack,_ctx.decay,_ctx.sustain,_ctx.release);
   return (env * f);

end

function this.Voice_4_noteOn_init()
   return this.Voice_4__ctx_type_0_init();
end

function this.Voice_4_noteOn(_ctx,note,velocity,channel)

end

function this.Voice_4_noteOff_init()
   return this.Voice_4__ctx_type_0_init();
end

function this.Voice_4_noteOff(_ctx,note,channel)

end

function this.Voice_4_controlChange_init()
   return this.Voice_4__ctx_type_0_init();
end

function this.Voice_4_controlChange(_ctx,control,value,channel)
   if (control == 30) then
      _ctx.level1 = (this.real(value) * 0.007874);

   end
   if (control == 31) then
      _ctx.level2 = (this.real(value) * 0.007874);

   end
   if (control == 32) then
      _ctx.level3 = (this.real(value) * 0.007874);

   end
   if (control == 33) then
      _ctx.level4 = (this.real(value) * 0.007874);

   end
   if (control == 34) then
      _ctx.pw1 = (this.real(value) * 0.007874);

   end
   if (control == 35) then
      _ctx.pw2 = (this.real(value) * 0.007874);

   end
   if (control == 36) then
      _ctx.pw3 = (0.000787 * this.real(value));

   end
   if (control == 37) then
      _ctx.pw4 = (this.real(value) * 0.007874);

   end
   if (control == 38) then
      _ctx.lfo_rate = this.Util_map(this.real(value),0.000000,127.000000,(-0.400000),0.100000);

   end
   if (control == 39) then
      _ctx.lfo_shape = (0.023622 * this.real(value));

   end
   if (control == 40) then
      _ctx.lfo_pw = this.Util_map(this.real(value),0.000000,127.000000,(-1.000000),1.000000);

   end
   if (control == 41) then
      _ctx.lfo_cv = this.Util_map(this.real(value),0.000000,127.000000,(-0.100000),0.100000);

   end
   if (control == 42) then
      _ctx.lfo_flt = this.Util_map(this.real(value),0.000000,127.000000,(-0.300000),0.300000);

   end
   if (control == 43) then
      local _cond_208 = false;
      _cond_208 = (value > 0);
      if _cond_208 then
         _ctx.lfo_reset = 1.000000;
      else

         _ctx.lfo_reset = 0.000000;
      end

   end
   if (control == 44) then
      _ctx.flt_cut = this.Util_map(this.real(value),0.000000,127.000000,(-0.200000),0.500000);

   end
   if (control == 45) then
      _ctx.flt_res = (this.real(value) * 0.007874);

   end
   if (control == 46) then
      _ctx.flt_shape = ((value * 4) / 127);

   end
   if (control == 47) then
      _ctx.attack = (this.real(value) * 0.007874);

   end
   if (control == 48) then
      _ctx.decay = (this.real(value) * 0.007874);

   end
   if (control == 49) then
      _ctx.sustain = (this.real(value) * 0.007874);

   end
   if (control == 50) then
      _ctx.release = (this.real(value) * 0.007874);

   end

end

function this.Voice_4_default_init()
   return this.Voice_4__ctx_type_0_init();
end

function this.Voice_4_default(_ctx)

end


function this.process(ctx,cv,vel,gate) return this.Voice_4_process(ctx,cv,vel,gate) end
function this.noteOn(ctx,note,velocity,channel) return this.Voice_4_noteOn(ctx,note,velocity,channel) end
function this.noteOff(ctx,note,channel) return this.Voice_4_noteOff(ctx,note,channel) end
function this.controlChange(ctx,control,value,channel) return this.Voice_4_controlChange(ctx,control,value,channel) end
function this.init() return this.Voice_4_process_init() end
function this.default(ctx) return this.Voice_4_default(ctx) end
this.config = { inputs = 4, outputs = 1, noteon_inputs = 4, noteoff_inputs = 3, controlchange_inputs = 4, is_active = true }
return this
