
local this = {}
local ffi = require("ffi")
function this.ternary(cond,then_,else_) if cond then return then_ else return else_ end end
function this.eps()             return 1e-18; end
function this.pi()              return 3.1415926535897932384; end
function this.random()          return math.random(); end
function this.irandom()         return math.floor(math.random() * 4294967296); end
function this.clip(x,low,high)  return (this.ternary(x<low,low,this.ternary(x>high,high,x))); end
function this.real(x)           return x; end
function this.int(x)            local int_part,_ = math.modf(x) return int_part; end
function this.sin(x)            return math.sin(x); end
function this.cos(x)            return math.cos(x); end
function this.abs(x)            return math.abs(x); end
function this.exp(x)            return math.exp(x); end
function this.floor(x)          return math.floor(x); end
function this.tan(x)            return math.tan(x); end
function this.tanh(x)           return math.tanh(x); end
function this.sqrt(x)           return x; end
function this.set(a,i,v)        a[i+1]=v; end
function this.get(a,i)          return a[i+1]; end
function this.makeArray(size,v) local a = {}; for i=1,size do a[i]=v end return a; end
function this.wrap_array(a)     return a; end
function this.Util__ctx_type_0_init()
   local _ctx = {};
   _ctx.pre = false;
   return _ctx;

end

function this.Util_edge_init()
   return this.Util__ctx_type_0_init();
end

function this.Util_edge(_ctx,x)
   local ret = (x and (_ctx.pre == false));
   _ctx.pre = x;
   return ret;

end

function this.Util__ctx_type_1_init()
   local _ctx = {};
   _ctx.pre_x = 0.0000;
   return _ctx;

end

function this.Util_change_init()
   return this.Util__ctx_type_1_init();
end

function this.Util_change(_ctx,x)
   local v = (_ctx.pre_x ~= x);
   _ctx.pre_x = x;
   return v;

end

function this.Util_map(x,x0,x1,y0,y1)
   return ((((x + (- x0)) * (y1 + (- y0))) / (x1 + (- x0))) + y0);

end

function this.Util__ctx_type_3_init()
   local _ctx = {};
   _ctx.y1 = 0.0000;
   _ctx.x1 = 0.0000;
   return _ctx;

end

function this.Util_dcblock_init()
   return this.Util__ctx_type_3_init();
end

function this.Util_dcblock(_ctx,x0)
   local y0 = (x0 + (- _ctx.x1) + (_ctx.y1 * 0.9950));
   _ctx.x1 = x0;
   _ctx.y1 = y0;
   return y0;

end

function this.Util__ctx_type_4_init()
   local _ctx = {};
   _ctx.x = 0.0000;
   return _ctx;

end

function this.Util_smooth_init()
   return this.Util__ctx_type_4_init();
end

function this.Util_smooth(_ctx,input)
   _ctx.x = (_ctx.x + ((input + (- _ctx.x)) * 0.0050));
   return _ctx.x;

end

function this.Util__ctx_type_5_init()
   local _ctx = {};
   _ctx.x0 = 0.0000;
   return _ctx;

end

function this.Util_average2_init()
   return this.Util__ctx_type_5_init();
end

function this.Util_average2(_ctx,x1)
   local result = ((_ctx.x0 + x1) * 0.5000);
   _ctx.x0 = x1;
   return result;

end

function this.Util_cubic_clipper(x)
   if (x <= (-0.6667)) then
      return (-0.6667);

   else

      local _cond_20 = false;
      _cond_20 = (x >= 0.6667);
      if _cond_20 then
         return 0.6667;

      else

         return (x + ((-0.3333) * x * x * x));

      end

   end

end

local Util_pitchToRate_1024_c0 = {0.1898,0.1913,0.1987,0.2194,0.2657,0.3564,0.5207,0.8016,1.2628,1.9966,3.1355,4.8683,7.4613,11.2877,16.8680,24.9233,36.4485,52.8099,75.8766,108.1966,153.2316,215.6711,301.8494,420.3017,582.5003,803.8319,1104.8901,1513.1840,2065.3943,2810.3466,3812.9291,5159.2452,6963.3862};
local Util_pitchToRate_1024_c1 = {0.0109,0.0102,0.0083,0.0049,(-0.0009),(-0.0101),(-0.0238),(-0.0440),(-0.0730),(-0.1140),(-0.1713),(-0.2506),(-0.3594),(-0.5075),(-0.7082),(-0.9786),(-1.3412),(-1.8258),(-2.4711),(-3.3277),(-4.4616),(-5.9590),(-7.9317),(-10.5254),(-13.9291),(-18.3881),(-24.2200),(-31.8365),(-41.7700),(-54.7088),(-71.5420),(-93.4177),(-121.8166)};
local Util_pitchToRate_1024_c2 = {0.0004,0.0004,0.0006,0.0007,0.0009,0.0011,0.0014,0.0018,0.0022,0.0028,0.0035,0.0044,0.0056,0.0070,0.0088,0.0111,0.0139,0.0175,0.0220,0.0277,0.0348,0.0438,0.0551,0.0693,0.0872,0.1096,0.1379,0.1734,0.2181,0.2742,0.3449,0.4338,0.5455};
function this.Util_pitchToRate_1024(pitch)
   local index = this.clip(this.int((0.2441 * pitch)),0,31);
   return (Util_pitchToRate_1024_c0[index+1] + (pitch * (Util_pitchToRate_1024_c1[index+1] + (Util_pitchToRate_1024_c2[index+1] * pitch))));

end

local Util_pitchToRate_c0 = {0.0002,0.0002,0.0002,0.0002,0.0003,0.0003,0.0005,0.0008,0.0012,0.0019,0.0031,0.0048,0.0073,0.0110,0.0165,0.0243,0.0356,0.0516,0.0741,0.1057,0.1496,0.2106,0.2948,0.4105,0.5688,0.7850,1.0790,1.4777,2.0170,2.7445,3.7236,5.0383,6.8002};
local Util_pitchToRate_c1 = {0.0000,0.0000,0.0000,0.0000,(-0.0000),(-0.0000),(-0.0000),(-0.0000),(-0.0001),(-0.0001),(-0.0002),(-0.0002),(-0.0004),(-0.0005),(-0.0007),(-0.0010),(-0.0013),(-0.0018),(-0.0024),(-0.0032),(-0.0044),(-0.0058),(-0.0077),(-0.0103),(-0.0136),(-0.0180),(-0.0237),(-0.0311),(-0.0408),(-0.0534),(-0.0699),(-0.0912),(-0.1190)};
local Util_pitchToRate_c2 = {0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0001,0.0001,0.0001,0.0001,0.0001,0.0002,0.0002,0.0003,0.0003,0.0004,0.0005};
function this.Util_pitchToRate(pitch)
   local index = this.clip(this.int((0.2441 * pitch)),0,31);
   return (Util_pitchToRate_c0[index+1] + (pitch * (Util_pitchToRate_c1[index+1] + (Util_pitchToRate_c2[index+1] * pitch))));

end

function this.Util_cvToPitch(cv)
   return ((cv * 120.0000) + 24.0000);

end

local Util_cvToRate_1024_c0 = {0.7594,0.7629,0.7797,0.8257,0.9246,1.1124,1.4407,1.9834,2.8444,4.1683,6.1540,9.0732,13.2943,19.3136,27.7961,39.6283,55.9867,78.4269,108.9974,150.3878,206.1178,280.7811,380.3573,512.6116,687.6053,918.3474,1221.6261,1619.0668,2138.4785,2815.5636,3696.0898,4838.6433,6318.1165};
local Util_cvToRate_1024_c1 = {5.2456,4.9989,4.4031,3.3191,1.5645,(-1.0993),(-4.9822),(-10.4859),(-18.1280),(-28.5741),(-42.6774),(-61.5281),(-86.5167),(-119.4121),(-162.4604),(-218.5081),(-291.1571),(-384.9574),(-505.6483),(-660.4605),(-858.4912),(-1111.1728),(-1432.8575),(-1841.5435),(-2359.7804),(-3015.7941),(-3844.8864),(-4891.1724),(-6209.7399),(-7869.3288),(-9955.6558),(-12575.5384),(-15862.0069)};
local Util_cvToRate_1024_c2 = {20.1256,24.4576,29.7220,36.1196,43.8942,53.3423,64.8241,78.7774,95.7340,116.3405,141.3825,171.8147,208.7973,253.7404,308.3573,374.7304,455.3902,553.4117,672.5321,817.2928,993.2130,1206.9994,1466.8029,1782.5283,2166.2129,2632.4845,3199.1198,3887.7219,4724.5438,5741.4893,6977.3298,8479.1816,10304.3030};
function this.Util_cvToRate_1024(cv)
   local index = this.clip(this.int((34.4444 * cv)),0,31);
   return (Util_cvToRate_1024_c0[index+1] + (cv * (Util_cvToRate_1024_c1[index+1] + (Util_cvToRate_1024_c2[index+1] * cv))));

end

local Util_cvToRate_c0 = {0.0007,0.0007,0.0007,0.0007,0.0007,0.0007,0.0007,0.0007,0.0008,0.0008,0.0008,0.0008,0.0008,0.0008,0.0008,0.0008,0.0009,0.0009,0.0009,0.0010,0.0010,0.0011,0.0011,0.0012,0.0013,0.0014,0.0015,0.0016,0.0017,0.0019,0.0020,0.0022,0.0024,0.0027,0.0029,0.0032,0.0035,0.0039,0.0043,0.0047,0.0052,0.0057,0.0063,0.0070,0.0077,0.0085,0.0093,0.0102,0.0113,0.0124,0.0136,0.0150,0.0164,0.0180,0.0198,0.0217,0.0237,0.0260,0.0284,0.0311,0.0339,0.0371,0.0404,0.0441,0.0481,0.0524,0.0571,0.0621,0.0676,0.0735,0.0799,0.0867,0.0942,0.1022,0.1109,0.1202,0.1303,0.1411,0.1528,0.1654,0.1790,0.1936,0.2093,0.2262,0.2443,0.2639,0.2849,0.3074,0.3317,0.3577,0.3856,0.4156,0.4478,0.4823,0.5194,0.5591,0.6017,0.6473,0.6963,0.7487,0.8048,0.8650,0.9294,0.9983,1.0722,1.1512,1.2357,1.3261,1.4229,1.5263,1.6369,1.7552,1.8816,2.0167,2.1611,2.3154,2.4802,2.6562,2.8442,3.0450,3.2593,3.4881,3.7323,3.9930,4.2711,4.5678,4.8844,5.2221,5.5822};
local Util_cvToRate_c1 = {0.0051,0.0051,0.0051,0.0051,0.0050,0.0049,0.0048,0.0047,0.0046,0.0044,0.0042,0.0040,0.0037,0.0034,0.0031,0.0027,0.0023,0.0018,0.0012,0.0007,0.0000,(-0.0007),(-0.0015),(-0.0023),(-0.0033),(-0.0043),(-0.0055),(-0.0067),(-0.0080),(-0.0095),(-0.0111),(-0.0128),(-0.0146),(-0.0166),(-0.0188),(-0.0212),(-0.0237),(-0.0265),(-0.0294),(-0.0326),(-0.0360),(-0.0397),(-0.0437),(-0.0480),(-0.0526),(-0.0575),(-0.0628),(-0.0684),(-0.0745),(-0.0810),(-0.0880),(-0.0955),(-0.1035),(-0.1121),(-0.1212),(-0.1310),(-0.1415),(-0.1527),(-0.1647),(-0.1775),(-0.1911),(-0.2057),(-0.2212),(-0.2378),(-0.2555),(-0.2743),(-0.2944),(-0.3159),(-0.3387),(-0.3630),(-0.3889),(-0.4165),(-0.4459),(-0.4772),(-0.5105),(-0.5459),(-0.5836),(-0.6237),(-0.6663),(-0.7117),(-0.7599),(-0.8111),(-0.8656),(-0.9235),(-0.9850),(-1.0504),(-1.1198),(-1.1936),(-1.2719),(-1.3551),(-1.4434),(-1.5371),(-1.6366),(-1.7422),(-1.8543),(-1.9732),(-2.0994),(-2.2333),(-2.3753),(-2.5259),(-2.6856),(-2.8550),(-3.0346),(-3.2250),(-3.4269),(-3.6409),(-3.8677),(-4.1081),(-4.3629),(-4.6328),(-4.9189),(-5.2220),(-5.5430),(-5.8831),(-6.2434),(-6.6250),(-7.0291),(-7.4570),(-7.9102),(-8.3900),(-8.8981),(-9.4359),(-10.0053),(-10.6080),(-11.2460),(-11.9212),(-12.6358),(-13.3921),(-14.1924)};
local Util_cvToRate_c2 = {0.0183,0.0192,0.0201,0.0211,0.0222,0.0233,0.0245,0.0257,0.0270,0.0283,0.0297,0.0312,0.0328,0.0344,0.0361,0.0379,0.0398,0.0418,0.0439,0.0461,0.0484,0.0508,0.0533,0.0560,0.0588,0.0617,0.0648,0.0681,0.0715,0.0750,0.0788,0.0827,0.0868,0.0912,0.0957,0.1005,0.1055,0.1108,0.1163,0.1221,0.1282,0.1346,0.1414,0.1484,0.1558,0.1636,0.1718,0.1804,0.1894,0.1988,0.2088,0.2192,0.2302,0.2416,0.2537,0.2664,0.2797,0.2937,0.3083,0.3237,0.3399,0.3569,0.3747,0.3934,0.4131,0.4337,0.4553,0.4781,0.5020,0.5270,0.5534,0.5810,0.6100,0.6405,0.6725,0.7061,0.7413,0.7783,0.8172,0.8580,0.9009,0.9459,0.9931,1.0427,1.0948,1.1495,1.2069,1.2672,1.3305,1.3969,1.4667,1.5399,1.6168,1.6976,1.7824,1.8714,1.9649,2.0630,2.1660,2.2742,2.3878,2.5070,2.6322,2.7637,2.9017,3.0467,3.1988,3.3586,3.5263,3.7025,3.8874,4.0815,4.2854,4.4994,4.7241,4.9601,5.2078,5.4679,5.7410,6.0277,6.3287,6.6448,6.9767,7.3251,7.6910,8.0751,8.4784,8.9019,9.3465};
function this.Util_cvToRate(cv)
   local index = this.clip(this.int((141.1111 * cv)),0,127);
   return (Util_cvToRate_c0[index+1] + (cv * (Util_cvToRate_c1[index+1] + (Util_cvToRate_c2[index+1] * cv))));

end

function this.Util_pitchToCv(pitch)
   return (0.0083 * ((-24.0000) + pitch));

end

local Util_cvToperiod_c0 = {674.2460,671.5538,662.7618,646.7595,623.7994,594.8718,561.2983,524.4769,485.7314,446.2294,406.9474,368.6638,331.9687,297.2842,264.8877,234.9369,207.4931,182.5430,160.0169,139.8048,121.7696,105.7571,91.6051,79.1491,68.2272,58.6839,50.3717,43.1534,36.9020,31.5020,26.8485,22.8472,19.4138};
local Util_cvToperiod_c1 = {(-4656.6563),(-4481.9606),(-4198.6861),(-3855.7515),(-3487.1395),(-3115.8588),(-2756.9303),(-2419.6251),(-2109.1348),(-1827.8083),(-1576.0630),(-1353.0471),(-1157.1189),(-986.1863),(-837.9447),(-710.0391),(-600.1712),(-506.1666),(-426.0135),(-357.8822),(-300.1302),(-251.2989),(-210.1041),(-175.4235),(-146.2821),(-121.8379),(-101.3665),(-84.2477),(-69.9521),(-58.0293),(-48.0972),(-39.8328),(-32.9632)};
local Util_cvToperiod_c2 = {14548.8232,11715.3695,9433.7447,7596.4773,6117.0266,4925.7061,3966.4010,3193.9253,2571.8929,2071.0043,1667.6662,1342.8802,1081.3478,870.7500,701.1673,564.6116,454.6507,366.1053,294.8045,237.3899,191.1571,153.9283,123.9500,99.8102,80.3717,64.7189,52.1146,41.9650,33.7921,27.2109,21.9115,17.6441,14.2078};
function this.Util_cvToperiod(cv)
   local index = this.clip(this.int((31.0000 * cv)),0,31);
   return (Util_cvToperiod_c0[index+1] + (cv * (Util_cvToperiod_c1[index+1] + (Util_cvToperiod_c2[index+1] * cv))));

end

local Util_cvTokHz_c0 = {0.0327,0.0329,0.0340,0.0369,0.0432,0.0556,0.0777,0.1151,0.1756,0.2707,0.4165,0.6356,0.9592,1.4308,2.1100,3.0780,4.4457,6.3629,9.0319,12.7247,17.8056,24.7617,34.2420,47.1090,64.5069,87.9496,119.4362,161.6023,217.9151,292.9296,392.6192,524.8066,699.7215};
local Util_cvTokHz_c1 = {0.2257,0.2123,0.1792,0.1176,0.0158,(-0.1422),(-0.3775),(-0.7183),(-1.2018),(-1.8772),(-2.8091),(-4.0819),(-5.8060),(-8.1254),(-11.2270),(-15.3537),(-20.8198),(-28.0318),(-37.5145),(-49.9444),(-66.1924),(-87.3784),(-114.9404),(-150.7233),(-197.0916),(-257.0723),(-334.5377),(-434.4368),(-563.0898),(-728.5619),(-941.1373),(-1213.9213),(-1563.6033)};
local Util_cvTokHz_c2 = {0.8763,1.0883,1.3515,1.6784,2.0843,2.5884,3.2144,3.9919,4.9573,6.1563,7.6452,9.4943,11.7905,14.6422,18.1835,22.5813,28.0428,34.8252,43.2479,53.7078,66.6974,82.8287,102.8615,127.7393,158.6341,197.0010,244.6472,303.8170,377.2976,468.5499,581.8724,722.6028,897.3699};
function this.Util_cvTokHz(cv)
   local index = this.clip(this.int((31.0000 * cv)),0,31);
   return (Util_cvTokHz_c0[index+1] + (cv * (Util_cvTokHz_c1[index+1] + (Util_cvTokHz_c2[index+1] * cv))));

end

function this.Tricore__ctx_type_0_init()
   local _ctx = {};
   _ctx.reset_state = false;
   _ctx.reset_phase = 0.0000;
   _ctx.rate = 0.0000;
   _ctx.phase = 0.0000;
   _ctx.direction = false;
   _ctx._inst26 = this.Util__ctx_type_0_init();
   _ctx._inst25 = this.Util__ctx_type_0_init();
   _ctx._inst23 = this.Util__ctx_type_1_init();
   this.Tricore_default(_ctx);
   return _ctx;

end

function this.Tricore_process_init()
   return this.Tricore__ctx_type_0_init();
end

function this.Tricore_process(_ctx,cv,reset,disable)
   local out = 0.0000;
   if this.Util_change(_ctx._inst23,cv) then
      _ctx.rate = (4.0000 * this.Util_cvToRate_1024(cv));

   end
   local new_phase = 0.0;
   local _if_39 = 0.0;
   if _ctx.direction then
      _if_39 = _ctx.rate;
   else

      _if_39 = (- _ctx.rate);
   end
   new_phase = (_ctx.phase + _if_39);
   local bdisable = (disable > 0.5000);
   if (this.Util_edge(_ctx._inst25,(reset > 0.0000)) or this.Util_edge(_ctx._inst26,bdisable)) then
      _ctx.reset_phase = _ctx.phase;
      _ctx.reset_state = true;
      new_phase = 0.0000;

   end
   if (new_phase > 1024.0000) then
      new_phase = (1024.0000 + (- (new_phase + (-1024.0000))));
      _ctx.direction = false;

   else

      local _cond_41 = false;
      _cond_41 = (new_phase < (-1024.0000));
      if _cond_41 then
         _ctx.direction = true;

      end

   end
   if bdisable then
      _ctx.phase = 0.0000;
   else

      _ctx.phase = new_phase;
   end
   if _ctx.reset_state then
      local _cond_44 = false;
      _cond_44 = ((this.abs(_ctx.reset_phase) > 10.0000) or bdisable);
      if _cond_44 then
         local reset_speed = 0.0;
         if bdisable then
            reset_speed = 0.0100;
         else

            reset_speed = 0.5000;
         end
         _ctx.reset_phase = (_ctx.reset_phase + (- (_ctx.reset_phase * reset_speed)));

      else

         local _cond_43 = false;
         _cond_43 = (_ctx.reset_phase > 10.0000);
         if (not _cond_43) then
            _ctx.reset_phase = 0.0000;
         end
         _ctx.reset_state = false;
         _ctx.direction = true;

      end
      out = _ctx.reset_phase;

   end
   out = (out + _ctx.phase);
   return (out * 0.0010);

end

function this.Tricore_noteOn_init()
   return this.Tricore__ctx_type_0_init();
end

function this.Tricore_noteOn(_ctx,note,velocity,channel)

end

function this.Tricore_noteOff_init()
   return this.Tricore__ctx_type_0_init();
end

function this.Tricore_noteOff(_ctx,note,channel)

end

function this.Tricore_controlChange_init()
   return this.Tricore__ctx_type_0_init();
end

function this.Tricore_controlChange(_ctx,control,value,channel)

end

function this.Tricore_default_init()
   return this.Tricore__ctx_type_0_init();
end

function this.Tricore_default(_ctx)
   _ctx.rate = 0.7594;

end

local Saturate_soft_table_c0 = {(-4.1979),(-4.0802),(-3.9628),(-3.8458),(-3.7293),(-3.6134),(-3.4980),(-3.3832),(-3.2692),(-3.1558),(-3.0433),(-2.9317),(-2.8210),(-2.7112),(-2.6025),(-2.4949),(-2.3884),(-2.2832),(-2.1792),(-2.0766),(-1.9754),(-1.8756),(-1.7773),(-1.6806),(-1.5855),(-1.4921),(-1.4005),(-1.3106),(-1.2226),(-1.1365),(-1.0523),(-0.9702),(-0.8901),(-0.8120),(-0.7361),(-0.6624),(-0.5909),(-0.5217),(-0.4547),(-0.3901),(-0.3278),(-0.2678),(-0.2103),(-0.1552),(-0.1025),(-0.0523),(-0.0045),0.0408,0.0836,0.1240,0.1619,0.1974,0.2305,0.2611,0.2894,0.3152,0.3388,0.3600,0.3790,0.3958,0.4104,0.4228,0.4332,0.4416,0.4481,0.4526,0.4554,0.4564,0.4557,0.4535,0.4498,0.4446,0.4381,0.4304,0.4215,0.4115,0.4006,0.3888,0.3762,0.3629,0.3490,0.3346,0.3198,0.3047,0.2893,0.2737,0.2581,0.2425,0.2270,0.2117,0.1966,0.1818,0.1673,0.1533,0.1398,0.1267,0.1143,0.1024,0.0912,0.0806,0.0707,0.0616,0.0531,0.0453,0.0382,0.0319,0.0262,0.0212,0.0168,0.0131,0.0099,0.0073,0.0051,0.0034,0.0022,0.0013,0.0006,0.0003,0.0001,0.0000,0.0000,(-0.0000),(-0.0001),(-0.0003),(-0.0006),(-0.0013),(-0.0022),(-0.0034),(-0.0051),(-0.0073),(-0.0099),(-0.0131),(-0.0168),(-0.0212),(-0.0262),(-0.0319),(-0.0382),(-0.0453),(-0.0531),(-0.0616),(-0.0707),(-0.0806),(-0.0912),(-0.1024),(-0.1143),(-0.1267),(-0.1398),(-0.1533),(-0.1673),(-0.1818),(-0.1966),(-0.2117),(-0.2270),(-0.2425),(-0.2581),(-0.2737),(-0.2893),(-0.3047),(-0.3198),(-0.3346),(-0.3490),(-0.3629),(-0.3762),(-0.3888),(-0.4006),(-0.4115),(-0.4215),(-0.4304),(-0.4381),(-0.4446),(-0.4498),(-0.4535),(-0.4557),(-0.4564),(-0.4554),(-0.4526),(-0.4481),(-0.4416),(-0.4332),(-0.4228),(-0.4104),(-0.3958),(-0.3790),(-0.3600),(-0.3388),(-0.3152),(-0.2894),(-0.2611),(-0.2305),(-0.1974),(-0.1619),(-0.1240),(-0.0836),(-0.0408),0.0045,0.0523,0.1025,0.1552,0.2103,0.2678,0.3278,0.3901,0.4547,0.5217,0.5909,0.6624,0.7361,0.8120,0.8901,0.9702,1.0523,1.1365,1.2226,1.3106,1.4005,1.4921,1.5855,1.6806,1.7773,1.8756,1.9754,2.0766,2.1792,2.2832,2.3884,2.4949,2.6025,2.7112,2.8210,2.9317,3.0433,3.1558,3.2692,3.3832,3.4980,3.6134,3.7293,3.8458,3.9628,4.0802,4.1979,4.3160};
local Saturate_soft_table_c1 = {0.6763,0.6862,0.6962,0.7062,0.7162,0.7263,0.7364,0.7466,0.7568,0.7670,0.7772,0.7874,0.7977,0.8079,0.8182,0.8284,0.8386,0.8489,0.8590,0.8692,0.8793,0.8894,0.8994,0.9094,0.9192,0.9291,0.9388,0.9485,0.9580,0.9675,0.9768,0.9860,0.9951,1.0041,1.0129,1.0215,1.0300,1.0384,1.0465,1.0545,1.0622,1.0698,1.0772,1.0843,1.0912,1.0979,1.1043,1.1105,1.1165,1.1221,1.1275,1.1327,1.1375,1.1421,1.1463,1.1503,1.1540,1.1573,1.1604,1.1631,1.1655,1.1676,1.1694,1.1709,1.1720,1.1729,1.1734,1.1736,1.1734,1.1730,1.1723,1.1712,1.1699,1.1682,1.1663,1.1641,1.1616,1.1589,1.1559,1.1527,1.1493,1.1456,1.1418,1.1377,1.1335,1.1291,1.1245,1.1199,1.1151,1.1102,1.1052,1.1002,1.0951,1.0899,1.0848,1.0797,1.0746,1.0695,1.0645,1.0596,1.0547,1.0500,1.0454,1.0409,1.0366,1.0325,1.0286,1.0248,1.0213,1.0180,1.0150,1.0122,1.0097,1.0075,1.0055,1.0038,1.0025,1.0014,1.0006,1.0001,1.0000,1.0001,1.0006,1.0014,1.0025,1.0038,1.0055,1.0075,1.0097,1.0122,1.0150,1.0180,1.0213,1.0248,1.0286,1.0325,1.0366,1.0409,1.0454,1.0500,1.0547,1.0596,1.0645,1.0695,1.0746,1.0797,1.0848,1.0899,1.0951,1.1002,1.1052,1.1102,1.1151,1.1199,1.1245,1.1291,1.1335,1.1377,1.1418,1.1456,1.1493,1.1527,1.1559,1.1589,1.1616,1.1641,1.1663,1.1682,1.1699,1.1712,1.1723,1.1730,1.1734,1.1736,1.1734,1.1729,1.1720,1.1709,1.1694,1.1676,1.1655,1.1631,1.1604,1.1573,1.1540,1.1503,1.1463,1.1421,1.1375,1.1327,1.1275,1.1221,1.1165,1.1105,1.1043,1.0979,1.0912,1.0843,1.0772,1.0698,1.0622,1.0545,1.0465,1.0384,1.0300,1.0215,1.0129,1.0041,0.9951,0.9860,0.9768,0.9675,0.9580,0.9485,0.9388,0.9291,0.9192,0.9094,0.8994,0.8894,0.8793,0.8692,0.8590,0.8489,0.8386,0.8284,0.8182,0.8079,0.7977,0.7874,0.7772,0.7670,0.7568,0.7466,0.7364,0.7263,0.7162,0.7062,0.6962,0.6862,0.6763,0.6665};
local Saturate_soft_table_c2 = {0.0103,0.0105,0.0107,0.0110,0.0112,0.0114,0.0116,0.0118,0.0121,0.0123,0.0125,0.0128,0.0130,0.0132,0.0135,0.0137,0.0140,0.0142,0.0145,0.0147,0.0150,0.0152,0.0155,0.0157,0.0160,0.0163,0.0165,0.0168,0.0170,0.0173,0.0175,0.0178,0.0181,0.0183,0.0186,0.0188,0.0191,0.0193,0.0196,0.0198,0.0201,0.0203,0.0205,0.0208,0.0210,0.0212,0.0214,0.0217,0.0219,0.0221,0.0223,0.0224,0.0226,0.0228,0.0229,0.0231,0.0232,0.0234,0.0235,0.0236,0.0237,0.0238,0.0239,0.0239,0.0240,0.0240,0.0240,0.0241,0.0240,0.0240,0.0240,0.0239,0.0239,0.0238,0.0237,0.0236,0.0234,0.0233,0.0231,0.0229,0.0227,0.0224,0.0222,0.0219,0.0216,0.0213,0.0210,0.0206,0.0203,0.0199,0.0195,0.0190,0.0186,0.0181,0.0176,0.0171,0.0166,0.0161,0.0155,0.0149,0.0143,0.0137,0.0131,0.0125,0.0118,0.0111,0.0105,0.0098,0.0091,0.0083,0.0076,0.0069,0.0061,0.0054,0.0046,0.0039,0.0031,0.0023,0.0016,0.0008,0.0000,(-0.0008),(-0.0016),(-0.0023),(-0.0031),(-0.0039),(-0.0046),(-0.0054),(-0.0061),(-0.0069),(-0.0076),(-0.0083),(-0.0091),(-0.0098),(-0.0105),(-0.0111),(-0.0118),(-0.0125),(-0.0131),(-0.0137),(-0.0143),(-0.0149),(-0.0155),(-0.0161),(-0.0166),(-0.0171),(-0.0176),(-0.0181),(-0.0186),(-0.0190),(-0.0195),(-0.0199),(-0.0203),(-0.0206),(-0.0210),(-0.0213),(-0.0216),(-0.0219),(-0.0222),(-0.0224),(-0.0227),(-0.0229),(-0.0231),(-0.0233),(-0.0234),(-0.0236),(-0.0237),(-0.0238),(-0.0239),(-0.0239),(-0.0240),(-0.0240),(-0.0240),(-0.0241),(-0.0240),(-0.0240),(-0.0240),(-0.0239),(-0.0239),(-0.0238),(-0.0237),(-0.0236),(-0.0235),(-0.0234),(-0.0232),(-0.0231),(-0.0229),(-0.0228),(-0.0226),(-0.0224),(-0.0223),(-0.0221),(-0.0219),(-0.0217),(-0.0214),(-0.0212),(-0.0210),(-0.0208),(-0.0205),(-0.0203),(-0.0201),(-0.0198),(-0.0196),(-0.0193),(-0.0191),(-0.0188),(-0.0186),(-0.0183),(-0.0181),(-0.0178),(-0.0175),(-0.0173),(-0.0170),(-0.0168),(-0.0165),(-0.0163),(-0.0160),(-0.0157),(-0.0155),(-0.0152),(-0.0150),(-0.0147),(-0.0145),(-0.0142),(-0.0140),(-0.0137),(-0.0135),(-0.0132),(-0.0130),(-0.0128),(-0.0125),(-0.0123),(-0.0121),(-0.0118),(-0.0116),(-0.0114),(-0.0112),(-0.0110),(-0.0107),(-0.0105),(-0.0103),(-0.0101)};
function this.Saturate_soft_table(x)
   local index = this.clip(this.int((5.0000 * (x + 24.0000))),0,240);
   return (Saturate_soft_table_c0[index+1] + (x * (Saturate_soft_table_c1[index+1] + (Saturate_soft_table_c2[index+1] * x))));

end

function this.Saturate_soft_process(x)
   return this.Saturate_soft_table(x);

end

function this.Saturate_soft_noteOn(note,velocity,channel)

end

function this.Saturate_soft_noteOff(note,channel)

end

function this.Saturate_soft_controlChange(control,value,channel)

end

function this.Saturate_soft_default()

end

local Svf_calc_g_c0 = {0.0023,0.0023,0.0023,0.0023,0.0023,0.0023,0.0023,0.0024,0.0024,0.0024,0.0024,0.0024,0.0025,0.0025,0.0026,0.0026,0.0027,0.0028,0.0029,0.0030,0.0032,0.0033,0.0035,0.0037,0.0040,0.0043,0.0046,0.0050,0.0054,0.0058,0.0064,0.0070,0.0076,0.0084,0.0092,0.0101,0.0111,0.0122,0.0135,0.0148,0.0164,0.0180,0.0199,0.0219,0.0242,0.0266,0.0293,0.0323,0.0355,0.0391,0.0429,0.0472,0.0518,0.0569,0.0624,0.0684,0.0750,0.0821,0.0899,0.0983,0.1075,0.1175,0.1284,0.1402,0.1530,0.1669,0.1820,0.1984,0.2162,0.2355,0.2564,0.2792,0.3038,0.3306,0.3596,0.3911,0.4254,0.4626,0.5030,0.5469,0.5947,0.6468,0.7035,0.7653,0.8328,0.9065,0.9872,1.0756,1.1726,1.2792,1.3966,1.5261,1.6692,1.8278,2.0039,2.2001,2.4192,2.6647,2.9406,3.2518,3.6042,4.0048,4.4620,4.9863,5.5904,6.2899,7.1044,8.0582,9.1821,10.5152,12.1075,14.0241,16.3500,19.1982,22.7199,27.1215,32.6882,39.8219,49.0992,61.3671,77.9007,100.6758,132.8585,179.7241,250.4813,362.1346,548.3403,881.8452,1539.1806};
local Svf_calc_g_c1 = {0.0161,0.0161,0.0160,0.0159,0.0157,0.0155,0.0151,0.0148,0.0143,0.0138,0.0132,0.0124,0.0116,0.0107,0.0096,0.0084,0.0071,0.0056,0.0039,0.0021,0.0000,(-0.0022),(-0.0047),(-0.0074),(-0.0103),(-0.0136),(-0.0171),(-0.0210),(-0.0252),(-0.0298),(-0.0348),(-0.0402),(-0.0460),(-0.0523),(-0.0592),(-0.0666),(-0.0746),(-0.0832),(-0.0925),(-0.1026),(-0.1134),(-0.1250),(-0.1375),(-0.1510),(-0.1654),(-0.1810),(-0.1976),(-0.2155),(-0.2348),(-0.2554),(-0.2774),(-0.3011),(-0.3264),(-0.3536),(-0.3827),(-0.4138),(-0.4471),(-0.4827),(-0.5208),(-0.5616),(-0.6051),(-0.6518),(-0.7016),(-0.7549),(-0.8118),(-0.8727),(-0.9378),(-1.0074),(-1.0818),(-1.1614),(-1.2465),(-1.3375),(-1.4349),(-1.5392),(-1.6508),(-1.7703),(-1.8984),(-2.0358),(-2.1832),(-2.3414),(-2.5113),(-2.6941),(-2.8907),(-3.1026),(-3.3311),(-3.5779),(-3.8448),(-4.1338),(-4.4473),(-4.7880),(-5.1589),(-5.5636),(-6.0061),(-6.4911),(-7.0241),(-7.6115),(-8.2606),(-8.9804),(-9.7813),(-10.6754),(-11.6777),(-12.8057),(-14.0806),(-15.5284),(-17.1805),(-19.0754),(-21.2608),(-23.7963),(-26.7561),(-30.2344),(-34.3516),(-39.2625),(-45.1691),(-52.3377),(-61.1239),(-72.0097),(-85.6583),(-102.9990),(-125.3594),(-154.6792),(-193.8640),(-247.3946),(-322.4157),(-430.7744),(-593.0511),(-847.0657),(-1267.3153),(-2014.0522),(-3474.2930)};
local Svf_calc_g_c2 = {0.0574,0.0602,0.0632,0.0664,0.0697,0.0732,0.0768,0.0807,0.0847,0.0889,0.0934,0.0980,0.1029,0.1081,0.1135,0.1191,0.1251,0.1313,0.1379,0.1448,0.1520,0.1596,0.1676,0.1760,0.1848,0.1940,0.2037,0.2139,0.2245,0.2358,0.2475,0.2599,0.2729,0.2865,0.3009,0.3159,0.3317,0.3483,0.3657,0.3840,0.4032,0.4234,0.4446,0.4668,0.4902,0.5148,0.5405,0.5676,0.5961,0.6260,0.6574,0.6904,0.7250,0.7614,0.7997,0.8399,0.8822,0.9267,0.9734,1.0225,1.0742,1.1285,1.1856,1.2458,1.3091,1.3757,1.4458,1.5197,1.5975,1.6795,1.7659,1.8571,1.9533,2.0548,2.1621,2.2754,2.3953,2.5222,2.6565,2.7989,2.9500,3.1104,3.2809,3.4624,3.6559,3.8624,4.0830,4.3192,4.5726,4.8447,5.1378,5.4540,5.7960,6.1669,6.5700,7.0097,7.4905,8.0182,8.5993,9.2415,9.9542,10.7483,11.6371,12.6366,13.7661,15.0493,16.5153,18.2002,20.1489,22.4179,25.0793,28.2251,31.9750,36.4857,41.9658,48.6963,57.0623,67.6004,81.0738,98.5920,121.8091,153.2636,196.9841,259.6186,352.6611,497.1339,734.2504,1152.2471,1963.2117};
function this.Svf_calc_g(cv)
   local index = this.clip(this.int((141.1111 * cv)),0,127);
   return (Svf_calc_g_c0[index+1] + (cv * (Svf_calc_g_c1[index+1] + (Svf_calc_g_c2[index+1] * cv))));

end

function this.Svf__ctx_type_1_init()
   local _ctx = {};
   _ctx.z2 = 0.0000;
   _ctx.z1 = 0.0000;
   _ctx.inv_den = 0.0000;
   _ctx.g = 0.0000;
   _ctx._inst54 = this.Util__ctx_type_1_init();
   _ctx._inst53 = this.Util__ctx_type_1_init();
   _ctx.R = 0.0000;
   this.Svf_default(_ctx);
   return _ctx;

end

function this.Svf_process_init()
   return this.Svf__ctx_type_1_init();
end

function this.Svf_process(_ctx,x,cv,q,sel)
   q = (q + 0.5000);
   if (this.Util_change(_ctx._inst53,cv) or this.Util_change(_ctx._inst54,q)) then
      _ctx.g = this.Svf_calc_g(cv);
      _ctx.R = (1.0000 / (2.0000 * (q + 0.0000)));
      _ctx.inv_den = (1.0000 / (1.0000 + (2.0000 * _ctx.R * _ctx.g) + (_ctx.g * _ctx.g)));

   end
   local high = ((x + (- (((2.0000 * _ctx.R) + _ctx.g) * _ctx.z1)) + (- _ctx.z2)) * _ctx.inv_den);
   local band = ((_ctx.g * high) + _ctx.z1);
   local low = ((_ctx.g * band) + _ctx.z2);
   local notch = (low + high);
   _ctx.z1 = ((_ctx.g * high) + band);
   _ctx.z2 = ((_ctx.g * band) + low);
   local output = 0.0;
   if (sel == 0) then
      output = low;
   else

      local _cond_62 = false;
      _cond_62 = (sel == 1);
      if _cond_62 then
         output = high;
      else

         local _cond_63 = false;
         _cond_63 = (sel == 2);
         if _cond_63 then
            output = band;
         else

            output = notch;
         end

      end

   end
   return this.Saturate_soft_process(output);

end

function this.Svf_noteOn_init()
   return this.Svf__ctx_type_1_init();
end

function this.Svf_noteOn(_ctx,note,velocity,channel)

end

function this.Svf_noteOff_init()
   return this.Svf__ctx_type_1_init();
end

function this.Svf_noteOff(_ctx,note,channel)

end

function this.Svf_controlChange_init()
   return this.Svf__ctx_type_1_init();
end

function this.Svf_controlChange(_ctx,control,value,channel)

end

function this.Svf_default_init()
   return this.Svf__ctx_type_1_init();
end

function this.Svf_default(_ctx)
   _ctx.g = 0.0023;
   _ctx.R = 1.0000;
   _ctx.inv_den = (1.0000 / (1.0000 + (_ctx.g * _ctx.g)));

end

local Saturate_table_c0 = {};
local Saturate_table_c1 = {};
local Saturate_table_c2 = {};
function this.Saturate_table(x)
   local index = this.clip(this.int((5.0000 * (x + 24.0000))),0,240);
   return (Saturate_table_c0[index+1] + (x * (Saturate_table_c1[index+1] + (Saturate_table_c2[index+1] * x))));

end

function this.Saturate_process(x)
   return this.Saturate_table(x);

end

function this.Saturate_noteOn(note,velocity,channel)

end

function this.Saturate_noteOff(note,channel)

end

function this.Saturate_controlChange(control,value,channel)

end

function this.Saturate_default()

end

function this.Lfo__ctx_type_0_init()
   local _ctx = {};
   _ctx.x4 = 0.0000;
   _ctx.x3 = 0.0000;
   _ctx.x2 = 0.0000;
   return _ctx;

end

function this.Lfo_soft_init()
   return this.Lfo__ctx_type_0_init();
end

function this.Lfo_soft(_ctx,x1)
   local o = ((x1 + _ctx.x2 + _ctx.x3 + _ctx.x4) * 0.2500);
   local _tmp_81_0 = x1;
   local _tmp_81_1 = _ctx.x2;
   local _tmp_81_2 = _ctx.x3;
   _ctx.x2 = _tmp_81_0;
   _ctx.x3 = _tmp_81_1;
   _ctx.x4 = _tmp_81_2;
   return o;

end

function this.Lfo__ctx_type_1_init()
   local _ctx = {};
   _ctx.rate = 0.0000;
   _ctx.phase = 0.0000;
   _ctx._inst76 = this.Lfo__ctx_type_0_init();
   _ctx._inst74 = this.Util__ctx_type_0_init();
   _ctx._inst72 = this.Util__ctx_type_1_init();
   return _ctx;

end

function this.Lfo_process_init()
   return this.Lfo__ctx_type_1_init();
end

function this.Lfo_process(_ctx,cv,shape,reset)
   if this.Util_change(_ctx._inst72,cv) then
      _ctx.rate = this.Util_cvToRate((cv + (-0.3000)));

   end
   _ctx.phase = (_ctx.phase + _ctx.rate);
   if (_ctx.phase > 2.0000) then
      _ctx.phase = (_ctx.phase + (-2.0000));
   end
   local breset = (reset > 0.0000);
   if this.Util_edge(_ctx._inst74,breset) then
      _ctx.phase = 0.0000;

   end
   local tmp = (_ctx.phase + (-1.0000));
   local o = 0.0;
   if (shape < 1.0000) then
      o = tmp;
   else

      local _cond_86 = false;
      _cond_86 = (shape < 2.0000);
      if _cond_86 then
         o = ((this.abs(tmp) * 2.0000) + (-1.0000));
      else

         local _cond_87 = false;
         _cond_87 = (tmp > 0.0000);
         if _cond_87 then
            o = 1.0000;
         else

            o = 0.0000;
         end

      end

   end
   return this.Lfo_soft(_ctx._inst76,o);

end

function this.Lfo_noteOn_init()
   return this.Lfo__ctx_type_1_init();
end

function this.Lfo_noteOn(_ctx,note,velocity,channel)

end

function this.Lfo_noteOff_init()
   return this.Lfo__ctx_type_1_init();
end

function this.Lfo_noteOff(_ctx,note,channel)

end

function this.Lfo_controlChange_init()
   return this.Lfo__ctx_type_1_init();
end

function this.Lfo_controlChange(_ctx,control,value,channel)

end

function this.Lfo_default_init()
   return this.Lfo__ctx_type_1_init();
end

function this.Lfo_default(_ctx)

end

local Tables_nsine_c0 = {0.0000,(-0.0001),(-0.0003),(-0.0008),(-0.0017),(-0.0032),(-0.0052),(-0.0079),(-0.0114),(-0.0158),(-0.0210),(-0.0271),(-0.0342),(-0.0422),(-0.0512),(-0.0610),(-0.0717),(-0.0832),(-0.0953),(-0.1081),(-0.1212),(-0.1346),(-0.1481),(-0.1614),(-0.1745),(-0.1869),(-0.1985),(-0.2090),(-0.2180),(-0.2253),(-0.2305),(-0.2333),(-0.2333),(-0.2301),(-0.2234),(-0.2127),(-0.1978),(-0.1781),(-0.1533),(-0.1230),(-0.0868),(-0.0442),0.0049,0.0612,0.1248,0.1961,0.2755,0.3632,0.4596,0.5648,0.6791,0.8026,0.9356,1.0780,1.2301,1.3918,1.5632,1.7440,1.9344,2.1341,2.3429,2.5605,2.7867,3.0211,3.2633,3.5128,3.7692,4.0317,4.2999,4.5730,4.8502,5.1309,5.4141,5.6989,5.9845,6.2698,6.5537,6.8353,7.1134,7.3868,7.6544,7.9149,8.1671,8.4097,8.6415,8.8611,9.0672,9.2586,9.4338,9.5915,9.7305,9.8495,9.9471,10.0221,10.0733,10.0994,10.0994,10.0721,10.0164,9.9313,9.8159,9.6693,9.4907,9.2793,9.0345,8.7557,8.4425,8.0944,7.7112,7.2927,6.8388,6.3495,5.8250,5.2655,4.6714,4.0433,3.3817,2.6874,1.9613,1.2043,0.4176,(-0.3976),(-1.2398),(-2.1076),(-2.9993),(-3.9132),(-4.8475),(-5.8000),(-6.7688)};
local Tables_nsine_c1 = {6.2844,6.2996,6.3297,6.3746,6.4340,6.5074,6.5943,6.6940,6.8059,6.9290,7.0625,7.2053,7.3563,7.5144,7.6782,7.8464,8.0176,8.1904,8.3632,8.5345,8.7027,8.8660,9.0230,9.1718,9.3108,9.4382,9.5524,9.6517,9.7343,9.7987,9.8432,9.8662,9.8661,9.8416,9.7911,9.7133,9.6069,9.4708,9.3038,9.1048,8.8731,8.6077,8.3079,7.9733,7.6032,7.1974,6.7556,6.2778,5.7639,5.2143,4.6292,4.0091,3.3546,2.6664,1.9455,1.1928,0.4096,(-0.4028),(-1.2430),(-2.1093),(-3.0001),(-3.9135),(-4.8475),(-5.8000),(-6.7688),(-7.7516),(-8.7459),(-9.7491),(-10.7586),(-11.7718),(-12.7858),(-13.7977),(-14.8046),(-15.8036),(-16.7915),(-17.7652),(-18.7218),(-19.6579),(-20.5706),(-21.4567),(-22.3129),(-23.1363),(-23.9238),(-24.6722),(-25.3786),(-26.0400),(-26.6536),(-27.2167),(-27.7264),(-28.1802),(-28.5757),(-28.9103),(-29.1820),(-29.3885),(-29.5279),(-29.5984),(-29.5984),(-29.5263),(-29.3808),(-29.1609),(-28.8655),(-28.4940),(-28.0458),(-27.5204),(-26.9179),(-26.2383),(-25.4819),(-24.6492),(-23.7408),(-22.7579),(-21.7015),(-20.5731),(-19.3742),(-18.1068),(-16.7728),(-15.3745),(-13.9145),(-12.3953),(-10.8200),(-9.1916),(-7.5133),(-5.7887),(-4.0215),(-2.2154),(-0.3744),1.4974,3.3955,5.3156,7.2532};
local Tables_nsine_c2 = {(-0.4844),(-1.4520),(-2.4162),(-3.3745),(-4.3247),(-5.2644),(-6.1915),(-7.1037),(-7.9987),(-8.8745),(-9.7289),(-10.5599),(-11.3654),(-12.1436),(-12.8925),(-13.6103),(-14.2953),(-14.9460),(-15.5606),(-16.1377),(-16.6759),(-17.1740),(-17.6307),(-18.0449),(-18.4156),(-18.7420),(-19.0232),(-19.2586),(-19.4476),(-19.5898),(-19.6847),(-19.7323),(-19.7323),(-19.6847),(-19.5898),(-19.4476),(-19.2586),(-19.0232),(-18.7420),(-18.4156),(-18.0449),(-17.6307),(-17.1740),(-16.6759),(-16.1377),(-15.5606),(-14.9460),(-14.2953),(-13.6103),(-12.8925),(-12.1436),(-11.3654),(-10.5599),(-9.7289),(-8.8745),(-7.9987),(-7.1037),(-6.1915),(-5.2644),(-4.3247),(-3.3745),(-2.4162),(-1.4520),(-0.4844),0.4844,1.4520,2.4162,3.3745,4.3247,5.2644,6.1915,7.1037,7.9987,8.8745,9.7289,10.5599,11.3654,12.1436,12.8925,13.6103,14.2953,14.9460,15.5606,16.1377,16.6759,17.1740,17.6307,18.0449,18.4156,18.7420,19.0232,19.2586,19.4476,19.5898,19.6847,19.7323,19.7323,19.6847,19.5898,19.4476,19.2586,19.0232,18.7420,18.4156,18.0449,17.6307,17.1740,16.6759,16.1377,15.5606,14.9460,14.2953,13.6103,12.8925,12.1436,11.3654,10.5599,9.7289,8.8745,7.9987,7.1037,6.1915,5.2644,4.3247,3.3745,2.4162,1.4520,0.4844,(-0.4844)};
function this.Tables_nsine(x)
   local index = this.clip(this.int((127.0000 * x)),0,127);
   return (Tables_nsine_c0[index+1] + (x * (Tables_nsine_c1[index+1] + (Tables_nsine_c2[index+1] * x))));

end

function this.Phase__ctx_type_0_init()
   local _ctx = {};
   _ctx.rate = 0.0000;
   _ctx.phase = 0.0000;
   _ctx._inst92 = this.Util__ctx_type_0_init();
   _ctx._inst90 = this.Util__ctx_type_1_init();
   this.Phase_default(_ctx);
   return _ctx;

end

function this.Phase_process_init()
   return this.Phase__ctx_type_0_init();
end

function this.Phase_process(_ctx,cv,reset)
   if this.Util_change(_ctx._inst90,cv) then
      _ctx.rate = this.Util_cvToRate_1024(cv);

   end
   if this.Util_edge(_ctx._inst92,(reset > 0.5000)) then
      _ctx.phase = 0.0000;
   else

      _ctx.phase = (_ctx.phase + _ctx.rate);
   end
   if (_ctx.phase > 1024.0000) then
      _ctx.phase = (_ctx.phase + (-1024.0000));
   end
   return (_ctx.phase * 0.0010);

end

function this.Phase_noteOn_init()
   return this.Phase__ctx_type_0_init();
end

function this.Phase_noteOn(_ctx,note,velocity,channel)

end

function this.Phase_noteOff_init()
   return this.Phase__ctx_type_0_init();
end

function this.Phase_noteOff(_ctx,note,channel)

end

function this.Phase_controlChange_init()
   return this.Phase__ctx_type_0_init();
end

function this.Phase_controlChange(_ctx,control,value,channel)

end

function this.Phase_default_init()
   return this.Phase__ctx_type_0_init();
end

function this.Phase_default(_ctx)
   _ctx.rate = 0.7594;

end

function this.Blit__ctx_type_0_init()
   local _ctx = {};
   _ctx.scale = 0.0000;
   _ctx.m = 0;
   _ctx._inst101 = this.Util__ctx_type_1_init();
   this.Blit_pulse_start(_ctx);
   return _ctx;

end

function this.Blit_pulse_train_init()
   return this.Blit__ctx_type_0_init();
end

function this.Blit_pulse_train(_ctx,cv,phase)
   if this.Util_change(_ctx._inst101,cv) then
      _ctx.m = ((2 * this.int(this.Util_cvToperiod(cv))) + 1);
      _ctx.scale = (2.0000 * this.Util_cvToperiod(cv));

   end
   local pi_phase = (phase * 0.5000);
   local denominator = this.Tables_nsine(pi_phase);
   local out = 0.0000;
   if (denominator <= 0.0000) then
      out = 1.0000;

   else

      local m_phase = 0.0;
      m_phase = ((this.real(_ctx.m) * pi_phase) % 1.0000);
      local numerator = 0.0;
      numerator = this.Tables_nsine(m_phase);
      out = (numerator / (_ctx.scale * denominator));

   end
   return out;

end

function this.Blit_pulse_start_init()
   return this.Blit__ctx_type_0_init();
end

function this.Blit_pulse_start(_ctx)
   _ctx.m = 1349;
   _ctx.scale = 1349.4921;

end

function this.Blit__ctx_type_1_init()
   local _ctx = {};
   _ctx.state_saw = 0.0000;
   _ctx.state_pulse = 0.0000;
   _ctx.rate = 0.0000;
   _ctx.output = 0.0000;
   _ctx._inst117 = this.Util__ctx_type_3_init();
   _ctx._inst114 = this.Blit__ctx_type_0_init();
   _ctx._inst113 = this.Blit__ctx_type_0_init();
   _ctx._inst111 = this.Phase__ctx_type_0_init();
   _ctx._inst109 = this.Util__ctx_type_1_init();
   this.Blit_init(_ctx);
   return _ctx;

end

function this.Blit_osc_blit_init()
   return this.Blit__ctx_type_1_init();
end

function this.Blit_osc_blit(_ctx,cv,pw,wave)
   local fixed_cv = 0.0000;
   if (wave < 1.0000) then
      fixed_cv = cv;

   else

      fixed_cv = (cv + (-0.1000));

   end
   if this.Util_change(_ctx._inst109,fixed_cv) then
      _ctx.rate = this.Util_cvToRate(fixed_cv);

   end
   local phase = this.Phase_process(_ctx._inst111,fixed_cv,0.0000);
   local shift05 = (0.5000 + (pw * 0.4900));
   local shift = (phase + shift05);
   if (shift > 1.0000) then
      shift = (shift + (-1.0000));

   end
   local pulse1 = this.Blit_pulse_train(_ctx._inst113,fixed_cv,phase);
   local pulse2 = this.Blit_pulse_train(_ctx._inst114,fixed_cv,shift);
   _ctx.state_pulse = ((_ctx.state_pulse * 0.9995) + pulse1 + (- pulse2));
   _ctx.state_saw = ((_ctx.state_saw * 0.9995) + (((pulse1 + pulse2 + ((-2.0000) * _ctx.rate)) / shift05) * 0.5000));
   if (wave < 1.0000) then
      _ctx.output = _ctx.state_pulse;

   else

      _ctx.output = (2.0000 * _ctx.state_saw);

   end
   _ctx.output = this.Util_dcblock(_ctx._inst117,_ctx.output);
   return _ctx.output;

end

function this.Blit_init_init()
   return this.Blit__ctx_type_1_init();
end

function this.Blit_init(_ctx)
   _ctx.rate = 0.0007;

end

function this.Blit__ctx_type_2_init()
   local _ctx = {};
   _ctx._inst120 = this.Blit__ctx_type_1_init();
   return _ctx;

end

function this.Blit_process_init()
   return this.Blit__ctx_type_2_init();
end

function this.Blit_process(_ctx,cv,pw,wave)
   return this.Blit_osc_blit(_ctx._inst120,cv,pw,wave);

end

function this.Blit_noteOn_init()
   return this.Blit__ctx_type_2_init();
end

function this.Blit_noteOn(_ctx,note,velocity,channel)

end

function this.Blit_noteOff_init()
   return this.Blit__ctx_type_2_init();
end

function this.Blit_noteOff(_ctx,note,channel)

end

function this.Blit_controlChange_init()
   return this.Blit__ctx_type_2_init();
end

function this.Blit_controlChange(_ctx,control,value,channel)

end

function this.Blit_default_init()
   return this.Blit__ctx_type_2_init();
end

function this.Blit_default(_ctx)

end

function this.Adsr__ctx_type_0_init()
   local _ctx = {};
   _ctx.target = 0.0000;
   _ctx.state = 0;
   _ctx.scale = 0.0000;
   _ctx.rate = 0.0000;
   _ctx.out = 0.0000;
   _ctx._inst140 = this.Util__ctx_type_4_init();
   _ctx._inst133 = this.Util__ctx_type_0_init();
   return _ctx;

end

function this.Adsr_do_init()
   return this.Adsr__ctx_type_0_init();
end

function this.Adsr_do(_ctx,gate,a,d,s,r)
   local a_rate = (1.0000 / ((100.0000 * a) + 0.0100));
   local d_rate = (1.0000 / ((100.0000 * d) + 0.0100));
   local r_rate = (1.0000 / ((100.0000 * r) + 0.0100));
   _ctx.out = (_ctx.out + ((_ctx.target + (- _ctx.out)) * _ctx.rate * 0.0040));
   local bgate = (gate > 0.0000);
   if (_ctx.state == 0) then
      local _cond_151 = false;
      _cond_151 = this.Util_edge(_ctx._inst133,bgate);
      if _cond_151 then
         _ctx.state = 1;
         _ctx.scale = (gate * 0.2000);

      end
      _ctx.rate = r_rate;
      _ctx.target = 0.0000;

   end
   if (_ctx.state == 1) then
      local _cond_153 = false;
      _cond_153 = (bgate == false);
      if _cond_153 then
         _ctx.state = 0;

      end
      local _cond_154 = false;
      _cond_154 = (_ctx.out > 1024.0000);
      if _cond_154 then
         _ctx.state = 2;

      end
      _ctx.rate = a_rate;
      _ctx.target = 1228.8000;

   end
   if (_ctx.state == 2) then
      local _cond_156 = false;
      _cond_156 = (bgate == false);
      if _cond_156 then
         _ctx.state = 0;

      end
      _ctx.rate = d_rate;
      _ctx.target = (s * 1024.0000);

   end
   return (this.Util_smooth(_ctx._inst140,_ctx.scale) * this.clip((_ctx.out * 0.0010),0.0000,1.0000));

end

function this.Adsr__ctx_type_1_init()
   local _ctx = {};
   _ctx.knob4 = 0.0000;
   _ctx.knob3 = 0.0000;
   _ctx.knob2 = 0.0000;
   _ctx.knob1 = 0.0000;
   _ctx._inst142 = this.Adsr__ctx_type_0_init();
   return _ctx;

end

function this.Adsr_process_init()
   return this.Adsr__ctx_type_1_init();
end

function this.Adsr_process(_ctx,gate)
   return this.Adsr_do(_ctx._inst142,gate,_ctx.knob1,_ctx.knob2,_ctx.knob3,_ctx.knob4);

end

function this.Adsr_noteOn_init()
   return this.Adsr__ctx_type_1_init();
end

function this.Adsr_noteOn(_ctx,note,velocity,channel)

end

function this.Adsr_noteOff_init()
   return this.Adsr__ctx_type_1_init();
end

function this.Adsr_noteOff(_ctx,note,channel)

end

function this.Adsr_controlChange_init()
   return this.Adsr__ctx_type_1_init();
end

function this.Adsr_controlChange(_ctx,control,value,channel)
   if (control == 1) then
      _ctx.knob1 = (this.real(value) * 0.0079);

   end
   if (control == 2) then
      _ctx.knob2 = (this.real(value) * 0.0079);

   end
   if (control == 3) then
      _ctx.knob3 = (this.real(value) * 0.0079);

   end
   if (control == 4) then
      _ctx.knob4 = (this.real(value) * 0.0079);

   end

end

function this.Adsr_default_init()
   return this.Adsr__ctx_type_1_init();
end

function this.Adsr_default(_ctx)
   _ctx.knob1 = 0.0000;
   _ctx.knob2 = 0.5000;
   _ctx.knob3 = 1.0000;
   _ctx.knob4 = 0.5000;

end

function this.Voice_4__ctx_type_0_init()
   local _ctx = {};
   _ctx.sustain = 0.0000;
   _ctx.release = 0.0000;
   _ctx.pw4 = 0.0000;
   _ctx.pw3 = 0.0000;
   _ctx.pw2 = 0.0000;
   _ctx.pw1 = 0.0000;
   _ctx.lfo_shape = 0.0000;
   _ctx.lfo_reset = 0.0000;
   _ctx.lfo_rate = 0.0000;
   _ctx.lfo_pw = 0.0000;
   _ctx.lfo_flt = 0.0000;
   _ctx.lfo_cv = 0.0000;
   _ctx.level4 = 0.0000;
   _ctx.level3 = 0.0000;
   _ctx.level2 = 0.0000;
   _ctx.level1 = 0.0000;
   _ctx.flt_shape = 0;
   _ctx.flt_res = 0.0000;
   _ctx.flt_cut = 0.0000;
   _ctx.decay = 0.0000;
   _ctx.attack = 0.0000;
   _ctx._inst169 = this.Adsr__ctx_type_0_init();
   _ctx._inst168 = this.Svf__ctx_type_1_init();
   _ctx._inst167 = this.Tricore__ctx_type_0_init();
   _ctx._inst166 = this.Blit__ctx_type_2_init();
   _ctx._inst165 = this.Blit__ctx_type_2_init();
   _ctx._inst164 = this.Blit__ctx_type_2_init();
   _ctx._inst163 = this.Lfo__ctx_type_1_init();
   return _ctx;

end

function this.Voice_4_process_init()
   return this.Voice_4__ctx_type_0_init();
end

function this.Voice_4_process(_ctx,cv,vel,gate)
   local lfo = this.Lfo_process(_ctx._inst163,_ctx.lfo_rate,_ctx.lfo_shape,(gate * _ctx.lfo_reset));
   local mod_pw = (_ctx.lfo_pw * lfo);
   local mod_cv = (_ctx.lfo_cv * lfo);
   local mod_flt = (_ctx.lfo_flt * lfo);
   local o1 = this.Blit_process(_ctx._inst164,(cv + 0.0001 + mod_cv),(_ctx.pw1 + mod_pw),0.0000);
   local o2 = this.Blit_process(_ctx._inst165,(cv + 0.0002 + mod_cv),(_ctx.pw2 + mod_pw),1.0000);
   local o3 = this.Blit_process(_ctx._inst166,(cv + _ctx.pw3 + mod_cv),(_ctx.pw1 + mod_pw),0.0000);
   local sub = this.Saturate_process((((5.0000 * _ctx.pw4) + 2.0000) * this.Tricore_process(_ctx._inst167,(cv + mod_cv),0.0000,1.0000)));
   local o = ((_ctx.level1 * o1) + (_ctx.level2 * o2) + (_ctx.level3 * o3) + (_ctx.level4 * sub));
   local f = this.Svf_process(_ctx._inst168,o,(_ctx.flt_cut + mod_flt),_ctx.flt_res,_ctx.flt_shape);
   local env = this.Adsr_do(_ctx._inst169,gate,_ctx.attack,_ctx.decay,_ctx.sustain,_ctx.release);
   return (env * f);

end

function this.Voice_4_noteOn_init()
   return this.Voice_4__ctx_type_0_init();
end

function this.Voice_4_noteOn(_ctx,note,velocity,channel)

end

function this.Voice_4_noteOff_init()
   return this.Voice_4__ctx_type_0_init();
end

function this.Voice_4_noteOff(_ctx,note,channel)

end

function this.Voice_4_controlChange_init()
   return this.Voice_4__ctx_type_0_init();
end

function this.Voice_4_controlChange(_ctx,control,value,channel)
   if (control == 30) then
      _ctx.level1 = (this.real(value) * 0.0079);

   end
   if (control == 31) then
      _ctx.level2 = (this.real(value) * 0.0079);

   end
   if (control == 32) then
      _ctx.level3 = (this.real(value) * 0.0079);

   end
   if (control == 33) then
      _ctx.level4 = (this.real(value) * 0.0079);

   end
   if (control == 34) then
      _ctx.pw1 = (this.real(value) * 0.0079);

   end
   if (control == 35) then
      _ctx.pw2 = (this.real(value) * 0.0079);

   end
   if (control == 36) then
      _ctx.pw3 = (0.0008 * this.real(value));

   end
   if (control == 37) then
      _ctx.pw4 = (this.real(value) * 0.0079);

   end
   if (control == 38) then
      _ctx.lfo_rate = this.Util_map(this.real(value),0.0000,127.0000,(-0.4000),0.1000);

   end
   if (control == 39) then
      _ctx.lfo_shape = (0.0236 * this.real(value));

   end
   if (control == 40) then
      _ctx.lfo_pw = this.Util_map(this.real(value),0.0000,127.0000,(-1.0000),1.0000);

   end
   if (control == 41) then
      _ctx.lfo_cv = this.Util_map(this.real(value),0.0000,127.0000,(-0.1000),0.1000);

   end
   if (control == 42) then
      _ctx.lfo_flt = this.Util_map(this.real(value),0.0000,127.0000,(-0.3000),0.3000);

   end
   if (control == 43) then
      local _cond_208 = false;
      _cond_208 = (value > 0);
      if _cond_208 then
         _ctx.lfo_reset = 1.0000;
      else

         _ctx.lfo_reset = 0.0000;
      end

   end
   if (control == 44) then
      _ctx.flt_cut = this.Util_map(this.real(value),0.0000,127.0000,(-0.2000),0.5000);

   end
   if (control == 45) then
      _ctx.flt_res = (this.real(value) * 0.0079);

   end
   if (control == 46) then
      _ctx.flt_shape = ((value * 4) / 127);

   end
   if (control == 47) then
      _ctx.attack = (this.real(value) * 0.0079);

   end
   if (control == 48) then
      _ctx.decay = (this.real(value) * 0.0079);

   end
   if (control == 49) then
      _ctx.sustain = (this.real(value) * 0.0079);

   end
   if (control == 50) then
      _ctx.release = (this.real(value) * 0.0079);

   end

end

function this.Voice_4_default_init()
   return this.Voice_4__ctx_type_0_init();
end

function this.Voice_4_default(_ctx)

end


function this.process(ctx,cv,vel,gate) return this.Voice_4_process(ctx,cv,vel,gate) end
function this.noteOn(ctx,note,velocity,channel) return this.Voice_4_noteOn(ctx,note,velocity,channel) end
function this.noteOff(ctx,note,channel) return this.Voice_4_noteOff(ctx,note,channel) end
function this.controlChange(ctx,control,value,channel) return this.Voice_4_controlChange(ctx,control,value,channel) end
function this.init() return this.Voice_4_process_init() end
function this.default(ctx) return this.Voice_4_default(ctx) end
this.config = { inputs = 4, outputs = 1, noteon_inputs = 4, noteoff_inputs = 3, controlchange_inputs = 4, is_active = true }
return this
