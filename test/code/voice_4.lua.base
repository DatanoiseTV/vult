
local this = {}
local ffi = require("ffi")
function this.ternary(cond,then_,else_) if cond then return then_ else return else_ end end
function this.eps()             return 1e-18; end
function this.pi()              return 3.1415926535897932384; end
function this.random()          return math.random(); end
function this.irandom()         return math.floor(math.random() * 4294967296); end
function this.clip(x,low,high)  return (this.ternary(x<low,low,this.ternary(x>high,high,x))); end
function this.real(x)           return x; end
function this.int(x)            local int_part,_ = math.modf(x) return int_part; end
function this.sin(x)            return math.sin(x); end
function this.cos(x)            return math.cos(x); end
function this.abs(x)            return math.abs(x); end
function this.exp(x)            return math.exp(x); end
function this.floor(x)          return math.floor(x); end
function this.tan(x)            return math.tan(x); end
function this.tanh(x)           return math.tanh(x); end
function this.sqrt(x)           return x; end
function this.set(a,i,v)        a[i+1]=v; end
function this.get(a,i)          return a[i+1]; end
function this.makeArray(size,v) local a = {}; for i=1,size do a[i]=v end return a; end
function this.wrap_array(a)     return a; end
function this.Util__ctx_type_0_init()
   local _ctx = {};
   _ctx.pre = false;
   return _ctx;

end

function this.Util_edge_init()
   return this.Util__ctx_type_0_init();
end

function this.Util_edge(_ctx,x)
   local ret = (x and (_ctx.pre == false));
   _ctx.pre = x;
   return ret;

end

function this.Util__ctx_type_1_init()
   local _ctx = {};
   _ctx.pre_x = 0.000000;
   return _ctx;

end

function this.Util_change_init()
   return this.Util__ctx_type_1_init();
end

function this.Util_change(_ctx,x)
   local v = (_ctx.pre_x ~= x);
   _ctx.pre_x = x;
   return v;

end

function this.Util_map(x,x0,x1,y0,y1)
   return ((((x + (- x0)) * (y1 + (- y0))) / (x1 + (- x0))) + y0);

end

function this.Util__ctx_type_3_init()
   local _ctx = {};
   _ctx.y1 = 0.000000;
   _ctx.x1 = 0.000000;
   return _ctx;

end

function this.Util_dcblock_init()
   return this.Util__ctx_type_3_init();
end

function this.Util_dcblock(_ctx,x0)
   local y0 = (x0 + (- _ctx.x1) + (_ctx.y1 * 0.995000));
   _ctx.x1 = x0;
   _ctx.y1 = y0;
   return y0;

end

function this.Util__ctx_type_4_init()
   local _ctx = {};
   _ctx.x = 0.000000;
   return _ctx;

end

function this.Util_smooth_init()
   return this.Util__ctx_type_4_init();
end

function this.Util_smooth(_ctx,input)
   _ctx.x = (_ctx.x + ((input + (- _ctx.x)) * 0.005000));
   return _ctx.x;

end

function this.Util__ctx_type_5_init()
   local _ctx = {};
   _ctx.x0 = 0.000000;
   return _ctx;

end

function this.Util_average2_init()
   return this.Util__ctx_type_5_init();
end

function this.Util_average2(_ctx,x1)
   local result = ((_ctx.x0 + x1) * 0.500000);
   _ctx.x0 = x1;
   return result;

end

function this.Util_cubic_clipper(x)
   if (x <= (-0.666667)) then
      return (-0.666667);

   else

      local _cond_20 = false;
      _cond_20 = (x >= 0.666667);
      if _cond_20 then
         return 0.666667;

      else

         return (x + ((-0.333333) * x * x * x));

      end

   end

end

local Util_pitchToRate_1024_c0 = {0.189842,0.191326,0.198689,0.219425,0.265677,0.356438,0.520651,0.801560,1.262758,1.996562,3.135544,4.868347,7.461281,11.287715,16.867996,24.923305,36.448521,52.809903,75.876616,108.197225,153.232414,215.672344,301.846626,420.298038,582.505178,803.812129,1104.880165,1513.124126,2065.373952,2810.230550,3812.902888,5159.525580,6963.761469};
local Util_pitchToRate_1024_c1 = {0.010913,0.010176,0.008334,0.004867,(-0.000939),(-0.010061),(-0.023820),(-0.044002),(-0.073002),(-0.114025),(-0.171341),(-0.250621),(-0.359381),(-0.507548),(-0.708208),(-0.978575),(-1.341250),(-1.825848),(-2.471123),(-3.327721),(-4.461658),(-5.959006),(-7.931626),(-10.525312),(-13.929212),(-18.387588),(-24.219785),(-31.835151),(-41.769557),(-54.706455),(-71.541226),(-93.422592),(-121.823163)};
local Util_pitchToRate_1024_c2 = {0.000356,0.000447,0.000562,0.000707,0.000889,0.001119,0.001407,0.001769,0.002225,0.002799,0.003520,0.004426,0.005567,0.007001,0.008805,0.011074,0.013927,0.017515,0.022028,0.027704,0.034841,0.043818,0.055107,0.069305,0.087163,0.109617,0.137862,0.173377,0.218054,0.274227,0.344892,0.433780,0.545543};
function this.Util_pitchToRate_1024(pitch)
   local index = this.clip(this.int((0.244094 * pitch)),0,31);
   return (Util_pitchToRate_1024_c0[index+1] + (pitch * (Util_pitchToRate_1024_c1[index+1] + (Util_pitchToRate_1024_c2[index+1] * pitch))));

end

local Util_pitchToRate_c0 = {0.000185,0.000187,0.000194,0.000214,0.000259,0.000348,0.000508,0.000783,0.001233,0.001950,0.003062,0.004754,0.007286,0.011023,0.016473,0.024339,0.035594,0.051572,0.074098,0.105661,0.149641,0.210618,0.294772,0.410447,0.568853,0.784973,1.078985,1.477660,2.016967,2.744366,3.723538,5.038599,6.800548};
local Util_pitchToRate_c1 = {0.000011,0.000010,0.000008,0.000005,(-0.000001),(-0.000010),(-0.000023),(-0.000043),(-0.000071),(-0.000111),(-0.000167),(-0.000245),(-0.000351),(-0.000496),(-0.000692),(-0.000956),(-0.001310),(-0.001783),(-0.002413),(-0.003250),(-0.004357),(-0.005819),(-0.007746),(-0.010279),(-0.013603),(-0.017957),(-0.023652),(-0.031089),(-0.040791),(-0.053424),(-0.069864),(-0.091233),(-0.118968)};
local Util_pitchToRate_c2 = {0.000000,0.000000,0.000001,0.000001,0.000001,0.000001,0.000001,0.000002,0.000002,0.000003,0.000003,0.000004,0.000005,0.000007,0.000009,0.000011,0.000014,0.000017,0.000022,0.000027,0.000034,0.000043,0.000054,0.000068,0.000085,0.000107,0.000135,0.000169,0.000213,0.000268,0.000337,0.000424,0.000533};
function this.Util_pitchToRate(pitch)
   local index = this.clip(this.int((0.244094 * pitch)),0,31);
   return (Util_pitchToRate_c0[index+1] + (pitch * (Util_pitchToRate_c1[index+1] + (Util_pitchToRate_c2[index+1] * pitch))));

end

function this.Util_cvToPitch(cv)
   return ((cv * 120.000000) + 24.000000);

end

local Util_cvToRate_1024_c0 = {0.759367,0.762877,0.779737,0.825652,0.924648,1.112398,1.440687,1.983392,2.844434,4.168310,6.153994,9.073195,13.294301,19.313616,27.796102,39.628290,55.986657,78.426750,108.998215,150.387464,206.118533,280.781675,380.357513,512.612775,687.616764,918.349028,1221.607949,1619.052235,2138.629322,2815.436671,3696.162408,4838.694117,6318.211520};
local Util_cvToRate_1024_c1 = {5.245583,4.998943,4.403089,3.319116,1.564497,(-1.099256),(-4.982226),(-10.485864),(-18.127956),(-28.574100),(-42.677360),(-61.528124),(-86.516770),(-119.412133),(-162.460318),(-218.508269),(-291.156786),(-384.956978),(-505.652297),(-660.458539),(-858.494950),(-1111.173376),(-1432.858445),(-1841.544459),(-2359.816046),(-3015.795467),(-3844.838138),(-4891.101919),(-6210.197274),(-7868.993868),(-9955.778008),(-12575.747874),(-15862.234621)};
local Util_cvToRate_1024_c2 = {20.125592,24.457572,29.722000,36.119582,43.894227,53.342343,64.824143,78.777366,95.733987,116.340471,141.382451,171.814646,208.797363,253.740413,308.357211,374.730622,455.389632,553.410816,672.536916,817.290611,993.216833,1207.000622,1466.803875,1782.529271,2166.244997,2632.487590,3199.072620,3887.673024,4724.859179,5741.245302,6977.441755,8479.290028,10304.455486};
function this.Util_cvToRate_1024(cv)
   local index = this.clip(this.int((34.444444 * cv)),0,31);
   return (Util_cvToRate_1024_c0[index+1] + (cv * (Util_cvToRate_1024_c1[index+1] + (Util_cvToRate_1024_c2[index+1] * cv))));

end

local Util_cvToRate_c0 = {0.000742,0.000745,0.000761,0.000806,0.000903,0.001086,0.001407,0.001937,0.002778,0.004071,0.006010,0.008861,0.012983,0.018861,0.027145,0.038700,0.054674,0.076589,0.106444,0.146863,0.201288,0.274201,0.371443,0.500598,0.671501,0.896825,1.192977,1.581106,2.088505,2.749450,3.609534,4.725287,6.170128};
local Util_cvToRate_c1 = {0.005123,0.004882,0.004300,0.003241,0.001528,(-0.001073),(-0.004865),(-0.010240),(-0.017703),(-0.027904),(-0.041677),(-0.060086),(-0.084489),(-0.116613),(-0.158653),(-0.213387),(-0.284333),(-0.375935),(-0.493801),(-0.644979),(-0.838374),(-1.085130),(-1.399276),(-1.798383),(-2.304508),(-2.945113),(-3.754725),(-4.776467),(-6.064646),(-7.684564),(-9.722439),(-12.281004),(-15.490463)};
local Util_cvToRate_c2 = {0.019654,0.023884,0.029025,0.035273,0.042865,0.052092,0.063305,0.076931,0.093490,0.113614,0.138069,0.167788,0.203904,0.247793,0.301130,0.365948,0.444716,0.540440,0.656774,0.798135,0.969938,1.178712,1.432426,1.740751,2.115474,2.570789,3.124094,3.796556,4.614120,5.606685,6.813908,8.280557,10.062945};
function this.Util_cvToRate(cv)
   local index = this.clip(this.int((34.444444 * cv)),0,31);
   return (Util_cvToRate_c0[index+1] + (cv * (Util_cvToRate_c1[index+1] + (Util_cvToRate_c2[index+1] * cv))));

end

function this.Util_pitchToCv(pitch)
   return (0.008333 * ((-24.000000) + pitch));

end

local Util_cvToperiod_c0 = {674.246035,671.553838,662.761782,646.759522,623.799428,594.871802,561.298277,524.476942,485.731369,446.229382,406.947440,368.663774,331.968683,297.284156,264.887666,234.936857,207.493124,182.543016,160.016907,139.804832,121.769557,105.757117,91.605116,79.149088,68.227249,58.683895,50.371734,43.153355,36.902033,31.502025,26.848494,22.847166,19.413794};
local Util_cvToperiod_c1 = {(-4656.656311),(-4481.960579),(-4198.686133),(-3855.751543),(-3487.139455),(-3115.858821),(-2756.930319),(-2419.625141),(-2109.134753),(-1827.808334),(-1576.062963),(-1353.047092),(-1157.118864),(-986.186250),(-837.944665),(-710.039113),(-600.171234),(-506.166566),(-426.013463),(-357.882151),(-300.130190),(-251.298904),(-210.104105),(-175.423450),(-146.282114),(-121.837895),(-101.366537),(-84.247726),(-69.952082),(-58.029259),(-48.097248),(-39.832833),(-32.963186)};
local Util_cvToperiod_c2 = {14548.823162,11715.369522,9433.744675,7596.477297,6117.026622,4925.706117,3966.401040,3193.925264,2571.892879,2071.004308,1667.666208,1342.880152,1081.347751,870.750049,701.167268,564.611553,454.650724,366.105298,294.804521,237.389916,191.157082,153.928316,123.950032,99.810164,80.371652,64.718885,52.114569,41.965005,33.792117,27.210939,21.911477,17.644111,14.207835};
function this.Util_cvToperiod(cv)
   local index = this.clip(this.int((31.000000 * cv)),0,31);
   return (Util_cvToperiod_c0[index+1] + (cv * (Util_cvToperiod_c1[index+1] + (Util_cvToperiod_c2[index+1] * cv))));

end

local Util_cvTokHz_c0 = {0.032703,0.032916,0.033958,0.036857,0.043242,0.055616,0.077724,0.115069,0.175614,0.270739,0.416537,0.635567,0.959207,1.430818,2.109960,3.078021,4.445697,6.362909,9.031922,12.724677,17.805619,24.761735,34.241990,47.109042,64.506928,87.949557,119.436234,161.602273,217.915148,292.929619,392.619240,524.806645,699.721497};
local Util_cvTokHz_c1 = {0.225719,0.212293,0.179169,0.117605,0.015780,(-0.142178),(-0.377466),(-0.718250),(-1.201797),(-1.877228),(-2.809077),(-4.081867),(-5.806008),(-8.125373),(-11.227028),(-15.353705),(-20.819795),(-28.031798),(-37.514503),(-49.944414),(-66.192449),(-87.378404),(-114.940396),(-150.723337),(-197.091584),(-257.072284),(-334.537674),(-434.436788),(-563.089817),(-728.561858),(-941.137258),(-1213.921328),(-1563.603302)};
local Util_cvTokHz_c2 = {0.876338,1.088287,1.351498,1.678368,2.084294,2.588397,3.214421,3.991854,4.957315,6.156280,7.645225,9.494282,11.790549,14.642185,18.183512,22.581336,28.042809,34.825181,43.247923,53.707771,66.697415,82.828706,102.861476,127.739327,158.634081,197.000973,244.647198,303.817033,377.297556,468.549918,581.872376,722.602756,897.369877};
function this.Util_cvTokHz(cv)
   local index = this.clip(this.int((31.000000 * cv)),0,31);
   return (Util_cvTokHz_c0[index+1] + (cv * (Util_cvTokHz_c1[index+1] + (Util_cvTokHz_c2[index+1] * cv))));

end

function this.Tricore__ctx_type_0_init()
   local _ctx = {};
   _ctx.reset_state = false;
   _ctx.reset_phase = 0.000000;
   _ctx.rate = 0.000000;
   _ctx.phase = 0.000000;
   _ctx.direction = false;
   _ctx._inst26 = this.Util__ctx_type_0_init();
   _ctx._inst25 = this.Util__ctx_type_0_init();
   _ctx._inst23 = this.Util__ctx_type_1_init();
   this.Tricore_default(_ctx);
   return _ctx;

end

function this.Tricore_process_init()
   return this.Tricore__ctx_type_0_init();
end

function this.Tricore_process(_ctx,cv,reset,disable)
   local out = 0.000000;
   if this.Util_change(_ctx._inst23,cv) then
      _ctx.rate = (4.000000 * this.Util_cvToRate_1024(cv));

   end
   local new_phase = 0.0;
   local _if_39 = 0.0;
   if _ctx.direction then
      _if_39 = _ctx.rate;
   else

      _if_39 = (- _ctx.rate);
   end
   new_phase = (_ctx.phase + _if_39);
   local bdisable = (disable > 0.500000);
   if (this.Util_edge(_ctx._inst25,(reset > 0.000000)) or this.Util_edge(_ctx._inst26,bdisable)) then
      _ctx.reset_phase = _ctx.phase;
      _ctx.reset_state = true;
      new_phase = 0.000000;

   end
   if (new_phase > 1024.000000) then
      new_phase = (1024.000000 + (- (new_phase + (-1024.000000))));
      _ctx.direction = false;

   else

      local _cond_41 = false;
      _cond_41 = (new_phase < (-1024.000000));
      if _cond_41 then
         _ctx.direction = true;

      end

   end
   if bdisable then
      _ctx.phase = 0.000000;
   else

      _ctx.phase = new_phase;
   end
   if _ctx.reset_state then
      local _cond_44 = false;
      _cond_44 = ((this.abs(_ctx.reset_phase) > 10.000000) or bdisable);
      if _cond_44 then
         local reset_speed = 0.0;
         if bdisable then
            reset_speed = 0.010000;
         else

            reset_speed = 0.500000;
         end
         _ctx.reset_phase = (_ctx.reset_phase + (- (_ctx.reset_phase * reset_speed)));

      else

         local _cond_43 = false;
         _cond_43 = (_ctx.reset_phase > 10.000000);
         if (not _cond_43) then
            _ctx.reset_phase = 0.000000;
         end
         _ctx.reset_state = false;
         _ctx.direction = true;

      end
      out = _ctx.reset_phase;

   end
   out = (out + _ctx.phase);
   return (out * 0.000977);

end

function this.Tricore_noteOn_init()
   return this.Tricore__ctx_type_0_init();
end

function this.Tricore_noteOn(_ctx,note,velocity,channel)

end

function this.Tricore_noteOff_init()
   return this.Tricore__ctx_type_0_init();
end

function this.Tricore_noteOff(_ctx,note,channel)

end

function this.Tricore_controlChange_init()
   return this.Tricore__ctx_type_0_init();
end

function this.Tricore_controlChange(_ctx,control,value,channel)

end

function this.Tricore_default_init()
   return this.Tricore__ctx_type_0_init();
end

function this.Tricore_default(_ctx)
   _ctx.rate = 0.759367;

end

local Saturate_soft_table_c0 = {(-8.551395),(-8.031581),(-7.495173),(-6.941354),(-6.372317),(-5.793511),(-5.207770),(-4.619621),(-4.035829),(-3.461083),(-2.902259),(-2.366490),(-1.860709),(-1.392085),(-0.967287),(-0.592455),(-0.272557),(-0.011069),0.190456,0.332663,0.418609,0.453804,0.446033,0.404924,0.341291,0.266251,0.190231,0.121953,0.067564,0.030037,0.008985,0.000923,0.000000,(-0.000923),(-0.008985),(-0.030037),(-0.067564),(-0.121953),(-0.190231),(-0.266251),(-0.341291),(-0.404924),(-0.446033),(-0.453804),(-0.418609),(-0.332666),(-0.190451),0.011068,0.272539,0.592436,0.967277,1.392035,1.860709,2.366538,2.902329,3.461142,4.036128,4.619653,5.207774,5.793615,6.371757,6.940220,7.494295,8.032314,8.552015,9.049418};
local Saturate_soft_table_c1 = {0.359022,0.392434,0.428240,0.466430,0.506928,0.549736,0.594640,0.641433,0.689913,0.739571,0.790028,0.840660,0.890789,0.939610,0.986252,1.029749,1.069123,1.103374,1.131586,1.152958,1.166892,1.173069,1.171520,1.162678,1.147415,1.127033,1.103218,1.077944,1.053342,1.031519,1.014380,1.003443,0.999685,1.003443,1.014380,1.031519,1.053342,1.077944,1.103218,1.127033,1.147415,1.162678,1.171520,1.173069,1.166892,1.152959,1.131586,1.103374,1.069121,1.029748,0.986250,0.939611,0.890792,0.840665,0.790033,0.739584,0.689894,0.641441,0.594623,0.549769,0.506907,0.466408,0.428263,0.392457,0.359046,0.327989};
local Saturate_soft_table_c2 = {0.004508,0.005046,0.005642,0.006300,0.007022,0.007812,0.008672,0.009605,0.010610,0.011683,0.012822,0.014018,0.015260,0.016531,0.017811,0.019074,0.020285,0.021407,0.022394,0.023197,0.023762,0.024033,0.023956,0.023480,0.022565,0.021181,0.019316,0.016977,0.014195,0.011022,0.007534,0.003824,0.000000,(-0.003824),(-0.007534),(-0.011022),(-0.014195),(-0.016977),(-0.019316),(-0.021181),(-0.022565),(-0.023480),(-0.023956),(-0.024033),(-0.023762),(-0.023197),(-0.022394),(-0.021407),(-0.020285),(-0.019074),(-0.017812),(-0.016531),(-0.015260),(-0.014018),(-0.012822),(-0.011683),(-0.010609),(-0.009605),(-0.008672),(-0.007813),(-0.007021),(-0.006299),(-0.005642),(-0.005046),(-0.004508),(-0.004021)};
function this.Saturate_soft_table(x)
   local index = this.clip(this.int((x + 32.000000)),0,64);
   return (Saturate_soft_table_c0[index+1] + (x * (Saturate_soft_table_c1[index+1] + (Saturate_soft_table_c2[index+1] * x))));

end

function this.Saturate_soft_process(x)
   return this.Saturate_soft_table(x);

end

function this.Saturate_soft_noteOn(note,velocity,channel)

end

function this.Saturate_soft_noteOff(note,channel)

end

function this.Saturate_soft_controlChange(control,value,channel)

end

function this.Saturate_soft_default()

end

local Svf_calc_g_c0 = {0.002330,0.002330,0.002330,0.002332,0.002334,0.002339,0.002345,0.002355,0.002367,0.002384,0.002406,0.002434,0.002469,0.002512,0.002564,0.002627,0.002703,0.002792,0.002897,0.003020,0.003163,0.003329,0.003520,0.003739,0.003989,0.004275,0.004598,0.004966,0.005380,0.005846,0.006371,0.006958,0.007617,0.008349,0.009169,0.010082,0.011097,0.012216,0.013457,0.014835,0.016350,0.018027,0.019880,0.021901,0.024177,0.026620,0.029309,0.032305,0.035508,0.039085,0.042961,0.047132,0.051635,0.056888,0.062349,0.068325,0.075187,0.081751,0.089900,0.097998,0.107213,0.117479,0.128467,0.140645,0.152384,0.164957,0.180620,0.196876,0.217383,0.233608,0.255074,0.277937,0.300345,0.334902,0.360034,0.392927,0.431044,0.470668,0.502125,0.548706,0.585845,0.640390,0.705687,0.766947,0.857199,0.931926,0.955894,1.047667,1.211238,1.287302,1.359961,1.525900,1.777559,1.821213,2.000695,2.067184,2.562031,2.508080,2.949113,3.936569,3.384321,4.501667,4.479607,4.709319,4.717681,5.930568,8.664774,8.453629,8.697593,9.969256,10.311537,17.026154,17.442482,20.364464,27.658995,25.526743,27.760690,33.937415,52.292663,65.356820,82.519360,85.622727,140.913994,153.280903,265.720234,385.488409,776.142793,1249.269742,1090.244278};
local Svf_calc_g_c1 = {0.016145,0.016105,0.016020,0.015887,0.015700,0.015455,0.015147,0.014769,0.014315,0.013780,0.013155,0.012433,0.011607,0.010667,0.009603,0.008408,0.007068,0.005574,0.003913,0.002072,0.000038,(-0.002205),(-0.004673),(-0.007381),(-0.010349),(-0.013594),(-0.017139),(-0.021002),(-0.025214),(-0.029786),(-0.034755),(-0.040156),(-0.045999),(-0.052325),(-0.059186),(-0.066566),(-0.074590),(-0.083227),(-0.092513),(-0.102539),(-0.113342),(-0.124934),(-0.137556),(-0.150936),(-0.165494),(-0.180915),(-0.197743),(-0.215882),(-0.234857),(-0.255513),(-0.277493),(-0.300931),(-0.325376),(-0.353601),(-0.383015),(-0.412920),(-0.449157),(-0.480947),(-0.521104),(-0.559783),(-0.605884),(-0.651413),(-0.701831),(-0.758184),(-0.809563),(-0.860345),(-0.930806),(-1.001329),(-1.092007),(-1.153990),(-1.236844),(-1.327107),(-1.413789),(-1.565029),(-1.650617),(-1.770758),(-1.930161),(-2.064629),(-2.186008),(-2.344857),(-2.475820),(-2.653299),(-2.884870),(-3.101130),(-3.438192),(-3.685398),(-3.737599),(-4.008374),(-4.583202),(-4.791112),(-5.000224),(-5.557169),(-6.393678),(-6.498466),(-7.032296),(-7.188267),(-8.799336),(-8.488635),(-9.780928),(-12.999440),(-11.025426),(-14.549914),(-14.069083),(-14.666232),(-14.627071),(-17.976414),(-25.818903),(-25.420736),(-25.306335),(-28.584106),(-29.200662),(-47.790608),(-47.948688),(-55.645058),(-74.335334),(-68.008779),(-72.904784),(-87.497766),(-133.243615),(-164.218551),(-206.496450),(-210.634553),(-343.192699),(-365.869108),(-630.182525),(-900.343072),(-1797.100783),(-2855.001303),(-2461.636604)};
local Svf_calc_g_c2 = {0.057350,0.060215,0.063222,0.066380,0.069695,0.073176,0.076831,0.080669,0.084698,0.088928,0.093370,0.098034,0.102931,0.108072,0.113470,0.119138,0.125090,0.131337,0.137899,0.144788,0.152021,0.159616,0.167590,0.175962,0.184756,0.193986,0.203671,0.213855,0.224536,0.235751,0.247551,0.259910,0.272909,0.286526,0.300865,0.315916,0.331755,0.348308,0.365700,0.383964,0.403079,0.423152,0.444676,0.466776,0.490416,0.514790,0.540724,0.568318,0.596239,0.626212,0.657654,0.690074,0.722979,0.761476,0.799506,0.839155,0.885159,0.924569,0.973440,1.019112,1.073789,1.129113,1.186314,1.249537,1.304662,1.357422,1.437164,1.509851,1.605739,1.667344,1.755787,1.843974,1.928461,2.082011,2.165953,2.280928,2.430995,2.559696,2.655523,2.792885,2.908195,3.073275,3.285248,3.467169,3.765072,3.986876,3.965669,4.207899,4.713541,4.845564,4.994400,5.446843,6.144788,6.163343,6.561545,6.641975,7.938960,7.567922,8.638244,11.148986,9.440932,12.156427,11.640707,11.982242,11.710453,14.290648,20.000363,19.246561,19.090325,21.262534,21.349387,34.127243,34.037782,38.708598,50.911766,46.036973,48.499666,57.648744,85.908308,104.562190,129.166100,130.220198,209.111404,220.875546,375.022130,528.949352,1040.368058,1632.109419,1391.005452};
function this.Svf_calc_g(cv)
   local index = this.clip(this.int((141.111111 * cv)),0,127);
   return (Svf_calc_g_c0[index+1] + (cv * (Svf_calc_g_c1[index+1] + (Svf_calc_g_c2[index+1] * cv))));

end

function this.Svf__ctx_type_1_init()
   local _ctx = {};
   _ctx.z2 = 0.000000;
   _ctx.z1 = 0.000000;
   _ctx.inv_den = 0.000000;
   _ctx.g = 0.000000;
   _ctx._inst54 = this.Util__ctx_type_1_init();
   _ctx._inst53 = this.Util__ctx_type_1_init();
   _ctx.R = 0.000000;
   this.Svf_default(_ctx);
   return _ctx;

end

function this.Svf_process_init()
   return this.Svf__ctx_type_1_init();
end

function this.Svf_process(_ctx,x,cv,q,sel)
   q = (q + 0.500000);
   if (this.Util_change(_ctx._inst53,cv) or this.Util_change(_ctx._inst54,q)) then
      _ctx.g = this.Svf_calc_g(cv);
      _ctx.R = (1.000000 / (2.000000 * (q + 0.000000)));
      _ctx.inv_den = (1.000000 / (1.000000 + (2.000000 * _ctx.R * _ctx.g) + (_ctx.g * _ctx.g)));

   end
   local high = ((x + (- (((2.000000 * _ctx.R) + _ctx.g) * _ctx.z1)) + (- _ctx.z2)) * _ctx.inv_den);
   local band = ((_ctx.g * high) + _ctx.z1);
   local low = ((_ctx.g * band) + _ctx.z2);
   local notch = (low + high);
   _ctx.z1 = ((_ctx.g * high) + band);
   _ctx.z2 = ((_ctx.g * band) + low);
   local output = 0.0;
   if (sel == 0) then
      output = low;
   else

      local _cond_62 = false;
      _cond_62 = (sel == 1);
      if _cond_62 then
         output = high;
      else

         local _cond_63 = false;
         _cond_63 = (sel == 2);
         if _cond_63 then
            output = band;
         else

            output = notch;
         end

      end

   end
   return this.Saturate_soft_process(output);

end

function this.Svf_noteOn_init()
   return this.Svf__ctx_type_1_init();
end

function this.Svf_noteOn(_ctx,note,velocity,channel)

end

function this.Svf_noteOff_init()
   return this.Svf__ctx_type_1_init();
end

function this.Svf_noteOff(_ctx,note,channel)

end

function this.Svf_controlChange_init()
   return this.Svf__ctx_type_1_init();
end

function this.Svf_controlChange(_ctx,control,value,channel)

end

function this.Svf_default_init()
   return this.Svf__ctx_type_1_init();
end

function this.Svf_default(_ctx)
   _ctx.g = 0.002330;
   _ctx.R = 1.000000;
   _ctx.inv_den = (1.000000 / (1.000000 + (_ctx.g * _ctx.g)));

end

local Saturate_table_c0 = {(-1.001609),(-0.998911),(-1.000504),(-0.999095),(-0.999347),(-0.999817),(-1.000446),(-1.000185),(-0.999827),(-1.000299),(-0.999976),(-0.999415),(-1.000233),(-1.000123),(-0.999987),(-1.000095),(-0.999994),(-0.999983),(-0.999937),(-0.999959),(-1.000009),(-1.000009),(-0.999995),(-1.000011),(-1.000004),(-1.000022),(-1.000003),(-0.999997),(-1.000011),(-1.000000),(-0.999994),(-0.999984),(-0.999962),(-0.999908),(-0.999782),(-0.999489),(-0.998814),(-0.997276),(-0.993832),(-0.986260),(-0.969999),(-0.936122),(-0.868484),(-0.741908),(-0.530066),(-0.245538),(-0.014461),0.016164,0.000000,(-0.016164),0.014461,0.245538,0.530066,0.741908,0.868484,0.936122,0.969999,0.986260,0.993832,0.997276,0.998814,0.999489,0.999782,0.999908,0.999962,0.999983,0.999997,0.999994,1.000002,1.000000,1.000001,1.000006,1.000031,1.000024,0.999974,1.000003,1.000039,1.000018,0.999934,1.000001,0.999930,0.999935,0.999894,1.000059,1.000233,0.999739,0.999976,1.000299,0.999566,1.000185,0.999900,1.000163,0.999448,0.999637,1.000504,1.000475,1.001286,1.000316};
local Saturate_table_c1 = {0.000022,0.000018,0.000002,(-0.000041),(-0.000009),(-0.000011),(-0.000003),0.000004,(-0.000003),0.000003,(-0.000001),(-0.000011),(-0.000009),(-0.000000),(-0.000008),(-0.000000),0.000005,0.000003,(-0.000002),0.000000,(-0.000001),0.000000,0.000002,(-0.000001),(-0.000000),0.000001,(-0.000000),0.000001,0.000000,0.000001,0.000001,0.000004,0.000009,0.000023,0.000058,0.000147,0.000366,0.000909,0.002243,0.005485,0.013273,0.031678,0.074129,0.168152,0.360779,0.693538,1.068319,1.132509,0.980082,1.132509,1.068319,0.693538,0.360779,0.168152,0.074129,0.031678,0.013273,0.005485,0.002243,0.000909,0.000366,0.000147,0.000058,0.000023,0.000009,0.000004,0.000001,0.000000,0.000000,(-0.000000),0.000001,(-0.000000),(-0.000000),(-0.000000),0.000001,(-0.000002),(-0.000000),(-0.000000),0.000001,0.000000,(-0.000001),(-0.000000),0.000004,(-0.000008),(-0.000009),0.000003,(-0.000001),(-0.000006),0.000006,0.000004,0.000007,0.000013,(-0.000031),(-0.000017),0.000002,(-0.000030),0.000017,(-0.000016)};
local Saturate_table_c2 = {(-0.000001),(-0.000001),0.000001,0.000001,(-0.000001),0.000000,(-0.000000),(-0.000000),(-0.000000),0.000001,(-0.000000),(-0.000000),0.000001,0.000000,0.000000,(-0.000000),(-0.000000),(-0.000000),0.000000,0.000000,0.000000,(-0.000000),(-0.000000),0.000000,0.000000,0.000000,0.000000,(-0.000000),0.000000,(-0.000000),0.000000,0.000000,0.000001,0.000001,0.000004,0.000011,0.000028,0.000076,0.000205,0.000552,0.001485,0.003985,0.010645,0.028103,0.071886,0.169162,0.321123,0.352016,0.000000,(-0.352016),(-0.321123),(-0.169162),(-0.071886),(-0.028103),(-0.010645),(-0.003985),(-0.001485),(-0.000552),(-0.000205),(-0.000076),(-0.000028),(-0.000011),(-0.000004),(-0.000001),(-0.000001),(-0.000000),(-0.000000),0.000000,(-0.000000),(-0.000000),(-0.000000),0.000000,(-0.000000),(-0.000000),0.000000,0.000000,(-0.000000),0.000000,0.000000,(-0.000000),0.000000,0.000000,0.000000,(-0.000000),(-0.000001),0.000000,0.000000,(-0.000000),0.000000,0.000000,0.000001,0.000000,0.000000,(-0.000001),(-0.000001),(-0.000002),(-0.000000),(-0.000000)};
function this.Saturate_table(x)
   local index = this.clip(this.int((2.000000 * (x + 24.000000))),0,96);
   return (Saturate_table_c0[index+1] + (x * (Saturate_table_c1[index+1] + (Saturate_table_c2[index+1] * x))));

end

function this.Saturate_process(x)
   return this.Saturate_table(x);

end

function this.Saturate_noteOn(note,velocity,channel)

end

function this.Saturate_noteOff(note,channel)

end

function this.Saturate_controlChange(control,value,channel)

end

function this.Saturate_default()

end

function this.Lfo__ctx_type_0_init()
   local _ctx = {};
   _ctx.x4 = 0.000000;
   _ctx.x3 = 0.000000;
   _ctx.x2 = 0.000000;
   return _ctx;

end

function this.Lfo_soft_init()
   return this.Lfo__ctx_type_0_init();
end

function this.Lfo_soft(_ctx,x1)
   local o = ((x1 + _ctx.x2 + _ctx.x3 + _ctx.x4) * 0.250000);
   local _tmp_81_0 = x1;
   local _tmp_81_1 = _ctx.x2;
   local _tmp_81_2 = _ctx.x3;
   _ctx.x2 = _tmp_81_0;
   _ctx.x3 = _tmp_81_1;
   _ctx.x4 = _tmp_81_2;
   return o;

end

function this.Lfo__ctx_type_1_init()
   local _ctx = {};
   _ctx.rate = 0.000000;
   _ctx.phase = 0.000000;
   _ctx._inst76 = this.Lfo__ctx_type_0_init();
   _ctx._inst74 = this.Util__ctx_type_0_init();
   _ctx._inst72 = this.Util__ctx_type_1_init();
   return _ctx;

end

function this.Lfo_process_init()
   return this.Lfo__ctx_type_1_init();
end

function this.Lfo_process(_ctx,cv,shape,reset)
   if this.Util_change(_ctx._inst72,cv) then
      _ctx.rate = this.Util_cvToRate((cv + (-0.300000)));

   end
   _ctx.phase = (_ctx.phase + _ctx.rate);
   if (_ctx.phase > 2.000000) then
      _ctx.phase = (_ctx.phase + (-2.000000));
   end
   local breset = (reset > 0.000000);
   if this.Util_edge(_ctx._inst74,breset) then
      _ctx.phase = 0.000000;

   end
   local tmp = (_ctx.phase + (-1.000000));
   local o = 0.0;
   if (shape < 1.000000) then
      o = tmp;
   else

      local _cond_86 = false;
      _cond_86 = (shape < 2.000000);
      if _cond_86 then
         o = ((this.abs(tmp) * 2.000000) + (-1.000000));
      else

         local _cond_87 = false;
         _cond_87 = (tmp > 0.000000);
         if _cond_87 then
            o = 1.000000;
         else

            o = 0.000000;
         end

      end

   end
   return this.Lfo_soft(_ctx._inst76,o);

end

function this.Lfo_noteOn_init()
   return this.Lfo__ctx_type_1_init();
end

function this.Lfo_noteOn(_ctx,note,velocity,channel)

end

function this.Lfo_noteOff_init()
   return this.Lfo__ctx_type_1_init();
end

function this.Lfo_noteOff(_ctx,note,channel)

end

function this.Lfo_controlChange_init()
   return this.Lfo__ctx_type_1_init();
end

function this.Lfo_controlChange(_ctx,control,value,channel)

end

function this.Lfo_default_init()
   return this.Lfo__ctx_type_1_init();
end

function this.Lfo_default(_ctx)

end

local Tables_nsine_c0 = {0.000000,(-0.000059),(-0.000294),(-0.000821),(-0.001748),(-0.003182),(-0.005218),(-0.007945),(-0.011441),(-0.015769),(-0.020982),(-0.027117),(-0.034194),(-0.042218),(-0.051174),(-0.061028),(-0.071728),(-0.083199),(-0.095348),(-0.108059),(-0.121193),(-0.134593),(-0.148077),(-0.161443),(-0.174469),(-0.186911),(-0.198505),(-0.208970),(-0.218004),(-0.225290),(-0.230496),(-0.233273),(-0.233261),(-0.230090),(-0.223377),(-0.212736),(-0.197773),(-0.178091),(-0.153292),(-0.122979),(-0.086760),(-0.044248),0.004935,0.061157,0.124770,0.196113,0.275501,0.363233,0.459580,0.564787,0.679070,0.802614,0.935568,1.078046,1.230121,1.391827,1.563154,1.744046,1.934404,2.134075,2.342860,2.560508,2.786714,3.021123,3.263323,3.512849,3.769181,4.031743,4.299905,4.572984,4.850242,5.130888,5.414079,5.698922,5.984476,6.269752,6.553717,6.835294,7.113369,7.386787,7.654362,7.914877,8.167086,8.409721,8.641495,8.861104,9.067233,9.258562,9.433767,9.591528,9.730531,9.849477,9.947084,10.022092,10.073270,10.099421,10.099386,10.072052,10.016353,9.931281,9.815887,9.669287,9.490669,9.279297,9.034513,8.755748,8.442520,8.094445,7.711234,7.292703,6.838775,6.349479,5.824963,5.265486,4.671429,4.043291,3.381696,2.687392,1.961252,1.204276,0.417591,(-0.397552),(-1.239772),(-2.107564),(-2.999299),(-3.913225),(-4.847471),(-5.800047),(-6.768847)};
local Tables_nsine_c1 = {6.284447,6.299564,6.329688,6.374603,6.433980,6.507388,6.594289,6.694041,6.805905,6.929043,7.062522,7.205321,7.356331,7.514365,7.678156,7.846367,8.017595,8.190378,8.363199,8.534492,8.702652,8.866039,9.022985,9.171802,9.310788,9.438236,9.552440,9.651704,9.734348,9.798715,9.843181,9.866160,9.866113,9.841556,9.791063,9.713277,9.606917,9.470782,9.303758,9.104827,8.873070,8.607671,8.307927,7.973252,7.603175,7.197355,6.755575,6.277752,5.763935,5.214312,4.629210,4.009096,3.354579,2.666410,1.945484,1.192836,0.409645,(-0.402770),(-1.242953),(-2.109312),(-3.000120),(-3.913520),(-4.847530),(-5.800047),(-6.768847),(-7.751597),(-8.745857),(-9.749086),(-10.758648),(-11.771823),(-12.785807),(-13.797728),(-14.804647),(-15.803569),(-16.791454),(-17.765220),(-18.721759),(-19.657940),(-20.570624),(-21.456668),(-22.312942),(-23.136331),(-23.923752),(-24.672159),(-25.378556),(-26.040006),(-26.653641),(-27.216673),(-27.726403),(-28.180230),(-28.575662),(-28.910326),(-29.181973),(-29.388492),(-29.527917),(-29.598433),(-29.598386),(-29.526292),(-29.380840),(-29.160902),(-28.865538),(-28.494004),(-28.045752),(-27.520443),(-26.917941),(-26.238327),(-25.481894),(-24.649155),(-23.740843),(-22.757909),(-21.701528),(-20.573098),(-19.374236),(-18.106780),(-16.772786),(-15.374524),(-13.914479),(-12.395342),(-10.820010),(-9.191577),(-7.513332),(-5.788748),(-4.021481),(-2.215356),(-0.374364),1.497351,3.395497,5.315646,7.253247};
local Tables_nsine_c2 = {(-0.484400),(-1.452033),(-2.416169),(-3.374483),(-4.324668),(-5.264435),(-6.191519),(-7.103687),(-7.998741),(-8.874526),(-9.728932),(-10.559900),(-11.365428),(-12.143575),(-12.892468),(-13.610302),(-14.295347),(-14.945953),(-15.560554),(-16.137667),(-16.675904),(-17.173967),(-17.630656),(-18.044871),(-18.415615),(-18.741994),(-19.023222),(-19.258621),(-19.447625),(-19.589777),(-19.684736),(-19.732273),(-19.732273),(-19.684736),(-19.589777),(-19.447625),(-19.258621),(-19.023222),(-18.741994),(-18.415615),(-18.044871),(-17.630656),(-17.173967),(-16.675904),(-16.137667),(-15.560554),(-14.945953),(-14.295347),(-13.610302),(-12.892468),(-12.143575),(-11.365428),(-10.559900),(-9.728932),(-8.874526),(-7.998741),(-7.103687),(-6.191519),(-5.264435),(-4.324668),(-3.374483),(-2.416169),(-1.452033),(-0.484400),0.484400,1.452033,2.416169,3.374483,4.324668,5.264435,6.191519,7.103687,7.998741,8.874526,9.728932,10.559900,11.365428,12.143575,12.892468,13.610302,14.295347,14.945953,15.560554,16.137667,16.675904,17.173967,17.630656,18.044871,18.415615,18.741994,19.023222,19.258621,19.447625,19.589777,19.684736,19.732273,19.732273,19.684736,19.589777,19.447625,19.258621,19.023222,18.741994,18.415615,18.044871,17.630656,17.173967,16.675904,16.137667,15.560554,14.945953,14.295347,13.610302,12.892468,12.143575,11.365428,10.559900,9.728932,8.874526,7.998741,7.103687,6.191519,5.264435,4.324668,3.374483,2.416169,1.452033,0.484400,(-0.484400)};
function this.Tables_nsine(x)
   local index = this.clip(this.int((127.000000 * x)),0,127);
   return (Tables_nsine_c0[index+1] + (x * (Tables_nsine_c1[index+1] + (Tables_nsine_c2[index+1] * x))));

end

function this.Phase__ctx_type_0_init()
   local _ctx = {};
   _ctx.rate = 0.000000;
   _ctx.phase = 0.000000;
   _ctx._inst92 = this.Util__ctx_type_0_init();
   _ctx._inst90 = this.Util__ctx_type_1_init();
   this.Phase_default(_ctx);
   return _ctx;

end

function this.Phase_process_init()
   return this.Phase__ctx_type_0_init();
end

function this.Phase_process(_ctx,cv,reset)
   if this.Util_change(_ctx._inst90,cv) then
      _ctx.rate = this.Util_cvToRate_1024(cv);

   end
   if this.Util_edge(_ctx._inst92,(reset > 0.500000)) then
      _ctx.phase = 0.000000;
   else

      _ctx.phase = (_ctx.phase + _ctx.rate);
   end
   if (_ctx.phase > 1024.000000) then
      _ctx.phase = (_ctx.phase + (-1024.000000));
   end
   return (_ctx.phase * 0.000977);

end

function this.Phase_noteOn_init()
   return this.Phase__ctx_type_0_init();
end

function this.Phase_noteOn(_ctx,note,velocity,channel)

end

function this.Phase_noteOff_init()
   return this.Phase__ctx_type_0_init();
end

function this.Phase_noteOff(_ctx,note,channel)

end

function this.Phase_controlChange_init()
   return this.Phase__ctx_type_0_init();
end

function this.Phase_controlChange(_ctx,control,value,channel)

end

function this.Phase_default_init()
   return this.Phase__ctx_type_0_init();
end

function this.Phase_default(_ctx)
   _ctx.rate = 0.759367;

end

function this.Blit__ctx_type_0_init()
   local _ctx = {};
   _ctx.scale = 0.000000;
   _ctx.m = 0;
   _ctx._inst101 = this.Util__ctx_type_1_init();
   this.Blit_pulse_start(_ctx);
   return _ctx;

end

function this.Blit_pulse_train_init()
   return this.Blit__ctx_type_0_init();
end

function this.Blit_pulse_train(_ctx,cv,phase)
   if this.Util_change(_ctx._inst101,cv) then
      _ctx.m = ((2 * this.int(this.Util_cvToperiod(cv))) + 1);
      _ctx.scale = (2.000000 * this.Util_cvToperiod(cv));

   end
   local pi_phase = (phase * 0.500000);
   local denominator = this.Tables_nsine(pi_phase);
   local out = 0.000000;
   if (denominator <= 0.000000) then
      out = 1.000000;

   else

      local m_phase = 0.0;
      m_phase = ((this.real(_ctx.m) * pi_phase) % 1.000000);
      local numerator = 0.0;
      numerator = this.Tables_nsine(m_phase);
      out = (numerator / (_ctx.scale * denominator));

   end
   return out;

end

function this.Blit_pulse_start_init()
   return this.Blit__ctx_type_0_init();
end

function this.Blit_pulse_start(_ctx)
   _ctx.m = 1349;
   _ctx.scale = 1349.492070;

end

function this.Blit__ctx_type_1_init()
   local _ctx = {};
   _ctx.state_saw = 0.000000;
   _ctx.state_pulse = 0.000000;
   _ctx.rate = 0.000000;
   _ctx.output = 0.000000;
   _ctx._inst117 = this.Util__ctx_type_3_init();
   _ctx._inst114 = this.Blit__ctx_type_0_init();
   _ctx._inst113 = this.Blit__ctx_type_0_init();
   _ctx._inst111 = this.Phase__ctx_type_0_init();
   _ctx._inst109 = this.Util__ctx_type_1_init();
   this.Blit_init(_ctx);
   return _ctx;

end

function this.Blit_osc_blit_init()
   return this.Blit__ctx_type_1_init();
end

function this.Blit_osc_blit(_ctx,cv,pw,wave)
   local fixed_cv = 0.000000;
   if (wave < 1.000000) then
      fixed_cv = cv;

   else

      fixed_cv = (cv + (-0.100000));

   end
   if this.Util_change(_ctx._inst109,fixed_cv) then
      _ctx.rate = this.Util_cvToRate(fixed_cv);

   end
   local phase = this.Phase_process(_ctx._inst111,fixed_cv,0.000000);
   local shift05 = (0.500000 + (pw * 0.490000));
   local shift = (phase + shift05);
   if (shift > 1.000000) then
      shift = (shift + (-1.000000));

   end
   local pulse1 = this.Blit_pulse_train(_ctx._inst113,fixed_cv,phase);
   local pulse2 = this.Blit_pulse_train(_ctx._inst114,fixed_cv,shift);
   _ctx.state_pulse = ((_ctx.state_pulse * 0.999500) + pulse1 + (- pulse2));
   _ctx.state_saw = ((_ctx.state_saw * 0.999500) + (((pulse1 + pulse2 + ((-2.000000) * _ctx.rate)) / shift05) * 0.500000));
   if (wave < 1.000000) then
      _ctx.output = _ctx.state_pulse;

   else

      _ctx.output = (2.000000 * _ctx.state_saw);

   end
   _ctx.output = this.Util_dcblock(_ctx._inst117,_ctx.output);
   return _ctx.output;

end

function this.Blit_init_init()
   return this.Blit__ctx_type_1_init();
end

function this.Blit_init(_ctx)
   _ctx.rate = 0.000742;

end

function this.Blit__ctx_type_2_init()
   local _ctx = {};
   _ctx._inst120 = this.Blit__ctx_type_1_init();
   return _ctx;

end

function this.Blit_process_init()
   return this.Blit__ctx_type_2_init();
end

function this.Blit_process(_ctx,cv,pw,wave)
   return this.Blit_osc_blit(_ctx._inst120,cv,pw,wave);

end

function this.Blit_noteOn_init()
   return this.Blit__ctx_type_2_init();
end

function this.Blit_noteOn(_ctx,note,velocity,channel)

end

function this.Blit_noteOff_init()
   return this.Blit__ctx_type_2_init();
end

function this.Blit_noteOff(_ctx,note,channel)

end

function this.Blit_controlChange_init()
   return this.Blit__ctx_type_2_init();
end

function this.Blit_controlChange(_ctx,control,value,channel)

end

function this.Blit_default_init()
   return this.Blit__ctx_type_2_init();
end

function this.Blit_default(_ctx)

end

function this.Adsr__ctx_type_0_init()
   local _ctx = {};
   _ctx.target = 0.000000;
   _ctx.state = 0;
   _ctx.scale = 0.000000;
   _ctx.rate = 0.000000;
   _ctx.out = 0.000000;
   _ctx._inst140 = this.Util__ctx_type_4_init();
   _ctx._inst133 = this.Util__ctx_type_0_init();
   return _ctx;

end

function this.Adsr_do_init()
   return this.Adsr__ctx_type_0_init();
end

function this.Adsr_do(_ctx,gate,a,d,s,r)
   local a_rate = (1.000000 / ((100.000000 * a) + 0.010000));
   local d_rate = (1.000000 / ((100.000000 * d) + 0.010000));
   local r_rate = (1.000000 / ((100.000000 * r) + 0.010000));
   _ctx.out = (_ctx.out + ((_ctx.target + (- _ctx.out)) * _ctx.rate * 0.004000));
   local bgate = (gate > 0.000000);
   if (_ctx.state == 0) then
      local _cond_151 = false;
      _cond_151 = this.Util_edge(_ctx._inst133,bgate);
      if _cond_151 then
         _ctx.state = 1;
         _ctx.scale = (gate * 0.200000);

      end
      _ctx.rate = r_rate;
      _ctx.target = 0.000000;

   end
   if (_ctx.state == 1) then
      local _cond_153 = false;
      _cond_153 = (bgate == false);
      if _cond_153 then
         _ctx.state = 0;

      end
      local _cond_154 = false;
      _cond_154 = (_ctx.out > 1024.000000);
      if _cond_154 then
         _ctx.state = 2;

      end
      _ctx.rate = a_rate;
      _ctx.target = 1228.800000;

   end
   if (_ctx.state == 2) then
      local _cond_156 = false;
      _cond_156 = (bgate == false);
      if _cond_156 then
         _ctx.state = 0;

      end
      _ctx.rate = d_rate;
      _ctx.target = (s * 1024.000000);

   end
   return (this.Util_smooth(_ctx._inst140,_ctx.scale) * this.clip((_ctx.out * 0.000977),0.000000,1.000000));

end

function this.Adsr__ctx_type_1_init()
   local _ctx = {};
   _ctx.knob4 = 0.000000;
   _ctx.knob3 = 0.000000;
   _ctx.knob2 = 0.000000;
   _ctx.knob1 = 0.000000;
   _ctx._inst142 = this.Adsr__ctx_type_0_init();
   return _ctx;

end

function this.Adsr_process_init()
   return this.Adsr__ctx_type_1_init();
end

function this.Adsr_process(_ctx,gate)
   return this.Adsr_do(_ctx._inst142,gate,_ctx.knob1,_ctx.knob2,_ctx.knob3,_ctx.knob4);

end

function this.Adsr_noteOn_init()
   return this.Adsr__ctx_type_1_init();
end

function this.Adsr_noteOn(_ctx,note,velocity,channel)

end

function this.Adsr_noteOff_init()
   return this.Adsr__ctx_type_1_init();
end

function this.Adsr_noteOff(_ctx,note,channel)

end

function this.Adsr_controlChange_init()
   return this.Adsr__ctx_type_1_init();
end

function this.Adsr_controlChange(_ctx,control,value,channel)
   if (control == 1) then
      _ctx.knob1 = (this.real(value) * 0.007874);

   end
   if (control == 2) then
      _ctx.knob2 = (this.real(value) * 0.007874);

   end
   if (control == 3) then
      _ctx.knob3 = (this.real(value) * 0.007874);

   end
   if (control == 4) then
      _ctx.knob4 = (this.real(value) * 0.007874);

   end

end

function this.Adsr_default_init()
   return this.Adsr__ctx_type_1_init();
end

function this.Adsr_default(_ctx)
   _ctx.knob1 = 0.000000;
   _ctx.knob2 = 0.500000;
   _ctx.knob3 = 1.000000;
   _ctx.knob4 = 0.500000;

end

function this.Voice_4__ctx_type_0_init()
   local _ctx = {};
   _ctx.sustain = 0.000000;
   _ctx.release = 0.000000;
   _ctx.pw4 = 0.000000;
   _ctx.pw3 = 0.000000;
   _ctx.pw2 = 0.000000;
   _ctx.pw1 = 0.000000;
   _ctx.lfo_shape = 0.000000;
   _ctx.lfo_reset = 0.000000;
   _ctx.lfo_rate = 0.000000;
   _ctx.lfo_pw = 0.000000;
   _ctx.lfo_flt = 0.000000;
   _ctx.lfo_cv = 0.000000;
   _ctx.level4 = 0.000000;
   _ctx.level3 = 0.000000;
   _ctx.level2 = 0.000000;
   _ctx.level1 = 0.000000;
   _ctx.flt_shape = 0;
   _ctx.flt_res = 0.000000;
   _ctx.flt_cut = 0.000000;
   _ctx.decay = 0.000000;
   _ctx.attack = 0.000000;
   _ctx._inst169 = this.Adsr__ctx_type_0_init();
   _ctx._inst168 = this.Svf__ctx_type_1_init();
   _ctx._inst167 = this.Tricore__ctx_type_0_init();
   _ctx._inst166 = this.Blit__ctx_type_2_init();
   _ctx._inst165 = this.Blit__ctx_type_2_init();
   _ctx._inst164 = this.Blit__ctx_type_2_init();
   _ctx._inst163 = this.Lfo__ctx_type_1_init();
   return _ctx;

end

function this.Voice_4_process_init()
   return this.Voice_4__ctx_type_0_init();
end

function this.Voice_4_process(_ctx,cv,vel,gate)
   local lfo = this.Lfo_process(_ctx._inst163,_ctx.lfo_rate,_ctx.lfo_shape,(gate * _ctx.lfo_reset));
   local mod_pw = (_ctx.lfo_pw * lfo);
   local mod_cv = (_ctx.lfo_cv * lfo);
   local mod_flt = (_ctx.lfo_flt * lfo);
   local o1 = this.Blit_process(_ctx._inst164,(cv + 0.000100 + mod_cv),(_ctx.pw1 + mod_pw),0.000000);
   local o2 = this.Blit_process(_ctx._inst165,(cv + 0.000200 + mod_cv),(_ctx.pw2 + mod_pw),1.000000);
   local o3 = this.Blit_process(_ctx._inst166,(cv + _ctx.pw3 + mod_cv),(_ctx.pw1 + mod_pw),0.000000);
   local sub = this.Saturate_process((((5.000000 * _ctx.pw4) + 2.000000) * this.Tricore_process(_ctx._inst167,(cv + mod_cv),0.000000,1.000000)));
   local o = ((_ctx.level1 * o1) + (_ctx.level2 * o2) + (_ctx.level3 * o3) + (_ctx.level4 * sub));
   local f = this.Svf_process(_ctx._inst168,o,(_ctx.flt_cut + mod_flt),_ctx.flt_res,_ctx.flt_shape);
   local env = this.Adsr_do(_ctx._inst169,gate,_ctx.attack,_ctx.decay,_ctx.sustain,_ctx.release);
   return (env * f);

end

function this.Voice_4_noteOn_init()
   return this.Voice_4__ctx_type_0_init();
end

function this.Voice_4_noteOn(_ctx,note,velocity,channel)

end

function this.Voice_4_noteOff_init()
   return this.Voice_4__ctx_type_0_init();
end

function this.Voice_4_noteOff(_ctx,note,channel)

end

function this.Voice_4_controlChange_init()
   return this.Voice_4__ctx_type_0_init();
end

function this.Voice_4_controlChange(_ctx,control,value,channel)
   if (control == 30) then
      _ctx.level1 = (this.real(value) * 0.007874);

   end
   if (control == 31) then
      _ctx.level2 = (this.real(value) * 0.007874);

   end
   if (control == 32) then
      _ctx.level3 = (this.real(value) * 0.007874);

   end
   if (control == 33) then
      _ctx.level4 = (this.real(value) * 0.007874);

   end
   if (control == 34) then
      _ctx.pw1 = (this.real(value) * 0.007874);

   end
   if (control == 35) then
      _ctx.pw2 = (this.real(value) * 0.007874);

   end
   if (control == 36) then
      _ctx.pw3 = (0.000787 * this.real(value));

   end
   if (control == 37) then
      _ctx.pw4 = (this.real(value) * 0.007874);

   end
   if (control == 38) then
      _ctx.lfo_rate = this.Util_map(this.real(value),0.000000,127.000000,(-0.400000),0.100000);

   end
   if (control == 39) then
      _ctx.lfo_shape = (0.023622 * this.real(value));

   end
   if (control == 40) then
      _ctx.lfo_pw = this.Util_map(this.real(value),0.000000,127.000000,(-1.000000),1.000000);

   end
   if (control == 41) then
      _ctx.lfo_cv = this.Util_map(this.real(value),0.000000,127.000000,(-0.100000),0.100000);

   end
   if (control == 42) then
      _ctx.lfo_flt = this.Util_map(this.real(value),0.000000,127.000000,(-0.300000),0.300000);

   end
   if (control == 43) then
      local _cond_208 = false;
      _cond_208 = (value > 0);
      if _cond_208 then
         _ctx.lfo_reset = 1.000000;
      else

         _ctx.lfo_reset = 0.000000;
      end

   end
   if (control == 44) then
      _ctx.flt_cut = this.Util_map(this.real(value),0.000000,127.000000,(-0.200000),0.500000);

   end
   if (control == 45) then
      _ctx.flt_res = (this.real(value) * 0.007874);

   end
   if (control == 46) then
      _ctx.flt_shape = ((value * 4) / 127);

   end
   if (control == 47) then
      _ctx.attack = (this.real(value) * 0.007874);

   end
   if (control == 48) then
      _ctx.decay = (this.real(value) * 0.007874);

   end
   if (control == 49) then
      _ctx.sustain = (this.real(value) * 0.007874);

   end
   if (control == 50) then
      _ctx.release = (this.real(value) * 0.007874);

   end

end

function this.Voice_4_default_init()
   return this.Voice_4__ctx_type_0_init();
end

function this.Voice_4_default(_ctx)

end


function this.process(ctx,cv,vel,gate) return this.Voice_4_process(ctx,cv,vel,gate) end
function this.noteOn(ctx,note,velocity,channel) return this.Voice_4_noteOn(ctx,note,velocity,channel) end
function this.noteOff(ctx,note,channel) return this.Voice_4_noteOff(ctx,note,channel) end
function this.controlChange(ctx,control,value,channel) return this.Voice_4_controlChange(ctx,control,value,channel) end
function this.init() return this.Voice_4_process_init() end
function this.default(ctx) return this.Voice_4_default(ctx) end
this.config = { inputs = 4, outputs = 1, noteon_inputs = 4, noteoff_inputs = 3, controlchange_inputs = 4, is_active = true }
return this
