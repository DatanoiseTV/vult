#include "phasedist.h"

_ctx_type_0 _Phasedist__ctx_type_0_init(){
   _ctx_type_0 _ctx;
   _ctx.x = 0x0 /* 0.000000 */;
   return _ctx;
}

_ctx_type_0 _Phasedist_smooth_init(){ return _Phasedist__ctx_type_0_init();}

int32_t _Phasedist_smooth(_ctx_type_0 &_ctx, int32_t input){
   _ctx.x = fix_add(_ctx.x,fix_mul(fix_add(input,(- _ctx.x)),0x147 /* 0.005000 */));
   return _ctx.x;
}

_ctx_type_1 _Phasedist__ctx_type_1_init(){
   _ctx_type_1 _ctx;
   _ctx.pre_x = 0x0 /* 0.000000 */;
   return _ctx;
}

_ctx_type_1 _Phasedist_change_init(){ return _Phasedist__ctx_type_1_init();}

uint8_t _Phasedist_change(_ctx_type_1 &_ctx, int32_t x){
   uint8_t v = (_ctx.pre_x != x);
   _ctx.pre_x = x;
   return v;
}

int32_t _Phasedist_pitchToRate(int32_t d){
   return fix_mul(0xc /* 0.000185 */,fix_exp(fix_mul(0xec9 /* 0.057762 */,d)));
}

_ctx_type_3 _Phasedist__ctx_type_3_init(){
   _ctx_type_3 _ctx;
   _ctx.rate = 0x0 /* 0.000000 */;
   _ctx.phase = 0x0 /* 0.000000 */;
   _ctx._inst0 = _Phasedist__ctx_type_1_init();
   return _ctx;
}

_ctx_type_3 _Phasedist_phasor_init(){ return _Phasedist__ctx_type_3_init();}

int32_t _Phasedist_phasor(_ctx_type_3 &_ctx, int32_t pitch, uint8_t reset){
   if(_Phasedist_change(_ctx._inst0,pitch)){
      _ctx.rate = _Phasedist_pitchToRate(pitch);
   }
   _ctx.phase = (reset?0x0 /* 0.000000 */:(fix_add(_ctx.phase,_ctx.rate) % 0x10000 /* 1.000000 */));
   return _ctx.phase;
}

_ctx_type_4 _Phasedist__ctx_type_4_init(){
   _ctx_type_4 _ctx;
   _ctx.volume = 0x0 /* 0.000000 */;
   _ctx.pre_phase1 = 0x0 /* 0.000000 */;
   _ctx.pitch = 0x0 /* 0.000000 */;
   _ctx.detune = 0x0 /* 0.000000 */;
   _ctx._inst3 = _Phasedist__ctx_type_0_init();
   _ctx._inst2 = _Phasedist__ctx_type_3_init();
   _ctx._inst1 = _Phasedist__ctx_type_0_init();
   _ctx._inst0 = _Phasedist__ctx_type_3_init();
   return _ctx;
}

_ctx_type_4 _Phasedist_process_init(){ return _Phasedist__ctx_type_4_init();}

int32_t _Phasedist_process(_ctx_type_4 &_ctx, int32_t input){
   int32_t phase1 = _Phasedist_phasor(_ctx._inst0,_ctx.pitch,0);
   int32_t comp = fix_add(0x10000 /* 1.000000 */,(- phase1));
   uint8_t reset = (fix_add(_ctx.pre_phase1,(- phase1)) > 0x8000 /* 0.500000 */);
   _ctx.pre_phase1 = phase1;
   int32_t phase2 = _Phasedist_phasor(_ctx._inst2,fix_add(_ctx.pitch,fix_mul(_Phasedist_smooth(_ctx._inst1,_ctx.detune),0x200000 /* 32.000000 */)),reset);
   int32_t sine = fix_sin(fix_mul(0x6487e /* 6.283185 */,phase2));
   return fix_mul(fix_mul(_Phasedist_smooth(_ctx._inst3,_ctx.volume),sine),comp);
}

_ctx_type_4 _Phasedist_noteOn_init(){ return _Phasedist__ctx_type_4_init();}

void _Phasedist_noteOn(_ctx_type_4 &_ctx, int note, int velocity){
   _ctx.pitch = int_to_fix(note);
}

_ctx_type_4 _Phasedist_noteOff_init(){ return _Phasedist__ctx_type_4_init();}

void _Phasedist_noteOff(_ctx_type_4 &_ctx, int note){
}

_ctx_type_4 _Phasedist_controlChange_init(){ return _Phasedist__ctx_type_4_init();}

void _Phasedist_controlChange(_ctx_type_4 &_ctx, int control, int value){
   if(control == 30){
      _ctx.volume = fix_mul(int_to_fix(value),0x204 /* 0.007874 */);
   }
   if(control == 31){
      _ctx.detune = fix_mul(int_to_fix(value),0x204 /* 0.007874 */);
   }
}

_ctx_type_4 _Phasedist_default_init(){ return _Phasedist__ctx_type_4_init();}

void _Phasedist_default_(_ctx_type_4 &_ctx){
   _ctx.volume = 0x0 /* 0.000000 */;
   _ctx.pitch = 0x2d0000 /* 45.000000 */;
   _ctx.detune = 0x0 /* 0.000000 */;
}


