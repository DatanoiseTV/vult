
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#include "synth2.h"

fix16_t Synth2_minFixed(){
   return 0x1 /* 0.000015 */;
}

void Synth2__ctx_type_1_init(Synth2__ctx_type_1 &_output_){
   Synth2__ctx_type_1 _ctx;
   _ctx.pre_x = 0x0 /* 0.000000 */;
   _output_ = _ctx;
   return ;
}

void Synth2_change_init(Synth2__ctx_type_1 &_output_){
   Synth2__ctx_type_1_init(_output_);
   return ;
}

uint8_t Synth2_change(Synth2__ctx_type_1 &_ctx, fix16_t x){
   uint8_t v;
   v = (_ctx.pre_x != x);
   _ctx.pre_x = x;
   return v;
}

void Synth2__ctx_type_2_init(Synth2__ctx_type_2 &_output_){
   Synth2__ctx_type_2 _ctx;
   _ctx.pre_x = false;
   _output_ = _ctx;
   return ;
}

void Synth2_bchange_init(Synth2__ctx_type_2 &_output_){
   Synth2__ctx_type_2_init(_output_);
   return ;
}

uint8_t Synth2_bchange(Synth2__ctx_type_2 &_ctx, uint8_t x){
   uint8_t v;
   v = (_ctx.pre_x != x);
   _ctx.pre_x = x;
   return v;
}

void Synth2__ctx_type_3_init(Synth2__ctx_type_3 &_output_){
   Synth2__ctx_type_3 _ctx;
   _ctx.pre_x = false;
   _output_ = _ctx;
   return ;
}

void Synth2_edge_init(Synth2__ctx_type_3 &_output_){
   Synth2__ctx_type_3_init(_output_);
   return ;
}

uint8_t Synth2_edge(Synth2__ctx_type_3 &_ctx, uint8_t x){
   uint8_t v;
   v = ((_ctx.pre_x != x) && (_ctx.pre_x == true));
   _ctx.pre_x = x;
   return v;
}

void Synth2__ctx_type_4_init(Synth2__ctx_type_4 &_output_){
   Synth2__ctx_type_4 _ctx;
   _ctx.count = 0;
   _output_ = _ctx;
   return ;
}

void Synth2_each_init(Synth2__ctx_type_4 &_output_){
   Synth2__ctx_type_4_init(_output_);
   return ;
}

uint8_t Synth2_each(Synth2__ctx_type_4 &_ctx, int n){
   uint8_t ret;
   ret = (_ctx.count == 0);
   _ctx.count = ((_ctx.count + 1) % n);
   return ret;
}

uint8_t Synth2_near_zero(fix16_t x){
   return (fix_abs(x) < 0x51e /* 0.020000 */);
}

void Synth2__ctx_type_6_init(Synth2__ctx_type_6 &_output_){
   Synth2__ctx_type_6 _ctx;
   _ctx.y1 = 0x0 /* 0.000000 */;
   _ctx.x1 = 0x0 /* 0.000000 */;
   _output_ = _ctx;
   return ;
}

void Synth2_dcblock_init(Synth2__ctx_type_6 &_output_){
   Synth2__ctx_type_6_init(_output_);
   return ;
}

fix16_t Synth2_dcblock(Synth2__ctx_type_6 &_ctx, fix16_t x0){
   fix16_t y0;
   y0 = (x0 + (- _ctx.x1) + fix_mul(_ctx.y1,0xfeb8 /* 0.995000 */));
   _ctx.x1 = x0;
   _ctx.y1 = y0;
   return y0;
}

void Synth2__ctx_type_7_init(Synth2__ctx_type_7 &_output_){
   Synth2__ctx_type_7 _ctx;
   _ctx.x = 0x0 /* 0.000000 */;
   _output_ = _ctx;
   return ;
}

void Synth2_smooth_init(Synth2__ctx_type_7 &_output_){
   Synth2__ctx_type_7_init(_output_);
   return ;
}

fix16_t Synth2_smooth(Synth2__ctx_type_7 &_ctx, fix16_t input){
   _ctx.x = (_ctx.x + fix_mul((input + (- _ctx.x)),0x147 /* 0.005000 */));
   return _ctx.x;
}

void Synth2__ctx_type_8_init(Synth2__ctx_type_8 &_output_){
   Synth2__ctx_type_8 _ctx;
   _ctx.pre_x = 0x0 /* 0.000000 */;
   _output_ = _ctx;
   return ;
}

void Synth2_lpfilter_init(Synth2__ctx_type_8 &_output_){
   Synth2__ctx_type_8_init(_output_);
   return ;
}

fix16_t Synth2_lpfilter(Synth2__ctx_type_8 &_ctx, fix16_t x){
   fix16_t ret;
   ret = ((x + _ctx.pre_x) >> 1);
   _ctx.pre_x = x;
   return ret;
}

fix16_t Synth2_pitchToRate(fix16_t d){
   return fix_mul(0xc /* 0.000185 */,fix_exp(fix_mul(0xec9 /* 0.057762 */,d)));
}

fix16_t Synth2_pulse_train(fix16_t m, fix16_t phase){
   fix16_t pi_phase;
   pi_phase = fix_mul(phase,0x3243f /* 3.141593 */);
   fix16_t denominator1;
   denominator1 = fix_sin(pi_phase);
   fix16_t tmp1;
   tmp1 = 0x0 /* 0.000000 */;
   if(Synth2_near_zero(denominator1)){
      tmp1 = 0x10000 /* 1.000000 */;
   }
   else
   {
      tmp1 = fix_sin(fix_mul(m,pi_phase));
      tmp1 = fix_div(tmp1,fix_mul(m,denominator1));
   }
   return tmp1;
}

void Synth2__ctx_type_11_init(Synth2__ctx_type_11 &_output_){
   Synth2__ctx_type_11 _ctx;
   _ctx.state_triang = 0x0 /* 0.000000 */;
   _ctx.state_saw = 0x0 /* 0.000000 */;
   _ctx.state_pulse = 0x0 /* 0.000000 */;
   _ctx.rate = 0x0 /* 0.000000 */;
   _ctx.phase = 0x0 /* 0.000000 */;
   _ctx.output = 0x0 /* 0.000000 */;
   _ctx.m = 0x0 /* 0.000000 */;
   Synth2__ctx_type_6_init(_ctx._inst24);
   Synth2__ctx_type_1_init(_ctx._inst16);
   _output_ = _ctx;
   return ;
}

void Synth2_osc_init(Synth2__ctx_type_11 &_output_){
   Synth2__ctx_type_11_init(_output_);
   return ;
}

fix16_t Synth2_osc(Synth2__ctx_type_11 &_ctx, fix16_t pitch, fix16_t pw, fix16_t wave){
   fix16_t fixed_pitch;
   fixed_pitch = 0x0 /* 0.000000 */;
   if(wave < 0xaaaa /* 0.666667 */){
      fixed_pitch = pitch;
   }
   else
   {
      fixed_pitch = (pitch + 0xc0000 /* 12.000000 */);
   }
   if(Synth2_change(_ctx._inst16,fixed_pitch)){
      _ctx.rate = Synth2_pitchToRate(fixed_pitch);
      fix16_t p;
      p = fix_div(0x10000 /* 1.000000 */,_ctx.rate);
      fix16_t maxHarmonics;
      maxHarmonics = fix_floor((p >> 1));
      _ctx.m = ((maxHarmonics << 1) + 0x10000 /* 1.000000 */);
   }
   fix16_t shift05;
   shift05 = (0x8000 /* 0.500000 */ + fix_mul(pw,0x7d70 /* 0.490000 */));
   fix16_t shift;
   shift = (_ctx.phase + shift05);
   if(shift > 0x10000 /* 1.000000 */){
      shift = (shift + -0x10000 /* -1.000000 */);
   }
   fix16_t tmp1;
   tmp1 = Synth2_pulse_train(_ctx.m,_ctx.phase);
   fix16_t tmp2;
   tmp2 = Synth2_pulse_train(_ctx.m,shift);
   _ctx.phase = (_ctx.phase + _ctx.rate);
   if(_ctx.phase > 0x10000 /* 1.000000 */){
      _ctx.phase = (_ctx.phase + -0x10000 /* -1.000000 */);
   }
   _ctx.state_pulse = fix_clip((fix_mul(_ctx.state_pulse,0xffdf /* 0.999500 */) + tmp1 + (- tmp2)),-0x10000 /* -1.000000 */,0x10000 /* 1.000000 */);
   _ctx.state_saw = fix_clip((fix_mul(_ctx.state_saw,0xffdf /* 0.999500 */) + (fix_div((tmp1 + tmp2 + (- (_ctx.rate << 1))),shift05) >> 1)),-0x10000 /* -1.000000 */,0x10000 /* 1.000000 */);
   _ctx.state_triang = fix_clip((fix_mul(_ctx.state_triang,0xffdf /* 0.999500 */) + (fix_mul(_ctx.state_pulse,_ctx.rate) << 1)),-0x10000 /* -1.000000 */,0x10000 /* 1.000000 */);
   if(wave < 0x5555 /* 0.333333 */){
      _ctx.output = _ctx.state_pulse;
   }
   else
   {
      if(wave < 0xaaaa /* 0.666667 */){
         _ctx.output = (_ctx.state_saw << 1);
      }
      else
      {
         _ctx.output = (fix_mul(_ctx.state_triang,(0x10000 /* 1.000000 */ + pw)) << 1);
      }
   }
   _ctx.output = Synth2_dcblock(_ctx._inst24,_ctx.output);
   return fix_clip((_ctx.output >> 2),-0x10000 /* -1.000000 */,0x10000 /* 1.000000 */);
}

void Synth2__ctx_type_12_init(Synth2__ctx_type_12 &_output_){
   Synth2__ctx_type_12 _ctx;
   _ctx.dlow = 0x0 /* 0.000000 */;
   _ctx.dband = 0x0 /* 0.000000 */;
   _output_ = _ctx;
   return ;
}

void Synth2_svf_step_init(Synth2__ctx_type_12 &_output_){
   Synth2__ctx_type_12_init(_output_);
   return ;
}

fix16_t Synth2_svf_step(Synth2__ctx_type_12 &_ctx, fix16_t input, fix16_t g, fix16_t q, int sel){
   fix16_t low;
   low = (_ctx.dlow + fix_mul(g,_ctx.dband));
   fix16_t high;
   high = (input + (- low) + (- fix_mul(q,_ctx.dband)));
   fix16_t band;
   band = (fix_mul(g,high) + _ctx.dband);
   fix16_t notch;
   notch = (high + low);
   _ctx.dband = fix_clip(band,-0x10000 /* -1.000000 */,0x10000 /* 1.000000 */);
   _ctx.dlow = fix_clip(low,-0x10000 /* -1.000000 */,0x10000 /* 1.000000 */);
   fix16_t output;
   switch(sel) {
      case 0:
         output = low;
      break;
      case 1:
         output = high;
      break;
      case 2:
         output = band;
      break;
    default: 
      output = notch;
   }
   return output;
}

void Synth2__ctx_type_13_init(Synth2__ctx_type_13 &_output_){
   Synth2__ctx_type_13 _ctx;
   Synth2__ctx_type_12_init(_ctx.step);
   _ctx.g = 0x0 /* 0.000000 */;
   Synth2__ctx_type_1_init(_ctx._inst27);
   _output_ = _ctx;
   return ;
}

void Synth2_svf_init(Synth2__ctx_type_13 &_output_){
   Synth2__ctx_type_13_init(_output_);
   return ;
}

fix16_t Synth2_svf(Synth2__ctx_type_13 &_ctx, fix16_t input, fix16_t fc, fix16_t q, int sel){
   fc = fix_clip(fc,0x0 /* 0.000000 */,0x10000 /* 1.000000 */);
   q = fix_clip(q,0x0 /* 0.000000 */,0x10000 /* 1.000000 */);
   fix16_t fix_q;
   fix_q = ((0x10000 /* 1.000000 */ + (- q)) << 1);
   if(Synth2_change(_ctx._inst27,fc)){
      _ctx.g = (fc >> 1);
   }
   fix16_t x1;
   x1 = Synth2_svf_step(_ctx.step,input,_ctx.g,fix_q,sel);
   fix16_t x2;
   x2 = Synth2_svf_step(_ctx.step,input,_ctx.g,fix_q,sel);
   return ((x1 + x2) >> 1);
}

void Synth2__ctx_type_14_init(Synth2__ctx_type_14 &_output_){
   Synth2__ctx_type_14 _ctx;
   _ctx.phase = 0x0 /* 0.000000 */;
   Synth2__ctx_type_4_init(_ctx._inst32);
   Synth2__ctx_type_3_init(_ctx._inst30);
   _output_ = _ctx;
   return ;
}

void Synth2_lfo_init(Synth2__ctx_type_14 &_output_){
   Synth2__ctx_type_14_init(_output_);
   return ;
}

fix16_t Synth2_lfo(Synth2__ctx_type_14 &_ctx, fix16_t f, uint8_t gate){
   fix16_t rate;
   rate = (fix_mul(0x64 /* 0.001526 */,f) + 0x1 /* 0.000015 */);
   if(Synth2_edge(_ctx._inst30,gate)){
      _ctx.phase = 0x0 /* 0.000000 */;
   }
   if(Synth2_each(_ctx._inst32,4)){
      _ctx.phase = (_ctx.phase + rate);
   }
   if(_ctx.phase > 0x10000 /* 1.000000 */){
      _ctx.phase = (_ctx.phase + -0x10000 /* -1.000000 */);
   }
   return (fix_sin(fix_mul(0x6487e /* 6.283185 */,_ctx.phase)) + 0x8000 /* 0.500000 */);
}

void Synth2__ctx_type_15_init(Synth2__ctx_type_15 &_output_){
   Synth2__ctx_type_15 _ctx;
   _ctx.pre = 0;
   int_init_array(4,0,_ctx.notes);
   _ctx.count = 0;
   _output_ = _ctx;
   return ;
}

void Synth2_mono_noteOn_init(Synth2__ctx_type_15 &_output_){
   Synth2__ctx_type_15_init(_output_);
   return ;
}

int Synth2_mono_noteOn(Synth2__ctx_type_15 &_ctx, int n){
   if(_ctx.count < 4){
      int_set(_ctx.notes,_ctx.count,n);
      _ctx.pre = n;
      if(_ctx.count < 4){
         _ctx.count = (_ctx.count + 1);
      }
   }
   return _ctx.pre;
}

void Synth2_mono_noteOff_init(Synth2__ctx_type_15 &_output_){
   Synth2__ctx_type_15_init(_output_);
   return ;
}

int Synth2_mono_noteOff(Synth2__ctx_type_15 &_ctx, int n){
   uint8_t found;
   found = false;
   int pos;
   int i;
   i = 0;
   if(_ctx.count == 0){
      return _ctx.pre;
   }
   while((i < 4) && bool_not(found)){
      if(int_get(_ctx.notes,i) == n){
         pos = i;
         found = true;
      }
      i = (i + 1);
   }
   if(found){
      int k;
      k = (pos + 1);
      while(k < 4){
         int_set(_ctx.notes,(k + (-1)),int_get(_ctx.notes,k));
         k = (k + 1);
      }
      if(found && (_ctx.count > 0)){
         _ctx.count = (_ctx.count + (-1));
         _ctx.pre = int_get(_ctx.notes,(_ctx.count + (-1)));
      }
   }
   return _ctx.pre;
}

void Synth2_mono_isGateOn_init(Synth2__ctx_type_15 &_output_){
   Synth2__ctx_type_15_init(_output_);
   return ;
}

uint8_t Synth2_mono_isGateOn(Synth2__ctx_type_15 &_ctx){
   return (_ctx.count > 0);
}

void Synth2__ctx_type_16_init(Synth2__ctx_type_16 &_output_){
   Synth2__ctx_type_16 _ctx;
   _ctx.wave = 0x0 /* 0.000000 */;
   _ctx.volume = 0x0 /* 0.000000 */;
   _ctx.res = 0x0 /* 0.000000 */;
   _ctx.pw = 0x0 /* 0.000000 */;
   _ctx.pitch = 0x0 /* 0.000000 */;
   Synth2__ctx_type_15_init(_ctx.monoin);
   _ctx.lfo_rate = 0x0 /* 0.000000 */;
   _ctx.lfo_amt = 0x0 /* 0.000000 */;
   _ctx.cut = 0x0 /* 0.000000 */;
   _ctx.amp_s = 0x0 /* 0.000000 */;
   Synth2__ctx_type_13_init(_ctx._inst50);
   Synth2__ctx_type_7_init(_ctx._inst49);
   Synth2__ctx_type_11_init(_ctx._inst48);
   Synth2__ctx_type_14_init(_ctx._inst47);
   Synth2_default(_ctx);
   _output_ = _ctx;
   return ;
}

void Synth2_process_init(Synth2__ctx_type_16 &_output_){
   Synth2__ctx_type_16_init(_output_);
   return ;
}

fix16_t Synth2_process(Synth2__ctx_type_16 &_ctx, fix16_t i){
   uint8_t gate;
   gate = Synth2_mono_isGateOn(_ctx.monoin);
   fix16_t lfo1;
   lfo1 = fix_mul(Synth2_lfo(_ctx._inst47,_ctx.lfo_rate,gate),_ctx.lfo_amt);
   fix16_t o1;
   o1 = Synth2_osc(_ctx._inst48,_ctx.pitch,(_ctx.pw + lfo1),_ctx.wave);
   fix16_t amp_env;
   fix16_t _if_80;
   if(gate){
      _if_80 = 0x10000 /* 1.000000 */;
   }
   else
   {
      _if_80 = 0x0 /* 0.000000 */;
   }
   amp_env = Synth2_smooth(_ctx._inst49,_if_80);
   fix16_t output;
   output = fix_mul(amp_env,Synth2_svf(_ctx._inst50,o1,_ctx.cut,_ctx.res,0));
   return fix_mul(_ctx.volume,output);
}

void Synth2_noteOn_init(Synth2__ctx_type_16 &_output_){
   Synth2__ctx_type_16_init(_output_);
   return ;
}

void Synth2_noteOn(Synth2__ctx_type_16 &_ctx, int note, int velocity, int channel){
   _ctx.pitch = int_to_fix(Synth2_mono_noteOn(_ctx.monoin,note));
}

void Synth2_noteOff_init(Synth2__ctx_type_16 &_output_){
   Synth2__ctx_type_16_init(_output_);
   return ;
}

void Synth2_noteOff(Synth2__ctx_type_16 &_ctx, int note, int channel){
   _ctx.pitch = int_to_fix(Synth2_mono_noteOff(_ctx.monoin,note));
}

void Synth2_controlChange_init(Synth2__ctx_type_16 &_output_){
   Synth2__ctx_type_16_init(_output_);
   return ;
}

void Synth2_controlChange(Synth2__ctx_type_16 &_ctx, int control, int value, int channel){
   fix16_t value_0_1;
   value_0_1 = fix_mul(int_to_fix(value),0x204 /* 0.007874 */);
   fix16_t value_m1_1;
   value_m1_1 = ((value_0_1 << 1) + -0x10000 /* -1.000000 */);
   if(control == 30){
      _ctx.volume = value_0_1;
   }
   if(control == 31){
      _ctx.wave = value_0_1;
   }
   if(control == 32){
      _ctx.pw = value_0_1;
   }
   if(control == 33){
      _ctx.lfo_rate = value_0_1;
   }
   if(control == 34){
      _ctx.lfo_amt = value_m1_1;
   }
   if(control == 35){
      _ctx.cut = value_0_1;
   }
   if(control == 36){
      _ctx.res = value_0_1;
   }
}

void Synth2_default_init(Synth2__ctx_type_16 &_output_){
   Synth2__ctx_type_16_init(_output_);
   return ;
}

void Synth2_default(Synth2__ctx_type_16 &_ctx){
   _ctx.volume = 0x10000 /* 1.000000 */;
   _ctx.pw = 0x0 /* 0.000000 */;
   _ctx.pitch = 0x2a0000 /* 42.000000 */;
   _ctx.cut = 0x10000 /* 1.000000 */;
   _ctx.res = 0x0 /* 0.000000 */;
   _ctx.amp_s = 0x10000 /* 1.000000 */;
   _ctx.lfo_amt = 0x8000 /* 0.500000 */;
   _ctx.lfo_rate = 0x0 /* 0.000000 */;
}


