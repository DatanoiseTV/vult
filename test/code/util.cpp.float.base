
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#include "util.h"

void Util__ctx_type_0_init(Util__ctx_type_0 &_output_){
   Util__ctx_type_0 _ctx;
   _ctx.pre_x = 0.f;
   _output_ = _ctx;
   return ;
}

void Util_change_init(Util__ctx_type_0 &_output_){
   Util__ctx_type_0_init(_output_);
   return ;
}

uint8_t Util_change(Util__ctx_type_0 &_ctx, float x){
   uint8_t v;
   v = (_ctx.pre_x != x);
   _ctx.pre_x = x;
   return v;
}

float Util_pitchToRate(float d){
   return (0.000185392290249f * expf((0.0577623f * d)));
}

void Util__ctx_type_2_init(Util__ctx_type_2 &_output_){
   Util__ctx_type_2 _ctx;
   _ctx.rate = 0.f;
   _ctx.phase = 0.f;
   Util__ctx_type_0_init(_ctx._inst1);
   Util_phasorInit(_ctx);
   _output_ = _ctx;
   return ;
}

void Util_phasor_init(Util__ctx_type_2 &_output_){
   Util__ctx_type_2_init(_output_);
   return ;
}

float Util_phasor(Util__ctx_type_2 &_ctx, float pitch, uint8_t reset){
   uint8_t _cond_3;
   _cond_3 = Util_change(_ctx._inst1,pitch);
   if(_cond_3){
      _ctx.rate = Util_pitchToRate(pitch);
   }
   if(reset){ _ctx.phase = 0.f; }
   else
   { _ctx.phase = fmodf((_ctx.phase + _ctx.rate),1.f); }
   return _ctx.phase;
}

void Util_phasorInit_init(Util__ctx_type_2 &_output_){
   Util__ctx_type_2_init(_output_);
   return ;
}

void Util_phasorInit(Util__ctx_type_2 &_ctx){
   _ctx.rate = 0.00593256572975f;
}

float Util_minFixed(){
   return 1.52588e-05f;
}


