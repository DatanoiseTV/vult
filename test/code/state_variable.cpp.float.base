
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#include "state_variable.h"

void State_variable__ctx_type_0_init(State_variable__ctx_type_0 &_output_){
   State_variable__ctx_type_0 _ctx;
   _ctx.pre_x = 0.f;
   _output_ = _ctx;
   return ;
}

void State_variable_change_init(State_variable__ctx_type_0 &_output_){
   State_variable__ctx_type_0_init(_output_);
   return ;
}

uint8_t State_variable_change(State_variable__ctx_type_0 &_ctx, float x){
   uint8_t v;
   v = (_ctx.pre_x != x);
   _ctx.pre_x = x;
   return v;
}

void State_variable__ctx_type_1_init(State_variable__ctx_type_1 &_output_){
   State_variable__ctx_type_1 _ctx;
   _ctx.dlow = 0.f;
   _ctx.dband = 0.f;
   _output_ = _ctx;
   return ;
}

void State_variable_svf_step_init(State_variable__ctx_type_1 &_output_){
   State_variable__ctx_type_1_init(_output_);
   return ;
}

float State_variable_svf_step(State_variable__ctx_type_1 &_ctx, float input, float g, float q, int sel){
   float low;
   low = (_ctx.dlow + (g * _ctx.dband));
   float high;
   high = (input + (- low) + (- (q * _ctx.dband)));
   float band;
   band = ((g * high) + _ctx.dband);
   float notch;
   notch = (high + low);
   _ctx.dband = float_clip(band,(-1.f),1.f);
   _ctx.dlow = float_clip(low,(-1.f),1.f);
   float output;
   uint8_t _cond_5;
   _cond_5 = (sel == 0);
   if(_cond_5){ output = low; }
   else
   {
      uint8_t _cond_7;
      _cond_7 = (sel == 1);
      if(_cond_7){ output = high; }
      else
      {
         uint8_t _cond_8;
         _cond_8 = (sel == 2);
         if(_cond_8){ output = band; }
         else
         { output = notch; }
      }
   }
   return output;
}

void State_variable__ctx_type_2_init(State_variable__ctx_type_2 &_output_){
   State_variable__ctx_type_2 _ctx;
   State_variable__ctx_type_1_init(_ctx.step);
   _ctx.g = 0.f;
   State_variable__ctx_type_0_init(_ctx._inst3);
   _output_ = _ctx;
   return ;
}

void State_variable_svf_init(State_variable__ctx_type_2 &_output_){
   State_variable__ctx_type_2_init(_output_);
   return ;
}

float State_variable_svf(State_variable__ctx_type_2 &_ctx, float input, float fc, float q, int sel){
   fc = float_clip(fc,0.f,1.f);
   q = float_clip(q,0.f,1.f);
   float fix_q;
   fix_q = (2.f * (1.f + (- q)));
   uint8_t _cond_6;
   _cond_6 = State_variable_change(_ctx._inst3,fc);
   if(_cond_6){
      _ctx.g = (fc * 0.5f);
   }
   float x1;
   x1 = State_variable_svf_step(_ctx.step,input,_ctx.g,fix_q,sel);
   float x2;
   x2 = State_variable_svf_step(_ctx.step,input,_ctx.g,fix_q,sel);
   return ((x1 + x2) * 0.5f);
}


