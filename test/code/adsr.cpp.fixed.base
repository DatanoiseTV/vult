
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#include "adsr.h"

void Adsr__ctx_type_0_init(Adsr__ctx_type_0 &_output_){
   Adsr__ctx_type_0 _ctx;
   _ctx.target = 0x0 /* 0.000000 */;
   _ctx.state = 0;
   _ctx.rate = 0x0 /* 0.000000 */;
   _ctx.out = 0x0 /* 0.000000 */;
   _output_ = _ctx;
   return ;
}

void Adsr_adsr_init(Adsr__ctx_type_0 &_output_){
   Adsr__ctx_type_0_init(_output_);
   return ;
}

fix16_t Adsr_adsr(Adsr__ctx_type_0 &_ctx, uint8_t gate, fix16_t a, fix16_t d, fix16_t s, fix16_t r){
   _ctx.out = fix_add(_ctx.out,fix_mul(fix_mul(fix_add(_ctx.target,(- _ctx.out)),_ctx.rate),0x41 /* 0.001000 */));
   if(_ctx.state == 0){
      if(gate){
         _ctx.state = 1;
      }
      _ctx.rate = r;
      _ctx.target = 0x0 /* 0.000000 */;
   }
   if(_ctx.state == 1){
      if(bool_not(gate)){
         _ctx.state = 0;
      }
      if(_ctx.out > 0x4000000 /* 1024.000000 */){
         _ctx.state = 2;
      }
      _ctx.rate = a;
      _ctx.target = 0x4cccccc /* 1228.800000 */;
   }
   if(_ctx.state == 2){
      if(bool_not(gate)){
         _ctx.state = 0;
      }
      _ctx.rate = d;
      _ctx.target = fix_mul(s,0x4000000 /* 1024.000000 */);
   }
   return fix_mul(_ctx.out,0x40 /* 0.000977 */);
}


