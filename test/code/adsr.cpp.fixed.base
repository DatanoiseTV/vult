
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#include "adsr.h"

void Util__ctx_type_0_init(Util__ctx_type_0 &_output_){
   Util__ctx_type_0 _ctx;
   _ctx.pre = 0;
   _output_ = _ctx;
   return ;
}

void Util_edge_init(Util__ctx_type_0 &_output_){
   Util__ctx_type_0_init(_output_);
   return ;
}

uint8_t Util_edge(Util__ctx_type_0 &_ctx, uint8_t x){
   uint8_t ret;
   ret = (x && bool_not(_ctx.pre));
   _ctx.pre = x;
   return ret;
}

void Util__ctx_type_1_init(Util__ctx_type_1 &_output_){
   Util__ctx_type_1 _ctx;
   _ctx.pre_x = 0x0 /* 0.000000 */;
   _output_ = _ctx;
   return ;
}

void Util_change_init(Util__ctx_type_1 &_output_){
   Util__ctx_type_1_init(_output_);
   return ;
}

uint8_t Util_change(Util__ctx_type_1 &_ctx, fix16_t x){
   uint8_t v;
   v = (_ctx.pre_x != x);
   _ctx.pre_x = x;
   return v;
}

fix16_t Util_map(fix16_t x, fix16_t x0, fix16_t x1, fix16_t y0, fix16_t y1){
   return (fix_div(fix_mul((x + (- x0)),(y1 + (- y0))),(x1 + (- x0))) + y0);
}

void Util__ctx_type_3_init(Util__ctx_type_3 &_output_){
   Util__ctx_type_3 _ctx;
   _ctx.y1 = 0x0 /* 0.000000 */;
   _ctx.x1 = 0x0 /* 0.000000 */;
   _output_ = _ctx;
   return ;
}

void Util_dcblock_init(Util__ctx_type_3 &_output_){
   Util__ctx_type_3_init(_output_);
   return ;
}

fix16_t Util_dcblock(Util__ctx_type_3 &_ctx, fix16_t x0){
   fix16_t y0;
   y0 = (x0 + (- _ctx.x1) + fix_mul(_ctx.y1,0xfeb8 /* 0.995000 */));
   _ctx.x1 = x0;
   _ctx.y1 = y0;
   return y0;
}

void Util__ctx_type_4_init(Util__ctx_type_4 &_output_){
   Util__ctx_type_4 _ctx;
   _ctx.x = 0x0 /* 0.000000 */;
   _output_ = _ctx;
   return ;
}

void Util_smooth_init(Util__ctx_type_4 &_output_){
   Util__ctx_type_4_init(_output_);
   return ;
}

fix16_t Util_smooth(Util__ctx_type_4 &_ctx, fix16_t input){
   _ctx.x = (_ctx.x + fix_mul((input + (- _ctx.x)),0x147 /* 0.005000 */));
   return _ctx.x;
}

void Util__ctx_type_5_init(Util__ctx_type_5 &_output_){
   Util__ctx_type_5 _ctx;
   _ctx.x0 = 0x0 /* 0.000000 */;
   _output_ = _ctx;
   return ;
}

void Util_average2_init(Util__ctx_type_5 &_output_){
   Util__ctx_type_5_init(_output_);
   return ;
}

fix16_t Util_average2(Util__ctx_type_5 &_ctx, fix16_t x1){
   fix16_t result;
   result = fix_mul((_ctx.x0 + x1),0x8000 /* 0.500000 */);
   _ctx.x0 = x1;
   return result;
}

fix16_t Util_cubic_clipper(fix16_t x){
   uint8_t _cond_21;
   _cond_21 = (x <= (-0xaaaa /* -0.666667 */));
   if(_cond_21){
      return (-0xaaaa /* -0.666667 */);
   }
   else
   {
      uint8_t _cond_20;
      _cond_20 = (x >= 0xaaaa /* 0.666667 */);
      if(_cond_20){
         return 0xaaaa /* 0.666667 */;
      }
      else
      {
         return (x + fix_mul(fix_mul(fix_mul((-0x5555 /* -0.333333 */),x),x),x));
      }
   }
}

fix16_t Util_pitchToRate_1024(fix16_t pitch){
   int index;
   index = int_clip(fix_to_int(fix_mul(0x3e7c /* 0.244094 */,pitch)),0,31);
   return (fix_get(fix_wrap_array(Util_pitchToRate_1024_c0),index) + fix_mul(pitch,(fix_get(fix_wrap_array(Util_pitchToRate_1024_c1),index) + fix_mul(fix_get(fix_wrap_array(Util_pitchToRate_1024_c2),index),pitch))));
}

fix16_t Util_pitchToRate(fix16_t pitch){
   int index;
   index = int_clip(fix_to_int(fix_mul(0x3e7c /* 0.244094 */,pitch)),0,31);
   return (fix_get(fix_wrap_array(Util_pitchToRate_c0),index) + fix_mul(pitch,(fix_get(fix_wrap_array(Util_pitchToRate_c1),index) + fix_mul(fix_get(fix_wrap_array(Util_pitchToRate_c2),index),pitch))));
}

fix16_t Util_cvToPitch(fix16_t cv){
   return (fix_mul(cv,0x780000 /* 120.000000 */) + 0x180000 /* 24.000000 */);
}

fix16_t Util_cvToRate_1024(fix16_t cv){
   int index;
   index = int_clip(fix_to_int(fix_mul(0x2271c7 /* 34.444444 */,cv)),0,31);
   return (fix_get(fix_wrap_array(Util_cvToRate_1024_c0),index) + fix_mul(cv,(fix_get(fix_wrap_array(Util_cvToRate_1024_c1),index) + fix_mul(fix_get(fix_wrap_array(Util_cvToRate_1024_c2),index),cv))));
}

fix16_t Util_cvToRate(fix16_t cv){
   int index;
   index = int_clip(fix_to_int(fix_mul(0x2271c7 /* 34.444444 */,cv)),0,31);
   return (fix_get(fix_wrap_array(Util_cvToRate_c0),index) + fix_mul(cv,(fix_get(fix_wrap_array(Util_cvToRate_c1),index) + fix_mul(fix_get(fix_wrap_array(Util_cvToRate_c2),index),cv))));
}

fix16_t Util_pitchToCv(fix16_t pitch){
   return fix_mul(0x222 /* 0.008333 */,((-0x180000 /* -24.000000 */) + pitch));
}

fix16_t Util_cvToperiod(fix16_t cv){
   int index;
   index = int_clip(fix_to_int(fix_mul(0x1f0000 /* 31.000000 */,cv)),0,31);
   return (fix_get(fix_wrap_array(Util_cvToperiod_c0),index) + fix_mul(cv,(fix_get(fix_wrap_array(Util_cvToperiod_c1),index) + fix_mul(fix_get(fix_wrap_array(Util_cvToperiod_c2),index),cv))));
}

fix16_t Util_cvTokHz(fix16_t cv){
   int index;
   index = int_clip(fix_to_int(fix_mul(0x1f0000 /* 31.000000 */,cv)),0,31);
   return (fix_get(fix_wrap_array(Util_cvTokHz_c0),index) + fix_mul(cv,(fix_get(fix_wrap_array(Util_cvTokHz_c1),index) + fix_mul(fix_get(fix_wrap_array(Util_cvTokHz_c2),index),cv))));
}

void Adsr__ctx_type_0_init(Adsr__ctx_type_0 &_output_){
   Adsr__ctx_type_0 _ctx;
   _ctx.target = 0x0 /* 0.000000 */;
   _ctx.state = 0;
   _ctx.scale = 0x0 /* 0.000000 */;
   _ctx.rate = 0x0 /* 0.000000 */;
   _ctx.out = 0x0 /* 0.000000 */;
   Util__ctx_type_4_init(_ctx._inst31);
   Util__ctx_type_0_init(_ctx._inst24);
   _output_ = _ctx;
   return ;
}

void Adsr_do_init(Adsr__ctx_type_0 &_output_){
   Adsr__ctx_type_0_init(_output_);
   return ;
}

fix16_t Adsr_do(Adsr__ctx_type_0 &_ctx, fix16_t gate, fix16_t a, fix16_t d, fix16_t s, fix16_t r){
   fix16_t a_rate;
   a_rate = fix_div(0x10000 /* 1.000000 */,(fix_mul(0x640000 /* 100.000000 */,a) + 0x28f /* 0.010000 */));
   fix16_t d_rate;
   d_rate = fix_div(0x10000 /* 1.000000 */,(fix_mul(0x640000 /* 100.000000 */,d) + 0x28f /* 0.010000 */));
   fix16_t r_rate;
   r_rate = fix_div(0x10000 /* 1.000000 */,(fix_mul(0x640000 /* 100.000000 */,r) + 0x28f /* 0.010000 */));
   _ctx.out = (_ctx.out + fix_mul(fix_mul((_ctx.target + (- _ctx.out)),_ctx.rate),0x106 /* 0.004000 */));
   uint8_t bgate;
   bgate = (gate > 0x0 /* 0.000000 */);
   uint8_t _cond_43;
   _cond_43 = (_ctx.state == 0);
   if(_cond_43){
      uint8_t _cond_42;
      _cond_42 = Util_edge(_ctx._inst24,bgate);
      if(_cond_42){
         _ctx.state = 1;
         _ctx.scale = fix_mul(gate,0x3333 /* 0.200000 */);
      }
      _ctx.rate = r_rate;
      _ctx.target = 0x0 /* 0.000000 */;
   }
   uint8_t _cond_46;
   _cond_46 = (_ctx.state == 1);
   if(_cond_46){
      uint8_t _cond_44;
      _cond_44 = bool_not(bgate);
      if(_cond_44){
         _ctx.state = 0;
      }
      uint8_t _cond_45;
      _cond_45 = (_ctx.out > 0x4000000 /* 1024.000000 */);
      if(_cond_45){
         _ctx.state = 2;
      }
      _ctx.rate = a_rate;
      _ctx.target = 0x4cccccc /* 1228.800000 */;
   }
   uint8_t _cond_48;
   _cond_48 = (_ctx.state == 2);
   if(_cond_48){
      uint8_t _cond_47;
      _cond_47 = bool_not(bgate);
      if(_cond_47){
         _ctx.state = 0;
      }
      _ctx.rate = d_rate;
      _ctx.target = fix_mul(s,0x4000000 /* 1024.000000 */);
   }
   return fix_mul(Util_smooth(_ctx._inst31,_ctx.scale),fix_clip(fix_mul(_ctx.out,0x40 /* 0.000977 */),0x0 /* 0.000000 */,0x10000 /* 1.000000 */));
}

void Adsr__ctx_type_1_init(Adsr__ctx_type_1 &_output_){
   Adsr__ctx_type_1 _ctx;
   _ctx.knob4 = 0x0 /* 0.000000 */;
   _ctx.knob3 = 0x0 /* 0.000000 */;
   _ctx.knob2 = 0x0 /* 0.000000 */;
   _ctx.knob1 = 0x0 /* 0.000000 */;
   Adsr__ctx_type_0_init(_ctx._inst33);
   _output_ = _ctx;
   return ;
}

void Adsr_process_init(Adsr__ctx_type_1 &_output_){
   Adsr__ctx_type_1_init(_output_);
   return ;
}

fix16_t Adsr_process(Adsr__ctx_type_1 &_ctx, fix16_t gate){
   return Adsr_do(_ctx._inst33,gate,_ctx.knob1,_ctx.knob2,_ctx.knob3,_ctx.knob4);
}

void Adsr_noteOn_init(Adsr__ctx_type_1 &_output_){
   Adsr__ctx_type_1_init(_output_);
   return ;
}

void Adsr_noteOn(Adsr__ctx_type_1 &_ctx, int note, int velocity, int channel){
}

void Adsr_noteOff_init(Adsr__ctx_type_1 &_output_){
   Adsr__ctx_type_1_init(_output_);
   return ;
}

void Adsr_noteOff(Adsr__ctx_type_1 &_ctx, int note, int channel){
}

void Adsr_controlChange_init(Adsr__ctx_type_1 &_output_){
   Adsr__ctx_type_1_init(_output_);
   return ;
}

void Adsr_controlChange(Adsr__ctx_type_1 &_ctx, int control, int value, int channel){
   uint8_t _cond_49;
   _cond_49 = (control == 1);
   if(_cond_49){
      _ctx.knob1 = fix_mul(int_to_fix(value),0x204 /* 0.007874 */);
   }
   uint8_t _cond_50;
   _cond_50 = (control == 2);
   if(_cond_50){
      _ctx.knob2 = fix_mul(int_to_fix(value),0x204 /* 0.007874 */);
   }
   uint8_t _cond_51;
   _cond_51 = (control == 3);
   if(_cond_51){
      _ctx.knob3 = fix_mul(int_to_fix(value),0x204 /* 0.007874 */);
   }
   uint8_t _cond_52;
   _cond_52 = (control == 4);
   if(_cond_52){
      _ctx.knob4 = fix_mul(int_to_fix(value),0x204 /* 0.007874 */);
   }
}

void Adsr_default_init(Adsr__ctx_type_1 &_output_){
   Adsr__ctx_type_1_init(_output_);
   return ;
}

void Adsr_default(Adsr__ctx_type_1 &_ctx){
   _ctx.knob1 = 0x0 /* 0.000000 */;
   _ctx.knob2 = 0x8000 /* 0.500000 */;
   _ctx.knob3 = 0x10000 /* 1.000000 */;
   _ctx.knob4 = 0x8000 /* 0.500000 */;
}


