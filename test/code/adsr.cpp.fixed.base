#include "adsr.h"

_ctx_type_0 _ctx_type_0_init(){
   _ctx_type_0 _ctx;
   _ctx.count = 0;
   return _ctx;
}

_ctx_type_0 each_init(){ return _ctx_type_0_init();}

uint8_t each(_ctx_type_0 &_ctx, int n){
   uint8_t ret = (_ctx.count == 0);
   _ctx.count = ((_ctx.count + 1) % n);
   return ret;
}

_ctx_type_1 _ctx_type_1_init(){
   _ctx_type_1 _ctx;
   _ctx.pre_x = 0;
   return _ctx;
}

_ctx_type_1 bchange_init(){ return _ctx_type_1_init();}

uint8_t bchange(_ctx_type_1 &_ctx, uint8_t x){
   uint8_t v = (_ctx.pre_x != x);
   _ctx.pre_x = x;
   return v;
}

_ctx_type_2 _ctx_type_2_init(){
   _ctx_type_2 _ctx;
   _ctx.pre_x = 0x0 /* 0.000000 */;
   return _ctx;
}

_ctx_type_2 lpfilter_init(){ return _ctx_type_2_init();}

int32_t lpfilter(_ctx_type_2 &_ctx, int32_t x){
   int32_t ret = fix_div(fix_add(x,_ctx.pre_x),0x20000 /* 2.000000 */);
   _ctx.pre_x = x;
   return ret;
}

_ctx_type_3 _ctx_type_3_init(){
   _ctx_type_3 _ctx;
   _ctx.value = 0x0 /* 0.000000 */;
   _ctx.sustainLevel = 0x0 /* 0.000000 */;
   _ctx.state = 0;
   _ctx.releaseRate = 0x0 /* 0.000000 */;
   _ctx.gate = 0;
   _ctx.decayRate = 0x0 /* 0.000000 */;
   _ctx.attackRate = 0x0 /* 0.000000 */;
   _ctx._inst2 = _ctx_type_2_init();
   _ctx._inst1 = _ctx_type_1_init();
   _ctx._inst0 = _ctx_type_0_init();
   return _ctx;
}

_ctx_type_3 adsr_init(){ return _ctx_type_3_init();}

int32_t adsr(_ctx_type_3 &_ctx, uint8_t gate, int32_t attack, int32_t decay, int32_t sustain, int32_t release){
   int IDLE = 0;
   int ATTACK = 1;
   int DECAY = 2;
   int SUSTAIN = 3;
   int RELEASE = 4;
   if(each(_ctx._inst0,32)){
      _ctx.attackRate = fix_mul(fix_div(0x10000 /* 1.000000 */,0xac440000 /* 44100.000000 */),fix_div(0x10000 /* 1.000000 */,fix_add(attack,0x1999 /* 0.100000 */)));
      int32_t inv_sustain = fix_sub(0x10000 /* 1.000000 */,sustain);
      _ctx.decayRate = fix_mul(fix_div(inv_sustain,0xac440000 /* 44100.000000 */),fix_div(inv_sustain,fix_add(decay,0x1999 /* 0.100000 */)));
      _ctx.releaseRate = fix_mul(fix_div(0x8000 /* 0.500000 */,0xac440000 /* 44100.000000 */),fix_div(0x8000 /* 0.500000 */,fix_add(release,0x1999 /* 0.100000 */)));
   }
   _ctx.sustainLevel = sustain;
   uint8_t trig = 0;
   int32_t rate = 0x0 /* 0.000000 */;
   trig = bchange(_ctx._inst1,_ctx.gate);
   uint8_t up = (trig && _ctx.gate);
   uint8_t down = (trig && (! _ctx.gate));
   if(_ctx.state == IDLE){
      if(up){
         _ctx.state = ATTACK;
      }
   }
   else
   {
      if(_ctx.state == ATTACK){
         if(_ctx.value >= 0x10000 /* 1.000000 */){
            _ctx.state = DECAY;
         }
         if(down){
            _ctx.state = RELEASE;
         }
         rate = _ctx.attackRate;
      }
      else
      {
         if(_ctx.state == DECAY){
            if(_ctx.value <= _ctx.sustainLevel){
               _ctx.state = SUSTAIN;
            }
            if(down){
               _ctx.state = RELEASE;
            }
            rate = (- _ctx.decayRate);
         }
         else
         {
            if(_ctx.state == SUSTAIN){
               if(down){
                  _ctx.state = RELEASE;
               }
               rate = 0x0 /* 0.000000 */;
               _ctx.value = _ctx.sustainLevel;
            }
            else
            {
               if(_ctx.state == RELEASE){
                  if(_ctx.value <= 0x0 /* 0.000000 */){
                     _ctx.state = IDLE;
                  }
                  if(up){
                     _ctx.state = ATTACK;
                  }
                  rate = (- _ctx.releaseRate);
               }
            }
         }
      }
   }
   _ctx.value = fix_clip(fix_add(lpfilter(_ctx._inst2,rate),_ctx.value),0x0 /* 0.000000 */,0x10000 /* 1.000000 */);
   return _ctx.value;
}


