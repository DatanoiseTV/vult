
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#include "kick.h"

void Noise__ctx_type_0_init(Noise__ctx_type_0 &_output_){
   Noise__ctx_type_0 _ctx;
   _ctx.w1 = 0.f;
   _output_ = _ctx;
   return ;
}

void Noise_pinker_init(Noise__ctx_type_0 &_output_){
   Noise__ctx_type_0_init(_output_);
   return ;
}

float Noise_pinker(Noise__ctx_type_0 &_ctx, float x){
   float b0;
   b0 = 0.027713f;
   float b1;
   b1 = 0.027713f;
   float a1;
   a1 = -0.944574f;
   float w0;
   w0 = (x + (- (a1 * _ctx.w1)));
   float y0;
   y0 = ((b0 * w0) + (b1 * _ctx.w1));
   _ctx.w1 = w0;
   return y0;
}

void Noise__ctx_type_1_init(Noise__ctx_type_1 &_output_){
   Noise__ctx_type_1 _ctx;
   _ctx.x2 = 0;
   _ctx.x1 = 0;
   Noise__ctx_type_0_init(_ctx._inst2);
   _output_ = _ctx;
   return ;
}

void Noise_process_init(Noise__ctx_type_1 &_output_){
   Noise__ctx_type_1_init(_output_);
   return ;
}

float Noise_process(Noise__ctx_type_1 &_ctx, float color){
   _ctx.x1 = (((_ctx.x1 * 17389) + 7919) % 32768);
   float y1;
   y1 = (int_to_float(_ctx.x1) * 3.06e-05f);
   _ctx.x2 = (((_ctx.x2 * 27449) + 12553) % 32768);
   float y2;
   y2 = (int_to_float(_ctx.x2) * 3.06e-05f);
   float out;
   if(color > 0.5f){
      out = Noise_pinker(_ctx._inst2,(y1 + (- y2)));
   }
   else
   {
      out = (y1 + (- y2));
   }
   return (2.f * out);
}

void Noise_noteOn_init(Noise__ctx_type_1 &_output_){
   Noise__ctx_type_1_init(_output_);
   return ;
}

void Noise_noteOn(Noise__ctx_type_1 &_ctx, int note, int velocity, int channel){
}

void Noise_noteOff_init(Noise__ctx_type_1 &_output_){
   Noise__ctx_type_1_init(_output_);
   return ;
}

void Noise_noteOff(Noise__ctx_type_1 &_ctx, int note, int channel){
}

void Noise_controlChange_init(Noise__ctx_type_1 &_output_){
   Noise__ctx_type_1_init(_output_);
   return ;
}

void Noise_controlChange(Noise__ctx_type_1 &_ctx, int control, int value, int channel){
}

void Noise_default_init(Noise__ctx_type_1 &_output_){
   Noise__ctx_type_1_init(_output_);
   return ;
}

void Noise_default(Noise__ctx_type_1 &_ctx){
}

void Util__ctx_type_0_init(Util__ctx_type_0 &_output_){
   Util__ctx_type_0 _ctx;
   _ctx.pre = false;
   _output_ = _ctx;
   return ;
}

void Util_edge_init(Util__ctx_type_0 &_output_){
   Util__ctx_type_0_init(_output_);
   return ;
}

uint8_t Util_edge(Util__ctx_type_0 &_ctx, uint8_t x){
   uint8_t ret;
   ret = (x && bool_not(_ctx.pre));
   _ctx.pre = x;
   return ret;
}

void Util__ctx_type_1_init(Util__ctx_type_1 &_output_){
   Util__ctx_type_1 _ctx;
   _ctx.pre_x = 0.f;
   _output_ = _ctx;
   return ;
}

void Util_change_init(Util__ctx_type_1 &_output_){
   Util__ctx_type_1_init(_output_);
   return ;
}

uint8_t Util_change(Util__ctx_type_1 &_ctx, float x){
   uint8_t v;
   v = (_ctx.pre_x != x);
   _ctx.pre_x = x;
   return v;
}

float Util_map(float x, float x0, float x1, float y0, float y1){
   return ((((x + (- x0)) * (y1 + (- y0))) / (x1 + (- x0))) + y0);
}

void Util__ctx_type_3_init(Util__ctx_type_3 &_output_){
   Util__ctx_type_3 _ctx;
   _ctx.y1 = 0.f;
   _ctx.x1 = 0.f;
   _output_ = _ctx;
   return ;
}

void Util_dcblock_init(Util__ctx_type_3 &_output_){
   Util__ctx_type_3_init(_output_);
   return ;
}

float Util_dcblock(Util__ctx_type_3 &_ctx, float x0){
   float y0;
   y0 = (x0 + (- _ctx.x1) + (_ctx.y1 * 0.995f));
   _ctx.x1 = x0;
   _ctx.y1 = y0;
   return y0;
}

void Util__ctx_type_4_init(Util__ctx_type_4 &_output_){
   Util__ctx_type_4 _ctx;
   _ctx.x = 0.f;
   _output_ = _ctx;
   return ;
}

void Util_smooth_init(Util__ctx_type_4 &_output_){
   Util__ctx_type_4_init(_output_);
   return ;
}

float Util_smooth(Util__ctx_type_4 &_ctx, float input){
   _ctx.x = (_ctx.x + ((input + (- _ctx.x)) * 0.005f));
   return _ctx.x;
}

void Util__ctx_type_5_init(Util__ctx_type_5 &_output_){
   Util__ctx_type_5 _ctx;
   _ctx.x0 = 0.f;
   _output_ = _ctx;
   return ;
}

void Util_average2_init(Util__ctx_type_5 &_output_){
   Util__ctx_type_5_init(_output_);
   return ;
}

float Util_average2(Util__ctx_type_5 &_ctx, float x1){
   float result;
   result = ((_ctx.x0 + x1) * 0.5f);
   _ctx.x0 = x1;
   return result;
}

float Util_cubic_clipper(float x){
   if(x <= -0.6666666f){
      return -0.6666666f;
   }
   else
   {
      if(x >= 0.6666667f){
         return 0.6666667f;
      }
      else
      {
         return (x + (-0.3333333f * x * x * x));
      }
   }
}

float Util_pitchToRate_1024_raw_c0(int index){
   return Util_pitchToRate_1024_c0[index];
}

float Util_pitchToRate_1024_raw_c1(int index){
   return Util_pitchToRate_1024_c1[index];
}

float Util_pitchToRate_1024_raw_c2(int index){
   return Util_pitchToRate_1024_c2[index];
}

float Util_pitchToRate_1024(float pitch){
   int index;
   index = int_clip(float_to_int((0.2440945f * pitch)),0,31);
   return (float_wrap_array(Util_pitchToRate_1024_c0)[index] + (pitch * (float_wrap_array(Util_pitchToRate_1024_c1)[index] + (float_wrap_array(Util_pitchToRate_1024_c2)[index] * pitch))));
}

float Util_pitchToRate_raw_c0(int index){
   return Util_pitchToRate_c0[index];
}

float Util_pitchToRate_raw_c1(int index){
   return Util_pitchToRate_c1[index];
}

float Util_pitchToRate_raw_c2(int index){
   return Util_pitchToRate_c2[index];
}

float Util_pitchToRate(float pitch){
   int index;
   index = int_clip(float_to_int((0.2440945f * pitch)),0,31);
   return (float_wrap_array(Util_pitchToRate_c0)[index] + (pitch * (float_wrap_array(Util_pitchToRate_c1)[index] + (float_wrap_array(Util_pitchToRate_c2)[index] * pitch))));
}

float Util_cvToPitch(float cv){
   return ((cv * 120.f) + 24.f);
}

float Util_cvToRate_1024_raw_c0(int index){
   return Util_cvToRate_1024_c0[index];
}

float Util_cvToRate_1024_raw_c1(int index){
   return Util_cvToRate_1024_c1[index];
}

float Util_cvToRate_1024_raw_c2(int index){
   return Util_cvToRate_1024_c2[index];
}

float Util_cvToRate_1024(float cv){
   int index;
   index = int_clip(float_to_int((34.4444445f * cv)),0,31);
   return (float_wrap_array(Util_cvToRate_1024_c0)[index] + (cv * (float_wrap_array(Util_cvToRate_1024_c1)[index] + (float_wrap_array(Util_cvToRate_1024_c2)[index] * cv))));
}

float Util_cvToRate_raw_c0(int index){
   return Util_cvToRate_c0[index];
}

float Util_cvToRate_raw_c1(int index){
   return Util_cvToRate_c1[index];
}

float Util_cvToRate_raw_c2(int index){
   return Util_cvToRate_c2[index];
}

float Util_cvToRate(float cv){
   int index;
   index = int_clip(float_to_int((141.1111112f * cv)),0,127);
   return (float_wrap_array(Util_cvToRate_c0)[index] + (cv * (float_wrap_array(Util_cvToRate_c1)[index] + (float_wrap_array(Util_cvToRate_c2)[index] * cv))));
}

float Util_pitchToCv(float pitch){
   return (0.0083334f * (-24.f + pitch));
}

float Util_cvToperiod_raw_c0(int index){
   return Util_cvToperiod_c0[index];
}

float Util_cvToperiod_raw_c1(int index){
   return Util_cvToperiod_c1[index];
}

float Util_cvToperiod_raw_c2(int index){
   return Util_cvToperiod_c2[index];
}

float Util_cvToperiod(float cv){
   int index;
   index = int_clip(float_to_int((31.f * cv)),0,31);
   return (float_wrap_array(Util_cvToperiod_c0)[index] + (cv * (float_wrap_array(Util_cvToperiod_c1)[index] + (float_wrap_array(Util_cvToperiod_c2)[index] * cv))));
}

float Util_cvTokHz_raw_c0(int index){
   return Util_cvTokHz_c0[index];
}

float Util_cvTokHz_raw_c1(int index){
   return Util_cvTokHz_c1[index];
}

float Util_cvTokHz_raw_c2(int index){
   return Util_cvTokHz_c2[index];
}

float Util_cvTokHz(float cv){
   int index;
   index = int_clip(float_to_int((31.f * cv)),0,31);
   return (float_wrap_array(Util_cvTokHz_c0)[index] + (cv * (float_wrap_array(Util_cvTokHz_c1)[index] + (float_wrap_array(Util_cvTokHz_c2)[index] * cv))));
}

void Tricore__ctx_type_0_init(Tricore__ctx_type_0 &_output_){
   Tricore__ctx_type_0 _ctx;
   _ctx.reset_state = false;
   _ctx.reset_phase = 0.f;
   _ctx.rate = 0.f;
   _ctx.phase = 0.f;
   _ctx.direction = false;
   Util__ctx_type_0_init(_ctx._inst30);
   Util__ctx_type_0_init(_ctx._inst29);
   Util__ctx_type_1_init(_ctx._inst27);
   Tricore_default(_ctx);
   _output_ = _ctx;
   return ;
}

void Tricore_process_init(Tricore__ctx_type_0 &_output_){
   Tricore__ctx_type_0_init(_output_);
   return ;
}

float Tricore_process(Tricore__ctx_type_0 &_ctx, float cv, float reset, float disable){
   float out;
   out = 0.f;
   if(Util_change(_ctx._inst27,cv)){
      _ctx.rate = (4.f * Util_cvToRate_1024(cv));
   }
   float new_phase;
   float _if_96;
   if(_ctx.direction){
      _if_96 = _ctx.rate;
   }
   else
   {
      _if_96 = (- _ctx.rate);
   }
   new_phase = (_ctx.phase + _if_96);
   uint8_t bdisable;
   bdisable = (disable > 0.5f);
   if(Util_edge(_ctx._inst29,(reset > 0.f)) || Util_edge(_ctx._inst30,bdisable)){
      _ctx.reset_phase = _ctx.phase;
      _ctx.reset_state = true;
      new_phase = 0.f;
   }
   if(new_phase > 1024.f){
      new_phase = (1024.f + (- (new_phase + -1024.f)));
      _ctx.direction = false;
   }
   else
   {
      if(new_phase < -1024.f){
         _ctx.direction = true;
      }
   }
   if(bdisable){
      _ctx.phase = 0.f;
   }
   else
   {
      _ctx.phase = new_phase;
   }
   if(_ctx.reset_state){
      if((fabsf(_ctx.reset_phase) > 10.f) || bdisable){
         float reset_speed;
         if(bdisable){
            reset_speed = 0.01f;
         }
         else
         {
            reset_speed = 0.5f;
         }
         _ctx.reset_phase = (_ctx.reset_phase + (- (_ctx.reset_phase * reset_speed)));
      }
      else
      {
         uint8_t _cond_100;
         _cond_100 = (_ctx.reset_phase > 10.f);
         if(bool_not(_cond_100)){
            _ctx.reset_phase = 0.f;
         }
         _ctx.reset_state = false;
         _ctx.direction = true;
      }
      out = _ctx.reset_phase;
   }
   out = (out + _ctx.phase);
   return (out * 0.0009766f);
}

void Tricore_noteOn_init(Tricore__ctx_type_0 &_output_){
   Tricore__ctx_type_0_init(_output_);
   return ;
}

void Tricore_noteOn(Tricore__ctx_type_0 &_ctx, int note, int velocity, int channel){
}

void Tricore_noteOff_init(Tricore__ctx_type_0 &_output_){
   Tricore__ctx_type_0_init(_output_);
   return ;
}

void Tricore_noteOff(Tricore__ctx_type_0 &_ctx, int note, int channel){
}

void Tricore_controlChange_init(Tricore__ctx_type_0 &_output_){
   Tricore__ctx_type_0_init(_output_);
   return ;
}

void Tricore_controlChange(Tricore__ctx_type_0 &_ctx, int control, int value, int channel){
}

void Tricore_default_init(Tricore__ctx_type_0 &_output_){
   Tricore__ctx_type_0_init(_output_);
   return ;
}

void Tricore_default(Tricore__ctx_type_0 &_ctx){
   _ctx.rate = 0.7593668f;
}

void Swept__ctx_type_0_init(Swept__ctx_type_0 &_output_){
   Swept__ctx_type_0 _ctx;
   _ctx.out = 0.f;
   Util__ctx_type_0_init(_ctx._inst43);
   _output_ = _ctx;
   return ;
}

void Swept_process_init(Swept__ctx_type_0 &_output_){
   Swept__ctx_type_0_init(_output_);
   return ;
}

float Swept_process(Swept__ctx_type_0 &_ctx, float gate, float start, float end, float rate){
   float a_rate;
   a_rate = (1.f / ((100.f * rate) + 0.01f));
   uint8_t bgate;
   bgate = (gate > 0.5f);
   _ctx.out = (_ctx.out + (((end * 1024.f) + (- _ctx.out)) * rate * 0.004f));
   if(Util_edge(_ctx._inst43,bgate)){
      _ctx.out = (start * 1024.f);
   }
   return (_ctx.out * 0.0009766f);
}

void Swept_noteOn_init(Swept__ctx_type_0 &_output_){
   Swept__ctx_type_0_init(_output_);
   return ;
}

void Swept_noteOn(Swept__ctx_type_0 &_ctx, int note, int velocity, int channel){
}

void Swept_noteOff_init(Swept__ctx_type_0 &_output_){
   Swept__ctx_type_0_init(_output_);
   return ;
}

void Swept_noteOff(Swept__ctx_type_0 &_ctx, int note, int channel){
}

void Swept_controlChange_init(Swept__ctx_type_0 &_output_){
   Swept__ctx_type_0_init(_output_);
   return ;
}

void Swept_controlChange(Swept__ctx_type_0 &_ctx, int control, int value, int channel){
}

void Swept_default_init(Swept__ctx_type_0 &_output_){
   Swept__ctx_type_0_init(_output_);
   return ;
}

void Swept_default(Swept__ctx_type_0 &_ctx){
}

float Saturate_tanh_table_raw_c0(int index){
   return Saturate_tanh_table_c0[index];
}

float Saturate_tanh_table_raw_c1(int index){
   return Saturate_tanh_table_c1[index];
}

float Saturate_tanh_table_raw_c2(int index){
   return Saturate_tanh_table_c2[index];
}

float Saturate_tanh_table(float x){
   int index;
   index = int_clip(float_to_int((5.f * (x + 24.f))),0,240);
   return (float_wrap_array(Saturate_tanh_table_c0)[index] + (x * (float_wrap_array(Saturate_tanh_table_c1)[index] + (float_wrap_array(Saturate_tanh_table_c2)[index] * x))));
}

float Saturate_process(float x){
   return Saturate_tanh_table(x);
}

void Saturate_noteOn(int note, int velocity, int channel){
}

void Saturate_noteOff(int note, int channel){
}

void Saturate_controlChange(int control, int value, int channel){
}

void Saturate_default(){
}

void Ahr__ctx_type_0_init(Ahr__ctx_type_0 &_output_){
   Ahr__ctx_type_0 _ctx;
   _ctx.target = 0.f;
   _ctx.state = 0;
   _ctx.rate = 0.f;
   _ctx.out = 0.f;
   _ctx.hold_phase = 0.f;
   _ctx.do_ret_1 = 0.f;
   _ctx.do_ret_0 = 0.f;
   Util__ctx_type_0_init(_ctx._inst58);
   Util__ctx_type_0_init(_ctx._inst56);
   _output_ = _ctx;
   return ;
}

void Ahr_do_init(Ahr__ctx_type_0 &_output_){
   Ahr__ctx_type_0_init(_output_);
   return ;
}

void Ahr_do(Ahr__ctx_type_0 &_ctx, float gate, float a, float h, float r){
   int release;
   release = 0;
   int attack;
   attack = 1;
   int hold;
   hold = 2;
   int reset;
   reset = 3;
   uint8_t bgate;
   bgate = (gate > 0.f);
   if(Util_edge(_ctx._inst56,bgate)){
      _ctx.state = reset;
   }
   float resetting;
   if(_ctx.state == reset){
      resetting = 1.f;
   }
   else
   {
      resetting = 0.f;
   }
   if(Util_edge(_ctx._inst58,(_ctx.out > 1024.f))){
      _ctx.hold_phase = 0.f;
      _ctx.state = hold;
   }
   if((_ctx.out < 10.f) && (_ctx.state == reset)){
      _ctx.state = attack;
   }
   if((_ctx.hold_phase > 100.f) && (_ctx.state == hold)){
      _ctx.state = release;
   }
   if(_ctx.state == reset){
      _ctx.rate = 0.9900991f;
      _ctx.target = 0.f;
   }
   if(_ctx.state == attack){
      _ctx.rate = (1.f / ((100.f * a) + 0.01f));
      _ctx.target = 1228.8f;
   }
   if(_ctx.state == hold){
      float hrate;
      hrate = (1.f / ((100.f * h) + 0.01f));
      _ctx.hold_phase = (_ctx.hold_phase + hrate);
   }
   if(_ctx.state == release){
      _ctx.rate = (1.f / ((100.f * r) + 0.01f));
      _ctx.target = 0.f;
   }
   _ctx.out = (_ctx.out + ((_ctx.target + (- _ctx.out)) * _ctx.rate * 0.005f));
   _ctx.do_ret_0 = float_clip((_ctx.out * 0.0009766f),0.f,1.f);
   _ctx.do_ret_1 = resetting;
   return ;
}

void Ahr_do_ret_0_init(Ahr__ctx_type_0 &_output_){
   Ahr__ctx_type_0_init(_output_);
   return ;
}

float Ahr_do_ret_0(Ahr__ctx_type_0 &_ctx){
   return _ctx.do_ret_0;
}

void Ahr_do_ret_1_init(Ahr__ctx_type_0 &_output_){
   Ahr__ctx_type_0_init(_output_);
   return ;
}

float Ahr_do_ret_1(Ahr__ctx_type_0 &_ctx){
   return _ctx.do_ret_1;
}

void Ahr__ctx_type_1_init(Ahr__ctx_type_1 &_output_){
   Ahr__ctx_type_1 _ctx;
   _ctx.process_ret_1 = 0.f;
   _ctx.process_ret_0 = 0.f;
   _ctx.knob3 = 0.f;
   _ctx.knob2 = 0.f;
   _ctx.knob1 = 0.f;
   Ahr__ctx_type_0_init(_ctx._inst67);
   _output_ = _ctx;
   return ;
}

void Ahr_process_init(Ahr__ctx_type_1 &_output_){
   Ahr__ctx_type_1_init(_output_);
   return ;
}

void Ahr_process(Ahr__ctx_type_1 &_ctx, float gate){
   Ahr_do(_ctx._inst67,gate,_ctx.knob1,_ctx.knob2,_ctx.knob3);
   _ctx.process_ret_0 = Ahr_do_ret_0(_ctx._inst67);
   _ctx.process_ret_1 = Ahr_do_ret_1(_ctx._inst67);
   return ;
}

void Ahr_process_ret_0_init(Ahr__ctx_type_1 &_output_){
   Ahr__ctx_type_1_init(_output_);
   return ;
}

float Ahr_process_ret_0(Ahr__ctx_type_1 &_ctx){
   return _ctx.process_ret_0;
}

void Ahr_process_ret_1_init(Ahr__ctx_type_1 &_output_){
   Ahr__ctx_type_1_init(_output_);
   return ;
}

float Ahr_process_ret_1(Ahr__ctx_type_1 &_ctx){
   return _ctx.process_ret_1;
}

void Ahr_noteOn_init(Ahr__ctx_type_1 &_output_){
   Ahr__ctx_type_1_init(_output_);
   return ;
}

void Ahr_noteOn(Ahr__ctx_type_1 &_ctx, int note, int velocity, int channel){
}

void Ahr_noteOff_init(Ahr__ctx_type_1 &_output_){
   Ahr__ctx_type_1_init(_output_);
   return ;
}

void Ahr_noteOff(Ahr__ctx_type_1 &_ctx, int note, int channel){
}

void Ahr_controlChange_init(Ahr__ctx_type_1 &_output_){
   Ahr__ctx_type_1_init(_output_);
   return ;
}

void Ahr_controlChange(Ahr__ctx_type_1 &_ctx, int control, int value, int channel){
   if(control == 1){
      _ctx.knob1 = (int_to_float(value) * 0.0078741f);
   }
   if(control == 2){
      _ctx.knob2 = (int_to_float(value) * 0.0078741f);
   }
   if(control == 3){
      _ctx.knob3 = (int_to_float(value) * 0.0078741f);
   }
}

void Ahr_default_init(Ahr__ctx_type_1 &_output_){
   Ahr__ctx_type_1_init(_output_);
   return ;
}

void Ahr_default(Ahr__ctx_type_1 &_ctx){
   _ctx.knob1 = 0.f;
   _ctx.knob2 = 0.5f;
   _ctx.knob3 = 0.5f;
}

void Kick__ctx_type_0_init(Kick__ctx_type_0 &_output_){
   Kick__ctx_type_0 _ctx;
   Noise__ctx_type_1_init(_ctx._inst80);
   Ahr__ctx_type_0_init(_ctx._inst79);
   Tricore__ctx_type_0_init(_ctx._inst78);
   Swept__ctx_type_0_init(_ctx._inst77);
   Ahr__ctx_type_0_init(_ctx._inst76);
   _output_ = _ctx;
   return ;
}

void Kick_do_init(Kick__ctx_type_0 &_output_){
   Kick__ctx_type_0_init(_output_);
   return ;
}

float Kick_do(Kick__ctx_type_0 &_ctx, float gate, float odecay, float pitch, float swept, float noise){
   float osc_env;
   float env_reset;
   Ahr_do(_ctx._inst76,gate,0.005f,(0.1f + odecay),(odecay + 0.01f));
   osc_env = Ahr_do_ret_0(_ctx._inst76);
   env_reset = Ahr_do_ret_1(_ctx._inst76);
   float cv;
   cv = Swept_process(_ctx._inst77,(1.f + (- env_reset)),(pitch + (swept * 0.4f)),pitch,0.1f);
   float osc;
   osc = Tricore_process(_ctx._inst78,cv,0.f,env_reset);
   float osc_sat;
   osc_sat = Saturate_process((1.5f * osc));
   float noise_env;
   Ahr_do(_ctx._inst79,gate,0.001f,0.01f,((noise * 0.01f) + 0.001f));
   noise_env = Ahr_do_ret_0(_ctx._inst79);
   Ahr_do_ret_1(_ctx._inst79);
   float noise_osc;
   noise_osc = (noise * Noise_process(_ctx._inst80,1.f) * 0.3333334f);
   return ((osc_env * osc_sat) + (noise_env * noise_osc));
}

void Kick__ctx_type_1_init(Kick__ctx_type_1 &_output_){
   Kick__ctx_type_1 _ctx;
   _ctx.swept = 0.f;
   _ctx.pitch = 0.f;
   _ctx.odecay = 0.f;
   _ctx.noise = 0.f;
   Kick__ctx_type_0_init(_ctx._inst82);
   _output_ = _ctx;
   return ;
}

void Kick_process_init(Kick__ctx_type_1 &_output_){
   Kick__ctx_type_1_init(_output_);
   return ;
}

float Kick_process(Kick__ctx_type_1 &_ctx, float gate){
   return Kick_do(_ctx._inst82,gate,_ctx.odecay,_ctx.pitch,_ctx.swept,_ctx.noise);
}

void Kick_noteOn_init(Kick__ctx_type_1 &_output_){
   Kick__ctx_type_1_init(_output_);
   return ;
}

void Kick_noteOn(Kick__ctx_type_1 &_ctx, int note, int velocity, int channel){
}

void Kick_noteOff_init(Kick__ctx_type_1 &_output_){
   Kick__ctx_type_1_init(_output_);
   return ;
}

void Kick_noteOff(Kick__ctx_type_1 &_ctx, int note, int channel){
}

void Kick_controlChange_init(Kick__ctx_type_1 &_output_){
   Kick__ctx_type_1_init(_output_);
   return ;
}

void Kick_controlChange(Kick__ctx_type_1 &_ctx, int control, int value, int channel){
   if(control == 30){
      _ctx.odecay = (int_to_float(value) * 0.0078741f);
   }
   if(control == 31){
      _ctx.pitch = Util_map(int_to_float(value),0.f,127.f,0.f,0.1f);
   }
   if(control == 32){
      _ctx.swept = (int_to_float(value) * 0.0078741f);
   }
   if(control == 33){
      _ctx.noise = (int_to_float(value) * 0.0078741f);
   }
}

void Kick_default_init(Kick__ctx_type_1 &_output_){
   Kick__ctx_type_1_init(_output_);
   return ;
}

void Kick_default(Kick__ctx_type_1 &_ctx){
}


