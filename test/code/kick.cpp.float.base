
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#include "kick.h"

void Noise__ctx_type_0_init(Noise__ctx_type_0 &_output_){
   Noise__ctx_type_0 _ctx;
   _ctx.w1 = 0.000000f;
   _output_ = _ctx;
   return ;
}

void Noise_pinker_init(Noise__ctx_type_0 &_output_){
   Noise__ctx_type_0_init(_output_);
   return ;
}

float Noise_pinker(Noise__ctx_type_0 &_ctx, float x){
   float b0;
   b0 = 0.027713f;
   float b1;
   b1 = 0.027713f;
   float a1;
   a1 = (-0.944574f);
   float w0;
   w0 = (x + (- (a1 * _ctx.w1)));
   float y0;
   y0 = ((b0 * w0) + (b1 * _ctx.w1));
   _ctx.w1 = w0;
   return y0;
}

void Noise__ctx_type_1_init(Noise__ctx_type_1 &_output_){
   Noise__ctx_type_1 _ctx;
   _ctx.x2 = 0;
   _ctx.x1 = 0;
   Noise__ctx_type_0_init(_ctx._inst2);
   _output_ = _ctx;
   return ;
}

void Noise_process_init(Noise__ctx_type_1 &_output_){
   Noise__ctx_type_1_init(_output_);
   return ;
}

float Noise_process(Noise__ctx_type_1 &_ctx, float color){
   _ctx.x1 = (((_ctx.x1 * 17389) + 7919) % 32768);
   float y1;
   y1 = (int_to_float(_ctx.x1) * 0.000031f);
   _ctx.x2 = (((_ctx.x2 * 27449) + 12553) % 32768);
   float y2;
   y2 = (int_to_float(_ctx.x2) * 0.000031f);
   float out;
   uint8_t _cond_7;
   _cond_7 = (color > 0.500000f);
   if(_cond_7){ out = Noise_pinker(_ctx._inst2,(y1 + (- y2))); }
   else
   { out = (y1 + (- y2)); }
   return (2.000000f * out);
}

void Noise_noteOn_init(Noise__ctx_type_1 &_output_){
   Noise__ctx_type_1_init(_output_);
   return ;
}

void Noise_noteOn(Noise__ctx_type_1 &_ctx, int note, int velocity, int channel){
}

void Noise_noteOff_init(Noise__ctx_type_1 &_output_){
   Noise__ctx_type_1_init(_output_);
   return ;
}

void Noise_noteOff(Noise__ctx_type_1 &_ctx, int note, int channel){
}

void Noise_controlChange_init(Noise__ctx_type_1 &_output_){
   Noise__ctx_type_1_init(_output_);
   return ;
}

void Noise_controlChange(Noise__ctx_type_1 &_ctx, int control, int value, int channel){
}

void Noise_default_init(Noise__ctx_type_1 &_output_){
   Noise__ctx_type_1_init(_output_);
   return ;
}

void Noise_default(Noise__ctx_type_1 &_ctx){
}

void Util__ctx_type_0_init(Util__ctx_type_0 &_output_){
   Util__ctx_type_0 _ctx;
   _ctx.pre = 0;
   _output_ = _ctx;
   return ;
}

void Util_edge_init(Util__ctx_type_0 &_output_){
   Util__ctx_type_0_init(_output_);
   return ;
}

uint8_t Util_edge(Util__ctx_type_0 &_ctx, uint8_t x){
   uint8_t ret;
   ret = (x && bool_not(_ctx.pre));
   _ctx.pre = x;
   return ret;
}

void Util__ctx_type_1_init(Util__ctx_type_1 &_output_){
   Util__ctx_type_1 _ctx;
   _ctx.pre_x = 0.000000f;
   _output_ = _ctx;
   return ;
}

void Util_change_init(Util__ctx_type_1 &_output_){
   Util__ctx_type_1_init(_output_);
   return ;
}

uint8_t Util_change(Util__ctx_type_1 &_ctx, float x){
   uint8_t v;
   v = (_ctx.pre_x != x);
   _ctx.pre_x = x;
   return v;
}

float Util_map(float x, float x0, float x1, float y0, float y1){
   return ((((x + (- x0)) * (y1 + (- y0))) / (x1 + (- x0))) + y0);
}

void Util__ctx_type_3_init(Util__ctx_type_3 &_output_){
   Util__ctx_type_3 _ctx;
   _ctx.y1 = 0.000000f;
   _ctx.x1 = 0.000000f;
   _output_ = _ctx;
   return ;
}

void Util_dcblock_init(Util__ctx_type_3 &_output_){
   Util__ctx_type_3_init(_output_);
   return ;
}

float Util_dcblock(Util__ctx_type_3 &_ctx, float x0){
   float y0;
   y0 = (x0 + (- _ctx.x1) + (_ctx.y1 * 0.995000f));
   _ctx.x1 = x0;
   _ctx.y1 = y0;
   return y0;
}

void Util__ctx_type_4_init(Util__ctx_type_4 &_output_){
   Util__ctx_type_4 _ctx;
   _ctx.x = 0.000000f;
   _output_ = _ctx;
   return ;
}

void Util_smooth_init(Util__ctx_type_4 &_output_){
   Util__ctx_type_4_init(_output_);
   return ;
}

float Util_smooth(Util__ctx_type_4 &_ctx, float input){
   _ctx.x = (_ctx.x + ((input + (- _ctx.x)) * 0.005000f));
   return _ctx.x;
}

void Util__ctx_type_5_init(Util__ctx_type_5 &_output_){
   Util__ctx_type_5 _ctx;
   _ctx.x0 = 0.000000f;
   _output_ = _ctx;
   return ;
}

void Util_average2_init(Util__ctx_type_5 &_output_){
   Util__ctx_type_5_init(_output_);
   return ;
}

float Util_average2(Util__ctx_type_5 &_ctx, float x1){
   float result;
   result = ((_ctx.x0 + x1) * 0.500000f);
   _ctx.x0 = x1;
   return result;
}

float Util_cubic_clipper(float x){
   uint8_t _cond_29;
   _cond_29 = (x <= (-0.666667f));
   if(_cond_29){
      return (-0.666667f);
   }
   else
   {
      uint8_t _cond_28;
      _cond_28 = (x >= 0.666667f);
      if(_cond_28){
         return 0.666667f;
      }
      else
      {
         return (x + ((-0.333333f) * x * x * x));
      }
   }
}

float Util_pitchToRate_1024(float pitch){
   int index;
   index = int_clip(float_to_int((0.244094f * pitch)),0,31);
   return (float_get(float_wrap_array(Util_pitchToRate_1024_c0),index) + (pitch * (float_get(float_wrap_array(Util_pitchToRate_1024_c1),index) + (float_get(float_wrap_array(Util_pitchToRate_1024_c2),index) * pitch))));
}

float Util_pitchToRate(float pitch){
   int index;
   index = int_clip(float_to_int((0.244094f * pitch)),0,31);
   return (float_get(float_wrap_array(Util_pitchToRate_c0),index) + (pitch * (float_get(float_wrap_array(Util_pitchToRate_c1),index) + (float_get(float_wrap_array(Util_pitchToRate_c2),index) * pitch))));
}

float Util_cvToPitch(float cv){
   return ((cv * 120.000000f) + 24.000000f);
}

float Util_cvToRate_1024(float cv){
   int index;
   index = int_clip(float_to_int((34.444444f * cv)),0,31);
   return (float_get(float_wrap_array(Util_cvToRate_1024_c0),index) + (cv * (float_get(float_wrap_array(Util_cvToRate_1024_c1),index) + (float_get(float_wrap_array(Util_cvToRate_1024_c2),index) * cv))));
}

float Util_cvToRate(float cv){
   int index;
   index = int_clip(float_to_int((34.444444f * cv)),0,31);
   return (float_get(float_wrap_array(Util_cvToRate_c0),index) + (cv * (float_get(float_wrap_array(Util_cvToRate_c1),index) + (float_get(float_wrap_array(Util_cvToRate_c2),index) * cv))));
}

float Util_pitchToCv(float pitch){
   return (0.008333f * ((-24.000000f) + pitch));
}

float Util_cvToperiod(float cv){
   int index;
   index = int_clip(float_to_int((31.000000f * cv)),0,31);
   return (float_get(float_wrap_array(Util_cvToperiod_c0),index) + (cv * (float_get(float_wrap_array(Util_cvToperiod_c1),index) + (float_get(float_wrap_array(Util_cvToperiod_c2),index) * cv))));
}

float Util_cvTokHz(float cv){
   int index;
   index = int_clip(float_to_int((31.000000f * cv)),0,31);
   return (float_get(float_wrap_array(Util_cvTokHz_c0),index) + (cv * (float_get(float_wrap_array(Util_cvTokHz_c1),index) + (float_get(float_wrap_array(Util_cvTokHz_c2),index) * cv))));
}

void Tricore__ctx_type_0_init(Tricore__ctx_type_0 &_output_){
   Tricore__ctx_type_0 _ctx;
   _ctx.reset_state = 0;
   _ctx.reset_phase = 0.000000f;
   _ctx.rate = 0.000000f;
   _ctx.phase = 0.000000f;
   _ctx.direction = 0;
   Util__ctx_type_0_init(_ctx._inst34);
   Util__ctx_type_0_init(_ctx._inst33);
   Util__ctx_type_1_init(_ctx._inst31);
   Tricore_default(_ctx);
   _output_ = _ctx;
   return ;
}

void Tricore_process_init(Tricore__ctx_type_0 &_output_){
   Tricore__ctx_type_0_init(_output_);
   return ;
}

float Tricore_process(Tricore__ctx_type_0 &_ctx, float cv, float reset, float disable){
   float out;
   out = 0.000000f;
   uint8_t _cond_46;
   _cond_46 = Util_change(_ctx._inst31,cv);
   if(_cond_46){
      _ctx.rate = (4.000000f * Util_cvToRate_1024(cv));
   }
   float new_phase;
   float _if_47;
   if(_ctx.direction){ _if_47 = _ctx.rate; }
   else
   { _if_47 = (- _ctx.rate); }
   new_phase = (_ctx.phase + _if_47);
   uint8_t bdisable;
   bdisable = (disable > 0.500000f);
   uint8_t _cond_48;
   _cond_48 = (Util_edge(_ctx._inst33,(reset > 0.000000f)) || Util_edge(_ctx._inst34,bdisable));
   if(_cond_48){
      _ctx.reset_phase = _ctx.phase;
      _ctx.reset_state = 1;
      new_phase = 0.000000f;
   }
   uint8_t _cond_50;
   _cond_50 = (new_phase > 1024.000000f);
   if(_cond_50){
      new_phase = (1024.000000f + (- (new_phase + (-1024.000000f))));
      _ctx.direction = 0;
   }
   else
   {
      uint8_t _cond_49;
      _cond_49 = (new_phase < (-1024.000000f));
      if(_cond_49){
         _ctx.direction = 1;
      }
   }
   if(bdisable){ _ctx.phase = 0.000000f; }
   else
   { _ctx.phase = new_phase; }
   if(_ctx.reset_state){
      uint8_t _cond_52;
      _cond_52 = ((fabsf(_ctx.reset_phase) > 10.000000f) || bdisable);
      if(_cond_52){
         float reset_speed;
         if(bdisable){ reset_speed = 0.010000f; }
         else
         { reset_speed = 0.500000f; }
         _ctx.reset_phase = (_ctx.reset_phase + (- (_ctx.reset_phase * reset_speed)));
      }
      else
      {
         uint8_t _cond_51;
         _cond_51 = (_ctx.reset_phase > 10.000000f);
         if(bool_not(_cond_51)){ _ctx.reset_phase = 0.000000f; }
         _ctx.reset_state = 0;
         _ctx.direction = 1;
      }
      out = _ctx.reset_phase;
   }
   out = (out + _ctx.phase);
   return (out * 0.000977f);
}

void Tricore_noteOn_init(Tricore__ctx_type_0 &_output_){
   Tricore__ctx_type_0_init(_output_);
   return ;
}

void Tricore_noteOn(Tricore__ctx_type_0 &_ctx, int note, int velocity, int channel){
}

void Tricore_noteOff_init(Tricore__ctx_type_0 &_output_){
   Tricore__ctx_type_0_init(_output_);
   return ;
}

void Tricore_noteOff(Tricore__ctx_type_0 &_ctx, int note, int channel){
}

void Tricore_controlChange_init(Tricore__ctx_type_0 &_output_){
   Tricore__ctx_type_0_init(_output_);
   return ;
}

void Tricore_controlChange(Tricore__ctx_type_0 &_ctx, int control, int value, int channel){
}

void Tricore_default_init(Tricore__ctx_type_0 &_output_){
   Tricore__ctx_type_0_init(_output_);
   return ;
}

void Tricore_default(Tricore__ctx_type_0 &_ctx){
   _ctx.rate = 0.759367f;
}

void Swept__ctx_type_0_init(Swept__ctx_type_0 &_output_){
   Swept__ctx_type_0 _ctx;
   _ctx.out = 0.000000f;
   Util__ctx_type_0_init(_ctx._inst54);
   _output_ = _ctx;
   return ;
}

void Swept_process_init(Swept__ctx_type_0 &_output_){
   Swept__ctx_type_0_init(_output_);
   return ;
}

float Swept_process(Swept__ctx_type_0 &_ctx, float gate, float start, float end, float rate){
   float a_rate;
   a_rate = (1.000000f / ((100.000000f * rate) + 0.010000f));
   uint8_t bgate;
   bgate = (gate > 0.500000f);
   _ctx.out = (_ctx.out + (((end * 1024.000000f) + (- _ctx.out)) * rate * 0.004000f));
   uint8_t _cond_60;
   _cond_60 = Util_edge(_ctx._inst54,bgate);
   if(_cond_60){
      _ctx.out = (start * 1024.000000f);
   }
   return (_ctx.out * 0.000977f);
}

void Swept_noteOn_init(Swept__ctx_type_0 &_output_){
   Swept__ctx_type_0_init(_output_);
   return ;
}

void Swept_noteOn(Swept__ctx_type_0 &_ctx, int note, int velocity, int channel){
}

void Swept_noteOff_init(Swept__ctx_type_0 &_output_){
   Swept__ctx_type_0_init(_output_);
   return ;
}

void Swept_noteOff(Swept__ctx_type_0 &_ctx, int note, int channel){
}

void Swept_controlChange_init(Swept__ctx_type_0 &_output_){
   Swept__ctx_type_0_init(_output_);
   return ;
}

void Swept_controlChange(Swept__ctx_type_0 &_ctx, int control, int value, int channel){
}

void Swept_default_init(Swept__ctx_type_0 &_output_){
   Swept__ctx_type_0_init(_output_);
   return ;
}

void Swept_default(Swept__ctx_type_0 &_ctx){
}

float Saturate_table(float x){
   int index;
   index = int_clip(float_to_int((x + 12.000000f)),0,24);
   return (float_get(float_wrap_array(Saturate_table_c0),index) + (x * (float_get(float_wrap_array(Saturate_table_c1),index) + (float_get(float_wrap_array(Saturate_table_c2),index) * x))));
}

float Saturate_process(float x){
   return Saturate_table(x);
}

void Saturate_noteOn(int note, int velocity, int channel){
}

void Saturate_noteOff(int note, int channel){
}

void Saturate_controlChange(int control, int value, int channel){
}

void Saturate_default(){
}

void Ahr__ctx_type_0_init(Ahr__ctx_type_0 &_output_){
   Ahr__ctx_type_0 _ctx;
   _ctx.target = 0.000000f;
   _ctx.state = 0;
   _ctx.rate = 0.000000f;
   _ctx.out = 0.000000f;
   _ctx.hold_phase = 0.000000f;
   Util__ctx_type_0_init(_ctx._inst70);
   Util__ctx_type_0_init(_ctx._inst68);
   _output_ = _ctx;
   return ;
}

void Ahr_do_init(Ahr__ctx_type_0 &_output_){
   Ahr__ctx_type_0_init(_output_);
   return ;
}

void Ahr_do(Ahr__ctx_type_0 &_ctx, float gate, float a, float h, float r, _tuple_$_real_real_$ &_output_){
   int release;
   release = 0;
   int attack;
   attack = 1;
   int hold;
   hold = 2;
   int reset;
   reset = 3;
   uint8_t bgate;
   bgate = (gate > 0.000000f);
   uint8_t _cond_87;
   _cond_87 = Util_edge(_ctx._inst68,bgate);
   if(_cond_87){
      _ctx.state = reset;
   }
   float resetting;
   uint8_t _cond_96;
   _cond_96 = (_ctx.state == reset);
   if(_cond_96){ resetting = 1.000000f; }
   else
   { resetting = 0.000000f; }
   uint8_t _cond_88;
   _cond_88 = Util_edge(_ctx._inst70,(_ctx.out > 1024.000000f));
   if(_cond_88){
      _ctx.hold_phase = 0.000000f;
      _ctx.state = hold;
   }
   uint8_t _cond_89;
   _cond_89 = ((_ctx.out < 10.000000f) && (_ctx.state == reset));
   if(_cond_89){
      _ctx.state = attack;
   }
   uint8_t _cond_90;
   _cond_90 = ((_ctx.hold_phase > 100.000000f) && (_ctx.state == hold));
   if(_cond_90){
      _ctx.state = release;
   }
   uint8_t _cond_91;
   _cond_91 = (_ctx.state == reset);
   if(_cond_91){
      _ctx.rate = 0.990099f;
      _ctx.target = 0.000000f;
   }
   uint8_t _cond_92;
   _cond_92 = (_ctx.state == attack);
   if(_cond_92){
      _ctx.rate = (1.000000f / ((100.000000f * a) + 0.010000f));
      _ctx.target = 1228.800000f;
   }
   uint8_t _cond_93;
   _cond_93 = (_ctx.state == hold);
   if(_cond_93){
      float hrate;
      hrate = (1.000000f / ((100.000000f * h) + 0.010000f));
      _ctx.hold_phase = (_ctx.hold_phase + hrate);
   }
   uint8_t _cond_94;
   _cond_94 = (_ctx.state == release);
   if(_cond_94){
      _ctx.rate = (1.000000f / ((100.000000f * r) + 0.010000f));
      _ctx.target = 0.000000f;
   }
   _ctx.out = (_ctx.out + ((_ctx.target + (- _ctx.out)) * _ctx.rate * 0.005000f));
   _tuple_$_real_real_$ _tuple_95;
   {
      _tuple_95.field_0 = float_clip((_ctx.out * 0.000977f),0.000000f,1.000000f);
      _tuple_95.field_1 = resetting;
   }
   _output_ = _tuple_95;
   return ;
}

void Ahr__ctx_type_1_init(Ahr__ctx_type_1 &_output_){
   Ahr__ctx_type_1 _ctx;
   _ctx.knob3 = 0.000000f;
   _ctx.knob2 = 0.000000f;
   _ctx.knob1 = 0.000000f;
   Ahr__ctx_type_0_init(_ctx._inst79);
   _output_ = _ctx;
   return ;
}

void Ahr_process_init(Ahr__ctx_type_1 &_output_){
   Ahr__ctx_type_1_init(_output_);
   return ;
}

void Ahr_process(Ahr__ctx_type_1 &_ctx, float gate, _tuple_$_real_real_$ &_output_){
   _tuple_$_real_real_$ _call_98;
   Ahr_do(_ctx._inst79,gate,_ctx.knob1,_ctx.knob2,_ctx.knob3,_call_98);
   _output_ = _call_98;
   return ;
}

void Ahr_noteOn_init(Ahr__ctx_type_1 &_output_){
   Ahr__ctx_type_1_init(_output_);
   return ;
}

void Ahr_noteOn(Ahr__ctx_type_1 &_ctx, int note, int velocity, int channel){
}

void Ahr_noteOff_init(Ahr__ctx_type_1 &_output_){
   Ahr__ctx_type_1_init(_output_);
   return ;
}

void Ahr_noteOff(Ahr__ctx_type_1 &_ctx, int note, int channel){
}

void Ahr_controlChange_init(Ahr__ctx_type_1 &_output_){
   Ahr__ctx_type_1_init(_output_);
   return ;
}

void Ahr_controlChange(Ahr__ctx_type_1 &_ctx, int control, int value, int channel){
   uint8_t _cond_100;
   _cond_100 = (control == 1);
   if(_cond_100){
      _ctx.knob1 = (int_to_float(value) * 0.007874f);
   }
   uint8_t _cond_101;
   _cond_101 = (control == 2);
   if(_cond_101){
      _ctx.knob2 = (int_to_float(value) * 0.007874f);
   }
   uint8_t _cond_102;
   _cond_102 = (control == 3);
   if(_cond_102){
      _ctx.knob3 = (int_to_float(value) * 0.007874f);
   }
}

void Ahr_default_init(Ahr__ctx_type_1 &_output_){
   Ahr__ctx_type_1_init(_output_);
   return ;
}

void Ahr_default(Ahr__ctx_type_1 &_ctx){
   _ctx.knob1 = 0.000000f;
   _ctx.knob2 = 0.500000f;
   _ctx.knob3 = 0.500000f;
}

void Kick__ctx_type_0_init(Kick__ctx_type_0 &_output_){
   Kick__ctx_type_0 _ctx;
   Noise__ctx_type_1_init(_ctx._inst116);
   Ahr__ctx_type_0_init(_ctx._inst115);
   Tricore__ctx_type_0_init(_ctx._inst114);
   Swept__ctx_type_0_init(_ctx._inst113);
   Ahr__ctx_type_0_init(_ctx._inst112);
   _output_ = _ctx;
   return ;
}

void Kick_do_init(Kick__ctx_type_0 &_output_){
   Kick__ctx_type_0_init(_output_);
   return ;
}

float Kick_do(Kick__ctx_type_0 &_ctx, float gate, float odecay, float pitch, float swept, float noise){
   float osc_env;
   float env_reset;
   _tuple_$_real_real_$ _call_127;
   Ahr_do(_ctx._inst112,gate,0.005000f,(0.100000f + odecay),(odecay + 0.010000f),_call_127);
   osc_env = _call_127.field_0;env_reset = _call_127.field_1;
   float cv;
   cv = Swept_process(_ctx._inst113,(1.000000f + (- env_reset)),(pitch + (swept * 0.400000f)),pitch,0.100000f);
   float osc;
   osc = Tricore_process(_ctx._inst114,cv,0.000000f,env_reset);
   float osc_sat;
   osc_sat = Saturate_process((1.500000f * osc));
   float noise_env;
   _tuple_$_real_real_$ _call_128;
   Ahr_do(_ctx._inst115,gate,0.001000f,0.010000f,((noise * 0.010000f) + 0.001000f),_call_128);
   noise_env = _call_128.field_0;
   float noise_osc;
   noise_osc = (noise * Noise_process(_ctx._inst116,1.000000f) * 0.333333f);
   return ((osc_env * osc_sat) + (noise_env * noise_osc));
}

void Kick__ctx_type_1_init(Kick__ctx_type_1 &_output_){
   Kick__ctx_type_1 _ctx;
   _ctx.swept = 0.000000f;
   _ctx.pitch = 0.000000f;
   _ctx.odecay = 0.000000f;
   _ctx.noise = 0.000000f;
   Kick__ctx_type_0_init(_ctx._inst118);
   _output_ = _ctx;
   return ;
}

void Kick_process_init(Kick__ctx_type_1 &_output_){
   Kick__ctx_type_1_init(_output_);
   return ;
}

float Kick_process(Kick__ctx_type_1 &_ctx, float gate){
   return Kick_do(_ctx._inst118,gate,_ctx.odecay,_ctx.pitch,_ctx.swept,_ctx.noise);
}

void Kick_noteOn_init(Kick__ctx_type_1 &_output_){
   Kick__ctx_type_1_init(_output_);
   return ;
}

void Kick_noteOn(Kick__ctx_type_1 &_ctx, int note, int velocity, int channel){
}

void Kick_noteOff_init(Kick__ctx_type_1 &_output_){
   Kick__ctx_type_1_init(_output_);
   return ;
}

void Kick_noteOff(Kick__ctx_type_1 &_ctx, int note, int channel){
}

void Kick_controlChange_init(Kick__ctx_type_1 &_output_){
   Kick__ctx_type_1_init(_output_);
   return ;
}

void Kick_controlChange(Kick__ctx_type_1 &_ctx, int control, int value, int channel){
   uint8_t _cond_131;
   _cond_131 = (control == 30);
   if(_cond_131){
      _ctx.odecay = (int_to_float(value) * 0.007874f);
   }
   uint8_t _cond_132;
   _cond_132 = (control == 31);
   if(_cond_132){
      _ctx.pitch = Util_map(int_to_float(value),0.000000f,127.000000f,0.000000f,0.100000f);
   }
   uint8_t _cond_133;
   _cond_133 = (control == 32);
   if(_cond_133){
      _ctx.swept = (int_to_float(value) * 0.007874f);
   }
   uint8_t _cond_134;
   _cond_134 = (control == 33);
   if(_cond_134){
      _ctx.noise = (int_to_float(value) * 0.007874f);
   }
}

void Kick_default_init(Kick__ctx_type_1 &_output_){
   Kick__ctx_type_1_init(_output_);
   return ;
}

void Kick_default(Kick__ctx_type_1 &_ctx){
}


