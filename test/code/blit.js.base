function vultProcess(){
    this.clip = function(x,low,high) { return x<low?low:(x>high?high:x); };
    this.not  = function(x)          { return x==0?1:0; };
    this.real = function(x)          { return x; };
    this.int  = function(x)          { return x|0; };
    this.sin  = function(x)          { return Math.sin(x); };
    this.cos  = function(x)          { return Math.cos(x); };
    this.abs  = function(x)          { return Math.abs(x); };
    this.exp  = function(x)          { return Math.exp(x); };
    this.floor= function(x)          { return Math.floor(x); };
    this.tan  = function(x)          { return Math.tan(x); };
    this.tanh = function(x)          { return Math.tanh(x); };
    this.sqrt = function(x)          { return x; };
    this.set  = function(a,i,v)      { a[i]=v; };
    this.get  = function(a,i)        { return a[i]; };
    this.makeArray = function(size,v){ var a = new Array(size); for(var i=0;i<size;i++) a[i]=v; return a; };
    this.Live_process_init = null;
    this.Live_default_ = null;
this.Blit_near_zero = function(x){
   return (this.abs(x) < 0.02);
}


this.Blit__ctx_type_1_init = function(){
   var _ctx = {};
   _ctx.pre_x = 0.;
   return _ctx;
}
this. Blit_change_init = function() { return this.Blit__ctx_type_1_init();}
this.Blit_change = function(_ctx,x){
   var v = (_ctx.pre_x != x);
   _ctx.pre_x = x;
   return v;
}


this.Blit__ctx_type_2_init = function(){
   var _ctx = {};
   _ctx.y1 = 0.;
   _ctx.x1 = 0.;
   return _ctx;
}
this. Blit_dcblock_init = function() { return this.Blit__ctx_type_2_init();}
this.Blit_dcblock = function(_ctx,x0){
   var y0 = (x0 + (- _ctx.x1) + (_ctx.y1 * 0.995));
   _ctx.x1 = x0;
   _ctx.y1 = y0;
   return y0;
}
this.Blit_pitchToRate = function(d){
   return (0.000185392290249 * this.exp((0.0577623 * d)));
}
this.Blit_pulse_train = function(m,phase){
   var pi_phase = (phase * 3.14159265359);
   var denominator1 = this.sin(pi_phase);
   var tmp1 = 0.;
   if(this.Blit_near_zero(denominator1)){
      tmp1 = 1.;
   }
   else
   {
      tmp1 = this.sin((m * pi_phase));
      tmp1 = (tmp1 / (m * denominator1));
   }
   return tmp1;
}


this.Blit__ctx_type_5_init = function(){
   var _ctx = {};
   _ctx.state_triang = 0.;
   _ctx.state_saw = 0.;
   _ctx.state_pulse = 0.;
   _ctx.rate = 0.;
   _ctx.phase = 0.;
   _ctx.output = 0.;
   _ctx.m = 0.;
   _ctx._inst1 = this.Blit__ctx_type_2_init();
   _ctx._inst0 = this.Blit__ctx_type_1_init();
   return _ctx;
}
this. Blit_osc_init = function() { return this.Blit__ctx_type_5_init();}
this.Blit_osc = function(_ctx,pitch,pw,wave){
   var fixed_pitch = 0.;
   if((wave < (0.666666666667))){
      fixed_pitch = pitch;
   }
   else
   {
      fixed_pitch = (pitch + 12.);
   }
   if(this.Blit_change(_ctx._inst0,fixed_pitch)){
      _ctx.rate = this.Blit_pitchToRate(fixed_pitch);
      var p = (1. / _ctx.rate);
      var maxHarmonics = this.floor((p * 0.5));
      _ctx.m = ((2. * maxHarmonics) + 1.);
   }
   var shift05 = (0.5 + (pw * 0.49));
   var shift = (_ctx.phase + shift05);
   if((shift > 1.)){
      shift = (shift + (-1.));
   }
   var tmp1 = this.Blit_pulse_train(_ctx.m,_ctx.phase);
   var tmp2 = this.Blit_pulse_train(_ctx.m,shift);
   _ctx.phase = (_ctx.phase + _ctx.rate);
   if((_ctx.phase > 1.)){
      _ctx.phase = (_ctx.phase + (-1.));
   }
   _ctx.state_pulse = this.clip(((_ctx.state_pulse * 0.9995) + tmp1 + (- tmp2)),(-1.),1.);
   _ctx.state_saw = this.clip(((_ctx.state_saw * 0.9995) + (((tmp1 + tmp2 + ((-2.) * _ctx.rate)) / shift05) * 0.5)),(-1.),1.);
   _ctx.state_triang = this.clip(((_ctx.state_triang * 0.9995) + (2. * _ctx.state_pulse * _ctx.rate)),(-1.),1.);
   if((wave < (0.333333333333))){
      _ctx.output = _ctx.state_pulse;
   }
   else
   {
      if((wave < (0.666666666667))){
         _ctx.output = (2. * _ctx.state_saw);
      }
      else
      {
         _ctx.output = (2. * _ctx.state_triang * (1. + pw));
      }
   }
   _ctx.output = this.Blit_dcblock(_ctx._inst1,_ctx.output);
   return this.clip((_ctx.output * 0.25),(-1.),1.);
}

    if(this.Live_process_init)  this.context =  this.Live_process_init(); else this.context = {};
    if(this.Live_default_)      this.Live_default_(this.context);
    this.liveNoteOn        = function(note,velocity) { if(this.Live_noteOn)        this.Live_noteOn(this.context,note,velocity); };
    this.liveNoteOff       = function(note,velocity) { if(this.Live_noteOff)       this.Live_noteOff(this.context,note,velocity); };
    this.liveControlChange = function(note,velocity) { if(this.Live_controlChange) this.Live_controlChange(this.context,note,velocity); };
    this.liveProcess       = function(input)         { if(this.Live_process)       return this.Live_process(this.context,input); else return 0; };
    this.liveDefault       = function()              { if(this.Live_default_)      return this.Live_default_(this.context); };
}
