#include "synth1.h"

_ctx_type_0 _ctx_type_0_init(){
   _ctx_type_0 _ctx;
   _ctx.x = 0x0 /* 0.000000 */;
   return _ctx;
}

_ctx_type_0 smooth_init(){ return _ctx_type_0_init();}

int32_t smooth(_ctx_type_0 &_ctx, int32_t input){
   _ctx.x = fix_add(_ctx.x,fix_mul(fix_sub(input,_ctx.x),0x147 /* 0.005000 */));
   return _ctx.x;
}

_ctx_type_1 _ctx_type_1_init(){
   _ctx_type_1 _ctx;
   _ctx.pre_x = 0x0 /* 0.000000 */;
   return _ctx;
}

_ctx_type_1 change_init(){ return _ctx_type_1_init();}

uint8_t change(_ctx_type_1 &_ctx, int32_t x){
   uint8_t v = (_ctx.pre_x != x);
   _ctx.pre_x = x;
   return v;
}

_ctx_type_2 _ctx_type_2_init(){
   _ctx_type_2 _ctx;
   _ctx.pre_x = 0;
   return _ctx;
}

_ctx_type_2 edge_init(){ return _ctx_type_2_init();}

uint8_t edge(_ctx_type_2 &_ctx, int x){
   uint8_t v = ((_ctx.pre_x != x) && (_ctx.pre_x == 0));
   _ctx.pre_x = x;
   return v;
}

_ctx_type_3 _ctx_type_3_init(){
   _ctx_type_3 _ctx;
   _ctx.count = 0;
   return _ctx;
}

_ctx_type_3 each_init(){ return _ctx_type_3_init();}

uint8_t each(_ctx_type_3 &_ctx, int n){
   uint8_t ret = (_ctx.count == 0);
   _ctx.count = ((_ctx.count + 1) % n);
   return ret;
}

int32_t pitchToRate(int32_t d){
   return fix_div(fix_mul(0x82d01 /* 8.175800 */,fix_exp(fix_mul(0xec9 /* 0.057762 */,d))),0xac440000 /* 44100.000000 */);
}

_ctx_type_5 _ctx_type_5_init(){
   _ctx_type_5 _ctx;
   _ctx.rate = 0x0 /* 0.000000 */;
   _ctx.phase = 0x0 /* 0.000000 */;
   _ctx._inst0 = _ctx_type_1_init();
   return _ctx;
}

_ctx_type_5 phasor_init(){ return _ctx_type_5_init();}

int32_t phasor(_ctx_type_5 &_ctx, int32_t pitch, uint8_t reset){
   if(change(_ctx._inst0,pitch)){
      _ctx.rate = pitchToRate(pitch);
   }
   _ctx.phase = (reset?0x0 /* 0.000000 */:(fix_add(_ctx.phase,_ctx.rate) % 0x10000 /* 1.000000 */));
   return _ctx.phase;
}

_ctx_type_6 _ctx_type_6_init(){
   _ctx_type_6 _ctx;
   _ctx.phase = 0x0 /* 0.000000 */;
   _ctx._inst0 = _ctx_type_2_init();
   return _ctx;
}

_ctx_type_6 lfo_init(){ return _ctx_type_6_init();}

int32_t lfo(_ctx_type_6 &_ctx, int32_t f, int gate){
   int32_t rate = fix_div(fix_mul(f,0xa0000 /* 10.000000 */),0xac440000 /* 44100.000000 */);
   if(edge(_ctx._inst0,gate)){
      _ctx.phase = 0x0 /* 0.000000 */;
   }
   _ctx.phase = fix_add(_ctx.phase,rate);
   if(_ctx.phase > 0x10000 /* 1.000000 */){
      _ctx.phase = fix_sub(_ctx.phase,0x10000 /* 1.000000 */);
   }
   return fix_sub(fix_sin(fix_mul(fix_mul(_ctx.phase,0x20000 /* 2.000000 */),0x3243f /* 3.141593 */)),0x8000 /* 0.500000 */);
}

_ctx_type_7 _ctx_type_7_init(){
   _ctx_type_7 _ctx;
   _ctx.volume = 0x0 /* 0.000000 */;
   _ctx.pre_phase1 = 0x0 /* 0.000000 */;
   _ctx.pitch = 0x0 /* 0.000000 */;
   _ctx.n4 = 0x0 /* 0.000000 */;
   _ctx.n3 = 0x0 /* 0.000000 */;
   _ctx.n2 = 0x0 /* 0.000000 */;
   _ctx.n1 = 0x0 /* 0.000000 */;
   _ctx.lfo_rate = 0x0 /* 0.000000 */;
   _ctx.lfo_amt = 0x0 /* 0.000000 */;
   _ctx.gate = 0;
   _ctx.detune = 0x0 /* 0.000000 */;
   _ctx.count = 0;
   _ctx._inst5 = _ctx_type_0_init();
   _ctx._inst4 = _ctx_type_0_init();
   _ctx._inst3 = _ctx_type_5_init();
   _ctx._inst2 = _ctx_type_0_init();
   _ctx._inst1 = _ctx_type_5_init();
   _ctx._inst0 = _ctx_type_6_init();
   return _ctx;
}

_ctx_type_7 process_init(){ return _ctx_type_7_init();}

int32_t process(_ctx_type_7 &_ctx, int32_t input){
   int32_t lfo_val = fix_mul(lfo(_ctx._inst0,_ctx.lfo_rate,_ctx.gate),_ctx.lfo_amt);
   int32_t phase1 = phasor(_ctx._inst1,_ctx.pitch,0);
   int32_t comp = fix_sub(0x10000 /* 1.000000 */,phase1);
   uint8_t reset = (fix_sub(_ctx.pre_phase1,phase1) > 0x8000 /* 0.500000 */);
   _ctx.pre_phase1 = phase1;
   int32_t phase2 = phasor(_ctx._inst3,fix_add(_ctx.pitch,fix_mul(smooth(_ctx._inst2,fix_add(_ctx.detune,lfo_val)),0x200000 /* 32.000000 */)),reset);
   int32_t sine = fix_sin(fix_mul(fix_mul(0x20000 /* 2.000000 */,0x3243f /* 3.141593 */),phase2));
   int32_t gate_value = ((_ctx.gate > 0)?0x10000 /* 1.000000 */:0x0 /* 0.000000 */);
   return fix_mul(fix_mul(smooth(_ctx._inst4,_ctx.volume),fix_mul(sine,comp)),smooth(_ctx._inst5,gate_value));
}

_ctx_type_7 noteOn_init(){ return _ctx_type_7_init();}

void noteOn(_ctx_type_7 &_ctx, int32_t note, int velocity){
   if(_ctx.count == 0){
      _ctx.n1 = note;
      _ctx.pitch = note;
   }
   else
   {
      if(_ctx.count == 1){
         _ctx.n2 = note;
         _ctx.pitch = note;
      }
      else
      {
         if(_ctx.count == 2){
            _ctx.n3 = note;
            _ctx.pitch = note;
         }
         else
         {
            if(_ctx.count == 3){
               _ctx.n4 = note;
               _ctx.pitch = note;
            }
         }
      }
   }
   if(_ctx.count <= 4){
      _ctx.count = (_ctx.count + 1);
   }
   _ctx.gate = ((_ctx.count > 0)?1:0);
}

_ctx_type_7 noteOff_init(){ return _ctx_type_7_init();}

void noteOff(_ctx_type_7 &_ctx, int32_t note){
   uint8_t found = 0;
   if(note == _ctx.n1){
      int32_t _tmp_0 = _ctx.n2;
      int32_t _tmp_1 = _ctx.n3;
      int32_t _tmp_2 = _ctx.n4;
      _ctx.n1 = _tmp_0;
      _ctx.n2 = _tmp_1;
      _ctx.n3 = _tmp_2;
      found = 1;
   }
   else
   {
      if(note == _ctx.n2){
         int32_t _tmp_0 = _ctx.n3;
         int32_t _tmp_1 = _ctx.n4;
         _ctx.n2 = _tmp_0;
         _ctx.n3 = _tmp_1;
         found = 1;
      }
      else
      {
         if(note == _ctx.n3){
            _ctx.n3 = _ctx.n4;
            found = 1;
         }
         else
         {
            if(note == _ctx.n4){
               found = 1;
            }
         }
      }
   }
   if(found && (_ctx.count > 0)){
      _ctx.count = (_ctx.count - 1);
   }
   _ctx.gate = ((_ctx.count > 0)?1:0);
   if(_ctx.count == 1){
      _ctx.pitch = _ctx.n1;
   }
   if(_ctx.count == 2){
      _ctx.pitch = _ctx.n2;
   }
   if(_ctx.count == 3){
      _ctx.pitch = _ctx.n3;
   }
   if(_ctx.count == 4){
      _ctx.pitch = _ctx.n4;
   }
}

_ctx_type_7 controlChange_init(){ return _ctx_type_7_init();}

void controlChange(_ctx_type_7 &_ctx, int control, int32_t value){
   if(control == 30){
      _ctx.volume = fix_div(value,0x7f0000 /* 127.000000 */);
   }
   if(control == 31){
      _ctx.detune = fix_div(value,0x7f0000 /* 127.000000 */);
   }
   if(control == 32){
      _ctx.lfo_rate = fix_div(value,0x7f0000 /* 127.000000 */);
   }
   if(control == 33){
      _ctx.lfo_amt = fix_mul(0x20000 /* 2.000000 */,fix_sub(fix_div(((int32_t)value),0x7f0000 /* 127.000000 */),0x8000 /* 0.500000 */));
   }
}

_ctx_type_7 default_init(){ return _ctx_type_7_init();}

void default_(_ctx_type_7 &_ctx){
   _ctx.volume = 0x0 /* 0.000000 */;
   _ctx.pitch = 0x2d0000 /* 45.000000 */;
   _ctx.detune = 0xcccc /* 0.800000 */;
   _ctx.lfo_rate = 0x11eb /* 0.070000 */;
   _ctx.lfo_amt = (- 0xcccc /* 0.800000 */);
}


