
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#include "synth1.h"

void Synth1__ctx_type_0_init(Synth1__ctx_type_0 &_output_){
   Synth1__ctx_type_0 _ctx;
   _ctx.x = 0x0 /* 0.000000 */;
   _output_ = _ctx;
   return ;
}

void Synth1_smooth_init(Synth1__ctx_type_0 &_output_){
   Synth1__ctx_type_0_init(_output_);
   return ;
}

fix16_t Synth1_smooth(Synth1__ctx_type_0 &_ctx, fix16_t input){
   _ctx.x = fix_add(_ctx.x,fix_mul(fix_add(input,(- _ctx.x)),0x147 /* 0.005000 */));
   return _ctx.x;
}

void Synth1__ctx_type_1_init(Synth1__ctx_type_1 &_output_){
   Synth1__ctx_type_1 _ctx;
   _ctx.pre_x = 0x0 /* 0.000000 */;
   _output_ = _ctx;
   return ;
}

void Synth1_change_init(Synth1__ctx_type_1 &_output_){
   Synth1__ctx_type_1_init(_output_);
   return ;
}

uint8_t Synth1_change(Synth1__ctx_type_1 &_ctx, fix16_t x){
   uint8_t v = (_ctx.pre_x != x);
   _ctx.pre_x = x;
   return v;
}

void Synth1__ctx_type_2_init(Synth1__ctx_type_2 &_output_){
   Synth1__ctx_type_2 _ctx;
   _ctx.pre_x = 0;
   _output_ = _ctx;
   return ;
}

void Synth1_edge_init(Synth1__ctx_type_2 &_output_){
   Synth1__ctx_type_2_init(_output_);
   return ;
}

uint8_t Synth1_edge(Synth1__ctx_type_2 &_ctx, int x){
   uint8_t v = ((_ctx.pre_x != x) && (_ctx.pre_x == 0));
   _ctx.pre_x = x;
   return v;
}

void Synth1__ctx_type_3_init(Synth1__ctx_type_3 &_output_){
   Synth1__ctx_type_3 _ctx;
   _ctx.count = 0;
   _output_ = _ctx;
   return ;
}

void Synth1_each_init(Synth1__ctx_type_3 &_output_){
   Synth1__ctx_type_3_init(_output_);
   return ;
}

uint8_t Synth1_each(Synth1__ctx_type_3 &_ctx, int n){
   uint8_t ret = (_ctx.count == 0);
   _ctx.count = ((_ctx.count + 1) % n);
   return ret;
}

fix16_t Synth1_pitchToRate(fix16_t d){
   return fix_mul(0xc /* 0.000185 */,fix_exp(fix_mul(0xec9 /* 0.057762 */,d)));
}

void Synth1__ctx_type_5_init(Synth1__ctx_type_5 &_output_){
   Synth1__ctx_type_5 _ctx;
   _ctx.rate = 0x0 /* 0.000000 */;
   _ctx.phase = 0x0 /* 0.000000 */;
   Synth1__ctx_type_1_init(_ctx._inst1);
   _output_ = _ctx;
   return ;
}

void Synth1_phasor_init(Synth1__ctx_type_5 &_output_){
   Synth1__ctx_type_5_init(_output_);
   return ;
}

fix16_t Synth1_phasor(Synth1__ctx_type_5 &_ctx, fix16_t pitch, uint8_t reset){
   if(Synth1_change(_ctx._inst1,pitch)){
      _ctx.rate = Synth1_pitchToRate(pitch);
   }
   if(reset)_ctx.phase = 0x0 /* 0.000000 */;
   else
   _ctx.phase = (fix_add(_ctx.phase,_ctx.rate) % 0x10000 /* 1.000000 */);
   return _ctx.phase;
}

void Synth1__ctx_type_6_init(Synth1__ctx_type_6 &_output_){
   Synth1__ctx_type_6 _ctx;
   _ctx.phase = 0x0 /* 0.000000 */;
   Synth1__ctx_type_2_init(_ctx._inst1);
   _output_ = _ctx;
   return ;
}

void Synth1_lfo_init(Synth1__ctx_type_6 &_output_){
   Synth1__ctx_type_6_init(_output_);
   return ;
}

fix16_t Synth1_lfo(Synth1__ctx_type_6 &_ctx, fix16_t f, int gate){
   fix16_t rate = fix_mul(0xe /* 0.000227 */,f);
   if(Synth1_edge(_ctx._inst1,gate)){
      _ctx.phase = 0x0 /* 0.000000 */;
   }
   _ctx.phase = fix_add(_ctx.phase,rate);
   if(_ctx.phase > 0x10000 /* 1.000000 */){
      _ctx.phase = fix_add(_ctx.phase,(-0x10000 /* -1.000000 */));
   }
   return fix_add(fix_sin(fix_mul(0x6487e /* 6.283185 */,_ctx.phase)),(-0x8000 /* -0.500000 */));
}

void Synth1__ctx_type_7_init(Synth1__ctx_type_7 &_output_){
   Synth1__ctx_type_7 _ctx;
   _ctx.volume = 0x0 /* 0.000000 */;
   _ctx.pre_phase1 = 0x0 /* 0.000000 */;
   _ctx.pitch = 0x0 /* 0.000000 */;
   _ctx.n4 = 0x0 /* 0.000000 */;
   _ctx.n3 = 0x0 /* 0.000000 */;
   _ctx.n2 = 0x0 /* 0.000000 */;
   _ctx.n1 = 0x0 /* 0.000000 */;
   _ctx.lfo_rate = 0x0 /* 0.000000 */;
   _ctx.lfo_amt = 0x0 /* 0.000000 */;
   _ctx.gate = 0;
   _ctx.detune = 0x0 /* 0.000000 */;
   _ctx.count = 0;
   Synth1__ctx_type_0_init(_ctx._inst6);
   Synth1__ctx_type_0_init(_ctx._inst5);
   Synth1__ctx_type_5_init(_ctx._inst4);
   Synth1__ctx_type_0_init(_ctx._inst3);
   Synth1__ctx_type_5_init(_ctx._inst2);
   Synth1__ctx_type_6_init(_ctx._inst1);
   _output_ = _ctx;
   return ;
}

void Synth1_process_init(Synth1__ctx_type_7 &_output_){
   Synth1__ctx_type_7_init(_output_);
   return ;
}

fix16_t Synth1_process(Synth1__ctx_type_7 &_ctx, fix16_t input){
   fix16_t lfo_val = fix_mul(Synth1_lfo(_ctx._inst1,_ctx.lfo_rate,_ctx.gate),_ctx.lfo_amt);
   fix16_t phase1 = Synth1_phasor(_ctx._inst2,_ctx.pitch,0);
   fix16_t comp = fix_add(0x10000 /* 1.000000 */,(- phase1));
   uint8_t reset = (fix_add(_ctx.pre_phase1,(- phase1)) > 0x8000 /* 0.500000 */);
   _ctx.pre_phase1 = phase1;
   fix16_t phase2 = Synth1_phasor(_ctx._inst4,fix_add(_ctx.pitch,fix_mul(Synth1_smooth(_ctx._inst3,fix_add(_ctx.detune,lfo_val)),0x200000 /* 32.000000 */)),reset);
   fix16_t sine = fix_sin(fix_mul(0x6487e /* 6.283185 */,phase2));
   fix16_t gate_value;
   if(_ctx.gate > 0)gate_value = 0x10000 /* 1.000000 */;
   else
   gate_value = 0x0 /* 0.000000 */;
   return fix_mul(fix_mul(fix_mul(Synth1_smooth(_ctx._inst5,_ctx.volume),sine),comp),Synth1_smooth(_ctx._inst6,gate_value));
}

void Synth1_noteOn_init(Synth1__ctx_type_7 &_output_){
   Synth1__ctx_type_7_init(_output_);
   return ;
}

void Synth1_noteOn(Synth1__ctx_type_7 &_ctx, fix16_t note, int velocity){
   if(_ctx.count == 0){
      _ctx.n1 = note;
      _ctx.pitch = note;
   }
   else
   {
      if(_ctx.count == 1){
         _ctx.n2 = note;
         _ctx.pitch = note;
      }
      else
      {
         if(_ctx.count == 2){
            _ctx.n3 = note;
            _ctx.pitch = note;
         }
         else
         {
            if(_ctx.count == 3){
               _ctx.n4 = note;
               _ctx.pitch = note;
            }
         }
      }
   }
   if(_ctx.count <= 4){
      _ctx.count = (_ctx.count + 1);
   }
   if(_ctx.count > 0)_ctx.gate = 1;
   else
   _ctx.gate = 0;
}

void Synth1_noteOff_init(Synth1__ctx_type_7 &_output_){
   Synth1__ctx_type_7_init(_output_);
   return ;
}

void Synth1_noteOff(Synth1__ctx_type_7 &_ctx, fix16_t note){
   uint8_t found = 0;
   if(note == _ctx.n1){
      fix16_t _tmp_0 = _ctx.n2;
      fix16_t _tmp_1 = _ctx.n3;
      fix16_t _tmp_2 = _ctx.n4;
      _ctx.n1 = _tmp_0;
      _ctx.n2 = _tmp_1;
      _ctx.n3 = _tmp_2;
      found = 1;
   }
   else
   {
      if(note == _ctx.n2){
         fix16_t _tmp_0 = _ctx.n3;
         fix16_t _tmp_1 = _ctx.n4;
         _ctx.n2 = _tmp_0;
         _ctx.n3 = _tmp_1;
         found = 1;
      }
      else
      {
         if(note == _ctx.n3){
            _ctx.n3 = _ctx.n4;
            found = 1;
         }
         else
         {
            if(note == _ctx.n4){
               found = 1;
            }
         }
      }
   }
   if(found && (_ctx.count > 0)){
      _ctx.count = (_ctx.count + (-1));
   }
   if(_ctx.count > 0)_ctx.gate = 1;
   else
   _ctx.gate = 0;
   if(_ctx.count == 1){
      _ctx.pitch = _ctx.n1;
   }
   if(_ctx.count == 2){
      _ctx.pitch = _ctx.n2;
   }
   if(_ctx.count == 3){
      _ctx.pitch = _ctx.n3;
   }
   if(_ctx.count == 4){
      _ctx.pitch = _ctx.n4;
   }
}

void Synth1_controlChange_init(Synth1__ctx_type_7 &_output_){
   Synth1__ctx_type_7_init(_output_);
   return ;
}

void Synth1_controlChange(Synth1__ctx_type_7 &_ctx, int control, fix16_t value){
   if(control == 30){
      _ctx.volume = fix_mul(value,0x204 /* 0.007874 */);
   }
   if(control == 31){
      _ctx.detune = fix_mul(value,0x204 /* 0.007874 */);
   }
   if(control == 32){
      _ctx.lfo_rate = fix_mul(value,0x204 /* 0.007874 */);
   }
   if(control == 33){
      _ctx.lfo_amt = fix_mul(0x20000 /* 2.000000 */,fix_add(fix_mul(value,0x204 /* 0.007874 */),(-0x8000 /* -0.500000 */)));
   }
}

void Synth1_default_init(Synth1__ctx_type_7 &_output_){
   Synth1__ctx_type_7_init(_output_);
   return ;
}

void Synth1_default(Synth1__ctx_type_7 &_ctx){
   _ctx.volume = 0x0 /* 0.000000 */;
   _ctx.pitch = 0x2d0000 /* 45.000000 */;
   _ctx.detune = 0xcccc /* 0.800000 */;
   _ctx.lfo_rate = 0x11eb /* 0.070000 */;
   _ctx.lfo_amt = (-0xcccc /* -0.800000 */);
}


