
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#include "synth1.h"

void Synth1__ctx_type_5_init(Synth1__ctx_type_5 &_output_){
   Synth1__ctx_type_5 _ctx;
   _ctx.rate = 0x0 /* 0.000000 */;
   _ctx.phase = 0x0 /* 0.000000 */;
   Synth1__ctx_type_1_init(_ctx._inst171);
   _output_ = _ctx;
   return ;
}

fix16_t Synth1_phasor(Synth1__ctx_type_5 &_ctx, fix16_t pitch, uint8_t reset){
   if(Synth1_change(_ctx._inst171,pitch)){
      _ctx.rate = Synth1_pitchToRate(pitch);
   }
   if(reset){
      _ctx.phase = 0x0 /* 0.000000 */;
   }
   else
   {
      _ctx.phase = ((_ctx.phase + _ctx.rate) % 0x10000 /* 1.000000 */);
   }
   return _ctx.phase;
}

void Synth1__ctx_type_6_init(Synth1__ctx_type_6 &_output_){
   Synth1__ctx_type_6 _ctx;
   _ctx.phase = 0x0 /* 0.000000 */;
   Synth1__ctx_type_2_init(_ctx._inst192);
   _output_ = _ctx;
   return ;
}

fix16_t Synth1_lfo(Synth1__ctx_type_6 &_ctx, fix16_t f, int gate){
   fix16_t rate;
   rate = fix_mul(0xe /* 0.000227 */,f);
   if(Synth1_edge(_ctx._inst192,gate)){
      _ctx.phase = 0x0 /* 0.000000 */;
   }
   _ctx.phase = (_ctx.phase + rate);
   if(_ctx.phase > 0x10000 /* 1.000000 */){
      _ctx.phase = (-0x10000 /* -1.000000 */ + _ctx.phase);
   }
   return (-0x8000 /* -0.500000 */ + fix_sin(fix_mul(0x6487e /* 6.283185 */,_ctx.phase)));
}

void Synth1__ctx_type_7_init(Synth1__ctx_type_7 &_output_){
   Synth1__ctx_type_7 _ctx;
   _ctx.volume = 0x0 /* 0.000000 */;
   _ctx.pre_phase1 = 0x0 /* 0.000000 */;
   _ctx.pitch = 0x0 /* 0.000000 */;
   _ctx.n4 = 0;
   _ctx.n3 = 0;
   _ctx.n2 = 0;
   _ctx.n1 = 0;
   _ctx.lfo_rate = 0x0 /* 0.000000 */;
   _ctx.lfo_amt = 0x0 /* 0.000000 */;
   _ctx.gate = 0;
   _ctx.detune = 0x0 /* 0.000000 */;
   _ctx.count = 0;
   Synth1__ctx_type_0_init(_ctx._inst6c9);
   Synth1__ctx_type_0_init(_ctx._inst5c9);
   Synth1__ctx_type_5_init(_ctx._inst4a2);
   Synth1__ctx_type_0_init(_ctx._inst3c9);
   Synth1__ctx_type_5_init(_ctx._inst2a2);
   Synth1__ctx_type_6_init(_ctx._inst1c8);
   _output_ = _ctx;
   return ;
}

fix16_t Synth1_process(Synth1__ctx_type_7 &_ctx, fix16_t input){
   fix16_t lfo_val;
   lfo_val = fix_mul(_ctx.lfo_amt,Synth1_lfo(_ctx._inst1c8,_ctx.lfo_rate,_ctx.gate));
   fix16_t phase1;
   phase1 = Synth1_phasor(_ctx._inst2a2,_ctx.pitch,false);
   fix16_t comp;
   comp = (0x10000 /* 1.000000 */ + (- phase1));
   uint8_t reset;
   reset = ((_ctx.pre_phase1 + (- phase1)) > 0x8000 /* 0.500000 */);
   _ctx.pre_phase1 = phase1;
   fix16_t phase2;
   phase2 = Synth1_phasor(_ctx._inst4a2,(_ctx.pitch + (Synth1_smooth(_ctx._inst3c9,(_ctx.detune + lfo_val)) << 5)),reset);
   fix16_t sine;
   sine = fix_sin(fix_mul(0x6487e /* 6.283185 */,phase2));
   fix16_t gate_value;
   if(_ctx.gate > 0){
      gate_value = 0x10000 /* 1.000000 */;
   }
   else
   {
      gate_value = 0x0 /* 0.000000 */;
   }
   return fix_mul(fix_mul(fix_mul(comp,sine),Synth1_smooth(_ctx._inst5c9,_ctx.volume)),Synth1_smooth(_ctx._inst6c9,gate_value));
}

void Synth1_noteOn(Synth1__ctx_type_7 &_ctx, int note, int velocity, int channel){
   switch(_ctx.count) {
      case 0:
         {
            _ctx.n1 = note;
            _ctx.pitch = int_to_fix(note);
         }
      break;
      case 1:
         {
            _ctx.n2 = note;
            _ctx.pitch = int_to_fix(note);
         }
      break;
      case 2:
         {
            _ctx.n3 = note;
            _ctx.pitch = int_to_fix(note);
         }
      break;
      case 3:
         {
            _ctx.n4 = note;
            _ctx.pitch = int_to_fix(note);
         }
      break;
    
   }
   if(_ctx.count <= 4){
      _ctx.count = (1 + _ctx.count);
   }
   if(_ctx.count > 0){
      _ctx.gate = 1;
   }
   else
   {
      _ctx.gate = 0;
   }
}

void Synth1_noteOff(Synth1__ctx_type_7 &_ctx, int note, int channel){
   uint8_t found;
   found = false;
   if(note == _ctx.n1){
      int _tmp_34_0;
      _tmp_34_0 = _ctx.n2;
      int _tmp_34_1;
      _tmp_34_1 = _ctx.n3;
      int _tmp_34_2;
      _tmp_34_2 = _ctx.n4;
      _ctx.n1 = _tmp_34_0;
      _ctx.n2 = _tmp_34_1;
      _ctx.n3 = _tmp_34_2;
      found = true;
   }
   else
   {
      if(note == _ctx.n2){
         int _tmp_35_0;
         _tmp_35_0 = _ctx.n3;
         int _tmp_35_1;
         _tmp_35_1 = _ctx.n4;
         _ctx.n2 = _tmp_35_0;
         _ctx.n3 = _tmp_35_1;
         found = true;
      }
      else
      {
         if(note == _ctx.n3){
            _ctx.n3 = _ctx.n4;
            found = true;
         }
         else
         {
            if(note == _ctx.n4){
               found = true;
            }
         }
      }
   }
   if(found && (_ctx.count > 0)){
      _ctx.count = ((-1) + _ctx.count);
   }
   if(_ctx.count > 0){
      _ctx.gate = 1;
   }
   else
   {
      _ctx.gate = 0;
   }
   if(_ctx.count == 1){
      _ctx.pitch = int_to_fix(_ctx.n1);
   }
   if(_ctx.count == 2){
      _ctx.pitch = int_to_fix(_ctx.n2);
   }
   if(_ctx.count == 3){
      _ctx.pitch = int_to_fix(_ctx.n3);
   }
   if(_ctx.count == 4){
      _ctx.pitch = int_to_fix(_ctx.n4);
   }
}

void Synth1_controlChange(Synth1__ctx_type_7 &_ctx, int control, fix16_t value, int channel){
   if(control == 30){
      _ctx.volume = fix_mul(0x204 /* 0.007874 */,value);
   }
   if(control == 31){
      _ctx.detune = fix_mul(0x204 /* 0.007874 */,value);
   }
   if(control == 32){
      _ctx.lfo_rate = fix_mul(0x204 /* 0.007874 */,value);
   }
   if(control == 33){
      _ctx.lfo_amt = ((-0x8000 /* -0.500000 */ + fix_mul(0x204 /* 0.007874 */,value)) << 1);
   }
}

void Synth1_default(Synth1__ctx_type_7 &_ctx){
   _ctx.volume = 0x10000 /* 1.000000 */;
   _ctx.pitch = 0x2d0000 /* 45.000000 */;
   _ctx.detune = 0xcccc /* 0.800000 */;
   _ctx.lfo_rate = 0x11eb /* 0.070000 */;
   _ctx.lfo_amt = -0xcccc /* -0.800000 */;
}


