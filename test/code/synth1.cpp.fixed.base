
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#include "synth1.h"

void Synth1__ctx_type_0_init(Synth1__ctx_type_0 &_output_){
   Synth1__ctx_type_0 _ctx;
   _ctx.x = 0x0 /* 0.000000 */;
   _output_ = _ctx;
   return ;
}

void Synth1_smooth_init(Synth1__ctx_type_0 &_output_){
   Synth1__ctx_type_0_init(_output_);
   return ;
}

fix16_t Synth1_smooth(Synth1__ctx_type_0 &_ctx, fix16_t input){
   _ctx.x = fix_add(_ctx.x,fix_mul(fix_add(input,(- _ctx.x)),0x147 /* 0.005000 */));
   return _ctx.x;
}

void Synth1__ctx_type_1_init(Synth1__ctx_type_1 &_output_){
   Synth1__ctx_type_1 _ctx;
   _ctx.pre_x = 0x0 /* 0.000000 */;
   _output_ = _ctx;
   return ;
}

void Synth1_change_init(Synth1__ctx_type_1 &_output_){
   Synth1__ctx_type_1_init(_output_);
   return ;
}

uint8_t Synth1_change(Synth1__ctx_type_1 &_ctx, fix16_t x){
   uint8_t v;
   v = (_ctx.pre_x != x);
   _ctx.pre_x = x;
   return v;
}

void Synth1__ctx_type_2_init(Synth1__ctx_type_2 &_output_){
   Synth1__ctx_type_2 _ctx;
   _ctx.pre_x = 0;
   _output_ = _ctx;
   return ;
}

void Synth1_edge_init(Synth1__ctx_type_2 &_output_){
   Synth1__ctx_type_2_init(_output_);
   return ;
}

uint8_t Synth1_edge(Synth1__ctx_type_2 &_ctx, int x){
   uint8_t v;
   v = ((_ctx.pre_x != x) && (_ctx.pre_x == 0));
   _ctx.pre_x = x;
   return v;
}

void Synth1__ctx_type_3_init(Synth1__ctx_type_3 &_output_){
   Synth1__ctx_type_3 _ctx;
   _ctx.count = 0;
   _output_ = _ctx;
   return ;
}

void Synth1_each_init(Synth1__ctx_type_3 &_output_){
   Synth1__ctx_type_3_init(_output_);
   return ;
}

uint8_t Synth1_each(Synth1__ctx_type_3 &_ctx, int n){
   uint8_t ret;
   ret = (_ctx.count == 0);
   _ctx.count = ((_ctx.count + 1) % n);
   return ret;
}

fix16_t Synth1_pitchToRate(fix16_t d){
   return fix_mul(0xc /* 0.000185 */,fix_exp(fix_mul(0xec9 /* 0.057762 */,d)));
}

void Synth1__ctx_type_5_init(Synth1__ctx_type_5 &_output_){
   Synth1__ctx_type_5 _ctx;
   _ctx.rate = 0x0 /* 0.000000 */;
   _ctx.phase = 0x0 /* 0.000000 */;
   Synth1__ctx_type_1_init(_ctx._inst6);
   _output_ = _ctx;
   return ;
}

void Synth1_phasor_init(Synth1__ctx_type_5 &_output_){
   Synth1__ctx_type_5_init(_output_);
   return ;
}

fix16_t Synth1_phasor(Synth1__ctx_type_5 &_ctx, fix16_t pitch, uint8_t reset){
   uint8_t _cond_47;
   _cond_47 = Synth1_change(_ctx._inst6,pitch);
   if(_cond_47){
      _ctx.rate = Synth1_pitchToRate(pitch);
   }
   if(reset){ _ctx.phase = 0x0 /* 0.000000 */; }
   else
   { _ctx.phase = (fix_add(_ctx.phase,_ctx.rate) % 0x10000 /* 1.000000 */); }
   return _ctx.phase;
}

void Synth1__ctx_type_6_init(Synth1__ctx_type_6 &_output_){
   Synth1__ctx_type_6 _ctx;
   _ctx.phase = 0x0 /* 0.000000 */;
   Synth1__ctx_type_2_init(_ctx._inst9);
   _output_ = _ctx;
   return ;
}

void Synth1_lfo_init(Synth1__ctx_type_6 &_output_){
   Synth1__ctx_type_6_init(_output_);
   return ;
}

fix16_t Synth1_lfo(Synth1__ctx_type_6 &_ctx, fix16_t f, int gate){
   fix16_t rate;
   rate = fix_mul(0xe /* 0.000227 */,f);
   uint8_t _cond_48;
   _cond_48 = Synth1_edge(_ctx._inst9,gate);
   if(_cond_48){
      _ctx.phase = 0x0 /* 0.000000 */;
   }
   _ctx.phase = fix_add(_ctx.phase,rate);
   uint8_t _cond_49;
   _cond_49 = (_ctx.phase > 0x10000 /* 1.000000 */);
   if(_cond_49){
      _ctx.phase = fix_add(_ctx.phase,(-0x10000 /* -1.000000 */));
   }
   return fix_add(fix_sin(fix_mul(0x6487e /* 6.283185 */,_ctx.phase)),(-0x8000 /* -0.500000 */));
}

void Synth1__ctx_type_7_init(Synth1__ctx_type_7 &_output_){
   Synth1__ctx_type_7 _ctx;
   _ctx.volume = 0x0 /* 0.000000 */;
   _ctx.pre_phase1 = 0x0 /* 0.000000 */;
   _ctx.pitch = 0x0 /* 0.000000 */;
   _ctx.n4 = 0;
   _ctx.n3 = 0;
   _ctx.n2 = 0;
   _ctx.n1 = 0;
   _ctx.lfo_rate = 0x0 /* 0.000000 */;
   _ctx.lfo_amt = 0x0 /* 0.000000 */;
   _ctx.gate = 0;
   _ctx.detune = 0x0 /* 0.000000 */;
   _ctx.count = 0;
   Synth1__ctx_type_0_init(_ctx._inst18);
   Synth1__ctx_type_0_init(_ctx._inst17);
   Synth1__ctx_type_5_init(_ctx._inst16);
   Synth1__ctx_type_0_init(_ctx._inst15);
   Synth1__ctx_type_5_init(_ctx._inst14);
   Synth1__ctx_type_6_init(_ctx._inst13);
   _output_ = _ctx;
   return ;
}

void Synth1_process_init(Synth1__ctx_type_7 &_output_){
   Synth1__ctx_type_7_init(_output_);
   return ;
}

fix16_t Synth1_process(Synth1__ctx_type_7 &_ctx, fix16_t input){
   fix16_t lfo_val;
   lfo_val = fix_mul(Synth1_lfo(_ctx._inst13,_ctx.lfo_rate,_ctx.gate),_ctx.lfo_amt);
   fix16_t phase1;
   phase1 = Synth1_phasor(_ctx._inst14,_ctx.pitch,0);
   fix16_t comp;
   comp = fix_add(0x10000 /* 1.000000 */,(- phase1));
   uint8_t reset;
   reset = (fix_add(_ctx.pre_phase1,(- phase1)) > 0x8000 /* 0.500000 */);
   _ctx.pre_phase1 = phase1;
   fix16_t phase2;
   phase2 = Synth1_phasor(_ctx._inst16,fix_add(_ctx.pitch,fix_mul(Synth1_smooth(_ctx._inst15,fix_add(_ctx.detune,lfo_val)),0x200000 /* 32.000000 */)),reset);
   fix16_t sine;
   sine = fix_sin(fix_mul(0x6487e /* 6.283185 */,phase2));
   fix16_t gate_value;
   uint8_t _cond_50;
   _cond_50 = (_ctx.gate > 0);
   if(_cond_50){ gate_value = 0x10000 /* 1.000000 */; }
   else
   { gate_value = 0x0 /* 0.000000 */; }
   return fix_mul(fix_mul(fix_mul(Synth1_smooth(_ctx._inst17,_ctx.volume),sine),comp),Synth1_smooth(_ctx._inst18,gate_value));
}

void Synth1_noteOn_init(Synth1__ctx_type_7 &_output_){
   Synth1__ctx_type_7_init(_output_);
   return ;
}

void Synth1_noteOn(Synth1__ctx_type_7 &_ctx, int note, int velocity, int channel){
   uint8_t _cond_54;
   _cond_54 = (_ctx.count == 0);
   if(_cond_54){
      _ctx.n1 = note;
      _ctx.pitch = int_to_fix(note);
   }
   else
   {
      uint8_t _cond_53;
      _cond_53 = (_ctx.count == 1);
      if(_cond_53){
         _ctx.n2 = note;
         _ctx.pitch = int_to_fix(note);
      }
      else
      {
         uint8_t _cond_52;
         _cond_52 = (_ctx.count == 2);
         if(_cond_52){
            _ctx.n3 = note;
            _ctx.pitch = int_to_fix(note);
         }
         else
         {
            uint8_t _cond_51;
            _cond_51 = (_ctx.count == 3);
            if(_cond_51){
               _ctx.n4 = note;
               _ctx.pitch = int_to_fix(note);
            }
         }
      }
   }
   uint8_t _cond_55;
   _cond_55 = (_ctx.count <= 4);
   if(_cond_55){
      _ctx.count = (_ctx.count + 1);
   }
   uint8_t _cond_56;
   _cond_56 = (_ctx.count > 0);
   if(_cond_56){ _ctx.gate = 1; }
   else
   { _ctx.gate = 0; }
}

void Synth1_noteOff_init(Synth1__ctx_type_7 &_output_){
   Synth1__ctx_type_7_init(_output_);
   return ;
}

void Synth1_noteOff(Synth1__ctx_type_7 &_ctx, int note, int channel){
   uint8_t found;
   found = 0;
   uint8_t _cond_62;
   _cond_62 = (note == _ctx.n1);
   if(_cond_62){
      int _tmp_57_0;
      _tmp_57_0 = _ctx.n2;
      int _tmp_57_1;
      _tmp_57_1 = _ctx.n3;
      int _tmp_57_2;
      _tmp_57_2 = _ctx.n4;
      _ctx.n1 = _tmp_57_0;
      _ctx.n2 = _tmp_57_1;
      _ctx.n3 = _tmp_57_2;
      found = 1;
   }
   else
   {
      uint8_t _cond_61;
      _cond_61 = (note == _ctx.n2);
      if(_cond_61){
         int _tmp_58_0;
         _tmp_58_0 = _ctx.n3;
         int _tmp_58_1;
         _tmp_58_1 = _ctx.n4;
         _ctx.n2 = _tmp_58_0;
         _ctx.n3 = _tmp_58_1;
         found = 1;
      }
      else
      {
         uint8_t _cond_60;
         _cond_60 = (note == _ctx.n3);
         if(_cond_60){
            _ctx.n3 = _ctx.n4;
            found = 1;
         }
         else
         {
            uint8_t _cond_59;
            _cond_59 = (note == _ctx.n4);
            if(_cond_59){
               found = 1;
            }
         }
      }
   }
   uint8_t _cond_63;
   _cond_63 = (found && (_ctx.count > 0));
   if(_cond_63){
      _ctx.count = (_ctx.count + (-1));
   }
   uint8_t _cond_68;
   _cond_68 = (_ctx.count > 0);
   if(_cond_68){ _ctx.gate = 1; }
   else
   { _ctx.gate = 0; }
   uint8_t _cond_64;
   _cond_64 = (_ctx.count == 1);
   if(_cond_64){
      _ctx.pitch = int_to_fix(_ctx.n1);
   }
   uint8_t _cond_65;
   _cond_65 = (_ctx.count == 2);
   if(_cond_65){
      _ctx.pitch = int_to_fix(_ctx.n2);
   }
   uint8_t _cond_66;
   _cond_66 = (_ctx.count == 3);
   if(_cond_66){
      _ctx.pitch = int_to_fix(_ctx.n3);
   }
   uint8_t _cond_67;
   _cond_67 = (_ctx.count == 4);
   if(_cond_67){
      _ctx.pitch = int_to_fix(_ctx.n4);
   }
}

void Synth1_controlChange_init(Synth1__ctx_type_7 &_output_){
   Synth1__ctx_type_7_init(_output_);
   return ;
}

void Synth1_controlChange(Synth1__ctx_type_7 &_ctx, int control, fix16_t value, int channel){
   uint8_t _cond_69;
   _cond_69 = (control == 30);
   if(_cond_69){
      _ctx.volume = fix_mul(value,0x204 /* 0.007874 */);
   }
   uint8_t _cond_70;
   _cond_70 = (control == 31);
   if(_cond_70){
      _ctx.detune = fix_mul(value,0x204 /* 0.007874 */);
   }
   uint8_t _cond_71;
   _cond_71 = (control == 32);
   if(_cond_71){
      _ctx.lfo_rate = fix_mul(value,0x204 /* 0.007874 */);
   }
   uint8_t _cond_72;
   _cond_72 = (control == 33);
   if(_cond_72){
      _ctx.lfo_amt = fix_mul(0x20000 /* 2.000000 */,fix_add(fix_mul(value,0x204 /* 0.007874 */),(-0x8000 /* -0.500000 */)));
   }
}

void Synth1_default_init(Synth1__ctx_type_7 &_output_){
   Synth1__ctx_type_7_init(_output_);
   return ;
}

void Synth1_default(Synth1__ctx_type_7 &_ctx){
   _ctx.volume = 0x10000 /* 1.000000 */;
   _ctx.pitch = 0x2d0000 /* 45.000000 */;
   _ctx.detune = 0xcccc /* 0.800000 */;
   _ctx.lfo_rate = 0x11eb /* 0.070000 */;
   _ctx.lfo_amt = (-0xcccc /* -0.800000 */);
}


