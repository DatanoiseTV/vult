
local this = {}
local ffi = require("ffi")
function this.ternary(cond,then_,else_) if cond then return then_ else return else_ end end
function this.eps()             return 1e-18; end
function this.pi()              return 3.1415926535897932384; end
function this.random()          return math.random(); end
function this.irandom()         return math.floor(math.random() * 4294967296); end
function this.clip(x,low,high)  return (this.ternary(x<low,low,this.ternary(x>high,high,x))); end
function this.real(x)           return x; end
function this.int(x)            local int_part,_ = math.modf(x) return int_part; end
function this.sin(x)            return math.sin(x); end
function this.cos(x)            return math.cos(x); end
function this.abs(x)            return math.abs(x); end
function this.exp(x)            return math.exp(x); end
function this.floor(x)          return math.floor(x); end
function this.tan(x)            return math.tan(x); end
function this.tanh(x)           return math.tanh(x); end
function this.sqrt(x)           return x; end
function this.set(a,i,v)        a[i+1]=v; end
function this.get(a,i)          return a[i+1]; end
function this.makeArray(size,v) local a = {}; for i=1,size do a[i]=v end return a; end
function this.wrap_array(a)     return a; end
function this.Util__ctx_type_0_init()
   local _ctx = {};
   _ctx.pre = false;
   return _ctx;

end

function this.Util_edge_init()
   return this.Util__ctx_type_0_init();
end

function this.Util_edge(_ctx,x)
   local ret = (x and (_ctx.pre == false));
   _ctx.pre = x;
   return ret;

end

function this.Util__ctx_type_1_init()
   local _ctx = {};
   _ctx.pre_x = 0.;
   return _ctx;

end

function this.Util_change_init()
   return this.Util__ctx_type_1_init();
end

function this.Util_change(_ctx,x)
   local v = (_ctx.pre_x ~= x);
   _ctx.pre_x = x;
   return v;

end

function this.Util_map(x,x0,x1,y0,y1)
   return ((((x + (- x0)) * (y1 + (- y0))) / (x1 + (- x0))) + y0);

end

function this.Util__ctx_type_3_init()
   local _ctx = {};
   _ctx.y1 = 0.;
   _ctx.x1 = 0.;
   return _ctx;

end

function this.Util_dcblock_init()
   return this.Util__ctx_type_3_init();
end

function this.Util_dcblock(_ctx,x0)
   local y0 = (x0 + (- _ctx.x1) + (_ctx.y1 * 0.995));
   _ctx.x1 = x0;
   _ctx.y1 = y0;
   return y0;

end

function this.Util__ctx_type_4_init()
   local _ctx = {};
   _ctx.x = 0.;
   return _ctx;

end

function this.Util_smooth_init()
   return this.Util__ctx_type_4_init();
end

function this.Util_smooth(_ctx,input)
   _ctx.x = (_ctx.x + ((input + (- _ctx.x)) * 0.005));
   return _ctx.x;

end

function this.Util__ctx_type_5_init()
   local _ctx = {};
   _ctx.x0 = 0.;
   return _ctx;

end

function this.Util_average2_init()
   return this.Util__ctx_type_5_init();
end

function this.Util_average2(_ctx,x1)
   local result = ((_ctx.x0 + x1) * 0.5);
   _ctx.x0 = x1;
   return result;

end

function this.Util_cubic_clipper(x)
   if (x <= (-0.6666666)) then
      return (-0.6666666);

   else

      local _cond_20 = false;
      _cond_20 = (x >= 0.6666667);
      if _cond_20 then
         return 0.6666667;

      else

         return (x + ((-0.3333333) * x * x * x));

      end

   end

end

local Util_pitchToRate_1024_c0 = {0.1898417,0.1913259,0.1986886,0.2194246,0.2656772,0.3564378,0.5206507,0.8015597,1.2627581,1.9965621,3.135544,4.8683456,7.4612795,11.2877251,16.8680071,24.9233293,36.4485185,52.8098903,75.8766039,108.1965793,153.2316185,215.6710565,301.8494285,420.3017178,582.500346,803.8319419,1104.890093,1513.1840318,2065.3942521,2810.3465753,3812.9290693,5159.2451728,6963.3862256};
local Util_pitchToRate_1024_c1 = {0.0109134,0.0101758,0.0083338,0.004867,(-0.0009394),(-0.0100609),(-0.0238203),(-0.0440021),(-0.0730021),(-0.1140249),(-0.1713405),(-0.2506214),(-0.3593814),(-0.5075483),(-0.7082084),(-0.9785757),(-1.3412496),(-1.8258479),(-2.4711225),(-3.3277005),(-4.4616308),(-5.9589702),(-7.9317091),(-10.5254219),(-13.9291388),(-18.3880749),(-24.2200334),(-31.8365325),(-41.7699993),(-54.7087564),(-71.5420103),(-93.4176738),(-121.8166481)};
local Util_pitchToRate_1024_c2 = {0.0003556,0.0004472,0.0005624,0.0007073,0.0008895,0.0011187,0.0014069,0.0017694,0.0022253,0.0027986,0.0035197,0.0044265,0.005567,0.0070013,0.0088052,0.0110738,0.013927,0.0175152,0.022028,0.0277035,0.0348413,0.043818,0.0551077,0.0693061,0.0871628,0.1096201,0.1378636,0.173384,0.2180562,0.2742381,0.3448952,0.4337571,0.5455141};
function this.Util_pitchToRate_1024(pitch)
   local index = this.clip(this.int((0.2440945 * pitch)),0,31);
   return (Util_pitchToRate_1024_c0[index+1] + (pitch * (Util_pitchToRate_1024_c1[index+1] + (Util_pitchToRate_1024_c2[index+1] * pitch))));

end

local Util_pitchToRate_c0 = {0.0001854,0.0001869,0.0001941,0.0002143,0.0002595,0.0003481,0.0005085,0.0007828,0.0012332,0.0019498,0.0030621,0.0047543,0.0072865,0.0110232,0.0164727,0.0243392,0.0355943,0.0515722,0.0740983,0.1056608,0.1496403,0.2106163,0.2947749,0.4104509,0.568848,0.7849922,1.0789943,1.4777188,2.0169866,2.7444791,3.7235636,5.0383254,6.8001819};
local Util_pitchToRate_c1 = {1.07e-05,1e-05,8.2e-06,4.8e-06,(-9e-07),(-9.8e-06),(-2.32e-05),(-4.29e-05),(-7.12e-05),(-0.0001113),(-0.0001673),(-0.0002447),(-0.0003509),(-0.0004956),(-0.0006916),(-0.0009556),(-0.0013098),(-0.001783),(-0.0024132),(-0.0032497),(-0.004357),(-0.0058193),(-0.0077458),(-0.0102787),(-0.0136026),(-0.0179571),(-0.0236523),(-0.0310903),(-0.040791),(-0.0534265),(-0.0698652),(-0.0912281),(-0.1189615)};
local Util_pitchToRate_c2 = {4e-07,5e-07,6e-07,7e-07,9e-07,1.1e-06,1.4e-06,1.8e-06,2.2e-06,2.8e-06,3.5e-06,4.4e-06,5.5e-06,6.9e-06,8.6e-06,1.09e-05,1.37e-05,1.72e-05,2.16e-05,2.71e-05,3.41e-05,4.28e-05,5.39e-05,6.77e-05,8.52e-05,0.0001071,0.0001347,0.0001694,0.000213,0.0002679,0.0003369,0.0004236,0.0005328};
function this.Util_pitchToRate(pitch)
   local index = this.clip(this.int((0.2440945 * pitch)),0,31);
   return (Util_pitchToRate_c0[index+1] + (pitch * (Util_pitchToRate_c1[index+1] + (Util_pitchToRate_c2[index+1] * pitch))));

end

function this.Util_cvToPitch(cv)
   return ((cv * 120.) + 24.);

end

local Util_cvToRate_1024_c0 = {0.7593668,0.7628769,0.7797366,0.8256516,0.9246484,1.1123985,1.4406875,1.9833925,2.8444342,4.1683106,6.1539936,9.073195,13.2942978,19.3136143,27.7961018,39.6282634,55.9867165,78.4268778,108.9974326,150.3878036,206.1177981,280.7810906,380.3573327,512.6116485,687.6052678,918.3473603,1221.6260803,1619.0668426,2138.4784521,2815.5635571,3696.0898222,4838.643251,6318.1165156};
local Util_cvToRate_1024_c1 = {5.2455831,4.9989426,4.4030893,3.3191161,1.5644968,(-1.0992562),(-4.9822262),(-10.4858642),(-18.1279556),(-28.574102),(-42.6773652),(-61.5281299),(-86.516746),(-119.4121434),(-162.4603915),(-218.5081483),(-291.1571467),(-384.9573613),(-505.6483473),(-660.4605419),(-858.49116),(-1111.1728348),(-1432.8575168),(-1841.543534),(-2359.7803917),(-3015.7941424),(-3844.8863585),(-4891.1723528),(-6209.7398756),(-7869.328765),(-9955.6558052),(-12575.5383972),(-15862.0068819)};
local Util_cvToRate_1024_c2 = {20.1255919,24.4575724,29.7220002,36.1195823,43.8942271,53.3423435,64.8241421,78.7773676,95.733988,116.3404762,141.3824565,171.814657,208.7973083,253.7403777,308.3573241,374.730424,455.3901585,553.4116878,672.5320926,817.29285,993.2129783,1206.9994498,1466.8028948,1782.5283455,2166.212866,2632.4844665,3199.1197981,3887.7218889,4724.5437618,5741.4893336,6977.329755,8479.1815645,10304.3030111};
function this.Util_cvToRate_1024(cv)
   local index = this.clip(this.int((34.4444445 * cv)),0,31);
   return (Util_cvToRate_1024_c0[index+1] + (cv * (Util_cvToRate_1024_c1[index+1] + (Util_cvToRate_1024_c2[index+1] * cv))));

end

local Util_cvToRate_c0 = {0.0007416,0.0007417,0.0007419,0.0007423,0.0007431,0.0007445,0.0007466,0.0007495,0.0007536,0.000759,0.000766,0.0007749,0.000786,0.0007997,0.0008163,0.0008364,0.0008604,0.0008888,0.0009222,0.0009614,0.0010069,0.0010596,0.0011203,0.00119,0.0012697,0.0013604,0.0014635,0.0015802,0.001712,0.0018604,0.0020271,0.0022141,0.0024232,0.0026568,0.0029171,0.0032067,0.0035283,0.0038851,0.0042802,0.0047172,0.0051998,0.0057321,0.0063187,0.0069642,0.0076738,0.0084532,0.0093082,0.0102454,0.0112717,0.0123946,0.0136222,0.0149632,0.0164269,0.0180234,0.0197635,0.0216588,0.0237217,0.0259657,0.0284052,0.0310556,0.0339336,0.0370567,0.0404443,0.0441167,0.0480959,0.0524055,0.0570705,0.0621181,0.0675771,0.0734786,0.0798558,0.0867441,0.0941815,0.1022089,0.1108697,0.1202104,0.1302809,0.1411344,0.1528279,0.1654223,0.1789825,0.1935781,0.2092834,0.2261777,0.2443458,0.2638781,0.2848713,0.3074285,0.3316599,0.357683,0.3856233,0.4156144,0.4477993,0.4823303,0.5193697,0.5590908,0.6016783,0.6473293,0.6962535,0.7486748,0.8048318,0.8649786,0.929386,0.9983426,1.0721558,1.1511531,1.2356831,1.3261173,1.4228512,1.5263058,1.6369296,1.7551997,1.8816241,2.0167435,2.1611333,2.3154058,2.4802125,2.6562464,2.8442451,3.0449928,3.2593239,3.4881257,3.7323419,3.9929758,4.2710944,4.5678321,4.8843948,5.2220646,5.582204};
local Util_cvToRate_c1 = {0.0051392,0.0051263,0.0050994,0.0050569,0.0049975,0.0049196,0.0048214,0.0047011,0.0045567,0.0043863,0.0041874,0.0039577,0.0036947,0.0033955,0.0030572,0.0026766,0.0022504,0.001775,0.0012464,0.0006606,1.32e-05,(-0.0007005),(-0.0014856),(-0.0023473),(-0.0032914),(-0.0043239),(-0.0054514),(-0.0066807),(-0.0080191),(-0.0094747),(-0.0110556),(-0.0127708),(-0.0146297),(-0.0166425),(-0.0188198),(-0.0211731),(-0.0237146),(-0.0264571),(-0.0294143),(-0.032601),(-0.0360326),(-0.0397257),(-0.0436977),(-0.0479675),(-0.0525547),(-0.0574805),(-0.0627673),(-0.0684387),(-0.0745201),(-0.0810382),(-0.0880216),(-0.0955003),(-0.1035065),(-0.1120742),(-0.1212396),(-0.1310409),(-0.1415188),(-0.1527165),(-0.1646796),(-0.1774569),(-0.1910996),(-0.2056624),(-0.2212032),(-0.2377833),(-0.2554678),(-0.2743257),(-0.29443),(-0.3158582),(-0.3386924),(-0.3630195),(-0.3889319),(-0.416527),(-0.4459084),(-0.4771857),(-0.510475),(-0.5458991),(-0.5835884),(-0.6236806),(-0.6663219),(-0.7116669),(-0.7598792),(-0.8111321),(-0.8656092),(-0.9235045),(-0.9850238),(-1.0503845),(-1.1198169),(-1.1935646),(-1.2718857),(-1.3550528),(-1.4433547),(-1.5370969),(-1.6366025),(-1.7422134),(-1.8542912),(-1.9732184),(-2.0993997),(-2.233263),(-2.3752609),(-2.5258721),(-2.6856026),(-2.8549877),(-3.0345935),(-3.2250182),(-3.4268945),(-3.6408914),(-3.867716),(-4.1081157),(-4.3628809),(-4.6328468),(-4.9188962),(-5.2219624),(-5.5430316),(-5.883146),(-6.2434073),(-6.6249794),(-7.0290924),(-7.4570461),(-7.9102138),(-8.3900467),(-8.898078),(-9.4359272),(-10.0053059),(-10.6080216),(-11.2459841),(-11.9212107),(-12.6358324),(-13.3921),(-14.1923907)};
local Util_cvToRate_c2 = {0.0182549,0.0191666,0.0201238,0.0211289,0.0221841,0.0232921,0.0244554,0.0256768,0.0269592,0.0283057,0.0297194,0.0312037,0.0327621,0.0343984,0.0361164,0.0379202,0.0398141,0.0418025,0.0438903,0.0460824,0.0483839,0.0508004,0.0533376,0.0560015,0.0587984,0.061735,0.0648183,0.0680556,0.0714546,0.0750233,0.0787703,0.0827044,0.086835,0.0911719,0.0957254,0.1005063,0.105526,0.1107964,0.11633,0.12214,0.1282402,0.134645,0.1413697,0.1484303,0.1558435,0.163627,0.1717992,0.1803795,0.1893884,0.1988473,0.2087785,0.2192058,0.2301538,0.2416486,0.2537175,0.2663892,0.2796938,0.2936628,0.3083295,0.3237288,0.3398971,0.356873,0.3746966,0.3934105,0.413059,0.4336889,0.4553491,0.4780911,0.5019689,0.5270393,0.5533618,0.5809989,0.6100164,0.6404831,0.6724714,0.7060574,0.7413208,0.7783454,0.8172191,0.8580344,0.9008881,0.9458821,0.9931234,1.042724,1.0948019,1.1494808,1.2068905,1.2671676,1.3304551,1.3969035,1.4666705,1.539922,1.616832,1.6975832,1.7823675,1.8713862,1.9648508,2.0629835,2.1660173,2.2741971,2.3877798,2.5070353,2.6322469,2.763712,2.9017431,3.046668,3.198831,3.3585937,3.5263356,3.7024552,3.8873709,4.0815221,4.28537,4.4993989,4.7241173,4.960059,5.2077846,5.4678826,5.740971,6.0276986,6.3287465,6.6448299,6.9766999,7.3251448,7.6909924,8.075112,8.4784161,8.9018628,9.3464582};
function this.Util_cvToRate(cv)
   local index = this.clip(this.int((141.1111112 * cv)),0,127);
   return (Util_cvToRate_c0[index+1] + (cv * (Util_cvToRate_c1[index+1] + (Util_cvToRate_c2[index+1] * cv))));

end

function this.Util_pitchToCv(pitch)
   return (0.0083334 * ((-24.) + pitch));

end

local Util_cvToperiod_c0 = {674.2460348,671.5538378,662.7617819,646.759522,623.7994278,594.871802,561.2982769,524.4769422,485.7313693,446.2293824,406.9474404,368.6637744,331.9686831,297.2841558,264.8876665,234.9368568,207.4931244,182.5430159,160.0169068,139.8048318,121.7695566,105.757117,91.6051156,79.1490884,68.227249,58.6838946,50.3717336,43.153355,36.902033,31.5020248,26.8484943,22.8471657,19.4137945};
local Util_cvToperiod_c1 = {(-4656.6563108),(-4481.960579),(-4198.6861325),(-3855.7515427),(-3487.1394548),(-3115.8588213),(-2756.9303187),(-2419.6251411),(-2109.1347532),(-1827.8083337),(-1576.062963),(-1353.0470918),(-1157.1188644),(-986.1862501),(-837.9446649),(-710.0391128),(-600.1712335),(-506.1665656),(-426.0134627),(-357.8821512),(-300.1301898),(-251.2989043),(-210.1041049),(-175.4234501),(-146.2821135),(-121.837895),(-101.3665365),(-84.2477263),(-69.9520817),(-58.0292593),(-48.0972479),(-39.8328333),(-32.9631861)};
local Util_cvToperiod_c2 = {14548.8231621,11715.3695219,9433.7446751,7596.4772967,6117.0266216,4925.7061172,3966.4010399,3193.9252637,2571.8928791,2071.0043083,1667.666208,1342.8801524,1081.3477513,870.7500494,701.1672681,564.6115532,454.6507239,366.1052976,294.8045211,237.3899156,191.157082,153.9283162,123.9500325,99.8101645,80.3716525,64.7188847,52.114569,41.9650048,33.7921173,27.2109391,21.9114772,17.6441111,14.2078352};
function this.Util_cvToperiod(cv)
   local index = this.clip(this.int((31. * cv)),0,31);
   return (Util_cvToperiod_c0[index+1] + (cv * (Util_cvToperiod_c1[index+1] + (Util_cvToperiod_c2[index+1] * cv))));

end

local Util_cvTokHz_c0 = {0.0327032,0.0329158,0.0339579,0.0368567,0.0432422,0.055616,0.0777238,0.115069,0.1756143,0.2707394,0.4165374,0.6355669,0.9592072,1.4308178,2.1099596,3.078021,4.4456974,6.3629088,9.0319219,12.7246767,17.805619,24.7617347,34.2419904,47.1090422,64.5069279,87.9495574,119.436234,161.6022735,217.9151479,292.9296186,392.6192398,524.8066449,699.7214972};
local Util_cvTokHz_c1 = {0.2257192,0.2122933,0.1791694,0.117605,0.0157802,(-0.142178),(-0.3774662),(-0.7182503),(-1.2017969),(-1.8772284),(-2.8090773),(-4.0818673),(-5.8060081),(-8.1253731),(-11.2270275),(-15.3537053),(-20.8197945),(-28.0317982),(-37.5145028),(-49.9444141),(-66.1924493),(-87.3784044),(-114.9403964),(-150.7233371),(-197.0915838),(-257.0722838),(-334.5376738),(-434.4367882),(-563.0898166),(-728.5618575),(-941.1372579),(-1213.9213282),(-1563.603302)};
local Util_cvTokHz_c2 = {0.8763378,1.088287,1.3514976,1.6783679,2.0842943,2.5883971,3.2144212,3.991854,4.9573151,6.1562805,7.645225,9.4942823,11.7905487,14.642185,18.1835118,22.5813362,28.0428087,34.8251811,43.2479231,53.7077712,66.6974152,82.8287061,102.8614758,127.7393272,158.6340814,197.0009732,244.6471976,303.8170335,377.2975565,468.549918,581.872376,722.6027558,897.3698773};
function this.Util_cvTokHz(cv)
   local index = this.clip(this.int((31. * cv)),0,31);
   return (Util_cvTokHz_c0[index+1] + (cv * (Util_cvTokHz_c1[index+1] + (Util_cvTokHz_c2[index+1] * cv))));

end

local Ladder_tune_c0 = {0.0011649,0.001165,0.0011654,0.0011664,0.0011682,0.0011712,0.0011759,0.0011825,0.0011916,0.0012038,0.0012197,0.0012401,0.0012656,0.0012972,0.0013359,0.0013828,0.0014392,0.0015063,0.0015858,0.0016793,0.0017886,0.0019158,0.0020632,0.0022333,0.0024288,0.0026527,0.0029084,0.0031995,0.0035299,0.0039041,0.0043268,0.0048032,0.0053392,0.0059409,0.0066151,0.0073693,0.0082117,0.009151,0.0101968,0.0113598,0.0126512,0.0140835,0.0156701,0.0174258,0.0193663,0.0215089,0.0238725,0.0264772,0.029345,0.0325,0.0359677,0.0397764,0.0439561,0.0485398,0.0535629,0.0590636,0.0650835,0.0716674,0.0788636,0.0867244,0.0953063,0.1046703,0.114882,0.1260125,0.1381383,0.151342,0.1657125,0.1813459,0.1983454,0.2168226,0.2368974,0.258699,0.2823666,0.30805,0.3359104,0.3661213,0.3988694,0.4343555,0.4727955,0.5144216,0.5594834,0.6082493,0.6610078,0.7180685,0.7797646,0.8464537,0.9185198,0.9963755,1.0804636,1.1712597,1.269274,1.3750543,1.4891884,1.6123069,1.7450863,1.8882523,2.0425832,2.2089135,2.3881382,2.5812166,2.7891772,3.0131222,3.254233,3.5137755,3.793106,4.0936777,4.417047,4.7648813,5.1389661,5.5412136,5.973671,6.4385305,6.9381386,7.4750073,8.051825,8.6714692,9.3370188,10.0517683,(-516.1684513),0.7123583,0.7123583,0.7123583,0.7123583,0.7123583,0.7123583,0.7123583,0.7123583,0.7123583,0.7123583};
local Ladder_tune_c1 = {0.008072,0.0080469,0.007994,0.0079103,0.0077926,0.0076373,0.0074405,0.0071982,0.006906,0.0065588,0.0061517,0.005679,0.0051346,0.004512,0.0038043,0.0030038,0.0021024,0.0010915,(-3.85e-05),(-0.0012976),(-0.0026967),(-0.0042476),(-0.0059626),(-0.0078554),(-0.0099404),(-0.012233),(-0.0147501),(-0.0175094),(-0.0205301),(-0.0238328),(-0.0274394),(-0.0313737),(-0.0356608),(-0.0403279),(-0.0454039),(-0.0509201),(-0.0569095),(-0.0634078),(-0.0704531),(-0.0780861),(-0.0863505),(-0.0952929),(-0.104963),(-0.1154143),(-0.1267037),(-0.1388922),(-0.1520448),(-0.166231),(-0.1815253),(-0.198007),(-0.2157608),(-0.2348774),(-0.2554534),(-0.277592),(-0.3014035),(-0.3270054),(-0.3545233),(-0.3840911),(-0.4158518),(-0.4499579),(-0.486572),(-0.5258677),(-0.56803),(-0.6132562),(-0.6617569),(-0.7137563),(-0.7694937),(-0.8292241),(-0.8932193),(-0.9617689),(-1.0351816),(-1.1137865),(-1.197934),(-1.2879977),(-1.3843752),(-1.4874906),(-1.5977951),(-1.7157695),(-1.8419261),(-1.9768099),(-2.1210017),(-2.2751197),(-2.4398221),(-2.6158096),(-2.8038282),(-3.0046719),(-3.2191859),(-3.4482695),(-3.6928801),(-3.9540364),(-4.2328222),(-4.530391),(-4.8479699),(-5.1868644),(-5.5484634),(-5.9342444),(-6.3457788),(-6.7847384),(-7.252901),(-7.7521574),(-8.2845184),(-8.8521224),(-9.4572432),(-10.1022985),(-10.7898589),(-11.5226576),(-12.3036002),(-13.1357755),(-14.0224673),(-14.9671658),(-15.9735813),(-17.0456569),(-18.1875838),(-19.4038163),(-20.6990879),(-22.0784291),(-23.5471853),(-25.1110365),1114.2911473,-0.,-0.,-0.,-0.,-0.,-0.,-0.,-0.,-0.,-0.};
local Ladder_tune_c2 = {0.0287519,0.0303518,0.0320407,0.0338236,0.0357057,0.0376926,0.03979,0.0420041,0.0443414,0.0468088,0.0494135,0.0521631,0.0550657,0.0581298,0.0613645,0.0647791,0.0683838,0.072189,0.0762059,0.0804464,0.0849229,0.0896484,0.0946369,0.099903,0.1054621,0.1113306,0.1175256,0.1240653,0.130969,0.1382568,0.1459501,0.1540715,0.1626448,0.1716952,0.1812492,0.1913349,0.2019817,0.213221,0.2250858,0.2376107,0.2508326,0.2647902,0.2795245,0.2950787,0.3114984,0.3288318,0.3471297,0.3664457,0.3868367,0.4083623,0.4310857,0.4550735,0.4803961,0.5071279,0.5353471,0.5651366,0.5965837,0.6297807,0.664825,0.7018193,0.7408721,0.7820981,0.8256181,0.8715597,0.9200578,0.9712546,1.0253002,1.0823532,1.142581,1.2061601,1.2732771,1.3441288,1.4189231,1.4978793,1.5812291,1.6692168,1.7621007,1.8601531,1.9636617,2.07293,2.1882785,2.3100457,2.4385886,2.5742843,2.7175308,2.8687482,3.0283802,3.196895,3.3747868,3.5625774,3.7608177,3.970089,4.1910053,4.4242146,4.6704008,4.9302861,5.2046327,5.4942454,5.7999737,6.1227142,6.4634138,6.8230716,7.2027426,7.6035405,8.0266409,8.4732847,8.9447822,9.4425162,9.9679467,10.5226148,11.1081476,11.7262624,12.3787724,13.0675914,13.7947399,14.5623506,15.3726752,16.2280905,(-600.5442814),-0.,-0.,-0.,-0.,-0.,-0.,-0.,-0.,-0.,-0.};
function this.Ladder_tune(cut)
   local index = this.clip(this.int((127. * cut)),0,127);
   return (Ladder_tune_c0[index+1] + (cut * (Ladder_tune_c1[index+1] + (Ladder_tune_c2[index+1] * cut))));

end

function this.Ladder_ladder_step(input,fh,res,p,dp)
   local w0 = this.Util_cubic_clipper((input + ((-4.) * res * p[3+1])));
   local w1 = this.Util_cubic_clipper(p[0+1]);
   dp[0+1] = ((w0 + (- w1)) * fh);
   local w3 = this.Util_cubic_clipper(p[1+1]);
   dp[1+1] = ((w1 + (- w3)) * fh);
   local w5 = this.Util_cubic_clipper(p[2+1]);
   dp[2+1] = ((w3 + (- w5)) * fh);
   local w7 = this.Util_cubic_clipper(p[3+1]);
   dp[3+1] = ((w5 + (- w7)) * fh);

end

function this.Ladder__ctx_type_2_init()
   local _ctx = {};
   _ctx.p = this.makeArray(4,0.);
   _ctx.fh = 0.;
   _ctx._inst25 = this.Util__ctx_type_1_init();
   return _ctx;

end

function this.Ladder_heun_init()
   return this.Ladder__ctx_type_2_init();
end

function this.Ladder_heun(_ctx,input,cut,res)
   local dp = {0.0,0.0,0.0,0.0};
   local pt = {0.0,0.0,0.0,0.0};
   local dpt = {0.0,0.0,0.0,0.0};
   if this.Util_change(_ctx._inst25,cut) then
      _ctx.fh = this.Ladder_tune(cut);

   end
   this.Ladder_ladder_step(input,_ctx.fh,res,_ctx.p,dpt);
   pt[0+1] = (_ctx.p[0+1] + dpt[0+1]);
   pt[1+1] = (_ctx.p[1+1] + dpt[1+1]);
   pt[2+1] = (_ctx.p[2+1] + dpt[2+1]);
   pt[3+1] = (_ctx.p[3+1] + dpt[3+1]);
   this.Ladder_ladder_step(input,_ctx.fh,res,pt,dp);
   _ctx.p[0+1] = (_ctx.p[0+1] + ((dp[0+1] + dpt[0+1]) * 0.5));
   _ctx.p[1+1] = (_ctx.p[1+1] + ((dp[1+1] + dpt[1+1]) * 0.5));
   _ctx.p[2+1] = (_ctx.p[2+1] + ((dp[2+1] + dpt[2+1]) * 0.5));
   _ctx.p[3+1] = (_ctx.p[3+1] + ((dp[3+1] + dpt[3+1]) * 0.5));
   return _ctx.p[3+1];

end

function this.Ladder__ctx_type_3_init()
   local _ctx = {};
   _ctx.p = this.makeArray(4,0.);
   _ctx.fh = 0.;
   _ctx._inst28 = this.Util__ctx_type_1_init();
   return _ctx;

end

function this.Ladder_euler_init()
   return this.Ladder__ctx_type_3_init();
end

function this.Ladder_euler(_ctx,input,cut,res)
   local dpt = {0.0,0.0,0.0,0.0};
   if this.Util_change(_ctx._inst28,cut) then
      _ctx.fh = this.Ladder_tune(cut);

   end
   this.Ladder_ladder_step(input,_ctx.fh,res,_ctx.p,dpt);
   _ctx.p[0+1] = (_ctx.p[0+1] + dpt[0+1]);
   _ctx.p[1+1] = (_ctx.p[1+1] + dpt[1+1]);
   _ctx.p[2+1] = (_ctx.p[2+1] + dpt[2+1]);
   _ctx.p[3+1] = (_ctx.p[3+1] + dpt[3+1]);
   return _ctx.p[3+1];

end

function this.Ladder__ctx_type_4_init()
   local _ctx = {};
   _ctx.e = this.Ladder__ctx_type_3_init();
   return _ctx;

end

function this.Ladder_process_euler_init()
   return this.Ladder__ctx_type_4_init();
end

function this.Ladder_process_euler(_ctx,input,cut,res)
   this.Ladder_euler(_ctx.e,input,cut,res);
   this.Ladder_euler(_ctx.e,input,cut,res);
   this.Ladder_euler(_ctx.e,input,cut,res);
   local out = this.Ladder_euler(_ctx.e,input,cut,res);
   return out;

end

function this.Ladder__ctx_type_5_init()
   local _ctx = {};
   _ctx.h = this.Ladder__ctx_type_2_init();
   return _ctx;

end

function this.Ladder_process_heun_init()
   return this.Ladder__ctx_type_5_init();
end

function this.Ladder_process_heun(_ctx,input,cut,res)
   this.Ladder_heun(_ctx.h,input,cut,res);
   this.Ladder_heun(_ctx.h,input,cut,res);
   this.Ladder_heun(_ctx.h,input,cut,res);
   local out = this.Ladder_heun(_ctx.h,input,cut,res);
   return out;

end

function this.Ladder__ctx_type_6_init()
   local _ctx = {};
   _ctx._inst33 = this.Ladder__ctx_type_5_init();
   return _ctx;

end

function this.Ladder_process_init()
   return this.Ladder__ctx_type_6_init();
end

function this.Ladder_process(_ctx,input,cut,res)
   return this.Ladder_process_heun(_ctx._inst33,input,cut,res);

end

function this.Ladder_noteOn_init()
   return this.Ladder__ctx_type_6_init();
end

function this.Ladder_noteOn(_ctx,note,velocity,channel)

end

function this.Ladder_noteOff_init()
   return this.Ladder__ctx_type_6_init();
end

function this.Ladder_noteOff(_ctx,note,channel)

end

function this.Ladder_controlChange_init()
   return this.Ladder__ctx_type_6_init();
end

function this.Ladder_controlChange(_ctx,control,value,channel)

end

function this.Ladder_default_init()
   return this.Ladder__ctx_type_6_init();
end

function this.Ladder_default(_ctx)

end


function this.process(ctx,input,cut,res) return this.Ladder_process(ctx,input,cut,res) end
function this.noteOn(ctx,note,velocity,channel) return this.Ladder_noteOn(ctx,note,velocity,channel) end
function this.noteOff(ctx,note,channel) return this.Ladder_noteOff(ctx,note,channel) end
function this.controlChange(ctx,control,value,channel) return this.Ladder_controlChange(ctx,control,value,channel) end
function this.init() return this.Ladder_process_init() end
function this.default(ctx) return this.Ladder_default(ctx) end
this.config = { inputs = 4, outputs = 1, noteon_inputs = 4, noteoff_inputs = 3, controlchange_inputs = 4, is_active = true }
return this
