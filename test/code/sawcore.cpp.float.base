
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#include "sawcore.h"

void Util__ctx_type_0_init(Util__ctx_type_0 &_output_){
   Util__ctx_type_0 _ctx;
   _ctx.pre = 0;
   _output_ = _ctx;
   return ;
}

void Util_edge_init(Util__ctx_type_0 &_output_){
   Util__ctx_type_0_init(_output_);
   return ;
}

uint8_t Util_edge(Util__ctx_type_0 &_ctx, uint8_t x){
   uint8_t ret;
   ret = (x && bool_not(_ctx.pre));
   _ctx.pre = x;
   return ret;
}

void Util__ctx_type_1_init(Util__ctx_type_1 &_output_){
   Util__ctx_type_1 _ctx;
   _ctx.pre_x = 0.000000f;
   _output_ = _ctx;
   return ;
}

void Util_change_init(Util__ctx_type_1 &_output_){
   Util__ctx_type_1_init(_output_);
   return ;
}

uint8_t Util_change(Util__ctx_type_1 &_ctx, float x){
   uint8_t v;
   v = (_ctx.pre_x != x);
   _ctx.pre_x = x;
   return v;
}

float Util_map(float x, float x0, float x1, float y0, float y1){
   return ((((x + (- x0)) * (y1 + (- y0))) / (x1 + (- x0))) + y0);
}

void Util__ctx_type_3_init(Util__ctx_type_3 &_output_){
   Util__ctx_type_3 _ctx;
   _ctx.y1 = 0.000000f;
   _ctx.x1 = 0.000000f;
   _output_ = _ctx;
   return ;
}

void Util_dcblock_init(Util__ctx_type_3 &_output_){
   Util__ctx_type_3_init(_output_);
   return ;
}

float Util_dcblock(Util__ctx_type_3 &_ctx, float x0){
   float y0;
   y0 = (x0 + (- _ctx.x1) + (_ctx.y1 * 0.995000f));
   _ctx.x1 = x0;
   _ctx.y1 = y0;
   return y0;
}

void Util__ctx_type_4_init(Util__ctx_type_4 &_output_){
   Util__ctx_type_4 _ctx;
   _ctx.x = 0.000000f;
   _output_ = _ctx;
   return ;
}

void Util_smooth_init(Util__ctx_type_4 &_output_){
   Util__ctx_type_4_init(_output_);
   return ;
}

float Util_smooth(Util__ctx_type_4 &_ctx, float input){
   _ctx.x = (_ctx.x + ((input + (- _ctx.x)) * 0.005000f));
   return _ctx.x;
}

void Util__ctx_type_5_init(Util__ctx_type_5 &_output_){
   Util__ctx_type_5 _ctx;
   _ctx.x0 = 0.000000f;
   _output_ = _ctx;
   return ;
}

void Util_average2_init(Util__ctx_type_5 &_output_){
   Util__ctx_type_5_init(_output_);
   return ;
}

float Util_average2(Util__ctx_type_5 &_ctx, float x1){
   float result;
   result = ((_ctx.x0 + x1) * 0.500000f);
   _ctx.x0 = x1;
   return result;
}

float Util_cubic_clipper(float x){
   uint8_t _cond_21;
   _cond_21 = (x <= (-0.666667f));
   if(_cond_21){
      return (-0.666667f);
   }
   else
   {
      uint8_t _cond_20;
      _cond_20 = (x >= 0.666667f);
      if(_cond_20){
         return 0.666667f;
      }
      else
      {
         return (x + ((-0.333333f) * x * x * x));
      }
   }
}

float Util_pitchToRate_1024(float pitch){
   int index;
   index = int_clip(float_to_int((0.244094f * pitch)),0,31);
   return (float_wrap_array(Util_pitchToRate_1024_c0)[index] + (pitch * (float_wrap_array(Util_pitchToRate_1024_c1)[index] + (float_wrap_array(Util_pitchToRate_1024_c2)[index] * pitch))));
}

float Util_pitchToRate(float pitch){
   int index;
   index = int_clip(float_to_int((0.244094f * pitch)),0,31);
   return (float_wrap_array(Util_pitchToRate_c0)[index] + (pitch * (float_wrap_array(Util_pitchToRate_c1)[index] + (float_wrap_array(Util_pitchToRate_c2)[index] * pitch))));
}

float Util_cvToPitch(float cv){
   return ((cv * 120.000000f) + 24.000000f);
}

float Util_cvToRate_1024(float cv){
   int index;
   index = int_clip(float_to_int((34.444444f * cv)),0,31);
   return (float_wrap_array(Util_cvToRate_1024_c0)[index] + (cv * (float_wrap_array(Util_cvToRate_1024_c1)[index] + (float_wrap_array(Util_cvToRate_1024_c2)[index] * cv))));
}

float Util_cvToRate(float cv){
   int index;
   index = int_clip(float_to_int((34.444444f * cv)),0,31);
   return (float_wrap_array(Util_cvToRate_c0)[index] + (cv * (float_wrap_array(Util_cvToRate_c1)[index] + (float_wrap_array(Util_cvToRate_c2)[index] * cv))));
}

float Util_pitchToCv(float pitch){
   return (0.008333f * ((-24.000000f) + pitch));
}

float Util_cvToperiod(float cv){
   int index;
   index = int_clip(float_to_int((31.000000f * cv)),0,31);
   return (float_wrap_array(Util_cvToperiod_c0)[index] + (cv * (float_wrap_array(Util_cvToperiod_c1)[index] + (float_wrap_array(Util_cvToperiod_c2)[index] * cv))));
}

float Util_cvTokHz(float cv){
   int index;
   index = int_clip(float_to_int((31.000000f * cv)),0,31);
   return (float_wrap_array(Util_cvTokHz_c0)[index] + (cv * (float_wrap_array(Util_cvTokHz_c1)[index] + (float_wrap_array(Util_cvTokHz_c2)[index] * cv))));
}

void Sawcore_ptr_w2(float phase, float rate, _tuple_$_bool_real_$ &_output_){
   _tuple_$_bool_real_$ out;
   float s1;
   s1 = rate;
   float s2;
   s2 = (s1 + rate);
   uint8_t _cond_46;
   _cond_46 = (phase < s1);
   if(_cond_46){
      float d;
      d = (phase / rate);
      float t2;
      t2 = (s2 * 0.000977f);
      {
         out.field_0 = 0;
         out.field_1 = (1.000000f + (d * ((- d) + t2)));
      }
   }
   else
   {
      uint8_t _cond_45;
      _cond_45 = (phase < s2);
      if(_cond_45){
         float d;
         d = (phase / rate);
         float t2;
         t2 = (s2 * 0.000977f);
         {
            out.field_0 = 0;
            out.field_1 = (3.000000f + (d * ((-4.000000f) + d + t2)));
         }
      }
      else
      {
         {
            out.field_0 = 1;
            out.field_1 = 0.000000f;
         }
      }
   }
   _output_ = out;
   return ;
}

void Sawcore__ctx_type_1_init(Sawcore__ctx_type_1 &_output_){
   Sawcore__ctx_type_1 _ctx;
   _ctx.reset_state = 0;
   _ctx.reset_phase = 0.000000f;
   _ctx.rate = 0.000000f;
   _ctx.phase = 0.000000f;
   Util__ctx_type_0_init(_ctx._inst30);
   Util__ctx_type_1_init(_ctx._inst28);
   Sawcore_default(_ctx);
   _output_ = _ctx;
   return ;
}

void Sawcore_process_init(Sawcore__ctx_type_1 &_output_){
   Sawcore__ctx_type_1_init(_output_);
   return ;
}

float Sawcore_process(Sawcore__ctx_type_1 &_ctx, float cv, float reset){
   float transition;
   transition = 0.000000f;
   float out;
   out = 0.000000f;
   uint8_t _cond_47;
   _cond_47 = Util_change(_ctx._inst28,cv);
   if(_cond_47){
      _ctx.rate = Util_cvToRate_1024(cv);
   }
   float new_phase;
   new_phase = (_ctx.phase + _ctx.rate);
   uint8_t do_reset;
   do_reset = Util_edge(_ctx._inst30,(reset > 0.000000f));
   uint8_t do_wrap;
   do_wrap = (new_phase > 1024.000000f);
   uint8_t _cond_48;
   _cond_48 = (do_reset || do_wrap);
   if(_cond_48){
      _ctx.reset_phase = _ctx.phase;
      if(do_wrap){ new_phase = (new_phase + (-1024.000000f)); }
      else
      { new_phase = 0.000000f; }
      _ctx.reset_state = 1;
   }
   _ctx.phase = new_phase;
   out = _ctx.phase;
   if(_ctx.reset_state){
      uint8_t done;
      float ptr;
      _tuple_$_bool_real_$ _call_49;
      Sawcore_ptr_w2(_ctx.phase,_ctx.rate,_call_49);
      done = _call_49.field_0;ptr = _call_49.field_1;
      transition = ((ptr + 1.000000f) * 0.500000f * _ctx.reset_phase);
      if(done){
         _ctx.reset_state = 0;
      }
      else
      {
         out = transition;
      }
   }
   return ((0.001953f * out) + (-1.000000f));
}

void Sawcore_noteOn_init(Sawcore__ctx_type_1 &_output_){
   Sawcore__ctx_type_1_init(_output_);
   return ;
}

void Sawcore_noteOn(Sawcore__ctx_type_1 &_ctx, int note, int velocity, int channel){
}

void Sawcore_noteOff_init(Sawcore__ctx_type_1 &_output_){
   Sawcore__ctx_type_1_init(_output_);
   return ;
}

void Sawcore_noteOff(Sawcore__ctx_type_1 &_ctx, int note, int channel){
}

void Sawcore_controlChange_init(Sawcore__ctx_type_1 &_output_){
   Sawcore__ctx_type_1_init(_output_);
   return ;
}

void Sawcore_controlChange(Sawcore__ctx_type_1 &_ctx, int control, int value, int channel){
}

void Sawcore_default_init(Sawcore__ctx_type_1 &_output_){
   Sawcore__ctx_type_1_init(_output_);
   return ;
}

void Sawcore_default(Sawcore__ctx_type_1 &_ctx){
   _ctx.rate = 0.759367f;
}


