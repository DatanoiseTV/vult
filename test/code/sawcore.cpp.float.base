
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#include "sawcore.h"

void Util__ctx_type_0_init(Util__ctx_type_0 &_output_){
   Util__ctx_type_0 _ctx;
   _ctx.pre = false;
   _output_ = _ctx;
   return ;
}

void Util_edge_init(Util__ctx_type_0 &_output_){
   Util__ctx_type_0_init(_output_);
   return ;
}

uint8_t Util_edge(Util__ctx_type_0 &_ctx, uint8_t x){
   uint8_t ret;
   ret = (x && bool_not(_ctx.pre));
   _ctx.pre = x;
   return ret;
}

void Util__ctx_type_1_init(Util__ctx_type_1 &_output_){
   Util__ctx_type_1 _ctx;
   _ctx.pre_x = 0.f;
   _output_ = _ctx;
   return ;
}

void Util_change_init(Util__ctx_type_1 &_output_){
   Util__ctx_type_1_init(_output_);
   return ;
}

uint8_t Util_change(Util__ctx_type_1 &_ctx, float x){
   uint8_t v;
   v = (_ctx.pre_x != x);
   _ctx.pre_x = x;
   return v;
}

float Util_map(float x, float x0, float x1, float y0, float y1){
   return (y0 + (((x + (- x0)) * (y1 + (- y0))) / (x1 + (- x0))));
}

void Util__ctx_type_3_init(Util__ctx_type_3 &_output_){
   Util__ctx_type_3 _ctx;
   _ctx.y1 = 0.f;
   _ctx.x1 = 0.f;
   _output_ = _ctx;
   return ;
}

void Util_dcblock_init(Util__ctx_type_3 &_output_){
   Util__ctx_type_3_init(_output_);
   return ;
}

float Util_dcblock(Util__ctx_type_3 &_ctx, float x0){
   float y0;
   y0 = (x0 + (- _ctx.x1) + (0.995f * _ctx.y1));
   _ctx.x1 = x0;
   _ctx.y1 = y0;
   return y0;
}

void Util__ctx_type_4_init(Util__ctx_type_4 &_output_){
   Util__ctx_type_4 _ctx;
   _ctx.x = 0.f;
   _output_ = _ctx;
   return ;
}

void Util_smooth_init(Util__ctx_type_4 &_output_){
   Util__ctx_type_4_init(_output_);
   return ;
}

float Util_smooth(Util__ctx_type_4 &_ctx, float input){
   _ctx.x = (_ctx.x + (0.005f * (input + (- _ctx.x))));
   return _ctx.x;
}

void Util__ctx_type_5_init(Util__ctx_type_5 &_output_){
   Util__ctx_type_5 _ctx;
   _ctx.x0 = 0.f;
   _output_ = _ctx;
   return ;
}

void Util_average2_init(Util__ctx_type_5 &_output_){
   Util__ctx_type_5_init(_output_);
   return ;
}

float Util_average2(Util__ctx_type_5 &_ctx, float x1){
   float result;
   result = (0.5f * (_ctx.x0 + x1));
   _ctx.x0 = x1;
   return result;
}

float Util_cubic_clipper(float x){
   if(x <= -0.6666666f){
      return -0.6666666f;
   }
   else
   {
      if(x >= 0.6666667f){
         return 0.6666667f;
      }
      else
      {
         return (x + (-0.3333333f * x * x * x));
      }
   }
}

float Util_pitchToRate_1024_raw_c0(int index){
   return Util_pitchToRate_1024_c0[index];
}

float Util_pitchToRate_1024_raw_c1(int index){
   return Util_pitchToRate_1024_c1[index];
}

float Util_pitchToRate_1024_raw_c2(int index){
   return Util_pitchToRate_1024_c2[index];
}

float Util_pitchToRate_1024(float pitch){
   int index;
   index = int_clip(float_to_int((0.2440945f * pitch)),0,31);
   return (float_wrap_array(Util_pitchToRate_1024_c0)[index] + (pitch * (float_wrap_array(Util_pitchToRate_1024_c1)[index] + (pitch * float_wrap_array(Util_pitchToRate_1024_c2)[index]))));
}

float Util_pitchToRate_raw_c0(int index){
   return Util_pitchToRate_c0[index];
}

float Util_pitchToRate_raw_c1(int index){
   return Util_pitchToRate_c1[index];
}

float Util_pitchToRate_raw_c2(int index){
   return Util_pitchToRate_c2[index];
}

float Util_pitchToRate(float pitch){
   int index;
   index = int_clip(float_to_int((0.2440945f * pitch)),0,31);
   return (float_wrap_array(Util_pitchToRate_c0)[index] + (pitch * (float_wrap_array(Util_pitchToRate_c1)[index] + (pitch * float_wrap_array(Util_pitchToRate_c2)[index]))));
}

float Util_cvToPitch(float cv){
   return (24.f + (120.f * cv));
}

float Util_cvToRate_1024_raw_c0(int index){
   return Util_cvToRate_1024_c0[index];
}

float Util_cvToRate_1024_raw_c1(int index){
   return Util_cvToRate_1024_c1[index];
}

float Util_cvToRate_1024_raw_c2(int index){
   return Util_cvToRate_1024_c2[index];
}

float Util_cvToRate_1024(float cv){
   int index;
   index = int_clip(float_to_int((34.4444445f * cv)),0,31);
   return (float_wrap_array(Util_cvToRate_1024_c0)[index] + (cv * (float_wrap_array(Util_cvToRate_1024_c1)[index] + (cv * float_wrap_array(Util_cvToRate_1024_c2)[index]))));
}

float Util_cvToRate_raw_c0(int index){
   return Util_cvToRate_c0[index];
}

float Util_cvToRate_raw_c1(int index){
   return Util_cvToRate_c1[index];
}

float Util_cvToRate_raw_c2(int index){
   return Util_cvToRate_c2[index];
}

float Util_cvToRate(float cv){
   int index;
   index = int_clip(float_to_int((141.1111112f * cv)),0,127);
   return (float_wrap_array(Util_cvToRate_c0)[index] + (cv * (float_wrap_array(Util_cvToRate_c1)[index] + (cv * float_wrap_array(Util_cvToRate_c2)[index]))));
}

float Util_pitchToCv(float pitch){
   return (0.0083334f * (-24.f + pitch));
}

float Util_cvToperiod_raw_c0(int index){
   return Util_cvToperiod_c0[index];
}

float Util_cvToperiod_raw_c1(int index){
   return Util_cvToperiod_c1[index];
}

float Util_cvToperiod_raw_c2(int index){
   return Util_cvToperiod_c2[index];
}

float Util_cvToperiod(float cv){
   int index;
   index = int_clip(float_to_int((31.f * cv)),0,31);
   return (float_wrap_array(Util_cvToperiod_c0)[index] + (cv * (float_wrap_array(Util_cvToperiod_c1)[index] + (cv * float_wrap_array(Util_cvToperiod_c2)[index]))));
}

float Util_cvTokHz_raw_c0(int index){
   return Util_cvTokHz_c0[index];
}

float Util_cvTokHz_raw_c1(int index){
   return Util_cvTokHz_c1[index];
}

float Util_cvTokHz_raw_c2(int index){
   return Util_cvTokHz_c2[index];
}

float Util_cvTokHz(float cv){
   int index;
   index = int_clip(float_to_int((31.f * cv)),0,31);
   return (float_wrap_array(Util_cvTokHz_c0)[index] + (cv * (float_wrap_array(Util_cvTokHz_c1)[index] + (cv * float_wrap_array(Util_cvTokHz_c2)[index]))));
}

void Sawcore__ctx_type_0_init(Sawcore__ctx_type_0 &_output_){
   Sawcore__ctx_type_0 _ctx;
   _ctx.ptr_w2_ret_1 = 0.f;
   _ctx.ptr_w2_ret_0 = false;
   _output_ = _ctx;
   return ;
}

void Sawcore_ptr_w2_init(Sawcore__ctx_type_0 &_output_){
   Sawcore__ctx_type_0_init(_output_);
   return ;
}

void Sawcore_ptr_w2(Sawcore__ctx_type_0 &_ctx, float phase, float rate){
   _tuple___bool_real__ out;
   float s1;
   s1 = rate;
   float s2;
   s2 = (rate + s1);
   if(phase < s1){
      float d;
      d = (phase / rate);
      float t2;
      t2 = (0.0009766f * s2);
      {
         out.field_0 = false;
         out.field_1 = (1.f + (d * (t2 + (- d))));
      }
   }
   else
   {
      if(phase < s2){
         float d;
         d = (phase / rate);
         float t2;
         t2 = (0.0009766f * s2);
         {
            out.field_0 = false;
            out.field_1 = (3.f + (d * (-4.f + d + t2)));
         }
      }
      else
      {
         out.field_0 = true;
         out.field_1 = 0.f;
      }
   }
   _ctx.ptr_w2_ret_0 = out.field_0;_ctx.ptr_w2_ret_1 = out.field_1;
   return ;
}

void Sawcore_ptr_w2_ret_0_init(Sawcore__ctx_type_0 &_output_){
   Sawcore__ctx_type_0_init(_output_);
   return ;
}

uint8_t Sawcore_ptr_w2_ret_0(Sawcore__ctx_type_0 &_ctx){
   return _ctx.ptr_w2_ret_0;
}

void Sawcore_ptr_w2_ret_1_init(Sawcore__ctx_type_0 &_output_){
   Sawcore__ctx_type_0_init(_output_);
   return ;
}

float Sawcore_ptr_w2_ret_1(Sawcore__ctx_type_0 &_ctx){
   return _ctx.ptr_w2_ret_1;
}

void Sawcore__ctx_type_1_init(Sawcore__ctx_type_1 &_output_){
   Sawcore__ctx_type_1 _ctx;
   _ctx.reset_state = false;
   _ctx.reset_phase = 0.f;
   _ctx.rate = 0.f;
   _ctx.phase = 0.f;
   Sawcore__ctx_type_0_init(_ctx._inst30);
   Util__ctx_type_0_init(_ctx._inst27);
   Util__ctx_type_1_init(_ctx._inst25);
   Sawcore_default(_ctx);
   _output_ = _ctx;
   return ;
}

void Sawcore_process_init(Sawcore__ctx_type_1 &_output_){
   Sawcore__ctx_type_1_init(_output_);
   return ;
}

float Sawcore_process(Sawcore__ctx_type_1 &_ctx, float cv, float reset){
   float transition;
   transition = 0.f;
   float out;
   out = 0.f;
   if(Util_change(_ctx._inst25,cv)){
      _ctx.rate = Util_cvToRate_1024(cv);
   }
   float new_phase;
   new_phase = (_ctx.phase + _ctx.rate);
   uint8_t do_reset;
   do_reset = Util_edge(_ctx._inst27,(reset > 0.f));
   uint8_t do_wrap;
   do_wrap = (new_phase > 1024.f);
   if(do_reset || do_wrap){
      _ctx.reset_phase = _ctx.phase;
      if(do_wrap){
         new_phase = (-1024.f + new_phase);
      }
      else
      {
         new_phase = 0.f;
      }
      _ctx.reset_state = true;
   }
   _ctx.phase = new_phase;
   out = _ctx.phase;
   if(_ctx.reset_state){
      uint8_t done;
      float ptr;
      Sawcore_ptr_w2(_ctx._inst30,_ctx.phase,_ctx.rate);
      done = Sawcore_ptr_w2_ret_0(_ctx._inst30);
      ptr = Sawcore_ptr_w2_ret_1(_ctx._inst30);
      transition = (0.5f * _ctx.reset_phase * (1.f + ptr));
      if(done){
         _ctx.reset_state = false;
      }
      else
      {
         out = transition;
      }
   }
   return (-1.f + (0.0019532f * out));
}

void Sawcore_noteOn_init(Sawcore__ctx_type_1 &_output_){
   Sawcore__ctx_type_1_init(_output_);
   return ;
}

void Sawcore_noteOn(Sawcore__ctx_type_1 &_ctx, int note, int velocity, int channel){
}

void Sawcore_noteOff_init(Sawcore__ctx_type_1 &_output_){
   Sawcore__ctx_type_1_init(_output_);
   return ;
}

void Sawcore_noteOff(Sawcore__ctx_type_1 &_ctx, int note, int channel){
}

void Sawcore_controlChange_init(Sawcore__ctx_type_1 &_output_){
   Sawcore__ctx_type_1_init(_output_);
   return ;
}

void Sawcore_controlChange(Sawcore__ctx_type_1 &_ctx, int control, int value, int channel){
}

void Sawcore_default_init(Sawcore__ctx_type_1 &_output_){
   Sawcore__ctx_type_1_init(_output_);
   return ;
}

void Sawcore_default(Sawcore__ctx_type_1 &_ctx){
   _ctx.rate = 0.7593668f;
}


