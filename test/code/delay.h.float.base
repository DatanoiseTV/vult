
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#ifndef DELAY_H
#define DELAY_H
#include <stdint.h>
#include <math.h>
#include "vultin.h"
#include "delay.tables.h"

typedef struct Delay__ctx_type_0 {
   float x;
} Delay__ctx_type_0;

typedef Delay__ctx_type_0 Delay_smooth_type;

static_inline void Delay__ctx_type_0_init(Delay__ctx_type_0 &_output_){
   Delay__ctx_type_0 _ctx;
   _ctx.x = 0.0f;
   _output_ = _ctx;
   return ;
}

static_inline void Delay_smooth_init(Delay__ctx_type_0 &_output_){
   Delay__ctx_type_0_init(_output_);
   return ;
}

static_inline float Delay_smooth(Delay__ctx_type_0 &_ctx, float input){
   _ctx.x = (_ctx.x + (0.005f * (input + (- _ctx.x))));
   return _ctx.x;
}

typedef struct Delay__ctx_type_1 {
   float pre_x;
} Delay__ctx_type_1;

typedef Delay__ctx_type_1 Delay_change_type;

static_inline void Delay__ctx_type_1_init(Delay__ctx_type_1 &_output_){
   Delay__ctx_type_1 _ctx;
   _ctx.pre_x = 0.0f;
   _output_ = _ctx;
   return ;
}

static_inline void Delay_change_init(Delay__ctx_type_1 &_output_){
   Delay__ctx_type_1_init(_output_);
   return ;
}

static_inline uint8_t Delay_change(Delay__ctx_type_1 &_ctx, float x){
   uint8_t v;
   v = (_ctx.pre_x != x);
   _ctx.pre_x = x;
   return v;
}

typedef struct Delay__ctx_type_2 {
   uint8_t pre_x;
} Delay__ctx_type_2;

typedef Delay__ctx_type_2 Delay_edge_type;

static_inline void Delay__ctx_type_2_init(Delay__ctx_type_2 &_output_){
   Delay__ctx_type_2 _ctx;
   _ctx.pre_x = false;
   _output_ = _ctx;
   return ;
}

static_inline void Delay_edge_init(Delay__ctx_type_2 &_output_){
   Delay__ctx_type_2_init(_output_);
   return ;
}

static_inline uint8_t Delay_edge(Delay__ctx_type_2 &_ctx, uint8_t x){
   uint8_t v;
   v = ((_ctx.pre_x != x) && (_ctx.pre_x == false));
   _ctx.pre_x = x;
   return v;
}

typedef struct Delay__ctx_type_3 {
   int count;
} Delay__ctx_type_3;

typedef Delay__ctx_type_3 Delay_each_type;

static_inline void Delay__ctx_type_3_init(Delay__ctx_type_3 &_output_){
   Delay__ctx_type_3 _ctx;
   _ctx.count = 0;
   _output_ = _ctx;
   return ;
}

static_inline void Delay_each_init(Delay__ctx_type_3 &_output_){
   Delay__ctx_type_3_init(_output_);
   return ;
}

static_inline uint8_t Delay_each(Delay__ctx_type_3 &_ctx, int n){
   uint8_t ret;
   ret = (_ctx.count == 0);
   _ctx.count = ((1 + _ctx.count) % n);
   return ret;
}

static_inline float Delay_pitchToRate(float d){
   return (0.0001854f * expf((0.0577623f * d)));
};

typedef struct Delay__ctx_type_5 {
   float rate;
   float phase;
   Delay__ctx_type_1 _inst1d;
} Delay__ctx_type_5;

typedef Delay__ctx_type_5 Delay_phasor_type;

void Delay__ctx_type_5_init(Delay__ctx_type_5 &_output_);

static_inline void Delay_phasor_init(Delay__ctx_type_5 &_output_){
   Delay__ctx_type_5_init(_output_);
   return ;
}

float Delay_phasor(Delay__ctx_type_5 &_ctx, float pitch, uint8_t reset);

typedef struct Delay__ctx_type_6 {
   float phase;
   Delay__ctx_type_2 _inst13e;
} Delay__ctx_type_6;

typedef Delay__ctx_type_6 Delay_lfo_type;

void Delay__ctx_type_6_init(Delay__ctx_type_6 &_output_);

static_inline void Delay_lfo_init(Delay__ctx_type_6 &_output_){
   Delay__ctx_type_6_init(_output_);
   return ;
}

float Delay_lfo(Delay__ctx_type_6 &_ctx, float f, uint8_t gate);

typedef struct Delay__ctx_type_7 {
   float pre_phase1;
   Delay__ctx_type_5 _inst37d;
   Delay__ctx_type_0 _inst295;
   Delay__ctx_type_5 _inst17d;
} Delay__ctx_type_7;

typedef Delay__ctx_type_7 Delay_phd_osc_type;

void Delay__ctx_type_7_init(Delay__ctx_type_7 &_output_);

static_inline void Delay_phd_osc_init(Delay__ctx_type_7 &_output_){
   Delay__ctx_type_7_init(_output_);
   return ;
}

float Delay_phd_osc(Delay__ctx_type_7 &_ctx, float pitch, float detune);

typedef struct Delay__ctx_type_8 {
   int write_pos;
   float buffer[30000];
} Delay__ctx_type_8;

typedef Delay__ctx_type_8 Delay_delay_type;

void Delay__ctx_type_8_init(Delay__ctx_type_8 &_output_);

static_inline void Delay_delay_init(Delay__ctx_type_8 &_output_){
   Delay__ctx_type_8_init(_output_);
   return ;
}

float Delay_delay(Delay__ctx_type_8 &_ctx, float x, float time, float feedback);

typedef struct Delay__ctx_type_9 {
   int pre;
   int notes[4];
   int count;
} Delay__ctx_type_9;

typedef Delay__ctx_type_9 Delay_mono_noteOn_type;

void Delay__ctx_type_9_init(Delay__ctx_type_9 &_output_);

static_inline void Delay_mono_noteOn_init(Delay__ctx_type_9 &_output_){
   Delay__ctx_type_9_init(_output_);
   return ;
}

int Delay_mono_noteOn(Delay__ctx_type_9 &_ctx, int n);

typedef Delay__ctx_type_9 Delay_mono_noteOff_type;

static_inline void Delay_mono_noteOff_init(Delay__ctx_type_9 &_output_){
   Delay__ctx_type_9_init(_output_);
   return ;
}

int Delay_mono_noteOff(Delay__ctx_type_9 &_ctx, int n);

typedef Delay__ctx_type_9 Delay_mono_isGateOn_type;

static_inline void Delay_mono_isGateOn_init(Delay__ctx_type_9 &_output_){
   Delay__ctx_type_9_init(_output_);
   return ;
}

static_inline uint8_t Delay_mono_isGateOn(Delay__ctx_type_9 &_ctx){
   return (_ctx.count > 0);
};

typedef struct Delay__ctx_type_10 {
   float volume;
   float time;
   float pitch;
   Delay__ctx_type_9 notes;
   float lfo_rate;
   float lfo_amt;
   float feedback;
   float detune;
   Delay__ctx_type_8 _inst686;
   Delay__ctx_type_0 _inst595;
   Delay__ctx_type_0 _inst495;
   Delay__ctx_type_0 _inst395;
   Delay__ctx_type_7 _inst2ba;
   Delay__ctx_type_6 _inst15e;
} Delay__ctx_type_10;

typedef Delay__ctx_type_10 Delay_process_type;

void Delay__ctx_type_10_init(Delay__ctx_type_10 &_output_);

static_inline void Delay_process_init(Delay__ctx_type_10 &_output_){
   Delay__ctx_type_10_init(_output_);
   return ;
}

float Delay_process(Delay__ctx_type_10 &_ctx, float input);

typedef Delay__ctx_type_10 Delay_noteOn_type;

static_inline void Delay_noteOn_init(Delay__ctx_type_10 &_output_){
   Delay__ctx_type_10_init(_output_);
   return ;
}

static_inline void Delay_noteOn(Delay__ctx_type_10 &_ctx, int note, int velocity, int channel){
   _ctx.pitch = int_to_float(Delay_mono_noteOn(_ctx.notes,note));
};

typedef Delay__ctx_type_10 Delay_noteOff_type;

static_inline void Delay_noteOff_init(Delay__ctx_type_10 &_output_){
   Delay__ctx_type_10_init(_output_);
   return ;
}

static_inline void Delay_noteOff(Delay__ctx_type_10 &_ctx, int note, int channel){
   _ctx.pitch = int_to_float(Delay_mono_noteOff(_ctx.notes,note));
};

typedef Delay__ctx_type_10 Delay_controlChange_type;

static_inline void Delay_controlChange_init(Delay__ctx_type_10 &_output_){
   Delay__ctx_type_10_init(_output_);
   return ;
}

void Delay_controlChange(Delay__ctx_type_10 &_ctx, int control, float value, int channel);

typedef Delay__ctx_type_10 Delay_default_type;

static_inline void Delay_default_init(Delay__ctx_type_10 &_output_){
   Delay__ctx_type_10_init(_output_);
   return ;
}

void Delay_default(Delay__ctx_type_10 &_ctx);



#endif // DELAY_H
