#ifndef DELAY_H
#define DELAY_H
#include <stdint.h>
#include <math.h>
#include "vultin.h"

typedef struct Delay__ctx_type_0 {
   float x;
} Delay__ctx_type_0;

typedef Delay__ctx_type_0 Delay_smooth_type;

Delay__ctx_type_0 Delay__ctx_type_0_init();

Delay__ctx_type_0 Delay_smooth_init();

float Delay_smooth(Delay__ctx_type_0 &_ctx, float input);

typedef struct Delay__ctx_type_1 {
   float pre_x;
} Delay__ctx_type_1;

typedef Delay__ctx_type_1 Delay_change_type;

Delay__ctx_type_1 Delay__ctx_type_1_init();

Delay__ctx_type_1 Delay_change_init();

uint8_t Delay_change(Delay__ctx_type_1 &_ctx, float x);

typedef struct Delay__ctx_type_2 {
   uint8_t pre_x;
} Delay__ctx_type_2;

typedef Delay__ctx_type_2 Delay_edge_type;

Delay__ctx_type_2 Delay__ctx_type_2_init();

Delay__ctx_type_2 Delay_edge_init();

uint8_t Delay_edge(Delay__ctx_type_2 &_ctx, uint8_t x);

typedef struct Delay__ctx_type_3 {
   int count;
} Delay__ctx_type_3;

typedef Delay__ctx_type_3 Delay_each_type;

Delay__ctx_type_3 Delay__ctx_type_3_init();

Delay__ctx_type_3 Delay_each_init();

uint8_t Delay_each(Delay__ctx_type_3 &_ctx, int n);

float Delay_pitchToRate(float d);

typedef struct Delay__ctx_type_5 {
   float rate;
   float phase;
   Delay__ctx_type_1 _inst0;
} Delay__ctx_type_5;

typedef Delay__ctx_type_5 Delay_phasor_type;

Delay__ctx_type_5 Delay__ctx_type_5_init();

Delay__ctx_type_5 Delay_phasor_init();

float Delay_phasor(Delay__ctx_type_5 &_ctx, float pitch, uint8_t reset);

typedef struct Delay__ctx_type_6 {
   float phase;
   Delay__ctx_type_2 _inst0;
} Delay__ctx_type_6;

typedef Delay__ctx_type_6 Delay_lfo_type;

Delay__ctx_type_6 Delay__ctx_type_6_init();

Delay__ctx_type_6 Delay_lfo_init();

float Delay_lfo(Delay__ctx_type_6 &_ctx, float f, uint8_t gate);

typedef struct Delay__ctx_type_7 {
   float pre_phase1;
   Delay__ctx_type_5 _inst2;
   Delay__ctx_type_0 _inst1;
   Delay__ctx_type_5 _inst0;
} Delay__ctx_type_7;

typedef Delay__ctx_type_7 Delay_phd_osc_type;

Delay__ctx_type_7 Delay__ctx_type_7_init();

Delay__ctx_type_7 Delay_phd_osc_init();

float Delay_phd_osc(Delay__ctx_type_7 &_ctx, float pitch, float detune);

typedef struct Delay__ctx_type_8 {
   int write_pos;
   float buffer[44100];
} Delay__ctx_type_8;

typedef Delay__ctx_type_8 Delay_delay_type;

Delay__ctx_type_8 Delay__ctx_type_8_init();

Delay__ctx_type_8 Delay_delay_init();

float Delay_delay(Delay__ctx_type_8 &_ctx, float x, float time, float feedback);

typedef struct Delay__ctx_type_9 {
   int pre;
   int notes[4];
   int count;
} Delay__ctx_type_9;

typedef Delay__ctx_type_9 Delay_mono_noteOn_type;

Delay__ctx_type_9 Delay__ctx_type_9_init();

Delay__ctx_type_9 Delay_mono_noteOn_init();

int Delay_mono_noteOn(Delay__ctx_type_9 &_ctx, int n);

typedef Delay__ctx_type_9 Delay_mono_noteOff_type;

Delay__ctx_type_9 Delay_mono_noteOff_init();

int Delay_mono_noteOff(Delay__ctx_type_9 &_ctx, int n);

typedef Delay__ctx_type_9 Delay_mono_isGateOn_type;

Delay__ctx_type_9 Delay_mono_isGateOn_init();

uint8_t Delay_mono_isGateOn(Delay__ctx_type_9 &_ctx);

typedef struct Delay__ctx_type_10 {
   float volume;
   float time;
   float pitch;
   Delay__ctx_type_9 notes;
   float lfo_rate;
   float lfo_amt;
   float feedback;
   float detune;
   Delay__ctx_type_8 _inst5;
   Delay__ctx_type_0 _inst4;
   Delay__ctx_type_0 _inst3;
   Delay__ctx_type_0 _inst2;
   Delay__ctx_type_7 _inst1;
   Delay__ctx_type_6 _inst0;
} Delay__ctx_type_10;

typedef Delay__ctx_type_10 Delay_process_type;

Delay__ctx_type_10 Delay__ctx_type_10_init();

Delay__ctx_type_10 Delay_process_init();

float Delay_process(Delay__ctx_type_10 &_ctx, float input);

typedef Delay__ctx_type_10 Delay_noteOn_type;

Delay__ctx_type_10 Delay_noteOn_init();

void Delay_noteOn(Delay__ctx_type_10 &_ctx, int note, int velocity);

typedef Delay__ctx_type_10 Delay_noteOff_type;

Delay__ctx_type_10 Delay_noteOff_init();

void Delay_noteOff(Delay__ctx_type_10 &_ctx, int note);

typedef Delay__ctx_type_10 Delay_controlChange_type;

Delay__ctx_type_10 Delay_controlChange_init();

void Delay_controlChange(Delay__ctx_type_10 &_ctx, int control, float value);

typedef Delay__ctx_type_10 Delay_default_type;

Delay__ctx_type_10 Delay_default_init();

void Delay_default_(Delay__ctx_type_10 &_ctx);



#endif // DELAY_H
