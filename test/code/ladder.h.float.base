
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#ifndef LADDER_H
#define LADDER_H
#include <stdint.h>
#include <math.h>
#include "vultin.h"

typedef struct Util__ctx_type_0 {
   uint8_t pre;
} Util__ctx_type_0;

typedef Util__ctx_type_0 Util_edge_type;

void Util__ctx_type_0_init(Util__ctx_type_0 &_output_);

void Util_edge_init(Util__ctx_type_0 &_output_);

uint8_t Util_edge(Util__ctx_type_0 &_ctx, uint8_t x);

typedef struct Util__ctx_type_1 {
   float pre_x;
} Util__ctx_type_1;

typedef Util__ctx_type_1 Util_change_type;

void Util__ctx_type_1_init(Util__ctx_type_1 &_output_);

void Util_change_init(Util__ctx_type_1 &_output_);

uint8_t Util_change(Util__ctx_type_1 &_ctx, float x);

float Util_map(float x, float x0, float x1, float y0, float y1);

typedef struct Util__ctx_type_3 {
   float y1;
   float x1;
} Util__ctx_type_3;

typedef Util__ctx_type_3 Util_dcblock_type;

void Util__ctx_type_3_init(Util__ctx_type_3 &_output_);

void Util_dcblock_init(Util__ctx_type_3 &_output_);

float Util_dcblock(Util__ctx_type_3 &_ctx, float x0);

typedef struct Util__ctx_type_4 {
   float x;
} Util__ctx_type_4;

typedef Util__ctx_type_4 Util_smooth_type;

void Util__ctx_type_4_init(Util__ctx_type_4 &_output_);

void Util_smooth_init(Util__ctx_type_4 &_output_);

float Util_smooth(Util__ctx_type_4 &_ctx, float input);

typedef struct Util__ctx_type_5 {
   float x0;
} Util__ctx_type_5;

typedef Util__ctx_type_5 Util_average2_type;

void Util__ctx_type_5_init(Util__ctx_type_5 &_output_);

void Util_average2_init(Util__ctx_type_5 &_output_);

float Util_average2(Util__ctx_type_5 &_ctx, float x1);

static const float Util_pitchToRate_1024_c0[33] = {0.189842f,0.191326f,0.198689f,0.219425f,0.265677f,0.356438f,0.520651f,0.801560f,1.262758f,1.996562f,3.135544f,4.868347f,7.461281f,11.287715f,16.867996f,24.923305f,36.448521f,52.809903f,75.876616f,108.197225f,153.232414f,215.672344f,301.846626f,420.298038f,582.505178f,803.812129f,1104.880165f,1513.124126f,2065.373952f,2810.230550f,3812.902888f,5159.525580f,6963.761469f};
static const float Util_pitchToRate_1024_c1[33] = {0.010913f,0.010176f,0.008334f,0.004867f,(-0.000939f),(-0.010061f),(-0.023820f),(-0.044002f),(-0.073002f),(-0.114025f),(-0.171341f),(-0.250621f),(-0.359381f),(-0.507548f),(-0.708208f),(-0.978575f),(-1.341250f),(-1.825848f),(-2.471123f),(-3.327721f),(-4.461658f),(-5.959006f),(-7.931626f),(-10.525312f),(-13.929212f),(-18.387588f),(-24.219785f),(-31.835151f),(-41.769557f),(-54.706455f),(-71.541226f),(-93.422592f),(-121.823163f)};
static const float Util_pitchToRate_1024_c2[33] = {0.000356f,0.000447f,0.000562f,0.000707f,0.000889f,0.001119f,0.001407f,0.001769f,0.002225f,0.002799f,0.003520f,0.004426f,0.005567f,0.007001f,0.008805f,0.011074f,0.013927f,0.017515f,0.022028f,0.027704f,0.034841f,0.043818f,0.055107f,0.069305f,0.087163f,0.109617f,0.137862f,0.173377f,0.218054f,0.274227f,0.344892f,0.433780f,0.545543f};
float Util_pitchToRate_1024(float pitch);

static const float Util_pitchToRate_c0[33] = {0.000185f,0.000187f,0.000194f,0.000214f,0.000259f,0.000348f,0.000508f,0.000783f,0.001233f,0.001950f,0.003062f,0.004754f,0.007286f,0.011023f,0.016473f,0.024339f,0.035594f,0.051572f,0.074098f,0.105661f,0.149641f,0.210618f,0.294772f,0.410447f,0.568853f,0.784973f,1.078985f,1.477660f,2.016967f,2.744366f,3.723538f,5.038599f,6.800548f};
static const float Util_pitchToRate_c1[33] = {0.000011f,0.000010f,0.000008f,0.000005f,(-0.000001f),(-0.000010f),(-0.000023f),(-0.000043f),(-0.000071f),(-0.000111f),(-0.000167f),(-0.000245f),(-0.000351f),(-0.000496f),(-0.000692f),(-0.000956f),(-0.001310f),(-0.001783f),(-0.002413f),(-0.003250f),(-0.004357f),(-0.005819f),(-0.007746f),(-0.010279f),(-0.013603f),(-0.017957f),(-0.023652f),(-0.031089f),(-0.040791f),(-0.053424f),(-0.069864f),(-0.091233f),(-0.118968f)};
static const float Util_pitchToRate_c2[33] = {0.000000f,0.000000f,0.000001f,0.000001f,0.000001f,0.000001f,0.000001f,0.000002f,0.000002f,0.000003f,0.000003f,0.000004f,0.000005f,0.000007f,0.000009f,0.000011f,0.000014f,0.000017f,0.000022f,0.000027f,0.000034f,0.000043f,0.000054f,0.000068f,0.000085f,0.000107f,0.000135f,0.000169f,0.000213f,0.000268f,0.000337f,0.000424f,0.000533f};
float Util_pitchToRate(float pitch);

float Util_cvToPitch(float cv);

static const float Util_cvToRate_1024_c0[33] = {0.759367f,0.762877f,0.779737f,0.825652f,0.924648f,1.112398f,1.440687f,1.983392f,2.844434f,4.168310f,6.153994f,9.073195f,13.294301f,19.313616f,27.796102f,39.628290f,55.986657f,78.426750f,108.998215f,150.387464f,206.118533f,280.781675f,380.357513f,512.612775f,687.616764f,918.349028f,1221.607949f,1619.052235f,2138.629322f,2815.436671f,3696.162408f,4838.694117f,6318.211520f};
static const float Util_cvToRate_1024_c1[33] = {5.245583f,4.998943f,4.403089f,3.319116f,1.564497f,(-1.099256f),(-4.982226f),(-10.485864f),(-18.127956f),(-28.574100f),(-42.677360f),(-61.528124f),(-86.516770f),(-119.412133f),(-162.460318f),(-218.508269f),(-291.156786f),(-384.956978f),(-505.652297f),(-660.458539f),(-858.494950f),(-1111.173376f),(-1432.858445f),(-1841.544459f),(-2359.816046f),(-3015.795467f),(-3844.838138f),(-4891.101919f),(-6210.197274f),(-7868.993868f),(-9955.778008f),(-12575.747874f),(-15862.234621f)};
static const float Util_cvToRate_1024_c2[33] = {20.125592f,24.457572f,29.722000f,36.119582f,43.894227f,53.342343f,64.824143f,78.777366f,95.733987f,116.340471f,141.382451f,171.814646f,208.797363f,253.740413f,308.357211f,374.730622f,455.389632f,553.410816f,672.536916f,817.290611f,993.216833f,1207.000622f,1466.803875f,1782.529271f,2166.244997f,2632.487590f,3199.072620f,3887.673024f,4724.859179f,5741.245302f,6977.441755f,8479.290028f,10304.455486f};
float Util_cvToRate_1024(float cv);

static const float Util_cvToRate_c0[33] = {0.000742f,0.000745f,0.000761f,0.000806f,0.000903f,0.001086f,0.001407f,0.001937f,0.002778f,0.004071f,0.006010f,0.008861f,0.012983f,0.018861f,0.027145f,0.038700f,0.054674f,0.076589f,0.106444f,0.146863f,0.201288f,0.274201f,0.371443f,0.500598f,0.671501f,0.896825f,1.192977f,1.581106f,2.088505f,2.749450f,3.609534f,4.725287f,6.170128f};
static const float Util_cvToRate_c1[33] = {0.005123f,0.004882f,0.004300f,0.003241f,0.001528f,(-0.001073f),(-0.004865f),(-0.010240f),(-0.017703f),(-0.027904f),(-0.041677f),(-0.060086f),(-0.084489f),(-0.116613f),(-0.158653f),(-0.213387f),(-0.284333f),(-0.375935f),(-0.493801f),(-0.644979f),(-0.838374f),(-1.085130f),(-1.399276f),(-1.798383f),(-2.304508f),(-2.945113f),(-3.754725f),(-4.776467f),(-6.064646f),(-7.684564f),(-9.722439f),(-12.281004f),(-15.490463f)};
static const float Util_cvToRate_c2[33] = {0.019654f,0.023884f,0.029025f,0.035273f,0.042865f,0.052092f,0.063305f,0.076931f,0.093490f,0.113614f,0.138069f,0.167788f,0.203904f,0.247793f,0.301130f,0.365948f,0.444716f,0.540440f,0.656774f,0.798135f,0.969938f,1.178712f,1.432426f,1.740751f,2.115474f,2.570789f,3.124094f,3.796556f,4.614120f,5.606685f,6.813908f,8.280557f,10.062945f};
float Util_cvToRate(float cv);

float Util_pitchToCv(float pitch);

static const float Util_cvToperiod_c0[33] = {674.246035f,671.553838f,662.761782f,646.759522f,623.799428f,594.871802f,561.298277f,524.476942f,485.731369f,446.229382f,406.947440f,368.663774f,331.968683f,297.284156f,264.887666f,234.936857f,207.493124f,182.543016f,160.016907f,139.804832f,121.769557f,105.757117f,91.605116f,79.149088f,68.227249f,58.683895f,50.371734f,43.153355f,36.902033f,31.502025f,26.848494f,22.847166f,19.413794f};
static const float Util_cvToperiod_c1[33] = {(-4656.656311f),(-4481.960579f),(-4198.686133f),(-3855.751543f),(-3487.139455f),(-3115.858821f),(-2756.930319f),(-2419.625141f),(-2109.134753f),(-1827.808334f),(-1576.062963f),(-1353.047092f),(-1157.118864f),(-986.186250f),(-837.944665f),(-710.039113f),(-600.171234f),(-506.166566f),(-426.013463f),(-357.882151f),(-300.130190f),(-251.298904f),(-210.104105f),(-175.423450f),(-146.282114f),(-121.837895f),(-101.366537f),(-84.247726f),(-69.952082f),(-58.029259f),(-48.097248f),(-39.832833f),(-32.963186f)};
static const float Util_cvToperiod_c2[33] = {14548.823162f,11715.369522f,9433.744675f,7596.477297f,6117.026622f,4925.706117f,3966.401040f,3193.925264f,2571.892879f,2071.004308f,1667.666208f,1342.880152f,1081.347751f,870.750049f,701.167268f,564.611553f,454.650724f,366.105298f,294.804521f,237.389916f,191.157082f,153.928316f,123.950032f,99.810164f,80.371652f,64.718885f,52.114569f,41.965005f,33.792117f,27.210939f,21.911477f,17.644111f,14.207835f};
float Util_cvToperiod(float cv);

static const float Util_cvTokHz_c0[33] = {0.032703f,0.032916f,0.033958f,0.036857f,0.043242f,0.055616f,0.077724f,0.115069f,0.175614f,0.270739f,0.416537f,0.635567f,0.959207f,1.430818f,2.109960f,3.078021f,4.445697f,6.362909f,9.031922f,12.724677f,17.805619f,24.761735f,34.241990f,47.109042f,64.506928f,87.949557f,119.436234f,161.602273f,217.915148f,292.929619f,392.619240f,524.806645f,699.721497f};
static const float Util_cvTokHz_c1[33] = {0.225719f,0.212293f,0.179169f,0.117605f,0.015780f,(-0.142178f),(-0.377466f),(-0.718250f),(-1.201797f),(-1.877228f),(-2.809077f),(-4.081867f),(-5.806008f),(-8.125373f),(-11.227028f),(-15.353705f),(-20.819795f),(-28.031798f),(-37.514503f),(-49.944414f),(-66.192449f),(-87.378404f),(-114.940396f),(-150.723337f),(-197.091584f),(-257.072284f),(-334.537674f),(-434.436788f),(-563.089817f),(-728.561858f),(-941.137258f),(-1213.921328f),(-1563.603302f)};
static const float Util_cvTokHz_c2[33] = {0.876338f,1.088287f,1.351498f,1.678368f,2.084294f,2.588397f,3.214421f,3.991854f,4.957315f,6.156280f,7.645225f,9.494282f,11.790549f,14.642185f,18.183512f,22.581336f,28.042809f,34.825181f,43.247923f,53.707771f,66.697415f,82.828706f,102.861476f,127.739327f,158.634081f,197.000973f,244.647198f,303.817033f,377.297556f,468.549918f,581.872376f,722.602756f,897.369877f};
float Util_cvTokHz(float cv);

static const float Saturate_table_c0[129] = {(-1.001374f),(-1.006906f),(-0.998630f),(-0.998630f),(-0.998630f),(-0.998630f),(-0.998630f),(-0.998630f),(-0.998630f),(-0.998630f),(-0.998629f),(-0.998629f),(-0.998629f),(-0.998628f),(-0.998627f),(-0.998625f),(-0.998624f),(-0.998621f),(-0.998617f),(-0.998612f),(-0.999975f),(-0.999965f),(-0.999952f),(-0.999933f),(-0.999907f),(-0.999871f),(-0.999821f),(-0.999753f),(-0.999658f),(-0.999529f),(-0.999350f),(-0.999106f),(-0.998772f),(-0.998316f),(-0.997694f),(-0.996849f),(-0.995702f),(-0.994152f),(-0.992060f),(-0.989247f),(-0.985477f),(-0.980441f),(-0.973743f),(-0.964872f),(-0.953183f),(-0.937867f),(-0.917930f),(-0.892172f),(-0.859190f),(-0.817409f),(-0.765175f),(-0.700938f),(-0.623579f),(-0.532923f),(-0.430471f),(-0.320268f),(-0.209647f),(-0.109223f),(-0.031177f),0.014939f,0.028028f,0.018870f,0.005421f,0.000000f,0.000000f,(-0.005421f),(-0.018870f),(-0.028028f),(-0.014939f),0.031177f,0.109223f,0.209647f,0.320268f,0.430471f,0.532923f,0.623579f,0.700938f,0.765175f,0.817409f,0.859190f,0.892172f,0.917930f,0.937867f,0.953183f,0.964872f,0.973743f,0.980441f,0.985477f,0.989247f,0.992060f,0.994152f,0.995702f,0.996849f,0.997694f,0.998316f,0.998772f,0.999106f,0.999350f,0.999529f,0.999658f,0.999753f,0.999821f,0.999871f,0.999907f,0.999933f,0.999952f,0.999965f,0.999975f,0.998612f,0.998617f,0.998621f,0.998624f,0.998625f,0.998627f,0.998628f,0.998629f,0.998629f,0.998629f,0.998630f,0.998630f,0.998630f,0.998630f,0.998630f,0.998630f,0.998630f,0.998630f,1.006906f,1.001374f,1.001374f};
static const float Saturate_table_c1[129] = {(-0.000000f),(-0.000000f),0.000000f,0.000000f,0.000000f,(-0.000000f),0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000001f,0.000001f,0.000001f,0.000002f,0.000003f,0.000004f,0.000006f,0.000008f,0.000012f,0.000016f,0.000023f,0.000033f,0.000047f,0.000067f,0.000095f,0.000135f,0.000191f,0.000270f,0.000381f,0.000538f,0.000759f,0.001071f,0.001508f,0.002121f,0.002980f,0.004181f,0.005858f,0.008196f,0.011447f,0.015958f,0.022199f,0.030808f,0.042638f,0.058822f,0.080842f,0.110598f,0.150459f,0.203255f,0.272141f,0.360212f,0.469700f,0.600552f,0.748290f,0.901487f,1.040196f,1.138141f,1.172059f,1.137998f,1.064638f,1.005717f,1.005717f,1.064638f,1.137998f,1.172059f,1.138141f,1.040196f,0.901487f,0.748290f,0.600552f,0.469700f,0.360212f,0.272141f,0.203255f,0.150459f,0.110598f,0.080842f,0.058822f,0.042638f,0.030808f,0.022199f,0.015958f,0.011447f,0.008196f,0.005858f,0.004181f,0.002980f,0.002121f,0.001508f,0.001071f,0.000759f,0.000538f,0.000381f,0.000270f,0.000191f,0.000135f,0.000095f,0.000067f,0.000047f,0.000033f,0.000023f,0.000016f,0.000012f,0.000008f,0.000006f,0.000004f,0.000003f,0.000002f,0.000001f,0.000001f,0.000001f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,(-0.000000f),0.000000f,0.000000f,0.000000f,(-0.000000f),(-0.000000f),0.000000f};
static const float Saturate_table_c2[129] = {(-0.000000f),0.000000f,(-0.000000f),0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000001f,0.000001f,0.000001f,0.000002f,0.000003f,0.000005f,0.000007f,0.000010f,0.000014f,0.000020f,0.000030f,0.000043f,0.000063f,0.000092f,0.000133f,0.000194f,0.000282f,0.000410f,0.000597f,0.000868f,0.001263f,0.001836f,0.002669f,0.003879f,0.005634f,0.008176f,0.011851f,0.017149f,0.024754f,0.035602f,0.050937f,0.072327f,0.101579f,0.140422f,0.189749f,0.248174f,0.309805f,0.361810f,0.383764f,0.352153f,0.252165f,0.092126f,(-0.092126f),(-0.252165f),(-0.352153f),(-0.383764f),(-0.361810f),(-0.309805f),(-0.248174f),(-0.189749f),(-0.140422f),(-0.101579f),(-0.072327f),(-0.050937f),(-0.035602f),(-0.024754f),(-0.017149f),(-0.011851f),(-0.008176f),(-0.005634f),(-0.003879f),(-0.002669f),(-0.001836f),(-0.001263f),(-0.000868f),(-0.000597f),(-0.000410f),(-0.000282f),(-0.000194f),(-0.000133f),(-0.000092f),(-0.000063f),(-0.000043f),(-0.000030f),(-0.000020f),(-0.000014f),(-0.000010f),(-0.000007f),(-0.000005f),(-0.000003f),(-0.000002f),(-0.000001f),(-0.000001f),(-0.000001f),(-0.000000f),(-0.000000f),(-0.000000f),(-0.000000f),(-0.000000f),(-0.000000f),(-0.000000f),(-0.000000f),(-0.000000f),(-0.000000f),(-0.000000f),(-0.000000f),(-0.000000f),(-0.000000f),(-0.000000f),(-0.000000f),(-0.000000f),(-0.000000f),(-0.000000f),0.000000f,(-0.000000f),0.000000f,(-0.000000f)};
float Saturate_table(float x);

float Saturate_process(float x);

void Saturate_noteOn(int note, int velocity, int channel);

void Saturate_noteOff(int note, int channel);

void Saturate_controlChange(int control, int value, int channel);

void Saturate_default();

static const float Ladder_tune_c0[129] = {0.001165f,0.001165f,0.001165f,0.001166f,0.001168f,0.001171f,0.001176f,0.001182f,0.001192f,0.001204f,0.001220f,0.001240f,0.001266f,0.001297f,0.001336f,0.001383f,0.001439f,0.001506f,0.001586f,0.001679f,0.001789f,0.001916f,0.002063f,0.002233f,0.002429f,0.002653f,0.002908f,0.003199f,0.003530f,0.003904f,0.004327f,0.004803f,0.005339f,0.005941f,0.006615f,0.007369f,0.008212f,0.009151f,0.010197f,0.011360f,0.012651f,0.014083f,0.015670f,0.017426f,0.019366f,0.021509f,0.023872f,0.026477f,0.029345f,0.032500f,0.035968f,0.039776f,0.043956f,0.048540f,0.053563f,0.059064f,0.065083f,0.071667f,0.078864f,0.086724f,0.095306f,0.104670f,0.114882f,0.126012f,0.138138f,0.151342f,0.165712f,0.181346f,0.198345f,0.216823f,0.236897f,0.258699f,0.282367f,0.308050f,0.335910f,0.366121f,0.398869f,0.434355f,0.472795f,0.514422f,0.559483f,0.608249f,0.661008f,0.718068f,0.779765f,0.846454f,0.918520f,0.996375f,1.080464f,1.171260f,1.269274f,1.375054f,1.489188f,1.612307f,1.745086f,1.888252f,2.042583f,2.208913f,2.388138f,2.581217f,2.789177f,3.013122f,3.254233f,3.513775f,3.793106f,4.093678f,4.417047f,4.764881f,5.138966f,5.541214f,5.973671f,6.438530f,6.938139f,7.475007f,8.051825f,8.671469f,9.337019f,10.051768f,(-516.168451f),0.712358f,0.712358f,0.712358f,0.712358f,0.712358f,0.712358f,0.712358f,0.712358f,0.712358f,0.712358f};
static const float Ladder_tune_c1[129] = {0.008072f,0.008047f,0.007994f,0.007910f,0.007793f,0.007637f,0.007440f,0.007198f,0.006906f,0.006559f,0.006152f,0.005679f,0.005135f,0.004512f,0.003804f,0.003004f,0.002102f,0.001091f,(-0.000039f),(-0.001298f),(-0.002697f),(-0.004248f),(-0.005963f),(-0.007855f),(-0.009940f),(-0.012233f),(-0.014750f),(-0.017509f),(-0.020530f),(-0.023833f),(-0.027439f),(-0.031374f),(-0.035661f),(-0.040328f),(-0.045404f),(-0.050920f),(-0.056910f),(-0.063408f),(-0.070453f),(-0.078086f),(-0.086351f),(-0.095293f),(-0.104963f),(-0.115414f),(-0.126704f),(-0.138892f),(-0.152045f),(-0.166231f),(-0.181525f),(-0.198007f),(-0.215761f),(-0.234877f),(-0.255453f),(-0.277592f),(-0.301404f),(-0.327005f),(-0.354523f),(-0.384091f),(-0.415852f),(-0.449958f),(-0.486572f),(-0.525868f),(-0.568030f),(-0.613256f),(-0.661757f),(-0.713756f),(-0.769494f),(-0.829224f),(-0.893219f),(-0.961769f),(-1.035182f),(-1.113787f),(-1.197934f),(-1.287998f),(-1.384375f),(-1.487491f),(-1.597795f),(-1.715770f),(-1.841926f),(-1.976810f),(-2.121002f),(-2.275120f),(-2.439822f),(-2.615810f),(-2.803828f),(-3.004672f),(-3.219186f),(-3.448270f),(-3.692880f),(-3.954036f),(-4.232822f),(-4.530391f),(-4.847970f),(-5.186864f),(-5.548463f),(-5.934244f),(-6.345779f),(-6.784738f),(-7.252901f),(-7.752157f),(-8.284518f),(-8.852122f),(-9.457243f),(-10.102299f),(-10.789859f),(-11.522658f),(-12.303600f),(-13.135776f),(-14.022467f),(-14.967166f),(-15.973581f),(-17.045657f),(-18.187584f),(-19.403816f),(-20.699088f),(-22.078429f),(-23.547185f),(-25.111037f),1114.291147f,0.000000f,0.000000f,0.000000f,0.000000f,(-0.000000f),0.000000f,0.000000f,0.000000f,0.000000f,(-0.000000f)};
static const float Ladder_tune_c2[129] = {0.028752f,0.030352f,0.032041f,0.033824f,0.035706f,0.037693f,0.039790f,0.042004f,0.044341f,0.046809f,0.049413f,0.052163f,0.055066f,0.058130f,0.061364f,0.064779f,0.068384f,0.072189f,0.076206f,0.080446f,0.084923f,0.089648f,0.094637f,0.099903f,0.105462f,0.111331f,0.117526f,0.124065f,0.130969f,0.138257f,0.145950f,0.154071f,0.162645f,0.171695f,0.181249f,0.191335f,0.201982f,0.213221f,0.225086f,0.237611f,0.250833f,0.264790f,0.279524f,0.295079f,0.311498f,0.328832f,0.347130f,0.366446f,0.386837f,0.408362f,0.431086f,0.455073f,0.480396f,0.507128f,0.535347f,0.565137f,0.596584f,0.629781f,0.664825f,0.701819f,0.740872f,0.782098f,0.825618f,0.871560f,0.920058f,0.971255f,1.025300f,1.082353f,1.142581f,1.206160f,1.273277f,1.344129f,1.418923f,1.497879f,1.581229f,1.669217f,1.762101f,1.860153f,1.963662f,2.072930f,2.188278f,2.310046f,2.438589f,2.574284f,2.717531f,2.868748f,3.028380f,3.196895f,3.374787f,3.562577f,3.760818f,3.970089f,4.191005f,4.424215f,4.670401f,4.930286f,5.204633f,5.494245f,5.799974f,6.122714f,6.463414f,6.823072f,7.202743f,7.603540f,8.026641f,8.473285f,8.944782f,9.442516f,9.967947f,10.522615f,11.108148f,11.726262f,12.378772f,13.067591f,13.794740f,14.562351f,15.372675f,16.228090f,(-600.544281f),0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f};
float Ladder_tune(float cut);

void Ladder_ladder_step(float input, float fh, float res, float (&p)[4], float (&dp)[4]);

typedef struct Ladder__ctx_type_2 {
   float p[4];
   float fh;
   Util__ctx_type_1 _inst26;
} Ladder__ctx_type_2;

typedef Ladder__ctx_type_2 Ladder_heun_type;

void Ladder__ctx_type_2_init(Ladder__ctx_type_2 &_output_);

void Ladder_heun_init(Ladder__ctx_type_2 &_output_);

float Ladder_heun(Ladder__ctx_type_2 &_ctx, float input, float cut, float res);

typedef struct Ladder__ctx_type_3 {
   float p[4];
   float fh;
   Util__ctx_type_1 _inst29;
} Ladder__ctx_type_3;

typedef Ladder__ctx_type_3 Ladder_euler_type;

void Ladder__ctx_type_3_init(Ladder__ctx_type_3 &_output_);

void Ladder_euler_init(Ladder__ctx_type_3 &_output_);

float Ladder_euler(Ladder__ctx_type_3 &_ctx, float input, float cut, float res);

typedef struct Ladder__ctx_type_4 {
   Ladder__ctx_type_2 _inst32;
} Ladder__ctx_type_4;

typedef Ladder__ctx_type_4 Ladder_ladder_type;

void Ladder__ctx_type_4_init(Ladder__ctx_type_4 &_output_);

void Ladder_ladder_init(Ladder__ctx_type_4 &_output_);

float Ladder_ladder(Ladder__ctx_type_4 &_ctx, float input, float cut, float res);

typedef struct Ladder__ctx_type_5 {
   Ladder__ctx_type_4 f;
} Ladder__ctx_type_5;

typedef Ladder__ctx_type_5 Ladder_process_type;

void Ladder__ctx_type_5_init(Ladder__ctx_type_5 &_output_);

void Ladder_process_init(Ladder__ctx_type_5 &_output_);

float Ladder_process(Ladder__ctx_type_5 &_ctx, float input, float cut, float res);

typedef Ladder__ctx_type_5 Ladder_noteOn_type;

void Ladder_noteOn_init(Ladder__ctx_type_5 &_output_);

void Ladder_noteOn(Ladder__ctx_type_5 &_ctx, int note, int velocity, int channel);

typedef Ladder__ctx_type_5 Ladder_noteOff_type;

void Ladder_noteOff_init(Ladder__ctx_type_5 &_output_);

void Ladder_noteOff(Ladder__ctx_type_5 &_ctx, int note, int channel);

typedef Ladder__ctx_type_5 Ladder_controlChange_type;

void Ladder_controlChange_init(Ladder__ctx_type_5 &_output_);

void Ladder_controlChange(Ladder__ctx_type_5 &_ctx, int control, int value, int channel);

typedef Ladder__ctx_type_5 Ladder_default_type;

void Ladder_default_init(Ladder__ctx_type_5 &_output_);

void Ladder_default(Ladder__ctx_type_5 &_ctx);



#endif // LADDER_H
