
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#ifndef LADDER_H
#define LADDER_H
#include <stdint.h>
#include <math.h>
#include "vultin.h"
#include "ladder.tables.h"

typedef struct Util__ctx_type_0 {
   uint8_t pre;
} Util__ctx_type_0;

typedef Util__ctx_type_0 Util_edge_type;

static_inline void Util__ctx_type_0_init(Util__ctx_type_0 &_output_){
   Util__ctx_type_0 _ctx;
   _ctx.pre = false;
   _output_ = _ctx;
   return ;
}

static_inline void Util_edge_init(Util__ctx_type_0 &_output_){
   Util__ctx_type_0_init(_output_);
   return ;
}

static_inline uint8_t Util_edge(Util__ctx_type_0 &_ctx, uint8_t x){
   uint8_t ret;
   ret = (x && bool_not(_ctx.pre));
   _ctx.pre = x;
   return ret;
}

typedef struct Util__ctx_type_1 {
   float pre_x;
} Util__ctx_type_1;

typedef Util__ctx_type_1 Util_change_type;

static_inline void Util__ctx_type_1_init(Util__ctx_type_1 &_output_){
   Util__ctx_type_1 _ctx;
   _ctx.pre_x = 0.0f;
   _output_ = _ctx;
   return ;
}

static_inline void Util_change_init(Util__ctx_type_1 &_output_){
   Util__ctx_type_1_init(_output_);
   return ;
}

static_inline uint8_t Util_change(Util__ctx_type_1 &_ctx, float x){
   uint8_t v;
   v = (_ctx.pre_x != x);
   _ctx.pre_x = x;
   return v;
}

static_inline float Util_map(float x, float x0, float x1, float y0, float y1){
   return (y0 + (((x + (- x0)) * (y1 + (- y0))) / (x1 + (- x0))));
};

typedef struct Util__ctx_type_3 {
   float y1;
   float x1;
} Util__ctx_type_3;

typedef Util__ctx_type_3 Util_dcblock_type;

void Util__ctx_type_3_init(Util__ctx_type_3 &_output_);

static_inline void Util_dcblock_init(Util__ctx_type_3 &_output_){
   Util__ctx_type_3_init(_output_);
   return ;
}

float Util_dcblock(Util__ctx_type_3 &_ctx, float x0);

typedef struct Util__ctx_type_4 {
   float x;
} Util__ctx_type_4;

typedef Util__ctx_type_4 Util_smooth_type;

static_inline void Util__ctx_type_4_init(Util__ctx_type_4 &_output_){
   Util__ctx_type_4 _ctx;
   _ctx.x = 0.0f;
   _output_ = _ctx;
   return ;
}

static_inline void Util_smooth_init(Util__ctx_type_4 &_output_){
   Util__ctx_type_4_init(_output_);
   return ;
}

static_inline float Util_smooth(Util__ctx_type_4 &_ctx, float input){
   _ctx.x = (_ctx.x + (0.005f * (input + (- _ctx.x))));
   return _ctx.x;
}

typedef struct Util__ctx_type_5 {
   float x0;
} Util__ctx_type_5;

typedef Util__ctx_type_5 Util_average2_type;

static_inline void Util__ctx_type_5_init(Util__ctx_type_5 &_output_){
   Util__ctx_type_5 _ctx;
   _ctx.x0 = 0.0f;
   _output_ = _ctx;
   return ;
}

static_inline void Util_average2_init(Util__ctx_type_5 &_output_){
   Util__ctx_type_5_init(_output_);
   return ;
}

static_inline float Util_average2(Util__ctx_type_5 &_ctx, float x1){
   float result;
   result = (0.5f * (_ctx.x0 + x1));
   _ctx.x0 = x1;
   return result;
}

static_inline float Util_cubic_clipper(float x){
   if(x <= -0.6666666f){
      return -0.6666666f;
   }
   else
   {
      if(x >= 0.6666667f){
         return 0.6666667f;
      }
      else
      {
         return (x + (-0.3333333f * x * x * x));
      }
   }
};

static_inline float Util_pitchToRate_1024_raw_c0(int index){
   return Util_pitchToRate_1024_c0[index];
};

static_inline float Util_pitchToRate_1024_raw_c1(int index){
   return Util_pitchToRate_1024_c1[index];
};

static_inline float Util_pitchToRate_1024_raw_c2(int index){
   return Util_pitchToRate_1024_c2[index];
};

static_inline float Util_pitchToRate_1024(float pitch){
   int index;
   index = int_clip(float_to_int((0.2440945f * pitch)),0,31);
   return (float_wrap_array(Util_pitchToRate_1024_c0)[index] + (pitch * (float_wrap_array(Util_pitchToRate_1024_c1)[index] + (pitch * float_wrap_array(Util_pitchToRate_1024_c2)[index]))));
}

static_inline float Util_pitchToRate_raw_c0(int index){
   return Util_pitchToRate_c0[index];
};

static_inline float Util_pitchToRate_raw_c1(int index){
   return Util_pitchToRate_c1[index];
};

static_inline float Util_pitchToRate_raw_c2(int index){
   return Util_pitchToRate_c2[index];
};

static_inline float Util_pitchToRate(float pitch){
   int index;
   index = int_clip(float_to_int((0.2440945f * pitch)),0,31);
   return (float_wrap_array(Util_pitchToRate_c0)[index] + (pitch * (float_wrap_array(Util_pitchToRate_c1)[index] + (pitch * float_wrap_array(Util_pitchToRate_c2)[index]))));
}

static_inline float Util_cvToPitch(float cv){
   return (24.f + (120.f * cv));
};

static_inline float Util_cvToRate_1024_raw_c0(int index){
   return Util_cvToRate_1024_c0[index];
};

static_inline float Util_cvToRate_1024_raw_c1(int index){
   return Util_cvToRate_1024_c1[index];
};

static_inline float Util_cvToRate_1024_raw_c2(int index){
   return Util_cvToRate_1024_c2[index];
};

static_inline float Util_cvToRate_1024(float cv){
   int index;
   index = int_clip(float_to_int((34.4444445f * cv)),0,31);
   return (float_wrap_array(Util_cvToRate_1024_c0)[index] + (cv * (float_wrap_array(Util_cvToRate_1024_c1)[index] + (cv * float_wrap_array(Util_cvToRate_1024_c2)[index]))));
}

static_inline float Util_cvToRate_raw_c0(int index){
   return Util_cvToRate_c0[index];
};

static_inline float Util_cvToRate_raw_c1(int index){
   return Util_cvToRate_c1[index];
};

static_inline float Util_cvToRate_raw_c2(int index){
   return Util_cvToRate_c2[index];
};

static_inline float Util_cvToRate(float cv){
   int index;
   index = int_clip(float_to_int((141.1111112f * cv)),0,127);
   return (float_wrap_array(Util_cvToRate_c0)[index] + (cv * (float_wrap_array(Util_cvToRate_c1)[index] + (cv * float_wrap_array(Util_cvToRate_c2)[index]))));
}

static_inline float Util_pitchToCv(float pitch){
   return (0.0083334f * (-24.f + pitch));
};

static_inline float Util_cvToperiod_raw_c0(int index){
   return Util_cvToperiod_c0[index];
};

static_inline float Util_cvToperiod_raw_c1(int index){
   return Util_cvToperiod_c1[index];
};

static_inline float Util_cvToperiod_raw_c2(int index){
   return Util_cvToperiod_c2[index];
};

static_inline float Util_cvToperiod(float cv){
   int index;
   index = int_clip(float_to_int((31.f * cv)),0,31);
   return (float_wrap_array(Util_cvToperiod_c0)[index] + (cv * (float_wrap_array(Util_cvToperiod_c1)[index] + (cv * float_wrap_array(Util_cvToperiod_c2)[index]))));
}

static_inline float Util_cvTokHz_raw_c0(int index){
   return Util_cvTokHz_c0[index];
};

static_inline float Util_cvTokHz_raw_c1(int index){
   return Util_cvTokHz_c1[index];
};

static_inline float Util_cvTokHz_raw_c2(int index){
   return Util_cvTokHz_c2[index];
};

static_inline float Util_cvTokHz(float cv){
   int index;
   index = int_clip(float_to_int((31.f * cv)),0,31);
   return (float_wrap_array(Util_cvTokHz_c0)[index] + (cv * (float_wrap_array(Util_cvTokHz_c1)[index] + (cv * float_wrap_array(Util_cvTokHz_c2)[index]))));
}

static_inline float Ladder_tune_raw_c0(int index){
   return Ladder_tune_c0[index];
};

static_inline float Ladder_tune_raw_c1(int index){
   return Ladder_tune_c1[index];
};

static_inline float Ladder_tune_raw_c2(int index){
   return Ladder_tune_c2[index];
};

static_inline float Ladder_tune(float cut){
   int index;
   index = int_clip(float_to_int((127.f * cut)),0,127);
   return (float_wrap_array(Ladder_tune_c0)[index] + (cut * (float_wrap_array(Ladder_tune_c1)[index] + (cut * float_wrap_array(Ladder_tune_c2)[index]))));
}

typedef struct Ladder__ctx_type_4 {
   float p3;
   float p2;
   float p1;
   float p0;
} Ladder__ctx_type_4;

typedef Ladder__ctx_type_4 Ladder_heun_type;

void Ladder__ctx_type_4_init(Ladder__ctx_type_4 &_output_);

static_inline void Ladder_heun_init(Ladder__ctx_type_4 &_output_){
   Ladder__ctx_type_4_init(_output_);
   return ;
}

float Ladder_heun(Ladder__ctx_type_4 &_ctx, float input, float fh, float res);

typedef struct Ladder__ctx_type_5 {
   float p3;
   float p2;
   float p1;
   float p0;
} Ladder__ctx_type_5;

typedef Ladder__ctx_type_5 Ladder_euler_type;

void Ladder__ctx_type_5_init(Ladder__ctx_type_5 &_output_);

static_inline void Ladder_euler_init(Ladder__ctx_type_5 &_output_){
   Ladder__ctx_type_5_init(_output_);
   return ;
}

float Ladder_euler(Ladder__ctx_type_5 &_ctx, float input, float fh, float res);

typedef struct Ladder__ctx_type_6 {
   float fh;
   Ladder__ctx_type_5 e;
   Util__ctx_type_1 _inst159;
} Ladder__ctx_type_6;

typedef Ladder__ctx_type_6 Ladder_process_euler_type;

void Ladder__ctx_type_6_init(Ladder__ctx_type_6 &_output_);

static_inline void Ladder_process_euler_init(Ladder__ctx_type_6 &_output_){
   Ladder__ctx_type_6_init(_output_);
   return ;
}

float Ladder_process_euler(Ladder__ctx_type_6 &_ctx, float input, float cut, float res);

typedef struct Ladder__ctx_type_7 {
   Ladder__ctx_type_4 h;
   float fh;
   Util__ctx_type_1 _inst159;
} Ladder__ctx_type_7;

typedef Ladder__ctx_type_7 Ladder_process_heun_type;

void Ladder__ctx_type_7_init(Ladder__ctx_type_7 &_output_);

static_inline void Ladder_process_heun_init(Ladder__ctx_type_7 &_output_){
   Ladder__ctx_type_7_init(_output_);
   return ;
}

float Ladder_process_heun(Ladder__ctx_type_7 &_ctx, float input, float cut, float res);

typedef struct Ladder__ctx_type_8 {
   Ladder__ctx_type_7 _inst118;
} Ladder__ctx_type_8;

typedef Ladder__ctx_type_8 Ladder_process_type;

static_inline void Ladder__ctx_type_8_init(Ladder__ctx_type_8 &_output_){
   Ladder__ctx_type_8 _ctx;
   Ladder__ctx_type_7_init(_ctx._inst118);
   _output_ = _ctx;
   return ;
}

static_inline void Ladder_process_init(Ladder__ctx_type_8 &_output_){
   Ladder__ctx_type_8_init(_output_);
   return ;
}

static_inline float Ladder_process(Ladder__ctx_type_8 &_ctx, float input, float cut, float res){
   return Ladder_process_heun(_ctx._inst118,input,cut,res);
};

typedef Ladder__ctx_type_8 Ladder_noteOn_type;

static_inline void Ladder_noteOn_init(Ladder__ctx_type_8 &_output_){
   Ladder__ctx_type_8_init(_output_);
   return ;
}

static_inline void Ladder_noteOn(Ladder__ctx_type_8 &_ctx, int note, int velocity, int channel){
}

typedef Ladder__ctx_type_8 Ladder_noteOff_type;

static_inline void Ladder_noteOff_init(Ladder__ctx_type_8 &_output_){
   Ladder__ctx_type_8_init(_output_);
   return ;
}

static_inline void Ladder_noteOff(Ladder__ctx_type_8 &_ctx, int note, int channel){
}

typedef Ladder__ctx_type_8 Ladder_controlChange_type;

static_inline void Ladder_controlChange_init(Ladder__ctx_type_8 &_output_){
   Ladder__ctx_type_8_init(_output_);
   return ;
}

static_inline void Ladder_controlChange(Ladder__ctx_type_8 &_ctx, int control, int value, int channel){
}

typedef Ladder__ctx_type_8 Ladder_default_type;

static_inline void Ladder_default_init(Ladder__ctx_type_8 &_output_){
   Ladder__ctx_type_8_init(_output_);
   return ;
}

static_inline void Ladder_default(Ladder__ctx_type_8 &_ctx){
}



#endif // LADDER_H
