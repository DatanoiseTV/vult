
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#ifndef LADDER_H
#define LADDER_H
#include <stdint.h>
#include <math.h>
#include "vultin.h"

typedef struct Util__ctx_type_0 {
   uint8_t pre;
} Util__ctx_type_0;

typedef Util__ctx_type_0 Util_edge_type;

void Util__ctx_type_0_init(Util__ctx_type_0 &_output_);

void Util_edge_init(Util__ctx_type_0 &_output_);

uint8_t Util_edge(Util__ctx_type_0 &_ctx, uint8_t x);

typedef struct Util__ctx_type_1 {
   float pre_x;
} Util__ctx_type_1;

typedef Util__ctx_type_1 Util_change_type;

void Util__ctx_type_1_init(Util__ctx_type_1 &_output_);

void Util_change_init(Util__ctx_type_1 &_output_);

uint8_t Util_change(Util__ctx_type_1 &_ctx, float x);

float Util_map(float x, float x0, float x1, float y0, float y1);

typedef struct Util__ctx_type_3 {
   float y1;
   float x1;
} Util__ctx_type_3;

typedef Util__ctx_type_3 Util_dcblock_type;

void Util__ctx_type_3_init(Util__ctx_type_3 &_output_);

void Util_dcblock_init(Util__ctx_type_3 &_output_);

float Util_dcblock(Util__ctx_type_3 &_ctx, float x0);

typedef struct Util__ctx_type_4 {
   float x;
} Util__ctx_type_4;

typedef Util__ctx_type_4 Util_smooth_type;

void Util__ctx_type_4_init(Util__ctx_type_4 &_output_);

void Util_smooth_init(Util__ctx_type_4 &_output_);

float Util_smooth(Util__ctx_type_4 &_ctx, float input);

typedef struct Util__ctx_type_5 {
   float x0;
} Util__ctx_type_5;

typedef Util__ctx_type_5 Util_average2_type;

void Util__ctx_type_5_init(Util__ctx_type_5 &_output_);

void Util_average2_init(Util__ctx_type_5 &_output_);

float Util_average2(Util__ctx_type_5 &_ctx, float x1);

static const float Util_pitchToRate_1024_c0[33] = {0.189842f,0.191326f,0.198689f,0.219425f,0.265677f,0.356438f,0.520651f,0.801560f,1.262758f,1.996562f,3.135544f,4.868347f,7.461281f,11.287715f,16.867996f,24.923305f,36.448521f,52.809903f,75.876616f,108.197225f,153.232414f,215.672344f,301.846626f,420.298038f,582.505178f,803.812129f,1104.880165f,1513.124126f,2065.373952f,2810.230550f,3812.902888f,5159.525580f,6963.761469f};
static const float Util_pitchToRate_1024_c1[33] = {0.010913f,0.010176f,0.008334f,0.004867f,(-0.000939f),(-0.010061f),(-0.023820f),(-0.044002f),(-0.073002f),(-0.114025f),(-0.171341f),(-0.250621f),(-0.359381f),(-0.507548f),(-0.708208f),(-0.978575f),(-1.341250f),(-1.825848f),(-2.471123f),(-3.327721f),(-4.461658f),(-5.959006f),(-7.931626f),(-10.525312f),(-13.929212f),(-18.387588f),(-24.219785f),(-31.835151f),(-41.769557f),(-54.706455f),(-71.541226f),(-93.422592f),(-121.823163f)};
static const float Util_pitchToRate_1024_c2[33] = {0.000356f,0.000447f,0.000562f,0.000707f,0.000889f,0.001119f,0.001407f,0.001769f,0.002225f,0.002799f,0.003520f,0.004426f,0.005567f,0.007001f,0.008805f,0.011074f,0.013927f,0.017515f,0.022028f,0.027704f,0.034841f,0.043818f,0.055107f,0.069305f,0.087163f,0.109617f,0.137862f,0.173377f,0.218054f,0.274227f,0.344892f,0.433780f,0.545543f};
float Util_pitchToRate_1024(float pitch);

static const float Util_pitchToRate_c0[33] = {0.000185f,0.000187f,0.000194f,0.000214f,0.000259f,0.000348f,0.000508f,0.000783f,0.001233f,0.001950f,0.003062f,0.004754f,0.007286f,0.011023f,0.016473f,0.024339f,0.035594f,0.051572f,0.074098f,0.105661f,0.149641f,0.210618f,0.294772f,0.410447f,0.568853f,0.784973f,1.078985f,1.477660f,2.016967f,2.744366f,3.723538f,5.038599f,6.800548f};
static const float Util_pitchToRate_c1[33] = {0.000011f,0.000010f,0.000008f,0.000005f,(-0.000001f),(-0.000010f),(-0.000023f),(-0.000043f),(-0.000071f),(-0.000111f),(-0.000167f),(-0.000245f),(-0.000351f),(-0.000496f),(-0.000692f),(-0.000956f),(-0.001310f),(-0.001783f),(-0.002413f),(-0.003250f),(-0.004357f),(-0.005819f),(-0.007746f),(-0.010279f),(-0.013603f),(-0.017957f),(-0.023652f),(-0.031089f),(-0.040791f),(-0.053424f),(-0.069864f),(-0.091233f),(-0.118968f)};
static const float Util_pitchToRate_c2[33] = {0.000000f,0.000000f,0.000001f,0.000001f,0.000001f,0.000001f,0.000001f,0.000002f,0.000002f,0.000003f,0.000003f,0.000004f,0.000005f,0.000007f,0.000009f,0.000011f,0.000014f,0.000017f,0.000022f,0.000027f,0.000034f,0.000043f,0.000054f,0.000068f,0.000085f,0.000107f,0.000135f,0.000169f,0.000213f,0.000268f,0.000337f,0.000424f,0.000533f};
float Util_pitchToRate(float pitch);

float Util_cvToPitch(float cv);

static const float Util_cvToRate_1024_c0[33] = {0.759367f,0.762877f,0.779737f,0.825652f,0.924648f,1.112398f,1.440687f,1.983392f,2.844434f,4.168310f,6.153994f,9.073195f,13.294301f,19.313616f,27.796102f,39.628290f,55.986657f,78.426750f,108.998215f,150.387464f,206.118533f,280.781675f,380.357513f,512.612775f,687.616764f,918.349028f,1221.607949f,1619.052235f,2138.629322f,2815.436671f,3696.162408f,4838.694117f,6318.211520f};
static const float Util_cvToRate_1024_c1[33] = {5.245583f,4.998943f,4.403089f,3.319116f,1.564497f,(-1.099256f),(-4.982226f),(-10.485864f),(-18.127956f),(-28.574100f),(-42.677360f),(-61.528124f),(-86.516770f),(-119.412133f),(-162.460318f),(-218.508269f),(-291.156786f),(-384.956978f),(-505.652297f),(-660.458539f),(-858.494950f),(-1111.173376f),(-1432.858445f),(-1841.544459f),(-2359.816046f),(-3015.795467f),(-3844.838138f),(-4891.101919f),(-6210.197274f),(-7868.993868f),(-9955.778008f),(-12575.747874f),(-15862.234621f)};
static const float Util_cvToRate_1024_c2[33] = {20.125592f,24.457572f,29.722000f,36.119582f,43.894227f,53.342343f,64.824143f,78.777366f,95.733987f,116.340471f,141.382451f,171.814646f,208.797363f,253.740413f,308.357211f,374.730622f,455.389632f,553.410816f,672.536916f,817.290611f,993.216833f,1207.000622f,1466.803875f,1782.529271f,2166.244997f,2632.487590f,3199.072620f,3887.673024f,4724.859179f,5741.245302f,6977.441755f,8479.290028f,10304.455486f};
float Util_cvToRate_1024(float cv);

static const float Util_cvToRate_c0[33] = {0.000742f,0.000745f,0.000761f,0.000806f,0.000903f,0.001086f,0.001407f,0.001937f,0.002778f,0.004071f,0.006010f,0.008861f,0.012983f,0.018861f,0.027145f,0.038700f,0.054674f,0.076589f,0.106444f,0.146863f,0.201288f,0.274201f,0.371443f,0.500598f,0.671501f,0.896825f,1.192977f,1.581106f,2.088505f,2.749450f,3.609534f,4.725287f,6.170128f};
static const float Util_cvToRate_c1[33] = {0.005123f,0.004882f,0.004300f,0.003241f,0.001528f,(-0.001073f),(-0.004865f),(-0.010240f),(-0.017703f),(-0.027904f),(-0.041677f),(-0.060086f),(-0.084489f),(-0.116613f),(-0.158653f),(-0.213387f),(-0.284333f),(-0.375935f),(-0.493801f),(-0.644979f),(-0.838374f),(-1.085130f),(-1.399276f),(-1.798383f),(-2.304508f),(-2.945113f),(-3.754725f),(-4.776467f),(-6.064646f),(-7.684564f),(-9.722439f),(-12.281004f),(-15.490463f)};
static const float Util_cvToRate_c2[33] = {0.019654f,0.023884f,0.029025f,0.035273f,0.042865f,0.052092f,0.063305f,0.076931f,0.093490f,0.113614f,0.138069f,0.167788f,0.203904f,0.247793f,0.301130f,0.365948f,0.444716f,0.540440f,0.656774f,0.798135f,0.969938f,1.178712f,1.432426f,1.740751f,2.115474f,2.570789f,3.124094f,3.796556f,4.614120f,5.606685f,6.813908f,8.280557f,10.062945f};
float Util_cvToRate(float cv);

float Util_pitchToCv(float pitch);

static const float Util_cvToperiod_c0[33] = {674.246035f,671.553838f,662.761782f,646.759522f,623.799428f,594.871802f,561.298277f,524.476942f,485.731369f,446.229382f,406.947440f,368.663774f,331.968683f,297.284156f,264.887666f,234.936857f,207.493124f,182.543016f,160.016907f,139.804832f,121.769557f,105.757117f,91.605116f,79.149088f,68.227249f,58.683895f,50.371734f,43.153355f,36.902033f,31.502025f,26.848494f,22.847166f,19.413794f};
static const float Util_cvToperiod_c1[33] = {(-4656.656311f),(-4481.960579f),(-4198.686133f),(-3855.751543f),(-3487.139455f),(-3115.858821f),(-2756.930319f),(-2419.625141f),(-2109.134753f),(-1827.808334f),(-1576.062963f),(-1353.047092f),(-1157.118864f),(-986.186250f),(-837.944665f),(-710.039113f),(-600.171234f),(-506.166566f),(-426.013463f),(-357.882151f),(-300.130190f),(-251.298904f),(-210.104105f),(-175.423450f),(-146.282114f),(-121.837895f),(-101.366537f),(-84.247726f),(-69.952082f),(-58.029259f),(-48.097248f),(-39.832833f),(-32.963186f)};
static const float Util_cvToperiod_c2[33] = {14548.823162f,11715.369522f,9433.744675f,7596.477297f,6117.026622f,4925.706117f,3966.401040f,3193.925264f,2571.892879f,2071.004308f,1667.666208f,1342.880152f,1081.347751f,870.750049f,701.167268f,564.611553f,454.650724f,366.105298f,294.804521f,237.389916f,191.157082f,153.928316f,123.950032f,99.810164f,80.371652f,64.718885f,52.114569f,41.965005f,33.792117f,27.210939f,21.911477f,17.644111f,14.207835f};
float Util_cvToperiod(float cv);

static const float Saturate_table_c0[11] = {0.000000f,(-0.007122f),0.249321f,0.586047f,0.806743f,0.917595f,0.966766f,0.987103f,0.995137f,0.998208f,0.999352f};
static const float Saturate_table_c1[11] = {1.047001f,1.113257f,0.685850f,0.304651f,0.117525f,0.042540f,0.014886f,0.005099f,0.001720f,0.000574f,0.000189f};
static const float Saturate_table_c2[11] = {(-0.253198f),(-0.343842f),(-0.165755f),(-0.057906f),(-0.018252f),(-0.005573f),(-0.001686f),(-0.000508f),(-0.000153f),(-0.000046f),(-0.000014f)};
float Saturate_table(float x);

float Saturate_process(float x);

void Saturate_noteOn(int note, int velocity, int channel);

void Saturate_noteOff(int note, int channel);

void Saturate_controlChange(int control, int value, int channel);

void Saturate_default();

static const float Ladder_getTune_c0[129] = {0.002327f,0.002327f,0.002328f,0.002330f,0.002334f,0.002340f,0.002349f,0.002362f,0.002380f,0.002404f,0.002435f,0.002475f,0.002525f,0.002587f,0.002663f,0.002755f,0.002865f,0.002996f,0.003151f,0.003334f,0.003546f,0.003793f,0.004079f,0.004409f,0.004786f,0.005218f,0.005710f,0.006269f,0.006902f,0.007618f,0.008423f,0.009329f,0.010346f,0.011483f,0.012754f,0.014170f,0.015746f,0.017498f,0.019440f,0.021590f,0.023968f,0.026593f,0.029485f,0.032670f,0.036170f,0.040012f,0.044223f,0.048834f,0.053875f,0.059380f,0.065383f,0.071922f,0.079035f,0.086763f,0.095148f,0.104235f,0.114068f,0.124697f,0.136169f,0.148534f,0.161843f,0.176147f,0.191498f,0.207947f,0.225544f,0.244338f,0.264374f,0.285695f,0.308340f,0.332341f,0.357724f,0.384507f,0.412697f,0.442287f,0.473258f,0.505574f,0.539176f,0.573987f,0.609901f,0.646782f,0.684463f,0.722736f,0.761354f,0.800022f,0.838393f,0.876064f,0.912569f,0.947376f,0.979880f,1.009400f,1.035170f,1.056342f,1.071976f,1.081042f,1.082415f,1.074881f,1.057134f,1.027785f,0.985367f,0.928349f,0.855148f,0.764148f,0.653729f,0.522289f,0.368283f,0.190263f,(-0.013077f),(-0.242846f),(-0.499902f),(-0.784782f),(-1.097643f),(-1.438184f),(-1.805577f),(-2.198398f),(-2.614559f),(-3.051247f),(-3.504879f),(-3.971065f),(-4.444596f),(-4.919461f),(-5.388878f),(-5.845380f),(-6.280919f),(-6.687025f),(-7.054997f),(-7.376137f),(-7.642022f),(-7.844801f),(-7.977515f)};
static const float Ladder_getTune_c1[129] = {0.016107f,0.016057f,0.015952f,0.015787f,0.015554f,0.015247f,0.014859f,0.014381f,0.013805f,0.013121f,0.012320f,0.011390f,0.010321f,0.009099f,0.007711f,0.006144f,0.004381f,0.002406f,0.000201f,(-0.002252f),(-0.004974f),(-0.007986f),(-0.011312f),(-0.014976f),(-0.019005f),(-0.023426f),(-0.028271f),(-0.033570f),(-0.039358f),(-0.045671f),(-0.052548f),(-0.060029f),(-0.068157f),(-0.076980f),(-0.086546f),(-0.096905f),(-0.108114f),(-0.120230f),(-0.133313f),(-0.147428f),(-0.162643f),(-0.179029f),(-0.196661f),(-0.215617f),(-0.235979f),(-0.257834f),(-0.281270f),(-0.306383f),(-0.333267f),(-0.362026f),(-0.392761f),(-0.425582f),(-0.460598f),(-0.497923f),(-0.537673f),(-0.579964f),(-0.624916f),(-0.672649f),(-0.723281f),(-0.776930f),(-0.833714f),(-0.893743f),(-0.957126f),(-1.023964f),(-1.094350f),(-1.168364f),(-1.246077f),(-1.327540f),(-1.412789f),(-1.501835f),(-1.594663f),(-1.691231f),(-1.791457f),(-1.895224f),(-2.002367f),(-2.112669f),(-2.225857f),(-2.341591f),(-2.459461f),(-2.578975f),(-2.699553f),(-2.820517f),(-2.941082f),(-3.060349f),(-3.177293f),(-3.290752f),(-3.399423f),(-3.501850f),(-3.596415f),(-3.681333f),(-3.754645f),(-3.814216f),(-3.857732f),(-3.882700f),(-3.886455f),(-3.866169f),(-3.818863f),(-3.741425f),(-3.630642f),(-3.483224f),(-3.295853f),(-3.065227f),(-2.788124f),(-2.461467f),(-2.082406f),(-1.648407f),(-1.157353f),(-0.607656f),0.001629f,0.670676f,1.398759f,2.184122f,3.023852f,3.913762f,4.848280f,5.820373f,6.821483f,7.841510f,8.868837f,9.890405f,10.891848f,11.857696f,12.771649f,13.616920f,14.376655f,15.034409f,15.574683f,15.983503f,16.249004f};
static const float Ladder_getTune_c2[129] = {0.057230f,0.060399f,0.063742f,0.067269f,0.070990f,0.074915f,0.079056f,0.083424f,0.088032f,0.092893f,0.098019f,0.103426f,0.109128f,0.115142f,0.121483f,0.128170f,0.135220f,0.142654f,0.150491f,0.158753f,0.167461f,0.176640f,0.186314f,0.196508f,0.207250f,0.218568f,0.230491f,0.243051f,0.256279f,0.270209f,0.284878f,0.300321f,0.316577f,0.333686f,0.351690f,0.370632f,0.390557f,0.411512f,0.433545f,0.456707f,0.481049f,0.506625f,0.533490f,0.561702f,0.591318f,0.622398f,0.655003f,0.689196f,0.725040f,0.762600f,0.801939f,0.843124f,0.886218f,0.931288f,0.978396f,1.027605f,1.078977f,1.132569f,1.188436f,1.246629f,1.307196f,1.370175f,1.435600f,1.503497f,1.573880f,1.646753f,1.722108f,1.799922f,1.880154f,1.962745f,2.047615f,2.134660f,2.223748f,2.314721f,2.407383f,2.501506f,2.596822f,2.693016f,2.789730f,2.886551f,2.983014f,3.078591f,3.172692f,3.264659f,3.353761f,3.439192f,3.520068f,3.595420f,3.664200f,3.725270f,3.777410f,3.819314f,3.849594f,3.866786f,3.869353f,3.855698f,3.824172f,3.773092f,3.700758f,3.605473f,3.485571f,3.339449f,3.165598f,2.962644f,2.729394f,2.464880f,2.168414f,1.839643f,1.478603f,1.085786f,0.662192f,0.209386f,(-0.270446f),(-0.774453f),(-1.299085f),(-1.840068f),(-2.392400f),(-2.950362f),(-3.507559f),(-4.056979f),(-4.591092f),(-5.101968f),(-5.581437f),(-6.021275f),(-6.413422f),(-6.750222f),(-7.024680f),(-7.230734f),(-7.363521f)};
float Ladder_getTune(float cv);

typedef struct Ladder__ctx_type_1 {
   float yd;
   float yc;
   float yb;
   float ya;
   float wc;
   float wb;
   float wa;
   float tune;
   Util__ctx_type_1 _inst30;
} Ladder__ctx_type_1;

typedef Ladder__ctx_type_1 Ladder_step_type;

void Ladder__ctx_type_1_init(Ladder__ctx_type_1 &_output_);

void Ladder_step_init(Ladder__ctx_type_1 &_output_);

float Ladder_step(Ladder__ctx_type_1 &_ctx, float x, float cv, float res);

typedef struct Ladder__ctx_type_2 {
   Ladder__ctx_type_1 filter;
} Ladder__ctx_type_2;

typedef Ladder__ctx_type_2 Ladder_process_type;

void Ladder__ctx_type_2_init(Ladder__ctx_type_2 &_output_);

void Ladder_process_init(Ladder__ctx_type_2 &_output_);

float Ladder_process(Ladder__ctx_type_2 &_ctx, float input, float cut, float res);

typedef Ladder__ctx_type_2 Ladder_noteOn_type;

void Ladder_noteOn_init(Ladder__ctx_type_2 &_output_);

void Ladder_noteOn(Ladder__ctx_type_2 &_ctx, int note, int velocity, int channel);

typedef Ladder__ctx_type_2 Ladder_noteOff_type;

void Ladder_noteOff_init(Ladder__ctx_type_2 &_output_);

void Ladder_noteOff(Ladder__ctx_type_2 &_ctx, int note, int channel);

typedef Ladder__ctx_type_2 Ladder_controlChange_type;

void Ladder_controlChange_init(Ladder__ctx_type_2 &_output_);

void Ladder_controlChange(Ladder__ctx_type_2 &_ctx, int control, int value, int channel);

typedef Ladder__ctx_type_2 Ladder_default_type;

void Ladder_default_init(Ladder__ctx_type_2 &_output_);

void Ladder_default(Ladder__ctx_type_2 &_ctx);



#endif // LADDER_H
