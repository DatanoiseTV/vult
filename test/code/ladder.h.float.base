
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#ifndef LADDER_H
#define LADDER_H
#include <stdint.h>
#include <math.h>
#include "vultin.h"

typedef struct Util__ctx_type_0 {
   uint8_t pre;
} Util__ctx_type_0;

typedef Util__ctx_type_0 Util_edge_type;

void Util__ctx_type_0_init(Util__ctx_type_0 &_output_);

void Util_edge_init(Util__ctx_type_0 &_output_);

uint8_t Util_edge(Util__ctx_type_0 &_ctx, uint8_t x);

typedef struct Util__ctx_type_1 {
   float pre_x;
} Util__ctx_type_1;

typedef Util__ctx_type_1 Util_change_type;

void Util__ctx_type_1_init(Util__ctx_type_1 &_output_);

void Util_change_init(Util__ctx_type_1 &_output_);

uint8_t Util_change(Util__ctx_type_1 &_ctx, float x);

float Util_map(float x, float x0, float x1, float y0, float y1);

typedef struct Util__ctx_type_3 {
   float y1;
   float x1;
} Util__ctx_type_3;

typedef Util__ctx_type_3 Util_dcblock_type;

void Util__ctx_type_3_init(Util__ctx_type_3 &_output_);

void Util_dcblock_init(Util__ctx_type_3 &_output_);

float Util_dcblock(Util__ctx_type_3 &_ctx, float x0);

typedef struct Util__ctx_type_4 {
   float x;
} Util__ctx_type_4;

typedef Util__ctx_type_4 Util_smooth_type;

void Util__ctx_type_4_init(Util__ctx_type_4 &_output_);

void Util_smooth_init(Util__ctx_type_4 &_output_);

float Util_smooth(Util__ctx_type_4 &_ctx, float input);

typedef struct Util__ctx_type_5 {
   float x0;
} Util__ctx_type_5;

typedef Util__ctx_type_5 Util_average2_type;

void Util__ctx_type_5_init(Util__ctx_type_5 &_output_);

void Util_average2_init(Util__ctx_type_5 &_output_);

float Util_average2(Util__ctx_type_5 &_ctx, float x1);

float Util_cubic_clipper(float x);

static const float Util_pitchToRate_1024_c0[33] = {0.189842f,0.191326f,0.198689f,0.219425f,0.265677f,0.356438f,0.520651f,0.801560f,1.262758f,1.996562f,3.135544f,4.868346f,7.461279f,11.287725f,16.868007f,24.923329f,36.448518f,52.809890f,75.876604f,108.196579f,153.231618f,215.671056f,301.849428f,420.301718f,582.500346f,803.831942f,1104.890093f,1513.184032f,2065.394252f,2810.346575f,3812.929069f,5159.245173f,6963.386226f};
static const float Util_pitchToRate_1024_c1[33] = {0.010913f,0.010176f,0.008334f,0.004867f,(-0.000939f),(-0.010061f),(-0.023820f),(-0.044002f),(-0.073002f),(-0.114025f),(-0.171341f),(-0.250621f),(-0.359381f),(-0.507548f),(-0.708208f),(-0.978576f),(-1.341250f),(-1.825848f),(-2.471123f),(-3.327701f),(-4.461631f),(-5.958970f),(-7.931709f),(-10.525422f),(-13.929139f),(-18.388075f),(-24.220033f),(-31.836533f),(-41.769999f),(-54.708756f),(-71.542010f),(-93.417674f),(-121.816648f)};
static const float Util_pitchToRate_1024_c2[33] = {0.000356f,0.000447f,0.000562f,0.000707f,0.000889f,0.001119f,0.001407f,0.001769f,0.002225f,0.002799f,0.003520f,0.004426f,0.005567f,0.007001f,0.008805f,0.011074f,0.013927f,0.017515f,0.022028f,0.027703f,0.034841f,0.043818f,0.055108f,0.069306f,0.087163f,0.109620f,0.137864f,0.173384f,0.218056f,0.274238f,0.344895f,0.433757f,0.545514f};
float Util_pitchToRate_1024(float pitch);

static const float Util_pitchToRate_c0[33] = {0.000185f,0.000187f,0.000194f,0.000214f,0.000259f,0.000348f,0.000508f,0.000783f,0.001233f,0.001950f,0.003062f,0.004754f,0.007286f,0.011023f,0.016473f,0.024339f,0.035594f,0.051572f,0.074098f,0.105661f,0.149640f,0.210616f,0.294775f,0.410451f,0.568848f,0.784992f,1.078994f,1.477719f,2.016987f,2.744479f,3.723564f,5.038325f,6.800182f};
static const float Util_pitchToRate_c1[33] = {0.000011f,0.000010f,0.000008f,0.000005f,(-0.000001f),(-0.000010f),(-0.000023f),(-0.000043f),(-0.000071f),(-0.000111f),(-0.000167f),(-0.000245f),(-0.000351f),(-0.000496f),(-0.000692f),(-0.000956f),(-0.001310f),(-0.001783f),(-0.002413f),(-0.003250f),(-0.004357f),(-0.005819f),(-0.007746f),(-0.010279f),(-0.013603f),(-0.017957f),(-0.023652f),(-0.031090f),(-0.040791f),(-0.053427f),(-0.069865f),(-0.091228f),(-0.118962f)};
static const float Util_pitchToRate_c2[33] = {0.000000f,0.000000f,0.000001f,0.000001f,0.000001f,0.000001f,0.000001f,0.000002f,0.000002f,0.000003f,0.000003f,0.000004f,0.000005f,0.000007f,0.000009f,0.000011f,0.000014f,0.000017f,0.000022f,0.000027f,0.000034f,0.000043f,0.000054f,0.000068f,0.000085f,0.000107f,0.000135f,0.000169f,0.000213f,0.000268f,0.000337f,0.000424f,0.000533f};
float Util_pitchToRate(float pitch);

float Util_cvToPitch(float cv);

static const float Util_cvToRate_1024_c0[33] = {0.759367f,0.762877f,0.779737f,0.825652f,0.924648f,1.112398f,1.440687f,1.983392f,2.844434f,4.168311f,6.153994f,9.073195f,13.294298f,19.313614f,27.796102f,39.628263f,55.986716f,78.426878f,108.997433f,150.387804f,206.117798f,280.781091f,380.357333f,512.611648f,687.605268f,918.347360f,1221.626080f,1619.066843f,2138.478452f,2815.563557f,3696.089822f,4838.643251f,6318.116516f};
static const float Util_cvToRate_1024_c1[33] = {5.245583f,4.998943f,4.403089f,3.319116f,1.564497f,(-1.099256f),(-4.982226f),(-10.485864f),(-18.127956f),(-28.574102f),(-42.677365f),(-61.528130f),(-86.516746f),(-119.412143f),(-162.460392f),(-218.508148f),(-291.157147f),(-384.957361f),(-505.648347f),(-660.460542f),(-858.491160f),(-1111.172835f),(-1432.857517f),(-1841.543534f),(-2359.780392f),(-3015.794142f),(-3844.886359f),(-4891.172353f),(-6209.739876f),(-7869.328765f),(-9955.655805f),(-12575.538397f),(-15862.006882f)};
static const float Util_cvToRate_1024_c2[33] = {20.125592f,24.457572f,29.722000f,36.119582f,43.894227f,53.342343f,64.824142f,78.777368f,95.733988f,116.340476f,141.382456f,171.814657f,208.797308f,253.740378f,308.357324f,374.730424f,455.390158f,553.411688f,672.532093f,817.292850f,993.212978f,1206.999450f,1466.802895f,1782.528345f,2166.212866f,2632.484466f,3199.119798f,3887.721889f,4724.543762f,5741.489334f,6977.329755f,8479.181564f,10304.303011f};
float Util_cvToRate_1024(float cv);

static const float Util_cvToRate_c0[129] = {0.000742f,0.000742f,0.000742f,0.000742f,0.000743f,0.000744f,0.000747f,0.000749f,0.000754f,0.000759f,0.000766f,0.000775f,0.000786f,0.000800f,0.000816f,0.000836f,0.000860f,0.000889f,0.000922f,0.000961f,0.001007f,0.001060f,0.001120f,0.001190f,0.001270f,0.001360f,0.001463f,0.001580f,0.001712f,0.001860f,0.002027f,0.002214f,0.002423f,0.002657f,0.002917f,0.003207f,0.003528f,0.003885f,0.004280f,0.004717f,0.005200f,0.005732f,0.006319f,0.006964f,0.007674f,0.008453f,0.009308f,0.010245f,0.011272f,0.012395f,0.013622f,0.014963f,0.016427f,0.018023f,0.019763f,0.021659f,0.023722f,0.025966f,0.028405f,0.031056f,0.033934f,0.037057f,0.040444f,0.044117f,0.048096f,0.052405f,0.057070f,0.062118f,0.067577f,0.073479f,0.079856f,0.086744f,0.094181f,0.102209f,0.110870f,0.120210f,0.130281f,0.141134f,0.152828f,0.165422f,0.178982f,0.193578f,0.209283f,0.226178f,0.244346f,0.263878f,0.284871f,0.307428f,0.331660f,0.357683f,0.385623f,0.415614f,0.447799f,0.482330f,0.519370f,0.559091f,0.601678f,0.647329f,0.696253f,0.748675f,0.804832f,0.864979f,0.929386f,0.998343f,1.072156f,1.151153f,1.235683f,1.326117f,1.422851f,1.526306f,1.636930f,1.755200f,1.881624f,2.016743f,2.161133f,2.315406f,2.480212f,2.656246f,2.844245f,3.044993f,3.259324f,3.488126f,3.732342f,3.992976f,4.271094f,4.567832f,4.884395f,5.222065f,5.582204f};
static const float Util_cvToRate_c1[129] = {0.005139f,0.005126f,0.005099f,0.005057f,0.004997f,0.004920f,0.004821f,0.004701f,0.004557f,0.004386f,0.004187f,0.003958f,0.003695f,0.003395f,0.003057f,0.002677f,0.002250f,0.001775f,0.001246f,0.000661f,0.000013f,(-0.000701f),(-0.001486f),(-0.002347f),(-0.003291f),(-0.004324f),(-0.005451f),(-0.006681f),(-0.008019f),(-0.009475f),(-0.011056f),(-0.012771f),(-0.014630f),(-0.016643f),(-0.018820f),(-0.021173f),(-0.023715f),(-0.026457f),(-0.029414f),(-0.032601f),(-0.036033f),(-0.039726f),(-0.043698f),(-0.047968f),(-0.052555f),(-0.057481f),(-0.062767f),(-0.068439f),(-0.074520f),(-0.081038f),(-0.088022f),(-0.095500f),(-0.103507f),(-0.112074f),(-0.121240f),(-0.131041f),(-0.141519f),(-0.152717f),(-0.164680f),(-0.177457f),(-0.191100f),(-0.205662f),(-0.221203f),(-0.237783f),(-0.255468f),(-0.274326f),(-0.294430f),(-0.315858f),(-0.338692f),(-0.363020f),(-0.388932f),(-0.416527f),(-0.445908f),(-0.477186f),(-0.510475f),(-0.545899f),(-0.583588f),(-0.623681f),(-0.666322f),(-0.711667f),(-0.759879f),(-0.811132f),(-0.865609f),(-0.923505f),(-0.985024f),(-1.050385f),(-1.119817f),(-1.193565f),(-1.271886f),(-1.355053f),(-1.443355f),(-1.537097f),(-1.636603f),(-1.742213f),(-1.854291f),(-1.973218f),(-2.099400f),(-2.233263f),(-2.375261f),(-2.525872f),(-2.685603f),(-2.854988f),(-3.034594f),(-3.225018f),(-3.426895f),(-3.640891f),(-3.867716f),(-4.108116f),(-4.362881f),(-4.632847f),(-4.918896f),(-5.221962f),(-5.543032f),(-5.883146f),(-6.243407f),(-6.624979f),(-7.029092f),(-7.457046f),(-7.910214f),(-8.390047f),(-8.898078f),(-9.435927f),(-10.005306f),(-10.608022f),(-11.245984f),(-11.921211f),(-12.635832f),(-13.392100f),(-14.192391f)};
static const float Util_cvToRate_c2[129] = {0.018255f,0.019167f,0.020124f,0.021129f,0.022184f,0.023292f,0.024455f,0.025677f,0.026959f,0.028306f,0.029719f,0.031204f,0.032762f,0.034398f,0.036116f,0.037920f,0.039814f,0.041802f,0.043890f,0.046082f,0.048384f,0.050800f,0.053338f,0.056001f,0.058798f,0.061735f,0.064818f,0.068056f,0.071455f,0.075023f,0.078770f,0.082704f,0.086835f,0.091172f,0.095725f,0.100506f,0.105526f,0.110796f,0.116330f,0.122140f,0.128240f,0.134645f,0.141370f,0.148430f,0.155843f,0.163627f,0.171799f,0.180379f,0.189388f,0.198847f,0.208778f,0.219206f,0.230154f,0.241649f,0.253717f,0.266389f,0.279694f,0.293663f,0.308329f,0.323729f,0.339897f,0.356873f,0.374697f,0.393410f,0.413059f,0.433689f,0.455349f,0.478091f,0.501969f,0.527039f,0.553362f,0.580999f,0.610016f,0.640483f,0.672471f,0.706057f,0.741321f,0.778345f,0.817219f,0.858034f,0.900888f,0.945882f,0.993123f,1.042724f,1.094802f,1.149481f,1.206890f,1.267168f,1.330455f,1.396903f,1.466670f,1.539922f,1.616832f,1.697583f,1.782367f,1.871386f,1.964851f,2.062983f,2.166017f,2.274197f,2.387780f,2.507035f,2.632247f,2.763712f,2.901743f,3.046668f,3.198831f,3.358594f,3.526336f,3.702455f,3.887371f,4.081522f,4.285370f,4.499399f,4.724117f,4.960059f,5.207785f,5.467883f,5.740971f,6.027699f,6.328746f,6.644830f,6.976700f,7.325145f,7.690992f,8.075112f,8.478416f,8.901863f,9.346458f};
float Util_cvToRate(float cv);

float Util_pitchToCv(float pitch);

static const float Util_cvToperiod_c0[33] = {674.246035f,671.553838f,662.761782f,646.759522f,623.799428f,594.871802f,561.298277f,524.476942f,485.731369f,446.229382f,406.947440f,368.663774f,331.968683f,297.284156f,264.887666f,234.936857f,207.493124f,182.543016f,160.016907f,139.804832f,121.769557f,105.757117f,91.605116f,79.149088f,68.227249f,58.683895f,50.371734f,43.153355f,36.902033f,31.502025f,26.848494f,22.847166f,19.413794f};
static const float Util_cvToperiod_c1[33] = {(-4656.656311f),(-4481.960579f),(-4198.686133f),(-3855.751543f),(-3487.139455f),(-3115.858821f),(-2756.930319f),(-2419.625141f),(-2109.134753f),(-1827.808334f),(-1576.062963f),(-1353.047092f),(-1157.118864f),(-986.186250f),(-837.944665f),(-710.039113f),(-600.171234f),(-506.166566f),(-426.013463f),(-357.882151f),(-300.130190f),(-251.298904f),(-210.104105f),(-175.423450f),(-146.282114f),(-121.837895f),(-101.366537f),(-84.247726f),(-69.952082f),(-58.029259f),(-48.097248f),(-39.832833f),(-32.963186f)};
static const float Util_cvToperiod_c2[33] = {14548.823162f,11715.369522f,9433.744675f,7596.477297f,6117.026622f,4925.706117f,3966.401040f,3193.925264f,2571.892879f,2071.004308f,1667.666208f,1342.880152f,1081.347751f,870.750049f,701.167268f,564.611553f,454.650724f,366.105298f,294.804521f,237.389916f,191.157082f,153.928316f,123.950032f,99.810164f,80.371652f,64.718885f,52.114569f,41.965005f,33.792117f,27.210939f,21.911477f,17.644111f,14.207835f};
float Util_cvToperiod(float cv);

static const float Util_cvTokHz_c0[33] = {0.032703f,0.032916f,0.033958f,0.036857f,0.043242f,0.055616f,0.077724f,0.115069f,0.175614f,0.270739f,0.416537f,0.635567f,0.959207f,1.430818f,2.109960f,3.078021f,4.445697f,6.362909f,9.031922f,12.724677f,17.805619f,24.761735f,34.241990f,47.109042f,64.506928f,87.949557f,119.436234f,161.602273f,217.915148f,292.929619f,392.619240f,524.806645f,699.721497f};
static const float Util_cvTokHz_c1[33] = {0.225719f,0.212293f,0.179169f,0.117605f,0.015780f,(-0.142178f),(-0.377466f),(-0.718250f),(-1.201797f),(-1.877228f),(-2.809077f),(-4.081867f),(-5.806008f),(-8.125373f),(-11.227028f),(-15.353705f),(-20.819795f),(-28.031798f),(-37.514503f),(-49.944414f),(-66.192449f),(-87.378404f),(-114.940396f),(-150.723337f),(-197.091584f),(-257.072284f),(-334.537674f),(-434.436788f),(-563.089817f),(-728.561858f),(-941.137258f),(-1213.921328f),(-1563.603302f)};
static const float Util_cvTokHz_c2[33] = {0.876338f,1.088287f,1.351498f,1.678368f,2.084294f,2.588397f,3.214421f,3.991854f,4.957315f,6.156280f,7.645225f,9.494282f,11.790549f,14.642185f,18.183512f,22.581336f,28.042809f,34.825181f,43.247923f,53.707771f,66.697415f,82.828706f,102.861476f,127.739327f,158.634081f,197.000973f,244.647198f,303.817033f,377.297556f,468.549918f,581.872376f,722.602756f,897.369877f};
float Util_cvTokHz(float cv);

static const float Ladder_tune_c0[129] = {0.001165f,0.001165f,0.001165f,0.001166f,0.001168f,0.001171f,0.001176f,0.001182f,0.001192f,0.001204f,0.001220f,0.001240f,0.001266f,0.001297f,0.001336f,0.001383f,0.001439f,0.001506f,0.001586f,0.001679f,0.001789f,0.001916f,0.002063f,0.002233f,0.002429f,0.002653f,0.002908f,0.003199f,0.003530f,0.003904f,0.004327f,0.004803f,0.005339f,0.005941f,0.006615f,0.007369f,0.008212f,0.009151f,0.010197f,0.011360f,0.012651f,0.014083f,0.015670f,0.017426f,0.019366f,0.021509f,0.023872f,0.026477f,0.029345f,0.032500f,0.035968f,0.039776f,0.043956f,0.048540f,0.053563f,0.059064f,0.065083f,0.071667f,0.078864f,0.086724f,0.095306f,0.104670f,0.114882f,0.126012f,0.138138f,0.151342f,0.165712f,0.181346f,0.198345f,0.216823f,0.236897f,0.258699f,0.282367f,0.308050f,0.335910f,0.366121f,0.398869f,0.434355f,0.472795f,0.514422f,0.559483f,0.608249f,0.661008f,0.718068f,0.779765f,0.846454f,0.918520f,0.996375f,1.080464f,1.171260f,1.269274f,1.375054f,1.489188f,1.612307f,1.745086f,1.888252f,2.042583f,2.208913f,2.388138f,2.581217f,2.789177f,3.013122f,3.254233f,3.513775f,3.793106f,4.093678f,4.417047f,4.764881f,5.138966f,5.541214f,5.973671f,6.438530f,6.938139f,7.475007f,8.051825f,8.671469f,9.337019f,10.051768f,(-516.168451f),0.712358f,0.712358f,0.712358f,0.712358f,0.712358f,0.712358f,0.712358f,0.712358f,0.712358f,0.712358f};
static const float Ladder_tune_c1[129] = {0.008072f,0.008047f,0.007994f,0.007910f,0.007793f,0.007637f,0.007440f,0.007198f,0.006906f,0.006559f,0.006152f,0.005679f,0.005135f,0.004512f,0.003804f,0.003004f,0.002102f,0.001091f,(-0.000039f),(-0.001298f),(-0.002697f),(-0.004248f),(-0.005963f),(-0.007855f),(-0.009940f),(-0.012233f),(-0.014750f),(-0.017509f),(-0.020530f),(-0.023833f),(-0.027439f),(-0.031374f),(-0.035661f),(-0.040328f),(-0.045404f),(-0.050920f),(-0.056910f),(-0.063408f),(-0.070453f),(-0.078086f),(-0.086351f),(-0.095293f),(-0.104963f),(-0.115414f),(-0.126704f),(-0.138892f),(-0.152045f),(-0.166231f),(-0.181525f),(-0.198007f),(-0.215761f),(-0.234877f),(-0.255453f),(-0.277592f),(-0.301404f),(-0.327005f),(-0.354523f),(-0.384091f),(-0.415852f),(-0.449958f),(-0.486572f),(-0.525868f),(-0.568030f),(-0.613256f),(-0.661757f),(-0.713756f),(-0.769494f),(-0.829224f),(-0.893219f),(-0.961769f),(-1.035182f),(-1.113787f),(-1.197934f),(-1.287998f),(-1.384375f),(-1.487491f),(-1.597795f),(-1.715770f),(-1.841926f),(-1.976810f),(-2.121002f),(-2.275120f),(-2.439822f),(-2.615810f),(-2.803828f),(-3.004672f),(-3.219186f),(-3.448270f),(-3.692880f),(-3.954036f),(-4.232822f),(-4.530391f),(-4.847970f),(-5.186864f),(-5.548463f),(-5.934244f),(-6.345779f),(-6.784738f),(-7.252901f),(-7.752157f),(-8.284518f),(-8.852122f),(-9.457243f),(-10.102299f),(-10.789859f),(-11.522658f),(-12.303600f),(-13.135776f),(-14.022467f),(-14.967166f),(-15.973581f),(-17.045657f),(-18.187584f),(-19.403816f),(-20.699088f),(-22.078429f),(-23.547185f),(-25.111037f),1114.291147f,0.000000f,(-0.000000f),(-0.000000f),0.000000f,0.000000f,(-0.000000f),0.000000f,0.000000f,(-0.000000f),0.000000f};
static const float Ladder_tune_c2[129] = {0.028752f,0.030352f,0.032041f,0.033824f,0.035706f,0.037693f,0.039790f,0.042004f,0.044341f,0.046809f,0.049413f,0.052163f,0.055066f,0.058130f,0.061364f,0.064779f,0.068384f,0.072189f,0.076206f,0.080446f,0.084923f,0.089648f,0.094637f,0.099903f,0.105462f,0.111331f,0.117526f,0.124065f,0.130969f,0.138257f,0.145950f,0.154071f,0.162645f,0.171695f,0.181249f,0.191335f,0.201982f,0.213221f,0.225086f,0.237611f,0.250833f,0.264790f,0.279524f,0.295079f,0.311498f,0.328832f,0.347130f,0.366446f,0.386837f,0.408362f,0.431086f,0.455073f,0.480396f,0.507128f,0.535347f,0.565137f,0.596584f,0.629781f,0.664825f,0.701819f,0.740872f,0.782098f,0.825618f,0.871560f,0.920058f,0.971255f,1.025300f,1.082353f,1.142581f,1.206160f,1.273277f,1.344129f,1.418923f,1.497879f,1.581229f,1.669217f,1.762101f,1.860153f,1.963662f,2.072930f,2.188278f,2.310046f,2.438589f,2.574284f,2.717531f,2.868748f,3.028380f,3.196895f,3.374787f,3.562577f,3.760818f,3.970089f,4.191005f,4.424215f,4.670401f,4.930286f,5.204633f,5.494245f,5.799974f,6.122714f,6.463414f,6.823072f,7.202743f,7.603540f,8.026641f,8.473285f,8.944782f,9.442516f,9.967947f,10.522615f,11.108148f,11.726262f,12.378772f,13.067591f,13.794740f,14.562351f,15.372675f,16.228090f,(-600.544281f),0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f};
float Ladder_tune(float cut);

void Ladder_ladder_step(float input, float fh, float res, float (&p)[4], float (&dp)[4]);

typedef struct Ladder__ctx_type_2 {
   float p[4];
   float fh;
   Util__ctx_type_1 _inst25;
} Ladder__ctx_type_2;

typedef Ladder__ctx_type_2 Ladder_heun_type;

void Ladder__ctx_type_2_init(Ladder__ctx_type_2 &_output_);

void Ladder_heun_init(Ladder__ctx_type_2 &_output_);

float Ladder_heun(Ladder__ctx_type_2 &_ctx, float input, float cut, float res);

typedef struct Ladder__ctx_type_3 {
   float p[4];
   float fh;
   Util__ctx_type_1 _inst28;
} Ladder__ctx_type_3;

typedef Ladder__ctx_type_3 Ladder_euler_type;

void Ladder__ctx_type_3_init(Ladder__ctx_type_3 &_output_);

void Ladder_euler_init(Ladder__ctx_type_3 &_output_);

float Ladder_euler(Ladder__ctx_type_3 &_ctx, float input, float cut, float res);

typedef struct Ladder__ctx_type_4 {
   Ladder__ctx_type_3 e;
} Ladder__ctx_type_4;

typedef Ladder__ctx_type_4 Ladder_process_euler_type;

void Ladder__ctx_type_4_init(Ladder__ctx_type_4 &_output_);

void Ladder_process_euler_init(Ladder__ctx_type_4 &_output_);

float Ladder_process_euler(Ladder__ctx_type_4 &_ctx, float input, float cut, float res);

typedef struct Ladder__ctx_type_5 {
   Ladder__ctx_type_2 h;
} Ladder__ctx_type_5;

typedef Ladder__ctx_type_5 Ladder_process_heun_type;

void Ladder__ctx_type_5_init(Ladder__ctx_type_5 &_output_);

void Ladder_process_heun_init(Ladder__ctx_type_5 &_output_);

float Ladder_process_heun(Ladder__ctx_type_5 &_ctx, float input, float cut, float res);

typedef struct Ladder__ctx_type_6 {
   Ladder__ctx_type_5 _inst33;
} Ladder__ctx_type_6;

typedef Ladder__ctx_type_6 Ladder_process_type;

void Ladder__ctx_type_6_init(Ladder__ctx_type_6 &_output_);

void Ladder_process_init(Ladder__ctx_type_6 &_output_);

float Ladder_process(Ladder__ctx_type_6 &_ctx, float input, float cut, float res);

typedef Ladder__ctx_type_6 Ladder_noteOn_type;

void Ladder_noteOn_init(Ladder__ctx_type_6 &_output_);

void Ladder_noteOn(Ladder__ctx_type_6 &_ctx, int note, int velocity, int channel);

typedef Ladder__ctx_type_6 Ladder_noteOff_type;

void Ladder_noteOff_init(Ladder__ctx_type_6 &_output_);

void Ladder_noteOff(Ladder__ctx_type_6 &_ctx, int note, int channel);

typedef Ladder__ctx_type_6 Ladder_controlChange_type;

void Ladder_controlChange_init(Ladder__ctx_type_6 &_output_);

void Ladder_controlChange(Ladder__ctx_type_6 &_ctx, int control, int value, int channel);

typedef Ladder__ctx_type_6 Ladder_default_type;

void Ladder_default_init(Ladder__ctx_type_6 &_output_);

void Ladder_default(Ladder__ctx_type_6 &_ctx);



#endif // LADDER_H
