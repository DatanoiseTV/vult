
local this = {}
local ffi = require("ffi")
function this.ternary(cond,then_,else_) if cond then return then_ else return else_ end end
function this.eps()             return 1e-18; end
function this.pi()              return 3.1415926535897932384; end
function this.random()          return math.random(); end
function this.irandom()         return math.floor(math.random() * 4294967296); end
function this.clip(x,low,high)  return (this.ternary(x<low,low,this.ternary(x>high,high,x))); end
function this.real(x)           return x; end
function this.int(x)            local int_part,_ = math.modf(x) return int_part; end
function this.sin(x)            return math.sin(x); end
function this.cos(x)            return math.cos(x); end
function this.abs(x)            return math.abs(x); end
function this.exp(x)            return math.exp(x); end
function this.floor(x)          return math.floor(x); end
function this.tan(x)            return math.tan(x); end
function this.tanh(x)           return math.tanh(x); end
function this.sqrt(x)           return x; end
function this.set(a,i,v)        a[i+1]=v; end
function this.get(a,i)          return a[i+1]; end
function this.makeArray(size,v) local a = {}; for i=1,size do a[i]=v end return a; end
function this.wrap_array(a)     return a; end
function this.Util__ctx_type_0_init()
   local _ctx = {};
   _ctx.pre = false;
   return _ctx;

end

function this.Util_edge_init()
   return this.Util__ctx_type_0_init();
end

function this.Util_edge(_ctx,x)
   local ret = (x and (_ctx.pre == false));
   _ctx.pre = x;
   return ret;

end

function this.Util__ctx_type_1_init()
   local _ctx = {};
   _ctx.pre_x = 0.000000;
   return _ctx;

end

function this.Util_change_init()
   return this.Util__ctx_type_1_init();
end

function this.Util_change(_ctx,x)
   local v = (_ctx.pre_x ~= x);
   _ctx.pre_x = x;
   return v;

end

function this.Util_map(x,x0,x1,y0,y1)
   return ((((x + (- x0)) * (y1 + (- y0))) / (x1 + (- x0))) + y0);

end

function this.Util__ctx_type_3_init()
   local _ctx = {};
   _ctx.y1 = 0.000000;
   _ctx.x1 = 0.000000;
   return _ctx;

end

function this.Util_dcblock_init()
   return this.Util__ctx_type_3_init();
end

function this.Util_dcblock(_ctx,x0)
   local y0 = (x0 + (- _ctx.x1) + (_ctx.y1 * 0.995000));
   _ctx.x1 = x0;
   _ctx.y1 = y0;
   return y0;

end

function this.Util__ctx_type_4_init()
   local _ctx = {};
   _ctx.x = 0.000000;
   return _ctx;

end

function this.Util_smooth_init()
   return this.Util__ctx_type_4_init();
end

function this.Util_smooth(_ctx,input)
   _ctx.x = (_ctx.x + ((input + (- _ctx.x)) * 0.005000));
   return _ctx.x;

end

function this.Util__ctx_type_5_init()
   local _ctx = {};
   _ctx.x0 = 0.000000;
   return _ctx;

end

function this.Util_average2_init()
   return this.Util__ctx_type_5_init();
end

function this.Util_average2(_ctx,x1)
   local result = ((_ctx.x0 + x1) * 0.500000);
   _ctx.x0 = x1;
   return result;

end

function this.Util_cubic_clipper(x)
   if (x <= (-0.666667)) then
      return (-0.666667);

   else

      local _cond_20 = false;
      _cond_20 = (x >= 0.666667);
      if _cond_20 then
         return 0.666667;

      else

         return (x + ((-0.333333) * x * x * x));

      end

   end

end

local Util_pitchToRate_1024_c0 = {0.189842,0.191326,0.198689,0.219425,0.265677,0.356438,0.520651,0.801560,1.262758,1.996562,3.135544,4.868346,7.461279,11.287725,16.868007,24.923329,36.448518,52.809890,75.876604,108.196579,153.231618,215.671056,301.849428,420.301718,582.500346,803.831942,1104.890093,1513.184032,2065.394252,2810.346575,3812.929069,5159.245173,6963.386226};
local Util_pitchToRate_1024_c1 = {0.010913,0.010176,0.008334,0.004867,(-0.000939),(-0.010061),(-0.023820),(-0.044002),(-0.073002),(-0.114025),(-0.171341),(-0.250621),(-0.359381),(-0.507548),(-0.708208),(-0.978576),(-1.341250),(-1.825848),(-2.471123),(-3.327701),(-4.461631),(-5.958970),(-7.931709),(-10.525422),(-13.929139),(-18.388075),(-24.220033),(-31.836533),(-41.769999),(-54.708756),(-71.542010),(-93.417674),(-121.816648)};
local Util_pitchToRate_1024_c2 = {0.000356,0.000447,0.000562,0.000707,0.000889,0.001119,0.001407,0.001769,0.002225,0.002799,0.003520,0.004426,0.005567,0.007001,0.008805,0.011074,0.013927,0.017515,0.022028,0.027703,0.034841,0.043818,0.055108,0.069306,0.087163,0.109620,0.137864,0.173384,0.218056,0.274238,0.344895,0.433757,0.545514};
function this.Util_pitchToRate_1024(pitch)
   local index = this.clip(this.int((0.244094 * pitch)),0,31);
   return (Util_pitchToRate_1024_c0[index+1] + (pitch * (Util_pitchToRate_1024_c1[index+1] + (Util_pitchToRate_1024_c2[index+1] * pitch))));

end

local Util_pitchToRate_c0 = {0.000185,0.000187,0.000194,0.000214,0.000259,0.000348,0.000508,0.000783,0.001233,0.001950,0.003062,0.004754,0.007286,0.011023,0.016473,0.024339,0.035594,0.051572,0.074098,0.105661,0.149640,0.210616,0.294775,0.410451,0.568848,0.784992,1.078994,1.477719,2.016987,2.744479,3.723564,5.038325,6.800182};
local Util_pitchToRate_c1 = {0.000011,0.000010,0.000008,0.000005,(-0.000001),(-0.000010),(-0.000023),(-0.000043),(-0.000071),(-0.000111),(-0.000167),(-0.000245),(-0.000351),(-0.000496),(-0.000692),(-0.000956),(-0.001310),(-0.001783),(-0.002413),(-0.003250),(-0.004357),(-0.005819),(-0.007746),(-0.010279),(-0.013603),(-0.017957),(-0.023652),(-0.031090),(-0.040791),(-0.053427),(-0.069865),(-0.091228),(-0.118962)};
local Util_pitchToRate_c2 = {0.000000,0.000000,0.000001,0.000001,0.000001,0.000001,0.000001,0.000002,0.000002,0.000003,0.000003,0.000004,0.000005,0.000007,0.000009,0.000011,0.000014,0.000017,0.000022,0.000027,0.000034,0.000043,0.000054,0.000068,0.000085,0.000107,0.000135,0.000169,0.000213,0.000268,0.000337,0.000424,0.000533};
function this.Util_pitchToRate(pitch)
   local index = this.clip(this.int((0.244094 * pitch)),0,31);
   return (Util_pitchToRate_c0[index+1] + (pitch * (Util_pitchToRate_c1[index+1] + (Util_pitchToRate_c2[index+1] * pitch))));

end

function this.Util_cvToPitch(cv)
   return ((cv * 120.000000) + 24.000000);

end

local Util_cvToRate_1024_c0 = {0.759367,0.762877,0.779737,0.825652,0.924648,1.112398,1.440687,1.983392,2.844434,4.168311,6.153994,9.073195,13.294298,19.313614,27.796102,39.628263,55.986716,78.426878,108.997433,150.387804,206.117798,280.781091,380.357333,512.611648,687.605268,918.347360,1221.626080,1619.066843,2138.478452,2815.563557,3696.089822,4838.643251,6318.116516};
local Util_cvToRate_1024_c1 = {5.245583,4.998943,4.403089,3.319116,1.564497,(-1.099256),(-4.982226),(-10.485864),(-18.127956),(-28.574102),(-42.677365),(-61.528130),(-86.516746),(-119.412143),(-162.460392),(-218.508148),(-291.157147),(-384.957361),(-505.648347),(-660.460542),(-858.491160),(-1111.172835),(-1432.857517),(-1841.543534),(-2359.780392),(-3015.794142),(-3844.886359),(-4891.172353),(-6209.739876),(-7869.328765),(-9955.655805),(-12575.538397),(-15862.006882)};
local Util_cvToRate_1024_c2 = {20.125592,24.457572,29.722000,36.119582,43.894227,53.342343,64.824142,78.777368,95.733988,116.340476,141.382456,171.814657,208.797308,253.740378,308.357324,374.730424,455.390158,553.411688,672.532093,817.292850,993.212978,1206.999450,1466.802895,1782.528345,2166.212866,2632.484466,3199.119798,3887.721889,4724.543762,5741.489334,6977.329755,8479.181564,10304.303011};
function this.Util_cvToRate_1024(cv)
   local index = this.clip(this.int((34.444444 * cv)),0,31);
   return (Util_cvToRate_1024_c0[index+1] + (cv * (Util_cvToRate_1024_c1[index+1] + (Util_cvToRate_1024_c2[index+1] * cv))));

end

local Util_cvToRate_c0 = {0.000742,0.000742,0.000742,0.000742,0.000743,0.000744,0.000747,0.000749,0.000754,0.000759,0.000766,0.000775,0.000786,0.000800,0.000816,0.000836,0.000860,0.000889,0.000922,0.000961,0.001007,0.001060,0.001120,0.001190,0.001270,0.001360,0.001463,0.001580,0.001712,0.001860,0.002027,0.002214,0.002423,0.002657,0.002917,0.003207,0.003528,0.003885,0.004280,0.004717,0.005200,0.005732,0.006319,0.006964,0.007674,0.008453,0.009308,0.010245,0.011272,0.012395,0.013622,0.014963,0.016427,0.018023,0.019763,0.021659,0.023722,0.025966,0.028405,0.031056,0.033934,0.037057,0.040444,0.044117,0.048096,0.052405,0.057070,0.062118,0.067577,0.073479,0.079856,0.086744,0.094181,0.102209,0.110870,0.120210,0.130281,0.141134,0.152828,0.165422,0.178982,0.193578,0.209283,0.226178,0.244346,0.263878,0.284871,0.307428,0.331660,0.357683,0.385623,0.415614,0.447799,0.482330,0.519370,0.559091,0.601678,0.647329,0.696253,0.748675,0.804832,0.864979,0.929386,0.998343,1.072156,1.151153,1.235683,1.326117,1.422851,1.526306,1.636930,1.755200,1.881624,2.016743,2.161133,2.315406,2.480212,2.656246,2.844245,3.044993,3.259324,3.488126,3.732342,3.992976,4.271094,4.567832,4.884395,5.222065,5.582204};
local Util_cvToRate_c1 = {0.005139,0.005126,0.005099,0.005057,0.004997,0.004920,0.004821,0.004701,0.004557,0.004386,0.004187,0.003958,0.003695,0.003395,0.003057,0.002677,0.002250,0.001775,0.001246,0.000661,0.000013,(-0.000701),(-0.001486),(-0.002347),(-0.003291),(-0.004324),(-0.005451),(-0.006681),(-0.008019),(-0.009475),(-0.011056),(-0.012771),(-0.014630),(-0.016643),(-0.018820),(-0.021173),(-0.023715),(-0.026457),(-0.029414),(-0.032601),(-0.036033),(-0.039726),(-0.043698),(-0.047968),(-0.052555),(-0.057481),(-0.062767),(-0.068439),(-0.074520),(-0.081038),(-0.088022),(-0.095500),(-0.103507),(-0.112074),(-0.121240),(-0.131041),(-0.141519),(-0.152717),(-0.164680),(-0.177457),(-0.191100),(-0.205662),(-0.221203),(-0.237783),(-0.255468),(-0.274326),(-0.294430),(-0.315858),(-0.338692),(-0.363020),(-0.388932),(-0.416527),(-0.445908),(-0.477186),(-0.510475),(-0.545899),(-0.583588),(-0.623681),(-0.666322),(-0.711667),(-0.759879),(-0.811132),(-0.865609),(-0.923505),(-0.985024),(-1.050385),(-1.119817),(-1.193565),(-1.271886),(-1.355053),(-1.443355),(-1.537097),(-1.636603),(-1.742213),(-1.854291),(-1.973218),(-2.099400),(-2.233263),(-2.375261),(-2.525872),(-2.685603),(-2.854988),(-3.034594),(-3.225018),(-3.426895),(-3.640891),(-3.867716),(-4.108116),(-4.362881),(-4.632847),(-4.918896),(-5.221962),(-5.543032),(-5.883146),(-6.243407),(-6.624979),(-7.029092),(-7.457046),(-7.910214),(-8.390047),(-8.898078),(-9.435927),(-10.005306),(-10.608022),(-11.245984),(-11.921211),(-12.635832),(-13.392100),(-14.192391)};
local Util_cvToRate_c2 = {0.018255,0.019167,0.020124,0.021129,0.022184,0.023292,0.024455,0.025677,0.026959,0.028306,0.029719,0.031204,0.032762,0.034398,0.036116,0.037920,0.039814,0.041802,0.043890,0.046082,0.048384,0.050800,0.053338,0.056001,0.058798,0.061735,0.064818,0.068056,0.071455,0.075023,0.078770,0.082704,0.086835,0.091172,0.095725,0.100506,0.105526,0.110796,0.116330,0.122140,0.128240,0.134645,0.141370,0.148430,0.155843,0.163627,0.171799,0.180379,0.189388,0.198847,0.208778,0.219206,0.230154,0.241649,0.253717,0.266389,0.279694,0.293663,0.308329,0.323729,0.339897,0.356873,0.374697,0.393410,0.413059,0.433689,0.455349,0.478091,0.501969,0.527039,0.553362,0.580999,0.610016,0.640483,0.672471,0.706057,0.741321,0.778345,0.817219,0.858034,0.900888,0.945882,0.993123,1.042724,1.094802,1.149481,1.206890,1.267168,1.330455,1.396903,1.466670,1.539922,1.616832,1.697583,1.782367,1.871386,1.964851,2.062983,2.166017,2.274197,2.387780,2.507035,2.632247,2.763712,2.901743,3.046668,3.198831,3.358594,3.526336,3.702455,3.887371,4.081522,4.285370,4.499399,4.724117,4.960059,5.207785,5.467883,5.740971,6.027699,6.328746,6.644830,6.976700,7.325145,7.690992,8.075112,8.478416,8.901863,9.346458};
function this.Util_cvToRate(cv)
   local index = this.clip(this.int((141.111111 * cv)),0,127);
   return (Util_cvToRate_c0[index+1] + (cv * (Util_cvToRate_c1[index+1] + (Util_cvToRate_c2[index+1] * cv))));

end

function this.Util_pitchToCv(pitch)
   return (0.008333 * ((-24.000000) + pitch));

end

local Util_cvToperiod_c0 = {674.246035,671.553838,662.761782,646.759522,623.799428,594.871802,561.298277,524.476942,485.731369,446.229382,406.947440,368.663774,331.968683,297.284156,264.887666,234.936857,207.493124,182.543016,160.016907,139.804832,121.769557,105.757117,91.605116,79.149088,68.227249,58.683895,50.371734,43.153355,36.902033,31.502025,26.848494,22.847166,19.413794};
local Util_cvToperiod_c1 = {(-4656.656311),(-4481.960579),(-4198.686133),(-3855.751543),(-3487.139455),(-3115.858821),(-2756.930319),(-2419.625141),(-2109.134753),(-1827.808334),(-1576.062963),(-1353.047092),(-1157.118864),(-986.186250),(-837.944665),(-710.039113),(-600.171234),(-506.166566),(-426.013463),(-357.882151),(-300.130190),(-251.298904),(-210.104105),(-175.423450),(-146.282114),(-121.837895),(-101.366537),(-84.247726),(-69.952082),(-58.029259),(-48.097248),(-39.832833),(-32.963186)};
local Util_cvToperiod_c2 = {14548.823162,11715.369522,9433.744675,7596.477297,6117.026622,4925.706117,3966.401040,3193.925264,2571.892879,2071.004308,1667.666208,1342.880152,1081.347751,870.750049,701.167268,564.611553,454.650724,366.105298,294.804521,237.389916,191.157082,153.928316,123.950032,99.810164,80.371652,64.718885,52.114569,41.965005,33.792117,27.210939,21.911477,17.644111,14.207835};
function this.Util_cvToperiod(cv)
   local index = this.clip(this.int((31.000000 * cv)),0,31);
   return (Util_cvToperiod_c0[index+1] + (cv * (Util_cvToperiod_c1[index+1] + (Util_cvToperiod_c2[index+1] * cv))));

end

local Util_cvTokHz_c0 = {0.032703,0.032916,0.033958,0.036857,0.043242,0.055616,0.077724,0.115069,0.175614,0.270739,0.416537,0.635567,0.959207,1.430818,2.109960,3.078021,4.445697,6.362909,9.031922,12.724677,17.805619,24.761735,34.241990,47.109042,64.506928,87.949557,119.436234,161.602273,217.915148,292.929619,392.619240,524.806645,699.721497};
local Util_cvTokHz_c1 = {0.225719,0.212293,0.179169,0.117605,0.015780,(-0.142178),(-0.377466),(-0.718250),(-1.201797),(-1.877228),(-2.809077),(-4.081867),(-5.806008),(-8.125373),(-11.227028),(-15.353705),(-20.819795),(-28.031798),(-37.514503),(-49.944414),(-66.192449),(-87.378404),(-114.940396),(-150.723337),(-197.091584),(-257.072284),(-334.537674),(-434.436788),(-563.089817),(-728.561858),(-941.137258),(-1213.921328),(-1563.603302)};
local Util_cvTokHz_c2 = {0.876338,1.088287,1.351498,1.678368,2.084294,2.588397,3.214421,3.991854,4.957315,6.156280,7.645225,9.494282,11.790549,14.642185,18.183512,22.581336,28.042809,34.825181,43.247923,53.707771,66.697415,82.828706,102.861476,127.739327,158.634081,197.000973,244.647198,303.817033,377.297556,468.549918,581.872376,722.602756,897.369877};
function this.Util_cvTokHz(cv)
   local index = this.clip(this.int((31.000000 * cv)),0,31);
   return (Util_cvTokHz_c0[index+1] + (cv * (Util_cvTokHz_c1[index+1] + (Util_cvTokHz_c2[index+1] * cv))));

end

function this.Phase__ctx_type_0_init()
   local _ctx = {};
   _ctx.rate = 0.000000;
   _ctx.phase = 0.000000;
   _ctx._inst25 = this.Util__ctx_type_0_init();
   _ctx._inst23 = this.Util__ctx_type_1_init();
   this.Phase_default(_ctx);
   return _ctx;

end

function this.Phase_process_init()
   return this.Phase__ctx_type_0_init();
end

function this.Phase_process(_ctx,cv,reset)
   if this.Util_change(_ctx._inst23,cv) then
      _ctx.rate = this.Util_cvToRate_1024(cv);

   end
   if this.Util_edge(_ctx._inst25,(reset > 0.500000)) then
      _ctx.phase = 0.000000;
   else

      _ctx.phase = (_ctx.phase + _ctx.rate);
   end
   if (_ctx.phase > 1024.000000) then
      _ctx.phase = (_ctx.phase + (-1024.000000));
   end
   return (_ctx.phase * 0.000977);

end

function this.Phase_noteOn_init()
   return this.Phase__ctx_type_0_init();
end

function this.Phase_noteOn(_ctx,note,velocity,channel)

end

function this.Phase_noteOff_init()
   return this.Phase__ctx_type_0_init();
end

function this.Phase_noteOff(_ctx,note,channel)

end

function this.Phase_controlChange_init()
   return this.Phase__ctx_type_0_init();
end

function this.Phase_controlChange(_ctx,control,value,channel)

end

function this.Phase_default_init()
   return this.Phase__ctx_type_0_init();
end

function this.Phase_default(_ctx)
   _ctx.rate = 0.759367;

end


function this.process(ctx,cv,reset) return this.Phase_process(ctx,cv,reset) end
function this.noteOn(ctx,note,velocity,channel) return this.Phase_noteOn(ctx,note,velocity,channel) end
function this.noteOff(ctx,note,channel) return this.Phase_noteOff(ctx,note,channel) end
function this.controlChange(ctx,control,value,channel) return this.Phase_controlChange(ctx,control,value,channel) end
function this.init() return this.Phase_process_init() end
function this.default(ctx) return this.Phase_default(ctx) end
this.config = { inputs = 3, outputs = 1, noteon_inputs = 4, noteoff_inputs = 3, controlchange_inputs = 4, is_active = true }
return this
