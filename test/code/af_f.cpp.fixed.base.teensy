
#include "af_f.h"

void Af_f__ctx_type_0_init(Af_f__ctx_type_0 &_output_){
   Af_f__ctx_type_0 _ctx;
   _ctx.x = 0;
   _output_ = _ctx;
   return ;
}

void Af_f_process_init(Af_f__ctx_type_0 &_output_){
   Af_f__ctx_type_0_init(_output_);
   return ;
}

fix16_t Af_f_process(Af_f__ctx_type_0 &_ctx, fix16_t input){
   _ctx.x = (_ctx.x + 1);
   return fix_mul(input,input);
}

void Af_f_noteOn_init(Af_f__ctx_type_0 &_output_){
   Af_f__ctx_type_0_init(_output_);
   return ;
}

void Af_f_noteOn(Af_f__ctx_type_0 &_ctx, int note, int velocity, int channel){
}

void Af_f_noteOff_init(Af_f__ctx_type_0 &_output_){
   Af_f__ctx_type_0_init(_output_);
   return ;
}

void Af_f_noteOff(Af_f__ctx_type_0 &_ctx, int note, int channel){
}

void Af_f_controlChange_init(Af_f__ctx_type_0 &_output_){
   Af_f__ctx_type_0_init(_output_);
   return ;
}

void Af_f_controlChange(Af_f__ctx_type_0 &_ctx, int control, int value, int channel){
}

void Af_f_default_init(Af_f__ctx_type_0 &_output_){
   Af_f__ctx_type_0_init(_output_);
   return ;
}

void Af_f_default(Af_f__ctx_type_0 &_ctx){
}



void af_f::update(void)
{


   audio_block_t * block0 = receiveWritable(0); if(!block0) return;

   for(int i = 0; i < AUDIO_BLOCK_SAMPLES; i++) { 

      fix16_t in0 = short_to_fix(block0->data[i]);
      fix16_t out;
      out = Af_f_process(data);
block0->data[i] = fix_to_short(out); 
   }


   transmit(block0, 0);

   release(block0);
}

