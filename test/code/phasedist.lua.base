
local this = {}
local ffi = require("ffi")
function this.ternary(cond,then_,else_) if cond then return then_ else return else_ end end
function this.eps()             return 1e-18; end
function this.random()          return math.random(); end
function this.irandom()         return math.floor(math.random() * 4294967296); end
function this.clip(x,low,high)  return (this.ternary(x<low,low,this.ternary(x>high,high,x))); end
function this.real(x)           return x; end
function this.int(x)            local int_part,_ = math.modf(x) return int_part; end
function this.sin(x)            return math.sin(x); end
function this.cos(x)            return math.cos(x); end
function this.abs(x)            return math.abs(x); end
function this.exp(x)            return math.exp(x); end
function this.floor(x)          return math.floor(x); end
function this.tan(x)            return math.tan(x); end
function this.tanh(x)           return math.tanh(x); end
function this.sqrt(x)           return x; end
function this.set(a,i,v)        a[i+1]=v; end
function this.get(a,i)          return a[i+1]; end
function this.makeArray(size,v) local a = {}; for i=1,size do a[i]=v end return a; end
function this.wrap_array(a)     return a; end
function this.Phasedist__ctx_type_0_init()
   local _ctx = {};
   _ctx.x = 0.000000;
   return _ctx;

end

function this.Phasedist_smooth_init()
   return this.Phasedist__ctx_type_0_init();
end

function this.Phasedist_smooth(_ctx,input)
   _ctx.x = (_ctx.x + ((input + (- _ctx.x)) * 0.005000));
   return _ctx.x;

end

function this.Phasedist__ctx_type_1_init()
   local _ctx = {};
   _ctx.pre_x = 0.000000;
   return _ctx;

end

function this.Phasedist_change_init()
   return this.Phasedist__ctx_type_1_init();
end

function this.Phasedist_change(_ctx,x)
   local v = (_ctx.pre_x ~= x);
   _ctx.pre_x = x;
   return v;

end

function this.Phasedist_pitchToRate(d)
   return (0.000185 * this.exp((0.057762 * d)));

end

function this.Phasedist__ctx_type_3_init()
   local _ctx = {};
   _ctx.rate = 0.000000;
   _ctx.phase = 0.000000;
   _ctx._inst4 = this.Phasedist__ctx_type_1_init();
   return _ctx;

end

function this.Phasedist_phasor_init()
   return this.Phasedist__ctx_type_3_init();
end

function this.Phasedist_phasor(_ctx,pitch,reset)
   if this.Phasedist_change(_ctx._inst4,pitch) then
      _ctx.rate = this.Phasedist_pitchToRate(pitch);

   end
   if reset then
      _ctx.phase = 0.000000;
   end
   if (_ctx.phase > 1.000000) then
      _ctx.phase = (_ctx.phase + (-1.000000));
   end
   return _ctx.phase;

end

function this.Phasedist__ctx_type_4_init()
   local _ctx = {};
   _ctx.volume = 0.000000;
   _ctx.pre_phase1 = 0.000000;
   _ctx.pitch = 0.000000;
   _ctx.detune = 0.000000;
   _ctx._inst9 = this.Phasedist__ctx_type_3_init();
   _ctx._inst8 = this.Phasedist__ctx_type_0_init();
   _ctx._inst7 = this.Phasedist__ctx_type_3_init();
   _ctx._inst10 = this.Phasedist__ctx_type_0_init();
   return _ctx;

end

function this.Phasedist_process_init()
   return this.Phasedist__ctx_type_4_init();
end

function this.Phasedist_process(_ctx,input)
   local phase1 = this.Phasedist_phasor(_ctx._inst7,_ctx.pitch,false);
   local comp = (1.000000 + (- phase1));
   local reset = ((_ctx.pre_phase1 + (- phase1)) > 0.500000);
   _ctx.pre_phase1 = phase1;
   local phase2 = this.Phasedist_phasor(_ctx._inst9,(_ctx.pitch + (this.Phasedist_smooth(_ctx._inst8,_ctx.detune) * 32.000000)),reset);
   local sine = this.sin((6.283185 * phase2));
   return (this.Phasedist_smooth(_ctx._inst10,_ctx.volume) * sine * comp);

end

function this.Phasedist_noteOn_init()
   return this.Phasedist__ctx_type_4_init();
end

function this.Phasedist_noteOn(_ctx,note,velocity,channel)
   _ctx.pitch = this.real(note);

end

function this.Phasedist_noteOff_init()
   return this.Phasedist__ctx_type_4_init();
end

function this.Phasedist_noteOff(_ctx,note,channel)

end

function this.Phasedist_controlChange_init()
   return this.Phasedist__ctx_type_4_init();
end

function this.Phasedist_controlChange(_ctx,control,value,channel)
   if (control == 30) then
      _ctx.volume = (this.real(value) * 0.007874);

   end
   if (control == 31) then
      _ctx.detune = (this.real(value) * 0.007874);

   end

end

function this.Phasedist_default_init()
   return this.Phasedist__ctx_type_4_init();
end

function this.Phasedist_default(_ctx)
   _ctx.volume = 1.000000;
   _ctx.pitch = 45.000000;
   _ctx.detune = 0.000000;

end


function this.process(ctx,in0) return this.Phasedist_process(ctx,in0) end
function this.noteOn(ctx,in0,in1,in2) return this.Phasedist_noteOn(ctx,in0,in1,in2) end
function this.noteOff(ctx,in0,in1) return this.Phasedist_noteOff(ctx,in0,in1) end
function this.controlChange(ctx,in0,in1,in2) return this.Phasedist_controlChange(ctx,in0,in1,in2) end
function this.init() return this.Phasedist_process_init() end
function this.default(ctx) return this.Phasedist_default(ctx) end
this.config = { inputs = 2, outputs = 1, noteon_inputs = 4, noteoff_inputs = 3, controlchange_inputs = 4, is_active = true }
return this
