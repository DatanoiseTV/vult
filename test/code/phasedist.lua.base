

function ternary(cond,then_,else_) if cond then return then_() else return else_() end end
function ternary_value(cond,then_,else_) if cond then return then_ else return else_ end end
function eps()              return 1e-18; end
function pi()               return 3.1415926535897932384; end
function random()           return math.random(); end
function irandom()          return math.floor(math.random() * 4294967296); end
function clip(x,low,high)   if x < low then return low else if x > high then return high else return x end end end
function real(x)            return x; end
function int(x)             local int_part,_ = math.modf(x) return int_part; end
function sin(x)             return math.sin(x); end
function cos(x)             return math.cos(x); end
function abs(x)             return math.abs(x); end
function exp(x)             return math.exp(x); end
function floor(x)           return math.floor(x); end
function tan(x)             return math.tan(x); end
function tanh(x)            return math.tanh(x); end
function sqrt(x)            return x; end
function set(a, i, v)       a[i+1]=v; end
function get(a, i)          return a[i+1]; end
function makeArray(size, v) local a = {}; for i=1,size do a[i]=v end return a; end
function wrap_array(a)      return a; end

function Phasedist__ctx_type_0_init()
   local _ctx = {};
   _ctx.x = 0.;
   return _ctx;

end

function Phasedist_smooth_init()
   return Phasedist__ctx_type_0_init();
end

function Phasedist_smooth(_ctx,input)
   _ctx.x = (_ctx.x + (0.005 * (input + (- _ctx.x))));
   return _ctx.x;

end

function Phasedist__ctx_type_1_init()
   local _ctx = {};
   _ctx.pre_x = 0.;
   return _ctx;

end

function Phasedist_change_init()
   return Phasedist__ctx_type_1_init();
end

function Phasedist_change(_ctx,x)
   local v = (_ctx.pre_x ~= x);
   _ctx.pre_x = x;
   return v;

end

function Phasedist_pitchToRate(d)
   return (0.0001854 * exp((0.0577623 * d)));
end

function Phasedist__ctx_type_3_init()
   local _ctx = {};
   _ctx.rate = 0.;
   _ctx.phase = 0.;
   _ctx._inst11a = Phasedist__ctx_type_1_init();
   return _ctx;

end

function Phasedist_phasor_init()
   return Phasedist__ctx_type_3_init();
end

function Phasedist_phasor(_ctx,pitch,reset)
   if Phasedist_change(_ctx._inst11a,pitch) then
      _ctx.rate = Phasedist_pitchToRate(pitch);
   end
   if reset then
      _ctx.phase = 0.;
   else

      _ctx.phase = (_ctx.phase + _ctx.rate);
   end
   if (_ctx.phase > 1.) then
      _ctx.phase = ((-1.) + _ctx.phase);
   end
   return _ctx.phase;

end

function Phasedist__ctx_type_4_init()
   local _ctx = {};
   _ctx.volume = 0.;
   _ctx.pre_phase1 = 0.;
   _ctx.pitch = 0.;
   _ctx.detune = 0.;
   _ctx._inst4b6 = Phasedist__ctx_type_0_init();
   _ctx._inst339 = Phasedist__ctx_type_3_init();
   _ctx._inst2b6 = Phasedist__ctx_type_0_init();
   _ctx._inst139 = Phasedist__ctx_type_3_init();
   return _ctx;

end

function Phasedist_process_init()
   return Phasedist__ctx_type_4_init();
end

function Phasedist_process(_ctx,input)
   local phase1 = Phasedist_phasor(_ctx._inst139,_ctx.pitch,false);
   local comp = (1. + (- phase1));
   local reset = ((_ctx.pre_phase1 + (- phase1)) > 0.5);
   _ctx.pre_phase1 = phase1;
   local phase2 = Phasedist_phasor(_ctx._inst339,(_ctx.pitch + (32. * Phasedist_smooth(_ctx._inst2b6,_ctx.detune))),reset);
   local sine = sin((6.2831854 * phase2));
   return (comp * sine * Phasedist_smooth(_ctx._inst4b6,_ctx.volume));

end

function Phasedist_noteOn_init()
   return Phasedist__ctx_type_4_init();
end

function Phasedist_noteOn(_ctx,note,velocity,channel)
   _ctx.pitch = real(note);
end

function Phasedist_noteOff_init()
   return Phasedist__ctx_type_4_init();
end

function Phasedist_noteOff(_ctx,note,channel)

end

function Phasedist_controlChange_init()
   return Phasedist__ctx_type_4_init();
end

function Phasedist_controlChange(_ctx,control,value,channel)
   if (control == 30) then
      _ctx.volume = (0.0078741 * real(value));
   end
   if (control == 31) then
      _ctx.detune = (0.0078741 * real(value));
   end

end

function Phasedist_default_init()
   return Phasedist__ctx_type_4_init();
end

function Phasedist_default(_ctx)
   _ctx.volume = 1.;
   _ctx.pitch = 45.;
   _ctx.detune = 0.;

end


function process(ctx,input) return Phasedist_process(ctx,input) end
function noteOn(ctx,note,velocity,channel) return Phasedist_noteOn(ctx,note,velocity,channel) end
function noteOff(ctx,note,channel) return Phasedist_noteOff(ctx,note,channel) end
function controlChange(ctx,control,value,channel) return Phasedist_controlChange(ctx,control,value,channel) end
function init() return Phasedist_process_init() end
function default(ctx) return Phasedist_default(ctx) end
config = { inputs = 2, outputs = 1, noteon_inputs = 4, noteoff_inputs = 3, controlchange_inputs = 4, is_active = true }
