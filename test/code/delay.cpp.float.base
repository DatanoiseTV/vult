
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#include "delay.h"

void Delay__ctx_type_5_init(Delay__ctx_type_5 &_output_){
   Delay__ctx_type_5 _ctx;
   _ctx.rate = 0.0f;
   _ctx.phase = 0.0f;
   Delay__ctx_type_1_init(_ctx._inst113);
   _output_ = _ctx;
   return ;
}

float Delay_phasor(Delay__ctx_type_5 &_ctx, float pitch, uint8_t reset){
   if(Delay_change(_ctx._inst113,pitch)){
      _ctx.rate = Delay_pitchToRate(pitch);
   }
   if(reset){
      _ctx.phase = 0.0f;
   }
   else
   {
      _ctx.phase = fmodf((_ctx.phase + _ctx.rate),1.f);
   }
   return _ctx.phase;
}

void Delay__ctx_type_6_init(Delay__ctx_type_6 &_output_){
   Delay__ctx_type_6 _ctx;
   _ctx.phase = 0.0f;
   Delay__ctx_type_2_init(_ctx._inst162);
   _output_ = _ctx;
   return ;
}

float Delay_lfo(Delay__ctx_type_6 &_ctx, float f, uint8_t gate){
   float rate;
   rate = (0.0002268f * f);
   if(Delay_edge(_ctx._inst162,gate)){
      _ctx.phase = 0.0f;
   }
   _ctx.phase = (_ctx.phase + rate);
   if(_ctx.phase > 1.f){
      _ctx.phase = (-1.f + _ctx.phase);
   }
   return (-0.5f + sinf((6.2831854f * _ctx.phase)));
}

void Delay__ctx_type_7_init(Delay__ctx_type_7 &_output_){
   Delay__ctx_type_7 _ctx;
   _ctx.pre_phase1 = 0.0f;
   Delay__ctx_type_5_init(_ctx._inst3125);
   Delay__ctx_type_0_init(_ctx._inst2149);
   Delay__ctx_type_5_init(_ctx._inst1125);
   _output_ = _ctx;
   return ;
}

float Delay_phd_osc(Delay__ctx_type_7 &_ctx, float pitch, float detune){
   float phase1;
   phase1 = Delay_phasor(_ctx._inst1125,pitch,false);
   float comp;
   comp = (1.f + (- phase1));
   uint8_t reset;
   reset = ((_ctx.pre_phase1 + (- phase1)) > 0.5f);
   _ctx.pre_phase1 = phase1;
   float phase2;
   phase2 = Delay_phasor(_ctx._inst3125,(pitch + (32.f * Delay_smooth(_ctx._inst2149,detune))),reset);
   float sine;
   sine = sinf((6.2831854f * phase2));
   return (comp * sine);
}

void Delay__ctx_type_8_init(Delay__ctx_type_8 &_output_){
   Delay__ctx_type_8 _ctx;
   _ctx.write_pos = 0;
   ;
   _output_ = _ctx;
   return ;
}

float Delay_delay(Delay__ctx_type_8 &_ctx, float x, float time, float feedback){
   time = float_clip(time,0.0f,1.f);
   feedback = float_clip(feedback,0.0f,1.f);
   float index_r;
   index_r = (30000.f * time);
   int index_i;
   index_i = float_to_int(floorf(index_r));
   int delta;
   delta = (_ctx.write_pos + (- index_i));
   int read_pos;
   if(delta < 0){
      read_pos = (30000 + delta);
   }
   else
   {
      read_pos = delta;
   }
   float decimal;
   decimal = (index_r + (- int_to_float(index_i)));
   float x1;
   x1 = float_get(_ctx.buffer,read_pos);
   float x2;
   x2 = float_get(_ctx.buffer,((1 + read_pos) % 30000));
   float ret;
   ret = (x1 + (decimal * (x2 + (- x1))));
   _ctx.write_pos = ((1 + _ctx.write_pos) % 30000);
   float_set(_ctx.buffer,_ctx.write_pos,float_clip((x + (feedback * ret)),-1.f,1.f));
   return ret;
}

void Delay__ctx_type_9_init(Delay__ctx_type_9 &_output_){
   Delay__ctx_type_9 _ctx;
   _ctx.pre = 0;
   int_init_array(4,0,_ctx.notes);
   _ctx.count = 0;
   _output_ = _ctx;
   return ;
}

int Delay_mono_noteOn(Delay__ctx_type_9 &_ctx, int n){
   if(_ctx.count < 4){
      int_set(_ctx.notes,_ctx.count,n);
      _ctx.pre = n;
      if(_ctx.count < 4){
         _ctx.count = (1 + _ctx.count);
      }
   }
   return _ctx.pre;
}

int Delay_mono_noteOff(Delay__ctx_type_9 &_ctx, int n){
   uint8_t found;
   found = false;
   int pos;
   int i;
   i = 0;
   if(_ctx.count == 0){
      return _ctx.pre;
   }
   while((i < 4) && bool_not(found)){
      if(int_get(_ctx.notes,i) == n){
         pos = i;
         found = true;
      }
      i = (1 + i);
   }
   if(found){
      int k;
      k = (1 + pos);
      while(k < 4){
         int_set(_ctx.notes,((-1) + k),int_get(_ctx.notes,k));
         k = (1 + k);
      }
      if(found && (_ctx.count > 0)){
         _ctx.count = ((-1) + _ctx.count);
         _ctx.pre = int_get(_ctx.notes,((-1) + _ctx.count));
      }
   }
   return _ctx.pre;
}

void Delay__ctx_type_10_init(Delay__ctx_type_10 &_output_){
   Delay__ctx_type_10 _ctx;
   _ctx.volume = 0.0f;
   _ctx.time = 0.0f;
   _ctx.pitch = 0.0f;
   Delay__ctx_type_9_init(_ctx.notes);
   _ctx.lfo_rate = 0.0f;
   _ctx.lfo_amt = 0.0f;
   _ctx.feedback = 0.0f;
   _ctx.detune = 0.0f;
   Delay__ctx_type_8_init(_ctx._inst6134);
   Delay__ctx_type_0_init(_ctx._inst5149);
   Delay__ctx_type_0_init(_ctx._inst4149);
   Delay__ctx_type_0_init(_ctx._inst3149);
   Delay__ctx_type_7_init(_ctx._inst2186);
   Delay__ctx_type_6_init(_ctx._inst194);
   _output_ = _ctx;
   return ;
}

float Delay_process(Delay__ctx_type_10 &_ctx, float input){
   uint8_t gate;
   gate = Delay_mono_isGateOn(_ctx.notes);
   float lfo_val;
   lfo_val = (_ctx.lfo_amt * Delay_lfo(_ctx._inst194,_ctx.lfo_rate,gate));
   float o1;
   o1 = Delay_phd_osc(_ctx._inst2186,_ctx.pitch,(_ctx.detune + lfo_val));
   float amp;
   float _if_7;
   if(gate){
      _if_7 = 1.f;
   }
   else
   {
      _if_7 = 0.0f;
   }
   amp = Delay_smooth(_ctx._inst3149,_if_7);
   float osc_out;
   osc_out = (amp * o1);
   float delay_out;
   delay_out = Delay_delay(_ctx._inst6134,osc_out,Delay_smooth(_ctx._inst4149,_ctx.time),Delay_smooth(_ctx._inst5149,_ctx.feedback));
   return (0.5f * _ctx.volume * (delay_out + osc_out));
}

void Delay_controlChange(Delay__ctx_type_10 &_ctx, int control, float value, int channel){
   if(control == 30){
      _ctx.volume = (0.0078741f * value);
   }
   if(control == 31){
      _ctx.detune = (0.0078741f * value);
   }
   if(control == 32){
      _ctx.lfo_rate = (0.0078741f * value);
   }
   if(control == 33){
      _ctx.lfo_amt = (2.f * (-0.5f + (0.0078741f * value)));
   }
   if(control == 34){
      _ctx.time = (0.0078741f * value);
   }
   if(control == 35){
      _ctx.feedback = (0.0078741f * value);
   }
}

void Delay_default(Delay__ctx_type_10 &_ctx){
   _ctx.volume = 1.f;
   _ctx.pitch = 45.f;
   _ctx.detune = 0.8f;
   _ctx.lfo_rate = 0.0700001f;
   _ctx.lfo_amt = -0.8f;
   _ctx.time = 0.5f;
   _ctx.feedback = 0.5f;
}


