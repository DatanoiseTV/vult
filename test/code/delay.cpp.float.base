
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#include "delay.h"

void Delay__ctx_type_0_init(Delay__ctx_type_0 &_output_){
   Delay__ctx_type_0 _ctx;
   _ctx.x = 0.0000f;
   _output_ = _ctx;
   return ;
}

void Delay_smooth_init(Delay__ctx_type_0 &_output_){
   Delay__ctx_type_0_init(_output_);
   return ;
}

float Delay_smooth(Delay__ctx_type_0 &_ctx, float input){
   _ctx.x = (_ctx.x + ((input + (- _ctx.x)) * 0.0050f));
   return _ctx.x;
}

void Delay__ctx_type_1_init(Delay__ctx_type_1 &_output_){
   Delay__ctx_type_1 _ctx;
   _ctx.pre_x = 0.0000f;
   _output_ = _ctx;
   return ;
}

void Delay_change_init(Delay__ctx_type_1 &_output_){
   Delay__ctx_type_1_init(_output_);
   return ;
}

uint8_t Delay_change(Delay__ctx_type_1 &_ctx, float x){
   uint8_t v;
   v = (_ctx.pre_x != x);
   _ctx.pre_x = x;
   return v;
}

void Delay__ctx_type_2_init(Delay__ctx_type_2 &_output_){
   Delay__ctx_type_2 _ctx;
   _ctx.pre_x = 0;
   _output_ = _ctx;
   return ;
}

void Delay_edge_init(Delay__ctx_type_2 &_output_){
   Delay__ctx_type_2_init(_output_);
   return ;
}

uint8_t Delay_edge(Delay__ctx_type_2 &_ctx, uint8_t x){
   uint8_t v;
   v = ((_ctx.pre_x != x) && (_ctx.pre_x == 0));
   _ctx.pre_x = x;
   return v;
}

void Delay__ctx_type_3_init(Delay__ctx_type_3 &_output_){
   Delay__ctx_type_3 _ctx;
   _ctx.count = 0;
   _output_ = _ctx;
   return ;
}

void Delay_each_init(Delay__ctx_type_3 &_output_){
   Delay__ctx_type_3_init(_output_);
   return ;
}

uint8_t Delay_each(Delay__ctx_type_3 &_ctx, int n){
   uint8_t ret;
   ret = (_ctx.count == 0);
   _ctx.count = ((_ctx.count + 1) % n);
   return ret;
}

float Delay_pitchToRate(float d){
   return (0.0002f * expf((0.0578f * d)));
}

void Delay__ctx_type_5_init(Delay__ctx_type_5 &_output_){
   Delay__ctx_type_5 _ctx;
   _ctx.rate = 0.0000f;
   _ctx.phase = 0.0000f;
   Delay__ctx_type_1_init(_ctx._inst6);
   _output_ = _ctx;
   return ;
}

void Delay_phasor_init(Delay__ctx_type_5 &_output_){
   Delay__ctx_type_5_init(_output_);
   return ;
}

float Delay_phasor(Delay__ctx_type_5 &_ctx, float pitch, uint8_t reset){
   uint8_t _cond_45;
   _cond_45 = Delay_change(_ctx._inst6,pitch);
   if(_cond_45){
      _ctx.rate = Delay_pitchToRate(pitch);
   }
   if(reset){ _ctx.phase = 0.0000f; }
   else
   { _ctx.phase = fmodf((_ctx.phase + _ctx.rate),1.0000f); }
   return _ctx.phase;
}

void Delay__ctx_type_6_init(Delay__ctx_type_6 &_output_){
   Delay__ctx_type_6 _ctx;
   _ctx.phase = 0.0000f;
   Delay__ctx_type_2_init(_ctx._inst9);
   _output_ = _ctx;
   return ;
}

void Delay_lfo_init(Delay__ctx_type_6 &_output_){
   Delay__ctx_type_6_init(_output_);
   return ;
}

float Delay_lfo(Delay__ctx_type_6 &_ctx, float f, uint8_t gate){
   float rate;
   rate = (0.0002f * f);
   uint8_t _cond_46;
   _cond_46 = Delay_edge(_ctx._inst9,gate);
   if(_cond_46){
      _ctx.phase = 0.0000f;
   }
   _ctx.phase = (_ctx.phase + rate);
   uint8_t _cond_47;
   _cond_47 = (_ctx.phase > 1.0000f);
   if(_cond_47){
      _ctx.phase = (_ctx.phase + (-1.0000f));
   }
   return (sinf((6.2832f * _ctx.phase)) + (-0.5000f));
}

void Delay__ctx_type_7_init(Delay__ctx_type_7 &_output_){
   Delay__ctx_type_7 _ctx;
   _ctx.pre_phase1 = 0.0000f;
   Delay__ctx_type_5_init(_ctx._inst15);
   Delay__ctx_type_0_init(_ctx._inst14);
   Delay__ctx_type_5_init(_ctx._inst13);
   _output_ = _ctx;
   return ;
}

void Delay_phd_osc_init(Delay__ctx_type_7 &_output_){
   Delay__ctx_type_7_init(_output_);
   return ;
}

float Delay_phd_osc(Delay__ctx_type_7 &_ctx, float pitch, float detune){
   float phase1;
   phase1 = Delay_phasor(_ctx._inst13,pitch,0);
   float comp;
   comp = (1.0000f + (- phase1));
   uint8_t reset;
   reset = ((_ctx.pre_phase1 + (- phase1)) > 0.5000f);
   _ctx.pre_phase1 = phase1;
   float phase2;
   phase2 = Delay_phasor(_ctx._inst15,(pitch + (Delay_smooth(_ctx._inst14,detune) * 32.0000f)),reset);
   float sine;
   sine = sinf((6.2832f * phase2));
   return (sine * comp);
}

void Delay__ctx_type_8_init(Delay__ctx_type_8 &_output_){
   Delay__ctx_type_8 _ctx;
   _ctx.write_pos = 0;
   float_init_array(30000,0.0000f,_ctx.buffer);
   _output_ = _ctx;
   return ;
}

void Delay_delay_init(Delay__ctx_type_8 &_output_){
   Delay__ctx_type_8_init(_output_);
   return ;
}

float Delay_delay(Delay__ctx_type_8 &_ctx, float x, float time, float feedback){
   time = float_clip(time,0.0000f,1.0000f);
   feedback = float_clip(feedback,0.0000f,1.0000f);
   float index_r;
   index_r = (30000.0000f * time);
   int index_i;
   index_i = float_to_int(floorf(index_r));
   int delta;
   delta = (_ctx.write_pos + (- index_i));
   int read_pos;
   uint8_t _cond_48;
   _cond_48 = (delta < 0);
   if(_cond_48){ read_pos = (30000 + delta); }
   else
   { read_pos = delta; }
   float decimal;
   decimal = (index_r + (- int_to_float(index_i)));
   float x1;
   x1 = float_get(_ctx.buffer,read_pos);
   float x2;
   x2 = float_get(_ctx.buffer,((read_pos + 1) % 30000));
   float ret;
   ret = (((x2 + (- x1)) * decimal) + x1);
   _ctx.write_pos = ((_ctx.write_pos + 1) % 30000);
   float_set(_ctx.buffer,_ctx.write_pos,float_clip((x + (feedback * ret)),(-1.0000f),1.0000f));
   return ret;
}

void Delay__ctx_type_9_init(Delay__ctx_type_9 &_output_){
   Delay__ctx_type_9 _ctx;
   _ctx.pre = 0;
   int_init_array(4,0,_ctx.notes);
   _ctx.count = 0;
   _output_ = _ctx;
   return ;
}

void Delay_mono_noteOn_init(Delay__ctx_type_9 &_output_){
   Delay__ctx_type_9_init(_output_);
   return ;
}

int Delay_mono_noteOn(Delay__ctx_type_9 &_ctx, int n){
   uint8_t _cond_50;
   _cond_50 = (_ctx.count < 4);
   if(_cond_50){
      int_set(_ctx.notes,_ctx.count,n);
      _ctx.pre = n;
      uint8_t _cond_49;
      _cond_49 = (_ctx.count < 4);
      if(_cond_49){
         _ctx.count = (_ctx.count + 1);
      }
   }
   return _ctx.pre;
}

void Delay_mono_noteOff_init(Delay__ctx_type_9 &_output_){
   Delay__ctx_type_9_init(_output_);
   return ;
}

int Delay_mono_noteOff(Delay__ctx_type_9 &_ctx, int n){
   uint8_t found;
   found = 0;
   int pos;
   int i;
   i = 0;
   uint8_t _cond_51;
   _cond_51 = (_ctx.count == 0);
   if(_cond_51){
      return _ctx.pre;
   }
   while((i < 4) && bool_not(found)){
      uint8_t _cond_52;
      _cond_52 = (int_get(_ctx.notes,i) == n);
      if(_cond_52){
         pos = i;
         found = 1;
      }
      i = (i + 1);
   }
   if(found){
      int k;
      k = (pos + 1);
      while(k < 4){
         int_set(_ctx.notes,(k + (-1)),int_get(_ctx.notes,k));
         k = (k + 1);
      }
      uint8_t _cond_53;
      _cond_53 = (found && (_ctx.count > 0));
      if(_cond_53){
         _ctx.count = (_ctx.count + (-1));
         _ctx.pre = int_get(_ctx.notes,(_ctx.count + (-1)));
      }
   }
   return _ctx.pre;
}

void Delay_mono_isGateOn_init(Delay__ctx_type_9 &_output_){
   Delay__ctx_type_9_init(_output_);
   return ;
}

uint8_t Delay_mono_isGateOn(Delay__ctx_type_9 &_ctx){
   return (_ctx.count > 0);
}

void Delay__ctx_type_10_init(Delay__ctx_type_10 &_output_){
   Delay__ctx_type_10 _ctx;
   _ctx.volume = 0.0000f;
   _ctx.time = 0.0000f;
   _ctx.pitch = 0.0000f;
   Delay__ctx_type_9_init(_ctx.notes);
   _ctx.lfo_rate = 0.0000f;
   _ctx.lfo_amt = 0.0000f;
   _ctx.feedback = 0.0000f;
   _ctx.detune = 0.0000f;
   Delay__ctx_type_8_init(_ctx._inst34);
   Delay__ctx_type_0_init(_ctx._inst33);
   Delay__ctx_type_0_init(_ctx._inst32);
   Delay__ctx_type_0_init(_ctx._inst31);
   Delay__ctx_type_7_init(_ctx._inst30);
   Delay__ctx_type_6_init(_ctx._inst29);
   _output_ = _ctx;
   return ;
}

void Delay_process_init(Delay__ctx_type_10 &_output_){
   Delay__ctx_type_10_init(_output_);
   return ;
}

float Delay_process(Delay__ctx_type_10 &_ctx, float input){
   uint8_t gate;
   gate = Delay_mono_isGateOn(_ctx.notes);
   float lfo_val;
   lfo_val = (Delay_lfo(_ctx._inst29,_ctx.lfo_rate,gate) * _ctx.lfo_amt);
   float o1;
   o1 = Delay_phd_osc(_ctx._inst30,_ctx.pitch,(_ctx.detune + lfo_val));
   float amp;
   float _if_54;
   if(gate){ _if_54 = 1.0000f; }
   else
   { _if_54 = 0.0000f; }
   amp = Delay_smooth(_ctx._inst31,_if_54);
   float osc_out;
   osc_out = (o1 * amp);
   float delay_out;
   delay_out = Delay_delay(_ctx._inst34,osc_out,Delay_smooth(_ctx._inst32,_ctx.time),Delay_smooth(_ctx._inst33,_ctx.feedback));
   return (_ctx.volume * (osc_out + delay_out) * 0.5000f);
}

void Delay_noteOn_init(Delay__ctx_type_10 &_output_){
   Delay__ctx_type_10_init(_output_);
   return ;
}

void Delay_noteOn(Delay__ctx_type_10 &_ctx, int note, int velocity, int channel){
   _ctx.pitch = int_to_float(Delay_mono_noteOn(_ctx.notes,note));
}

void Delay_noteOff_init(Delay__ctx_type_10 &_output_){
   Delay__ctx_type_10_init(_output_);
   return ;
}

void Delay_noteOff(Delay__ctx_type_10 &_ctx, int note, int channel){
   _ctx.pitch = int_to_float(Delay_mono_noteOff(_ctx.notes,note));
}

void Delay_controlChange_init(Delay__ctx_type_10 &_output_){
   Delay__ctx_type_10_init(_output_);
   return ;
}

void Delay_controlChange(Delay__ctx_type_10 &_ctx, int control, float value, int channel){
   uint8_t _cond_55;
   _cond_55 = (control == 30);
   if(_cond_55){
      _ctx.volume = (value * 0.0079f);
   }
   uint8_t _cond_56;
   _cond_56 = (control == 31);
   if(_cond_56){
      _ctx.detune = (value * 0.0079f);
   }
   uint8_t _cond_57;
   _cond_57 = (control == 32);
   if(_cond_57){
      _ctx.lfo_rate = (value * 0.0079f);
   }
   uint8_t _cond_58;
   _cond_58 = (control == 33);
   if(_cond_58){
      _ctx.lfo_amt = (2.0000f * ((value * 0.0079f) + (-0.5000f)));
   }
   uint8_t _cond_59;
   _cond_59 = (control == 34);
   if(_cond_59){
      _ctx.time = (value * 0.0079f);
   }
   uint8_t _cond_60;
   _cond_60 = (control == 35);
   if(_cond_60){
      _ctx.feedback = (value * 0.0079f);
   }
}

void Delay_default_init(Delay__ctx_type_10 &_output_){
   Delay__ctx_type_10_init(_output_);
   return ;
}

void Delay_default(Delay__ctx_type_10 &_ctx){
   _ctx.volume = 1.0000f;
   _ctx.pitch = 45.0000f;
   _ctx.detune = 0.8000f;
   _ctx.lfo_rate = 0.0700f;
   _ctx.lfo_amt = (-0.8000f);
   _ctx.time = 0.5000f;
   _ctx.feedback = 0.5000f;
}


