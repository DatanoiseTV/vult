
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#include "sin.h"

void Sin__ctx_type_0_init(Sin__ctx_type_0 &_output_){
   Sin__ctx_type_0 _ctx;
   _ctx.pre_x = 0x0 /* 0.000000 */;
   _output_ = _ctx;
   return ;
}

void Sin_change_init(Sin__ctx_type_0 &_output_){
   Sin__ctx_type_0_init(_output_);
   return ;
}

uint8_t Sin_change(Sin__ctx_type_0 &_ctx, fix16_t x){
   uint8_t v = (_ctx.pre_x != x);
   _ctx.pre_x = x;
   return v;
}

void Sin__ctx_type_1_init(Sin__ctx_type_1 &_output_){
   Sin__ctx_type_1 _ctx;
   _ctx.y2 = 0x0 /* 0.000000 */;
   _ctx.y1 = 0x0 /* 0.000000 */;
   _ctx.w = 0x0 /* 0.000000 */;
   _ctx.cos_w = 0x0 /* 0.000000 */;
   Sin__ctx_type_0_init(_ctx._inst1);
   Sin_sc_osc_start(_ctx);
   _output_ = _ctx;
   return ;
}

void Sin_sc_osc_init(Sin__ctx_type_1 &_output_){
   Sin__ctx_type_1_init(_output_);
   return ;
}

fix16_t Sin_sc_osc(Sin__ctx_type_1 &_ctx, fix16_t pitch){
   fix16_t g = 0x10000 /* 1.000000 */;
   uint8_t _cond_3 = Sin_change(_ctx._inst1,pitch);
   if(_cond_3){
      fix16_t pre_w = _ctx.w;
      _ctx.w = fix_mul(0x4c /* 0.001165 */,fix_exp(fix_mul(0xec9 /* 0.057762 */,pitch)));
      g = fix_div(fix_tan(fix_mul(_ctx.w,0x8000 /* 0.500000 */)),fix_tan(fix_mul(pre_w,0x8000 /* 0.500000 */)));
      _ctx.cos_w = fix_cos(_ctx.w);
   }
   fix16_t y1_next = fix_add(fix_mul(_ctx.cos_w,_ctx.y1),fix_mul(fix_mul(fix_add(_ctx.cos_w,0x10000 /* 1.000000 */),g),_ctx.y2));
   fix16_t y2_next = fix_add(fix_mul(fix_add(_ctx.cos_w,(-0x10000 /* -1.000000 */)),_ctx.y1),fix_mul(fix_mul(_ctx.cos_w,g),_ctx.y2));
   _ctx.y1 = fix_clip(y1_next,(-0x10000 /* -1.000000 */),0x10000 /* 1.000000 */);
   _ctx.y2 = fix_clip(y2_next,(-0x10000 /* -1.000000 */),0x10000 /* 1.000000 */);
   return _ctx.y1;
}

void Sin_sc_osc_start_init(Sin__ctx_type_1 &_output_){
   Sin__ctx_type_1_init(_output_);
   return ;
}

void Sin_sc_osc_start(Sin__ctx_type_1 &_ctx){
   _ctx.y1 = 0x10000 /* 1.000000 */;
   _ctx.y2 = fix_mul((- _ctx.y1),0x8000 /* 0.500000 */);
}

void Sin__ctx_type_2_init(Sin__ctx_type_2 &_output_){
   Sin__ctx_type_2 _ctx;
   _ctx.pitch = 0x0 /* 0.000000 */;
   Sin__ctx_type_1_init(_ctx._inst1);
   Sin_default(_ctx);
   _output_ = _ctx;
   return ;
}

void Sin_process_init(Sin__ctx_type_2 &_output_){
   Sin__ctx_type_2_init(_output_);
   return ;
}

fix16_t Sin_process(Sin__ctx_type_2 &_ctx, fix16_t input){
   return Sin_sc_osc(_ctx._inst1,_ctx.pitch);
}

void Sin_noteOn_init(Sin__ctx_type_2 &_output_){
   Sin__ctx_type_2_init(_output_);
   return ;
}

void Sin_noteOn(Sin__ctx_type_2 &_ctx, int note, int velocity){
   _ctx.pitch = int_to_fix(note);
}

void Sin_noteOff_init(Sin__ctx_type_2 &_output_){
   Sin__ctx_type_2_init(_output_);
   return ;
}

void Sin_noteOff(Sin__ctx_type_2 &_ctx, int note){
}

void Sin_controlChange_init(Sin__ctx_type_2 &_output_){
   Sin__ctx_type_2_init(_output_);
   return ;
}

void Sin_controlChange(Sin__ctx_type_2 &_ctx, int control, int value){
}

void Sin_default_init(Sin__ctx_type_2 &_output_){
   Sin__ctx_type_2_init(_output_);
   return ;
}

void Sin_default(Sin__ctx_type_2 &_ctx){
   _ctx.pitch = 0x450000 /* 69.000000 */;
}


