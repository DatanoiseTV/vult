
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#include "sff_ff.h"

void Sff_ff_process(fix16_t a, fix16_t b, _tuple___real_real__ &_output_){
   _tuple___real_real__ _tuple_5;
   {
      _tuple_5.field_0 = (a + b);
      _tuple_5.field_1 = (a + (- b));
   }
   _output_ = _tuple_5;
   return ;
}

void Sff_ff_noteOn(int note, int velocity, int channel){
}

void Sff_ff_noteOff(int note, int channel){
}

void Sff_ff_controlChange(int control, int value, int channel){
}

void Sff_ff_default(){
}



extern "C" {

static t_class *sff_ff_tilde_class;

typedef struct _sff_ff_tilde {
   t_pxobject  x_obj;
   float dummy;
   
   float in0_value;
   short in0_connected;
   float in1_value;
   short in1_connected;
   float data;
} t_sff_ff_tilde;

void sff_ff_tilde_perform(t_sff_ff_tilde *x, t_object *dsp64, double **ins, long numins, double **outs, long numouts, long sampleframes, long flags, void *userparam)
{

   double *in_0 = ins[0];
   double *in_1 = ins[1];
   double *out_0 = outs[0];
   double *out_1 = outs[1];

   int n = sampleframes;
   while (n--) {
      
   float in_0_value = x->in0_connected? *(in_0++): x->in0_value;
   float in_1_value = x->in1_connected? *(in_1++): x->in1_value;
      
   _tuple___real_real__ ret;  Sff_ff_process(float_to_fix(in_0_value),float_to_fix(in_1_value),ret);
   *(out_0++) = fix_to_float(ret.field_0);
   *(out_1++) = fix_to_float(ret.field_1);

   }
}

void sff_ff_tilde_dsp(t_sff_ff_tilde *x, t_object *dsp64, short *count, double samplerate, long maxvectorsize, long flags)
{
   
   x->in0_connected = count[0];
   x->in1_connected = count[1];
   object_method(dsp64, gensym("dsp_add64"), x, sff_ff_tilde_perform, 0, NULL);
}

void *sff_ff_tilde_new(t_symbol *s, long argc, t_atom *argv)
{
   t_sff_ff_tilde *x = (t_sff_ff_tilde *)object_alloc(sff_ff_tilde_class);

   
   
dsp_setup((t_pxobject *)x, 2);

   outlet_new((t_object *)x, "signal");
   outlet_new((t_object *)x, "signal");

   return (void *)x;
}

void sff_ff_tilde_delete(t_sff_ff_tilde *x){

}


void sff_ff_noteOn(t_sff_ff_tilde *x, double note, double velocity, double channel){
   if((int)velocity) Sff_ff_noteOn((int)note,(int)velocity,(int)channel);
   else Sff_ff_noteOff((int)note,(int)channel);
}


void sff_ff_noteOff(t_sff_ff_tilde *x, double note, double channel) {
   Sff_ff_noteOff((int)note,(int)channel);
}


void sff_ff_controlChange(t_sff_ff_tilde *x, double control, double value, double channel) {
   Sff_ff_controlChange((int)control,(int)value,(int)channel);
}


void sff_ff_float(t_sff_ff_tilde *x, double f){
   int in = proxy_getinlet((t_object *)x);
   
   if(in == 0) x->in0_value = f;
   if(in == 1) x->in1_value = f;
}

void ext_main(void *r) {
   sff_ff_tilde_class = class_new("sff_ff~",
      (method)sff_ff_tilde_new, // constructor function
      (method)sff_ff_tilde_delete, // destructor function
      (long)sizeof(t_sff_ff_tilde), // size of the object
       0L, A_GIMME, 0); // arguments passed

   class_addmethod(sff_ff_tilde_class,(method)sff_ff_tilde_dsp, "dsp64", A_CANT, 0);

   class_addmethod(sff_ff_tilde_class, (method)sff_ff_noteOn,        "noteOn",        A_DEFFLOAT, A_DEFFLOAT, A_DEFFLOAT, 0);
   class_addmethod(sff_ff_tilde_class, (method)sff_ff_noteOff,       "noteOff",       A_DEFFLOAT, A_DEFFLOAT, 0);
   class_addmethod(sff_ff_tilde_class, (method)sff_ff_controlChange, "controlChange", A_DEFFLOAT, A_DEFFLOAT, A_DEFFLOAT, 0);
   class_addmethod(sff_ff_tilde_class, (method)sff_ff_float, "float", A_FLOAT, 0);

   class_dspinit(sff_ff_tilde_class);
   class_register(CLASS_BOX, sff_ff_tilde_class);
}

} // extern "C"
