package vult.com.phasedist;

import java.util.Arrays;
import java.util.Random;
import vult.com.external.*;

public class phasedist {

static int clip(int x, int minv, int maxv) {
   if(x > maxv)
      return maxv;
   else if(x < minv)
      return minv;
   else return x;
}

static float clip(float x, float minv, float maxv) {
   if(x > maxv)
      return maxv;
   else if(x < minv)
      return minv;
   else return x;
}

int[] makeArray(int size, int init) {
   int a[] = new int[size];
   Arrays.fill(a, init);
   return a;
}

float[] makeArray(int size, float init) {
   float a[] = new float[size];
   Arrays.fill(a, init);
   return a;
}

boolean[] makeArray(int size, boolean init) {
   boolean a[] = new boolean[size];
   Arrays.fill(a, init);
   return a;
}

int int_to_fix16(int a) { return a * 0x00010000; }

int fix16_to_int(int a) { return (a >> 16); }

int fix16_add(int x, int y) { return x + y; }

int fix16_sub(int x, int y) { return x - y; }

int fix16_minus(int x) { return -x; }

float fix16_to_float(int a) { return (float)a / 0x00010000; }
int float_to_fix16(float a) {
   float temp = a * 0x00010000;
   return (int)temp;
}

int fix16_mul(int x, int y) {
   long res = (long)x * (long)y;
   return (int)(res >> 16);
}

int fix16_div(int a, int b) {
   if (b == 0)
      return 0;
   int result = (int)(((long)a << 16) / b);
   return result;
}

static boolean not(boolean x) {
   return !x;
}

static float int_to_float(int x) {
   return (float)x;
}

int float_to_int(float x) {
   return (int)x;
}

float floor(float x) {
   return (float)Math.floor(x);
}

static Random rand = new Random();

float random() {
   return rand.nextFloat();
}

int irandom() {
   return rand.nextInt();
}

float get(float[] a, int i) {
   return a[i];
}

void set(float[] a, int i, float val) {
   a[i] = val;
}

int get(int[] a, int i) {
   return a[i];
}

void set(int[] a, int i, int val) {
   a[i] = val;
}

float[] wrap_array(float x[]) {
   return x;
}

int[] wrap_array(int x[]) {
   return x;
}

float cosh(float x) {
   return (float)Math.cosh(x);
}

float cos(float x) {
   return (float)Math.cos(x);
}

float sin(float x) {
   return (float)Math.sin(x);
}

float sinh(float x) {
   return (float)Math.sinh(x);
}

float tan(float x) {
   return (float)Math.tan(x);
}

float tanh(float x) {
   return (float)Math.tanh(x);
}

float sqrt(float x) {
   return (float)Math.sqrt(x);
}

float pow(float x, float y) {
   return (float)Math.pow(x, y);
}

float exp(float x) {
   return (float)Math.exp(x);
}


private class Phasedist__ctx_type_0 {
   public float x;
 
   Phasedist__ctx_type_0(){ this.x = 0.0f;
    } 
   Phasedist__ctx_type_0(float x){ this.x = x;
    } }

private class Phasedist__ctx_type_1 {
   public float pre_x;
 
   Phasedist__ctx_type_1(){ this.pre_x = 0.0f;
    } 
   Phasedist__ctx_type_1(float pre_x){ this.pre_x = pre_x;
    } }

private class Phasedist__ctx_type_3 {
   public float rate;
   public float phase;
   public Phasedist__ctx_type_1 _inst11a;
 
   Phasedist__ctx_type_3(){ this.rate = 0.0f;
   this.phase = 0.0f;
   this._inst11a = new Phasedist__ctx_type_1();
    } 
   Phasedist__ctx_type_3(float rate,float phase,Phasedist__ctx_type_1 _inst11a){ this.rate = rate;
   this.phase = phase;
   this._inst11a = _inst11a;
    } }

private class Phasedist__ctx_type_4 {
   public float volume;
   public float pre_phase1;
   public float pitch;
   public float detune;
   public Phasedist__ctx_type_0 _inst4b6;
   public Phasedist__ctx_type_3 _inst339;
   public Phasedist__ctx_type_0 _inst2b6;
   public Phasedist__ctx_type_3 _inst139;
 
   Phasedist__ctx_type_4(){ this.volume = 0.0f;
   this.pre_phase1 = 0.0f;
   this.pitch = 0.0f;
   this.detune = 0.0f;
   this._inst4b6 = new Phasedist__ctx_type_0();
   this._inst339 = new Phasedist__ctx_type_3();
   this._inst2b6 = new Phasedist__ctx_type_0();
   this._inst139 = new Phasedist__ctx_type_3();
    } 
   Phasedist__ctx_type_4(float volume,float pre_phase1,float pitch,float detune,Phasedist__ctx_type_0 _inst4b6,Phasedist__ctx_type_3 _inst339,Phasedist__ctx_type_0 _inst2b6,Phasedist__ctx_type_3 _inst139){ this.volume = volume;
   this.pre_phase1 = pre_phase1;
   this.pitch = pitch;
   this.detune = detune;
   this._inst4b6 = _inst4b6;
   this._inst339 = _inst339;
   this._inst2b6 = _inst2b6;
   this._inst139 = _inst139;
    } }

private Phasedist__ctx_type_0 Phasedist__ctx_type_0_init(){
   Phasedist__ctx_type_0 _ctx = new Phasedist__ctx_type_0(); 
   _ctx.x = 0.0f;
   return _ctx;
}

private Phasedist__ctx_type_0 Phasedist_smooth_init(){return Phasedist__ctx_type_0_init();}

private float Phasedist_smooth(Phasedist__ctx_type_0 _ctx, float input){
   _ctx.x = (_ctx.x + (0.005f * (input + (- _ctx.x))));
   return _ctx.x;
}

private Phasedist__ctx_type_1 Phasedist__ctx_type_1_init(){
   Phasedist__ctx_type_1 _ctx = new Phasedist__ctx_type_1(); 
   _ctx.pre_x = 0.0f;
   return _ctx;
}

private Phasedist__ctx_type_1 Phasedist_change_init(){return Phasedist__ctx_type_1_init();}

private boolean Phasedist_change(Phasedist__ctx_type_1 _ctx, float x){
   boolean v = (_ctx.pre_x != x); 
   _ctx.pre_x = x;
   return v;
}

private float Phasedist_pitchToRate(float d){return (0.0001854f * exp((0.0577623f * d)));}

private Phasedist__ctx_type_3 Phasedist__ctx_type_3_init(){
   Phasedist__ctx_type_3 _ctx = new Phasedist__ctx_type_3(); 
   _ctx.rate = 0.0f;
   _ctx.phase = 0.0f;
   _ctx._inst11a = Phasedist__ctx_type_1_init();
   return _ctx;
}

private Phasedist__ctx_type_3 Phasedist_phasor_init(){return Phasedist__ctx_type_3_init();}

private float Phasedist_phasor(Phasedist__ctx_type_3 _ctx, float pitch, boolean reset){
   if(Phasedist_change(_ctx._inst11a,pitch)){ _ctx.rate = Phasedist_pitchToRate(pitch); }
   if(reset){ _ctx.phase = 0.0f; }
   else
   { _ctx.phase = (_ctx.phase + _ctx.rate); }
   if(_ctx.phase > 1.f){ _ctx.phase = (-1.f + _ctx.phase); }
   return _ctx.phase;
}

private Phasedist__ctx_type_4 Phasedist__ctx_type_4_init(){
   Phasedist__ctx_type_4 _ctx = new Phasedist__ctx_type_4(); 
   _ctx.volume = 0.0f;
   _ctx.pre_phase1 = 0.0f;
   _ctx.pitch = 0.0f;
   _ctx.detune = 0.0f;
   _ctx._inst4b6 = Phasedist__ctx_type_0_init();
   _ctx._inst339 = Phasedist__ctx_type_3_init();
   _ctx._inst2b6 = Phasedist__ctx_type_0_init();
   _ctx._inst139 = Phasedist__ctx_type_3_init();
   return _ctx;
}

private Phasedist__ctx_type_4 Phasedist_process_init(){return Phasedist__ctx_type_4_init();}

private float Phasedist_process(Phasedist__ctx_type_4 _ctx, float input){
   float phase1 = Phasedist_phasor(_ctx._inst139,_ctx.pitch,false); 
   float comp = (1.f + (- phase1)); 
   boolean reset = ((_ctx.pre_phase1 + (- phase1)) > 0.5f); 
   _ctx.pre_phase1 = phase1;
   float phase2 = Phasedist_phasor(_ctx._inst339,(_ctx.pitch + (32.f * Phasedist_smooth(_ctx._inst2b6,_ctx.detune))),reset); 
   float sine = sin((6.2831854f * phase2)); 
   return (comp * sine * Phasedist_smooth(_ctx._inst4b6,_ctx.volume));
}

private Phasedist__ctx_type_4 Phasedist_noteOn_init(){return Phasedist__ctx_type_4_init();}

private void Phasedist_noteOn(Phasedist__ctx_type_4 _ctx, int note, int velocity, int channel){_ctx.pitch = int_to_float(note);}

private Phasedist__ctx_type_4 Phasedist_noteOff_init(){return Phasedist__ctx_type_4_init();}

private void Phasedist_noteOff(Phasedist__ctx_type_4 _ctx, int note, int channel){
}

private Phasedist__ctx_type_4 Phasedist_controlChange_init(){return Phasedist__ctx_type_4_init();}

private void Phasedist_controlChange(Phasedist__ctx_type_4 _ctx, int control, int value, int channel){
   if(control == 30){ _ctx.volume = (0.0078741f * int_to_float(value)); }
   if(control == 31){ _ctx.detune = (0.0078741f * int_to_float(value)); }
}

private Phasedist__ctx_type_4 Phasedist_default_init(){return Phasedist__ctx_type_4_init();}

private void Phasedist_default(Phasedist__ctx_type_4 _ctx){
   _ctx.volume = 1.f;
   _ctx.pitch = 45.f;
   _ctx.detune = 0.0f;
}


}