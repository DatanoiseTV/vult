
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#include "svf.h"

void Util__ctx_type_0_init(Util__ctx_type_0 &_output_){
   Util__ctx_type_0 _ctx;
   _ctx.pre = 0;
   _output_ = _ctx;
   return ;
}

void Util_edge_init(Util__ctx_type_0 &_output_){
   Util__ctx_type_0_init(_output_);
   return ;
}

uint8_t Util_edge(Util__ctx_type_0 &_ctx, uint8_t x){
   uint8_t ret;
   ret = (x && bool_not(_ctx.pre));
   _ctx.pre = x;
   return ret;
}

void Util__ctx_type_1_init(Util__ctx_type_1 &_output_){
   Util__ctx_type_1 _ctx;
   _ctx.pre_x = 0.000000f;
   _output_ = _ctx;
   return ;
}

void Util_change_init(Util__ctx_type_1 &_output_){
   Util__ctx_type_1_init(_output_);
   return ;
}

uint8_t Util_change(Util__ctx_type_1 &_ctx, float x){
   uint8_t v;
   v = (_ctx.pre_x != x);
   _ctx.pre_x = x;
   return v;
}

float Util_map(float x, float x0, float x1, float y0, float y1){
   return ((((x + (- x0)) * (y1 + (- y0))) / (x1 + (- x0))) + y0);
}

void Util__ctx_type_3_init(Util__ctx_type_3 &_output_){
   Util__ctx_type_3 _ctx;
   _ctx.y1 = 0.000000f;
   _ctx.x1 = 0.000000f;
   _output_ = _ctx;
   return ;
}

void Util_dcblock_init(Util__ctx_type_3 &_output_){
   Util__ctx_type_3_init(_output_);
   return ;
}

float Util_dcblock(Util__ctx_type_3 &_ctx, float x0){
   float y0;
   y0 = (x0 + (- _ctx.x1) + (_ctx.y1 * 0.995000f));
   _ctx.x1 = x0;
   _ctx.y1 = y0;
   return y0;
}

void Util__ctx_type_4_init(Util__ctx_type_4 &_output_){
   Util__ctx_type_4 _ctx;
   _ctx.x = 0.000000f;
   _output_ = _ctx;
   return ;
}

void Util_smooth_init(Util__ctx_type_4 &_output_){
   Util__ctx_type_4_init(_output_);
   return ;
}

float Util_smooth(Util__ctx_type_4 &_ctx, float input){
   _ctx.x = (_ctx.x + ((input + (- _ctx.x)) * 0.005000f));
   return _ctx.x;
}

void Util__ctx_type_5_init(Util__ctx_type_5 &_output_){
   Util__ctx_type_5 _ctx;
   _ctx.x0 = 0.000000f;
   _output_ = _ctx;
   return ;
}

void Util_average2_init(Util__ctx_type_5 &_output_){
   Util__ctx_type_5_init(_output_);
   return ;
}

float Util_average2(Util__ctx_type_5 &_ctx, float x1){
   float result;
   result = ((_ctx.x0 + x1) * 0.500000f);
   _ctx.x0 = x1;
   return result;
}

float Util_pitchToRate_1024(float pitch){
   int index;
   index = int_clip(float_to_int((0.244094f * pitch)),0,31);
   return (float_get(float_wrap_array(Util_pitchToRate_1024_c0),index) + (pitch * (float_get(float_wrap_array(Util_pitchToRate_1024_c1),index) + (float_get(float_wrap_array(Util_pitchToRate_1024_c2),index) * pitch))));
}

float Util_pitchToRate(float pitch){
   int index;
   index = int_clip(float_to_int((0.244094f * pitch)),0,31);
   return (float_get(float_wrap_array(Util_pitchToRate_c0),index) + (pitch * (float_get(float_wrap_array(Util_pitchToRate_c1),index) + (float_get(float_wrap_array(Util_pitchToRate_c2),index) * pitch))));
}

float Util_cvToPitch(float cv){
   return ((cv * 120.000000f) + 24.000000f);
}

float Util_cvToRate_1024(float cv){
   int index;
   index = int_clip(float_to_int((34.444444f * cv)),0,31);
   return (float_get(float_wrap_array(Util_cvToRate_1024_c0),index) + (cv * (float_get(float_wrap_array(Util_cvToRate_1024_c1),index) + (float_get(float_wrap_array(Util_cvToRate_1024_c2),index) * cv))));
}

float Util_cvToRate(float cv){
   int index;
   index = int_clip(float_to_int((34.444444f * cv)),0,31);
   return (float_get(float_wrap_array(Util_cvToRate_c0),index) + (cv * (float_get(float_wrap_array(Util_cvToRate_c1),index) + (float_get(float_wrap_array(Util_cvToRate_c2),index) * cv))));
}

float Util_pitchToCv(float pitch){
   return (0.008333f * ((-24.000000f) + pitch));
}

float Util_cvToperiod(float cv){
   int index;
   index = int_clip(float_to_int((31.000000f * cv)),0,31);
   return (float_get(float_wrap_array(Util_cvToperiod_c0),index) + (cv * (float_get(float_wrap_array(Util_cvToperiod_c1),index) + (float_get(float_wrap_array(Util_cvToperiod_c2),index) * cv))));
}

float Saturate_soft_table(float x){
   int index;
   index = int_clip(float_to_int((1.500000f * x)),0,9);
   return (float_get(float_wrap_array(Saturate_soft_table_c0),index) + (x * (float_get(float_wrap_array(Saturate_soft_table_c1),index) + (float_get(float_wrap_array(Saturate_soft_table_c2),index) * x))));
}

float Saturate_soft_process(float x){
   uint8_t _cond_23;
   _cond_23 = (x == 0.000000f);
   if(_cond_23){
      return 0.000000f;
   }
   float fixed;
   uint8_t sign;
   uint8_t _cond_25;
   _cond_25 = (x > 0.000000f);
   if(_cond_25){
      fixed = x;
      sign = 0;
   }
   else
   {
      fixed = (- x);
      sign = 1;
   }
   float out;
   out = 0.000000f;
   uint8_t _cond_24;
   _cond_24 = (fixed > 6.000000f);
   if(_cond_24){
      out = 1.000000f;
   }
   else
   {
      out = Saturate_soft_table(fixed);
   }
   if(sign){ out = (- out); }
   else
   { out = out; }
   return out;
}

void Saturate_soft_noteOn(int note, int velocity, int channel){
}

void Saturate_soft_noteOff(int note, int channel){
}

void Saturate_soft_controlChange(int control, int value, int channel){
}

void Saturate_soft_default(){
}

float Svf_calc_g(float cv){
   int index;
   index = int_clip(float_to_int((141.111111f * cv)),0,127);
   return (float_get(float_wrap_array(Svf_calc_g_c0),index) + (cv * (float_get(float_wrap_array(Svf_calc_g_c1),index) + (float_get(float_wrap_array(Svf_calc_g_c2),index) * cv))));
}

void Svf__ctx_type_1_init(Svf__ctx_type_1 &_output_){
   Svf__ctx_type_1 _ctx;
   _ctx.z2 = 0.000000f;
   _ctx.z1 = 0.000000f;
   _ctx.inv_den = 0.000000f;
   _ctx.g = 0.000000f;
   Util__ctx_type_1_init(_ctx._inst31);
   Util__ctx_type_1_init(_ctx._inst30);
   _ctx.R = 0.000000f;
   Svf_default(_ctx);
   _output_ = _ctx;
   return ;
}

void Svf_process_init(Svf__ctx_type_1 &_output_){
   Svf__ctx_type_1_init(_output_);
   return ;
}

float Svf_process(Svf__ctx_type_1 &_ctx, float x, float cv, float q, int sel){
   q = (q + 0.500000f);
   uint8_t _cond_37;
   _cond_37 = (Util_change(_ctx._inst30,cv) || Util_change(_ctx._inst31,q));
   if(_cond_37){
      _ctx.g = Svf_calc_g(cv);
      _ctx.R = (1.000000f / (2.000000f * (q + 0.000000f)));
      _ctx.inv_den = (1.000000f / (1.000000f + (2.000000f * _ctx.R * _ctx.g) + (_ctx.g * _ctx.g)));
   }
   float high;
   high = ((x + (- (((2.000000f * _ctx.R) + _ctx.g) * _ctx.z1)) + (- _ctx.z2)) * _ctx.inv_den);
   float band;
   band = ((_ctx.g * high) + _ctx.z1);
   float low;
   low = ((_ctx.g * band) + _ctx.z2);
   float notch;
   notch = (low + high);
   _ctx.z1 = ((_ctx.g * high) + band);
   _ctx.z2 = ((_ctx.g * band) + low);
   float output;
   uint8_t _cond_38;
   _cond_38 = (sel == 0);
   if(_cond_38){ output = low; }
   else
   {
      uint8_t _cond_39;
      _cond_39 = (sel == 1);
      if(_cond_39){ output = high; }
      else
      {
         uint8_t _cond_40;
         _cond_40 = (sel == 2);
         if(_cond_40){ output = band; }
         else
         { output = notch; }
      }
   }
   return Saturate_soft_process(output);
}

void Svf_noteOn_init(Svf__ctx_type_1 &_output_){
   Svf__ctx_type_1_init(_output_);
   return ;
}

void Svf_noteOn(Svf__ctx_type_1 &_ctx, int note, int velocity, int channel){
}

void Svf_noteOff_init(Svf__ctx_type_1 &_output_){
   Svf__ctx_type_1_init(_output_);
   return ;
}

void Svf_noteOff(Svf__ctx_type_1 &_ctx, int note, int channel){
}

void Svf_controlChange_init(Svf__ctx_type_1 &_output_){
   Svf__ctx_type_1_init(_output_);
   return ;
}

void Svf_controlChange(Svf__ctx_type_1 &_ctx, int control, int value, int channel){
}

void Svf_default_init(Svf__ctx_type_1 &_output_){
   Svf__ctx_type_1_init(_output_);
   return ;
}

void Svf_default(Svf__ctx_type_1 &_ctx){
   _ctx.g = 0.002330f;
   _ctx.R = 1.000000f;
   _ctx.inv_den = (1.000000f / (1.000000f + (_ctx.g * _ctx.g)));
}


