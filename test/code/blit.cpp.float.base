
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#include "blit.h"

uint8_t Blit_near_zero(float x){
   return (fabsf(x) < 0.020000f);
}

void Blit__ctx_type_1_init(Blit__ctx_type_1 &_output_){
   Blit__ctx_type_1 _ctx;
   _ctx.pre_x = 0.000000f;
   _output_ = _ctx;
   return ;
}

void Blit_change_init(Blit__ctx_type_1 &_output_){
   Blit__ctx_type_1_init(_output_);
   return ;
}

uint8_t Blit_change(Blit__ctx_type_1 &_ctx, float x){
   uint8_t v;
   v = (_ctx.pre_x != x);
   _ctx.pre_x = x;
   return v;
}

void Blit__ctx_type_2_init(Blit__ctx_type_2 &_output_){
   Blit__ctx_type_2 _ctx;
   _ctx.y1 = 0.000000f;
   _ctx.x1 = 0.000000f;
   _output_ = _ctx;
   return ;
}

void Blit_dcblock_init(Blit__ctx_type_2 &_output_){
   Blit__ctx_type_2_init(_output_);
   return ;
}

float Blit_dcblock(Blit__ctx_type_2 &_ctx, float x0){
   float y0;
   y0 = (x0 + (- _ctx.x1) + (_ctx.y1 * 0.995000f));
   _ctx.x1 = x0;
   _ctx.y1 = y0;
   return y0;
}

float Blit_pitchToRate(float d){
   return (0.000185f * expf((0.057762f * d)));
}

float Blit_pulse_train(float m, float phase){
   float pi_phase;
   pi_phase = (phase * 3.141593f);
   float denominator1;
   denominator1 = sinf(pi_phase);
   float tmp1;
   tmp1 = 0.000000f;
   uint8_t _cond_28;
   _cond_28 = Blit_near_zero(denominator1);
   if(_cond_28){
      tmp1 = 1.000000f;
   }
   else
   {
      tmp1 = sinf((m * pi_phase));
      tmp1 = (tmp1 / (m * denominator1));
   }
   return tmp1;
}

void Blit__ctx_type_5_init(Blit__ctx_type_5 &_output_){
   Blit__ctx_type_5 _ctx;
   _ctx.state_triang = 0.000000f;
   _ctx.state_saw = 0.000000f;
   _ctx.state_pulse = 0.000000f;
   _ctx.rate = 0.000000f;
   _ctx.phase = 0.000000f;
   _ctx.output = 0.000000f;
   _ctx.m = 0.000000f;
   Blit__ctx_type_2_init(_ctx._inst18);
   Blit__ctx_type_1_init(_ctx._inst10);
   _output_ = _ctx;
   return ;
}

void Blit_osc_init(Blit__ctx_type_5 &_output_){
   Blit__ctx_type_5_init(_output_);
   return ;
}

float Blit_osc(Blit__ctx_type_5 &_ctx, float pitch, float pw, float wave){
   float fixed_pitch;
   fixed_pitch = 0.000000f;
   uint8_t _cond_29;
   _cond_29 = (wave < 0.666667f);
   if(_cond_29){
      fixed_pitch = pitch;
   }
   else
   {
      fixed_pitch = (pitch + 12.000000f);
   }
   uint8_t _cond_30;
   _cond_30 = Blit_change(_ctx._inst10,fixed_pitch);
   if(_cond_30){
      _ctx.rate = Blit_pitchToRate(fixed_pitch);
      float p;
      p = (1.000000f / _ctx.rate);
      float maxHarmonics;
      maxHarmonics = floorf((p * 0.500000f));
      _ctx.m = ((2.000000f * maxHarmonics) + 1.000000f);
   }
   float shift05;
   shift05 = (0.500000f + (pw * 0.490000f));
   float shift;
   shift = (_ctx.phase + shift05);
   uint8_t _cond_31;
   _cond_31 = (shift > 1.000000f);
   if(_cond_31){
      shift = (shift + (-1.000000f));
   }
   float tmp1;
   tmp1 = Blit_pulse_train(_ctx.m,_ctx.phase);
   float tmp2;
   tmp2 = Blit_pulse_train(_ctx.m,shift);
   _ctx.phase = (_ctx.phase + _ctx.rate);
   uint8_t _cond_32;
   _cond_32 = (_ctx.phase > 1.000000f);
   if(_cond_32){
      _ctx.phase = (_ctx.phase + (-1.000000f));
   }
   _ctx.state_pulse = float_clip(((_ctx.state_pulse * 0.999500f) + tmp1 + (- tmp2)),(-1.000000f),1.000000f);
   _ctx.state_saw = float_clip(((_ctx.state_saw * 0.999500f) + (((tmp1 + tmp2 + ((-2.000000f) * _ctx.rate)) / shift05) * 0.500000f)),(-1.000000f),1.000000f);
   _ctx.state_triang = float_clip(((_ctx.state_triang * 0.999500f) + (2.000000f * _ctx.state_pulse * _ctx.rate)),(-1.000000f),1.000000f);
   uint8_t _cond_34;
   _cond_34 = (wave < 0.333333f);
   if(_cond_34){
      _ctx.output = _ctx.state_pulse;
   }
   else
   {
      uint8_t _cond_33;
      _cond_33 = (wave < 0.666667f);
      if(_cond_33){
         _ctx.output = (2.000000f * _ctx.state_saw);
      }
      else
      {
         _ctx.output = (2.000000f * _ctx.state_triang * (1.000000f + pw));
      }
   }
   _ctx.output = Blit_dcblock(_ctx._inst18,_ctx.output);
   return float_clip((_ctx.output * 0.250000f),(-1.000000f),1.000000f);
}

void Blit__ctx_type_6_init(Blit__ctx_type_6 &_output_){
   Blit__ctx_type_6 _ctx;
   _ctx.wave = 0.000000f;
   _ctx.pw = 0.000000f;
   _ctx.pitch = 0.000000f;
   Blit__ctx_type_5_init(_ctx._inst20);
   _output_ = _ctx;
   return ;
}

void Blit_process_init(Blit__ctx_type_6 &_output_){
   Blit__ctx_type_6_init(_output_);
   return ;
}

float Blit_process(Blit__ctx_type_6 &_ctx, float input){
   return Blit_osc(_ctx._inst20,_ctx.pitch,_ctx.pw,_ctx.wave);
}

void Blit_noteOn_init(Blit__ctx_type_6 &_output_){
   Blit__ctx_type_6_init(_output_);
   return ;
}

void Blit_noteOn(Blit__ctx_type_6 &_ctx, int note, int velocity, int channel){
   _ctx.pitch = int_to_float(note);
}

void Blit_noteOff_init(Blit__ctx_type_6 &_output_){
   Blit__ctx_type_6_init(_output_);
   return ;
}

void Blit_noteOff(Blit__ctx_type_6 &_ctx, int note, int channel){
}

void Blit_controlChange_init(Blit__ctx_type_6 &_output_){
   Blit__ctx_type_6_init(_output_);
   return ;
}

void Blit_controlChange(Blit__ctx_type_6 &_ctx, int control, int value, int channel){
   uint8_t _cond_35;
   _cond_35 = (control == 30);
   if(_cond_35){
      _ctx.pw = (int_to_float(value) * 0.007874f);
   }
   uint8_t _cond_36;
   _cond_36 = (control == 31);
   if(_cond_36){
      _ctx.wave = (int_to_float(value) * 0.007874f);
   }
}

void Blit_default_init(Blit__ctx_type_6 &_output_){
   Blit__ctx_type_6_init(_output_);
   return ;
}

void Blit_default(Blit__ctx_type_6 &_ctx){
   _ctx.pw = 0.000000f;
   _ctx.wave = 45.000000f;
   _ctx.pitch = 45.000000f;
}


