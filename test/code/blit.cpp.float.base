
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#include "blit.h"

float Tables_nsine(float x){
   int index;
   index = int_clip(float_to_int((127.000000f * x)),0,127);
   return (float_get(float_wrap_array(Tables_nsine_c0),index) + (x * (float_get(float_wrap_array(Tables_nsine_c1),index) + (float_get(float_wrap_array(Tables_nsine_c2),index) * x))));
}

void Util__ctx_type_0_init(Util__ctx_type_0 &_output_){
   Util__ctx_type_0 _ctx;
   _ctx.pre = 0;
   _output_ = _ctx;
   return ;
}

void Util_edge_init(Util__ctx_type_0 &_output_){
   Util__ctx_type_0_init(_output_);
   return ;
}

uint8_t Util_edge(Util__ctx_type_0 &_ctx, uint8_t x){
   uint8_t ret;
   ret = (x && bool_not(_ctx.pre));
   _ctx.pre = x;
   return ret;
}

void Util__ctx_type_1_init(Util__ctx_type_1 &_output_){
   Util__ctx_type_1 _ctx;
   _ctx.pre_x = 0.000000f;
   _output_ = _ctx;
   return ;
}

void Util_change_init(Util__ctx_type_1 &_output_){
   Util__ctx_type_1_init(_output_);
   return ;
}

uint8_t Util_change(Util__ctx_type_1 &_ctx, float x){
   uint8_t v;
   v = (_ctx.pre_x != x);
   _ctx.pre_x = x;
   return v;
}

float Util_map(float x, float x0, float x1, float y0, float y1){
   return ((((x + (- x0)) * (y1 + (- y0))) / (x1 + (- x0))) + y0);
}

void Util__ctx_type_3_init(Util__ctx_type_3 &_output_){
   Util__ctx_type_3 _ctx;
   _ctx.y1 = 0.000000f;
   _ctx.x1 = 0.000000f;
   _output_ = _ctx;
   return ;
}

void Util_dcblock_init(Util__ctx_type_3 &_output_){
   Util__ctx_type_3_init(_output_);
   return ;
}

float Util_dcblock(Util__ctx_type_3 &_ctx, float x0){
   float y0;
   y0 = (x0 + (- _ctx.x1) + (_ctx.y1 * 0.995000f));
   _ctx.x1 = x0;
   _ctx.y1 = y0;
   return y0;
}

void Util__ctx_type_4_init(Util__ctx_type_4 &_output_){
   Util__ctx_type_4 _ctx;
   _ctx.x = 0.000000f;
   _output_ = _ctx;
   return ;
}

void Util_smooth_init(Util__ctx_type_4 &_output_){
   Util__ctx_type_4_init(_output_);
   return ;
}

float Util_smooth(Util__ctx_type_4 &_ctx, float input){
   _ctx.x = (_ctx.x + ((input + (- _ctx.x)) * 0.005000f));
   return _ctx.x;
}

void Util__ctx_type_5_init(Util__ctx_type_5 &_output_){
   Util__ctx_type_5 _ctx;
   _ctx.x0 = 0.000000f;
   _output_ = _ctx;
   return ;
}

void Util_average2_init(Util__ctx_type_5 &_output_){
   Util__ctx_type_5_init(_output_);
   return ;
}

float Util_average2(Util__ctx_type_5 &_ctx, float x1){
   float result;
   result = ((_ctx.x0 + x1) * 0.500000f);
   _ctx.x0 = x1;
   return result;
}

float Util_pitchToRate(float pitch){
   int index;
   index = int_clip(float_to_int((0.244094f * pitch)),0,31);
   return (float_get(float_wrap_array(Util_pitchToRate_c0),index) + (pitch * (float_get(float_wrap_array(Util_pitchToRate_c1),index) + (float_get(float_wrap_array(Util_pitchToRate_c2),index) * pitch))));
}

float Util_cvToPitch(float cv){
   return ((cv * 120.000000f) + 24.000000f);
}

float Util_cvToRate(float cv){
   int index;
   index = int_clip(float_to_int((34.444444f * cv)),0,31);
   return (float_get(float_wrap_array(Util_cvToRate_c0),index) + (cv * (float_get(float_wrap_array(Util_cvToRate_c1),index) + (float_get(float_wrap_array(Util_cvToRate_c2),index) * cv))));
}

float Util_pitchToCv(float pitch){
   return (0.008333f * ((-24.000000f) + pitch));
}

float Util_cvToRate_unit(float cv){
   int index;
   index = int_clip(float_to_int((34.444444f * cv)),0,31);
   return (float_get(float_wrap_array(Util_cvToRate_unit_c0),index) + (cv * (float_get(float_wrap_array(Util_cvToRate_unit_c1),index) + (float_get(float_wrap_array(Util_cvToRate_unit_c2),index) * cv))));
}

void Saw__ctx_type_0_init(Saw__ctx_type_0 &_output_){
   Saw__ctx_type_0 _ctx;
   _ctx.rate = 0.000000f;
   _ctx.phase = 0.000000f;
   Util__ctx_type_0_init(_ctx._inst16);
   Util__ctx_type_1_init(_ctx._inst14);
   Saw_default(_ctx);
   _output_ = _ctx;
   return ;
}

void Saw_process_init(Saw__ctx_type_0 &_output_){
   Saw__ctx_type_0_init(_output_);
   return ;
}

float Saw_process(Saw__ctx_type_0 &_ctx, float cv, float reset){
   uint8_t _cond_21;
   _cond_21 = Util_change(_ctx._inst14,cv);
   if(_cond_21){
      _ctx.rate = Util_cvToRate(cv);
   }
   uint8_t _cond_22;
   _cond_22 = Util_edge(_ctx._inst16,(reset > 0.500000f));
   if(_cond_22){ _ctx.phase = 0.000000f; }
   else
   { _ctx.phase = (_ctx.phase + _ctx.rate); }
   uint8_t _cond_23;
   _cond_23 = (_ctx.phase > 1024.000000f);
   if(_cond_23){ _ctx.phase = (_ctx.phase + (-1024.000000f)); }
   else
   { _ctx.phase = _ctx.phase; }
   return (_ctx.phase * 0.000977f);
}

void Saw_noteOn_init(Saw__ctx_type_0 &_output_){
   Saw__ctx_type_0_init(_output_);
   return ;
}

void Saw_noteOn(Saw__ctx_type_0 &_ctx, int note, int velocity, int channel){
}

void Saw_noteOff_init(Saw__ctx_type_0 &_output_){
   Saw__ctx_type_0_init(_output_);
   return ;
}

void Saw_noteOff(Saw__ctx_type_0 &_ctx, int note, int channel){
}

void Saw_controlChange_init(Saw__ctx_type_0 &_output_){
   Saw__ctx_type_0_init(_output_);
   return ;
}

void Saw_controlChange(Saw__ctx_type_0 &_ctx, int control, int value, int channel){
}

void Saw_default_init(Saw__ctx_type_0 &_output_){
   Saw__ctx_type_0_init(_output_);
   return ;
}

void Saw_default(Saw__ctx_type_0 &_ctx){
   _ctx.rate = 0.759367f;
}

float Blit_period(float cv){
   int index;
   index = int_clip(float_to_int((31.000000f * cv)),0,31);
   return (float_get(float_wrap_array(Blit_period_c0),index) + (cv * (float_get(float_wrap_array(Blit_period_c1),index) + (float_get(float_wrap_array(Blit_period_c2),index) * cv))));
}

float Blit_harmonics(float cv){
   int p;
   p = float_to_int(Blit_period(cv));
   return int_to_float(((2 * p) + 1));
}

float Blit_pulse_train(float m, float phase){
   float pi_phase;
   pi_phase = (phase * 0.500000f);
   float denominator;
   denominator = Tables_nsine(pi_phase);
   float out;
   out = 0.000000f;
   uint8_t _cond_46;
   _cond_46 = (denominator <= 0.000000f);
   if(_cond_46){
      out = 1.000000f;
   }
   else
   {
      float numerator;
      numerator = Tables_nsine(fmodf((m * pi_phase),1.000000f));
      out = (numerator / (m * denominator));
   }
   return out;
}

void Blit__ctx_type_3_init(Blit__ctx_type_3 &_output_){
   Blit__ctx_type_3 _ctx;
   _ctx.state_saw = 0.000000f;
   _ctx.state_pulse = 0.000000f;
   _ctx.rate = 0.000000f;
   _ctx.output = 0.000000f;
   _ctx.m = 0.000000f;
   Util__ctx_type_3_init(_ctx._inst38);
   Saw__ctx_type_0_init(_ctx._inst34);
   Util__ctx_type_1_init(_ctx._inst32);
   Blit_init(_ctx);
   _output_ = _ctx;
   return ;
}

void Blit_osc_blit_init(Blit__ctx_type_3 &_output_){
   Blit__ctx_type_3_init(_output_);
   return ;
}

float Blit_osc_blit(Blit__ctx_type_3 &_ctx, float cv, float pw, float wave){
   float fixed_cv;
   fixed_cv = 0.000000f;
   uint8_t _cond_47;
   _cond_47 = (wave < 1.000000f);
   if(_cond_47){
      fixed_cv = cv;
   }
   else
   {
      fixed_cv = (cv + (-0.100000f));
   }
   uint8_t _cond_48;
   _cond_48 = Util_change(_ctx._inst32,fixed_cv);
   if(_cond_48){
      _ctx.m = Blit_harmonics(fixed_cv);
      _ctx.rate = Util_cvToRate_unit(fixed_cv);
   }
   float phase;
   phase = Saw_process(_ctx._inst34,fixed_cv,0.000000f);
   float shift05;
   shift05 = (0.500000f + (pw * 0.490000f));
   float shift;
   shift = (phase + shift05);
   uint8_t _cond_49;
   _cond_49 = (shift > 1.000000f);
   if(_cond_49){
      shift = (shift + (-1.000000f));
   }
   float pulse1;
   pulse1 = Blit_pulse_train(_ctx.m,phase);
   float pulse2;
   pulse2 = Blit_pulse_train(_ctx.m,shift);
   _ctx.state_pulse = ((_ctx.state_pulse * 0.999500f) + pulse1 + (- pulse2));
   _ctx.state_saw = ((_ctx.state_saw * 0.999500f) + (((pulse1 + pulse2 + ((-2.000000f) * _ctx.rate)) / shift05) * 0.500000f));
   uint8_t _cond_50;
   _cond_50 = (wave < 1.000000f);
   if(_cond_50){
      _ctx.output = _ctx.state_pulse;
   }
   else
   {
      _ctx.output = (2.000000f * _ctx.state_saw);
   }
   _ctx.output = Util_dcblock(_ctx._inst38,_ctx.output);
   return _ctx.output;
}

void Blit_init_init(Blit__ctx_type_3 &_output_){
   Blit__ctx_type_3_init(_output_);
   return ;
}

void Blit_init(Blit__ctx_type_3 &_ctx){
   _ctx.m = 1349.000000f;
   _ctx.rate = 0.000742f;
}

void Blit__ctx_type_4_init(Blit__ctx_type_4 &_output_){
   Blit__ctx_type_4 _ctx;
   Blit__ctx_type_3_init(_ctx._inst41);
   _output_ = _ctx;
   return ;
}

void Blit_process_init(Blit__ctx_type_4 &_output_){
   Blit__ctx_type_4_init(_output_);
   return ;
}

float Blit_process(Blit__ctx_type_4 &_ctx, float cv, float pw, float wave){
   return Blit_osc_blit(_ctx._inst41,cv,pw,wave);
}

void Blit_noteOn_init(Blit__ctx_type_4 &_output_){
   Blit__ctx_type_4_init(_output_);
   return ;
}

void Blit_noteOn(Blit__ctx_type_4 &_ctx, int note, int velocity, int channel){
}

void Blit_noteOff_init(Blit__ctx_type_4 &_output_){
   Blit__ctx_type_4_init(_output_);
   return ;
}

void Blit_noteOff(Blit__ctx_type_4 &_ctx, int note, int channel){
}

void Blit_controlChange_init(Blit__ctx_type_4 &_output_){
   Blit__ctx_type_4_init(_output_);
   return ;
}

void Blit_controlChange(Blit__ctx_type_4 &_ctx, int control, int value, int channel){
}

void Blit_default_init(Blit__ctx_type_4 &_output_){
   Blit__ctx_type_4_init(_output_);
   return ;
}

void Blit_default(Blit__ctx_type_4 &_ctx){
}


