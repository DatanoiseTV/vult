
#include "blit.h"

uint8_t Blit_near_zero(float x){
   return (fabsf(x) < 0.02f);
}

Blit__ctx_type_1 Blit__ctx_type_1_init(){
   Blit__ctx_type_1 _ctx;
   _ctx.pre_x = 0.f;
   return _ctx;
}

Blit__ctx_type_1 Blit_change_init(){ return Blit__ctx_type_1_init();}

uint8_t Blit_change(Blit__ctx_type_1 &_ctx, float x){
   uint8_t v = (_ctx.pre_x != x);
   _ctx.pre_x = x;
   return v;
}

Blit__ctx_type_2 Blit__ctx_type_2_init(){
   Blit__ctx_type_2 _ctx;
   _ctx.y1 = 0.f;
   _ctx.x1 = 0.f;
   return _ctx;
}

Blit__ctx_type_2 Blit_dcblock_init(){ return Blit__ctx_type_2_init();}

float Blit_dcblock(Blit__ctx_type_2 &_ctx, float x0){
   float y0 = (x0 + (- _ctx.x1) + (_ctx.y1 * 0.995f));
   _ctx.x1 = x0;
   _ctx.y1 = y0;
   return y0;
}

float Blit_pitchToRate(float d){
   return (0.000185392290249f * expf((0.0577623f * d)));
}

float Blit_pulse_train(float m, float phase){
   float pi_phase = (phase * 3.14159265359f);
   float denominator1 = sinf(pi_phase);
   float tmp1 = 0.f;
   if(Blit_near_zero(denominator1)){
      tmp1 = 1.f;
   }
   else
   {
      tmp1 = sinf((m * pi_phase));
      tmp1 = (tmp1 / (m * denominator1));
   }
   return tmp1;
}

Blit__ctx_type_5 Blit__ctx_type_5_init(){
   Blit__ctx_type_5 _ctx;
   _ctx.state_triang = 0.f;
   _ctx.state_saw = 0.f;
   _ctx.state_pulse = 0.f;
   _ctx.rate = 0.f;
   _ctx.phase = 0.f;
   _ctx.output = 0.f;
   _ctx.m = 0.f;
   _ctx._inst1 = Blit__ctx_type_2_init();
   _ctx._inst0 = Blit__ctx_type_1_init();
   return _ctx;
}

Blit__ctx_type_5 Blit_osc_init(){ return Blit__ctx_type_5_init();}

float Blit_osc(Blit__ctx_type_5 &_ctx, float pitch, float pw, float wave){
   float fixed_pitch = 0.f;
   if(wave < (0.666666666667f)){
      fixed_pitch = pitch;
   }
   else
   {
      fixed_pitch = (pitch + 12.f);
   }
   if(Blit_change(_ctx._inst0,fixed_pitch)){
      _ctx.rate = Blit_pitchToRate(fixed_pitch);
      float p = (1.f / _ctx.rate);
      float maxHarmonics = floorf((p * 0.5f));
      _ctx.m = ((2.f * maxHarmonics) + 1.f);
   }
   float shift05 = (0.5f + (pw * 0.49f));
   float shift = (_ctx.phase + shift05);
   if(shift > 1.f){
      shift = (shift + (-1.f));
   }
   float tmp1 = Blit_pulse_train(_ctx.m,_ctx.phase);
   float tmp2 = Blit_pulse_train(_ctx.m,shift);
   _ctx.phase = (_ctx.phase + _ctx.rate);
   if(_ctx.phase > 1.f){
      _ctx.phase = (_ctx.phase + (-1.f));
   }
   _ctx.state_pulse = float_clip(((_ctx.state_pulse * 0.9995f) + tmp1 + (- tmp2)),(-1.f),1.f);
   _ctx.state_saw = float_clip(((_ctx.state_saw * 0.9995f) + (((tmp1 + tmp2 + ((-2.f) * _ctx.rate)) / shift05) * 0.5f)),(-1.f),1.f);
   _ctx.state_triang = float_clip(((_ctx.state_triang * 0.9995f) + (2.f * _ctx.state_pulse * _ctx.rate)),(-1.f),1.f);
   if(wave < (0.333333333333f)){
      _ctx.output = _ctx.state_pulse;
   }
   else
   {
      if(wave < (0.666666666667f)){
         _ctx.output = (2.f * _ctx.state_saw);
      }
      else
      {
         _ctx.output = (2.f * _ctx.state_triang * (1.f + pw));
      }
   }
   _ctx.output = Blit_dcblock(_ctx._inst1,_ctx.output);
   return float_clip((_ctx.output * 0.25f),(-1.f),1.f);
}


