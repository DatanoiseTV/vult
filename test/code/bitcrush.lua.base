
local this = {}
local ffi = require("ffi")
function this.ternary(cond,then_,else_) if cond then return then_ else return else_ end end
function this.eps()             return 1e-18; end
function this.pi()              return 3.1415926535897932384; end
function this.random()          return math.random(); end
function this.irandom()         return math.floor(math.random() * 4294967296); end
function this.clip(x,low,high)  return (this.ternary(x<low,low,this.ternary(x>high,high,x))); end
function this.real(x)           return x; end
function this.int(x)            local int_part,_ = math.modf(x) return int_part; end
function this.sin(x)            return math.sin(x); end
function this.cos(x)            return math.cos(x); end
function this.abs(x)            return math.abs(x); end
function this.exp(x)            return math.exp(x); end
function this.floor(x)          return math.floor(x); end
function this.tan(x)            return math.tan(x); end
function this.tanh(x)           return math.tanh(x); end
function this.sqrt(x)           return x; end
function this.set(a,i,v)        a[i+1]=v; end
function this.get(a,i)          return a[i+1]; end
function this.makeArray(size,v) local a = {}; for i=1,size do a[i]=v end return a; end
function this.wrap_array(a)     return a; end
local Bitcrush_factor_c0 = {24.78750,24.78730,24.78670,24.78540,24.78300,24.77950,24.77450,24.76790,24.75940,24.74900,24.73630,24.72140,24.70410,24.68420,24.66170,24.63640,24.60830,24.57740,24.54350,24.50660,24.46670,24.42360,24.37750,24.32830,24.27590,24.22040,24.16180,24.10000,24.03510,23.96710,23.89600,23.82190,23.74470,23.66450,23.58140,23.49530,23.40640,23.31460,23.22010,23.12280,23.02280,22.92020,22.81500,22.70730,22.59720,22.48470,22.36980,22.25260,22.13330,22.01180,21.88820,21.76260,21.63510,21.50570,21.37440,21.24150,21.10680,20.97050,20.83260,20.69330,20.55250,20.41040,20.26700,20.12230,19.97650,19.82950,19.68150,19.53260,19.38270,19.23190,19.08030,18.92800,18.77500,18.62140,18.46710,18.31240,18.15710,18.00150,17.84550,17.68910,17.53250,17.37570,17.21870,17.06160,16.90430,16.74710,16.58990,16.43270,16.27560,16.11860,15.96180,15.80520,15.64890,15.49280,15.33710,15.18170,15.02670,14.87210,14.71800,14.56440,14.41130,14.25870,14.10660,13.95520,13.80440,13.65430,13.50480,13.35600,13.20790,13.06060,12.91400,12.76820,12.62320,12.47900,12.33570,12.19320,12.05160,11.91080,11.77100,11.63210,11.49410,11.35710,11.22100,11.08580,10.95170,10.81850,10.68630,10.55510,10.42500};
local Bitcrush_factor_c1 = {(-74.35910),(-74.31930),(-74.24140),(-74.12720),(-73.97850),(-73.79690),(-73.58400),(-73.34140),(-73.07050),(-72.77280),(-72.44970),(-72.10250),(-71.73250),(-71.34100),(-70.92910),(-70.49800),(-70.04890),(-69.58270),(-69.10050),(-68.60330),(-68.09210),(-67.56770),(-67.03110),(-66.48310),(-65.92460),(-65.35620),(-64.77880),(-64.19300),(-63.59970),(-62.99930),(-62.39270),(-61.78040),(-61.16290),(-60.54090),(-59.91490),(-59.28540),(-58.65300),(-58.01800),(-57.38090),(-56.74230),(-56.10240),(-55.46180),(-54.82070),(-54.17950),(-53.53870),(-52.89840),(-52.25910),(-51.62100),(-50.98450),(-50.34970),(-49.71700),(-49.08660),(-48.45870),(-47.83350),(-47.21130),(-46.59230),(-45.97660),(-45.36450),(-44.75600),(-44.15140),(-43.55070),(-42.95420),(-42.36200),(-41.77420),(-41.19080),(-40.61210),(-40.03810),(-39.46890),(-38.90450),(-38.34520),(-37.79090),(-37.24160),(-36.69760),(-36.15870),(-35.62520),(-35.09690),(-34.57400),(-34.05650),(-33.54450),(-33.03780),(-32.53670),(-32.04100),(-31.55090),(-31.06620),(-30.58710),(-30.11350),(-29.64540),(-29.18290),(-28.72590),(-28.27440),(-27.82840),(-27.38790),(-26.95280),(-26.52320),(-26.09910),(-25.68040),(-25.26700),(-24.85910),(-24.45650),(-24.05920),(-23.66720),(-23.28040),(-22.89880),(-22.52250),(-22.15130),(-21.78520),(-21.42410),(-21.06810),(-20.71710),(-20.37110),(-20.03000),(-19.69370),(-19.36230),(-19.03570),(-18.71380),(-18.39660),(-18.08400),(-17.77610),(-17.47270),(-17.17390),(-16.87950),(-16.58950),(-16.30390),(-16.02270),(-15.74570),(-15.47300),(-15.20440),(-14.94000),(-14.67970)};
local Bitcrush_factor_c2 = {110.24550,107.69170,105.19700,102.76010,100.37970,98.05440,95.78300,93.56420,91.39670,89.27950,87.21140,85.19110,83.21770,81.28990,79.40690,77.56740,75.77060,74.01530,72.30080,70.62590,68.98990,67.39170,65.83060,64.30560,62.81600,61.36090,59.93940,58.55090,57.19460,55.86970,54.57550,53.31120,52.07630,50.86990,49.69150,48.54040,47.41600,46.31760,45.24460,44.19660,43.17270,42.17260,41.19570,40.24140,39.30920,38.39860,37.50910,36.64020,35.79150,34.96230,34.15240,33.36130,32.58850,31.83360,31.09610,30.37580,29.67210,28.98480,28.31340,27.65750,27.01680,26.39090,25.77960,25.18240,24.59910,24.02920,23.47260,22.92880,22.39770,21.87890,21.37200,20.87690,20.39330,19.92090,19.45950,19.00870,18.56830,18.13820,17.71800,17.30760,16.90670,16.51500,16.13240,15.75870,15.39370,15.03710,14.68880,14.34850,14.01610,13.69140,13.37430,13.06440,12.76180,12.46620,12.17740,11.89530,11.61970,11.35060,11.08760,10.83080,10.57990,10.33480,10.09540,9.86150,9.63310,9.41000,9.19200,8.97900,8.77100,8.56790,8.36940,8.17550,7.98610,7.80110,7.62040,7.44390,7.27140,7.10300,6.93840,6.77770,6.62070,6.46730,6.31750,6.17120,6.02820,5.88860,5.75220,5.61890,5.48880};
function this.Bitcrush_factor(cv)
   local index = this.clip(this.int((127.00000 * cv)),0,127);
   return (Bitcrush_factor_c0[index+1] + (cv * (Bitcrush_factor_c1[index+1] + (Bitcrush_factor_c2[index+1] * cv))));

end

function this.Bitcrush_process(_ctx,i,cv)
   local out = i;
   if (cv == 0.00000) then
      out = i;

   else

      local b = 0.0;
      b = this.Bitcrush_factor(cv);
      local x = 0;
      x = this.int((i * b));
      out = (this.real(x) / b);

   end
   return out;

end

function this.Bitcrush_noteOn(_ctx,note,velocity,channel)

end

function this.Bitcrush_noteOff(_ctx,note,channel)

end

function this.Bitcrush_controlChange(_ctx,control,value,channel)

end

function this.Bitcrush_default(_ctx)

end


function this.process(i,cv) return this.Bitcrush_process(i,cv) end
function this.noteOn(note,velocity,channel) return this.Bitcrush_noteOn(note,velocity,channel) end
function this.noteOff(note,channel) return this.Bitcrush_noteOff(note,channel) end
function this.controlChange(control,value,channel) return this.Bitcrush_controlChange(control,value,channel) end
function this.init() return this.Bitcrush_process_init() end
function this.default(ctx) return this.Bitcrush_default(ctx) end
this.config = { inputs = 2, outputs = 1, noteon_inputs = 3, noteoff_inputs = 2, controlchange_inputs = 3, is_active = false }
return this
