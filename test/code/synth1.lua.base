

function ternary(cond,then_,else_) if cond then return then_() else return else_() end end
function ternary_value(cond,then_,else_) if cond then return then_ else return else_ end end
function eps()              return 1e-18; end
function pi()               return 3.1415926535897932384; end
function random()           return math.random(); end
function irandom()          return math.floor(math.random() * 4294967296); end
function clip(x,low,high)   if x < low then return low else if x > high then return high else return x end end end
function real(x)            return x; end
function int(x)             local int_part,_ = math.modf(x) return int_part; end
function sin(x)             return math.sin(x); end
function cos(x)             return math.cos(x); end
function abs(x)             return math.abs(x); end
function exp(x)             return math.exp(x); end
function floor(x)           return math.floor(x); end
function tan(x)             return math.tan(x); end
function tanh(x)            return math.tanh(x); end
function pow(a,b)           return math.pow(a,b); end
function log10(x)           return math.log10(x); end
function log(x)           return math.log(x); end
function sqrt(x)            return x; end
function set(a, i, v)       a[i+1]=v; end
function get(a, i)          return a[i+1]; end
function makeArray(size, v) local a = {}; for i=1,size do a[i]=v end return a; end
function makeComplexArray(size, f) local a = {}; for i=1,size do a[i]=f() end return a; end
function wrap_array(a)      return a; end

function Synth1__ctx_type_0_init()
   local _ctx = {};
   _ctx.x = 0.;
   return _ctx;

end

function Synth1_smooth_init()
   return Synth1__ctx_type_0_init();
end

function Synth1_smooth(_ctx,input)
   _ctx.x = (_ctx.x + (0.005 * (input + (- _ctx.x))));
   return _ctx.x;

end

function Synth1__ctx_type_1_init()
   local _ctx = {};
   _ctx.pre_x = 0.;
   return _ctx;

end

function Synth1_change_init()
   return Synth1__ctx_type_1_init();
end

function Synth1_change(_ctx,x)
   local v = (_ctx.pre_x ~= x);
   _ctx.pre_x = x;
   return v;

end

function Synth1__ctx_type_2_init()
   local _ctx = {};
   _ctx.pre_x = 0;
   return _ctx;

end

function Synth1_edge_init()
   return Synth1__ctx_type_2_init();
end

function Synth1_edge(_ctx,x)
   local v = ((_ctx.pre_x ~= x) and (_ctx.pre_x == 0));
   _ctx.pre_x = x;
   return v;

end

function Synth1__ctx_type_3_init()
   local _ctx = {};
   _ctx.count = 0;
   return _ctx;

end

function Synth1_each_init()
   return Synth1__ctx_type_3_init();
end

function Synth1_each(_ctx,n)
   local ret = (_ctx.count == 0);
   _ctx.count = ((1 + _ctx.count) % n);
   return ret;

end

function Synth1_pitchToRate(d)
   return (0.0001854 * exp((0.0577623 * d)));
end

function Synth1__ctx_type_5_init()
   local _ctx = {};
   _ctx.rate = 0.;
   _ctx.phase = 0.;
   _ctx._inst171 = Synth1__ctx_type_1_init();
   return _ctx;

end

function Synth1_phasor_init()
   return Synth1__ctx_type_5_init();
end

function Synth1_phasor(_ctx,pitch,reset)
   if Synth1_change(_ctx._inst171,pitch) then
      _ctx.rate = Synth1_pitchToRate(pitch);
   end
   if reset then
      _ctx.phase = 0.;
   else

      _ctx.phase = ((_ctx.phase + _ctx.rate) % 1.);
   end
   return _ctx.phase;

end

function Synth1__ctx_type_6_init()
   local _ctx = {};
   _ctx.phase = 0.;
   _ctx._inst192 = Synth1__ctx_type_2_init();
   return _ctx;

end

function Synth1_lfo_init()
   return Synth1__ctx_type_6_init();
end

function Synth1_lfo(_ctx,f,gate)
   local rate = (0.0002268 * f);
   if Synth1_edge(_ctx._inst192,gate) then
      _ctx.phase = 0.;
   end
   _ctx.phase = (_ctx.phase + rate);
   if (_ctx.phase > 1.) then
      _ctx.phase = ((-1.) + _ctx.phase);
   end
   return ((-0.5) + sin((6.2831854 * _ctx.phase)));

end

function Synth1__ctx_type_7_init()
   local _ctx = {};
   _ctx.volume = 0.;
   _ctx.pre_phase1 = 0.;
   _ctx.pitch = 0.;
   _ctx.n4 = 0;
   _ctx.n3 = 0;
   _ctx.n2 = 0;
   _ctx.n1 = 0;
   _ctx.lfo_rate = 0.;
   _ctx.lfo_amt = 0.;
   _ctx.gate = 0;
   _ctx.detune = 0.;
   _ctx.count = 0;
   _ctx._inst6c9 = Synth1__ctx_type_0_init();
   _ctx._inst5c9 = Synth1__ctx_type_0_init();
   _ctx._inst4a2 = Synth1__ctx_type_5_init();
   _ctx._inst3c9 = Synth1__ctx_type_0_init();
   _ctx._inst2a2 = Synth1__ctx_type_5_init();
   _ctx._inst1c8 = Synth1__ctx_type_6_init();
   return _ctx;

end

function Synth1_process_init()
   return Synth1__ctx_type_7_init();
end

function Synth1_process(_ctx,input)
   local lfo_val = (_ctx.lfo_amt * Synth1_lfo(_ctx._inst1c8,_ctx.lfo_rate,_ctx.gate));
   local phase1 = Synth1_phasor(_ctx._inst2a2,_ctx.pitch,false);
   local comp = (1. + (- phase1));
   local reset = ((_ctx.pre_phase1 + (- phase1)) > 0.5);
   _ctx.pre_phase1 = phase1;
   local phase2 = Synth1_phasor(_ctx._inst4a2,(_ctx.pitch + (32. * Synth1_smooth(_ctx._inst3c9,(_ctx.detune + lfo_val)))),reset);
   local sine = sin((6.2831854 * phase2));
   local gate_value = 0.0;
   if (_ctx.gate > 0) then
      gate_value = 1.;
   else

      gate_value = 0.;
   end
   return (comp * sine * Synth1_smooth(_ctx._inst5c9,_ctx.volume) * Synth1_smooth(_ctx._inst6c9,gate_value));

end

function Synth1_noteOn_init()
   return Synth1__ctx_type_7_init();
end

function Synth1_noteOn(_ctx,note,velocity,channel)
   if (_ctx.count == 0) then
      _ctx.n1 = note;
      _ctx.pitch = real(note);

   else

      if (_ctx.count == 1) then
         _ctx.n2 = note;
         _ctx.pitch = real(note);

      else

         if (_ctx.count == 2) then
            _ctx.n3 = note;
            _ctx.pitch = real(note);

         else

            if (_ctx.count == 3) then
               _ctx.n4 = note;
               _ctx.pitch = real(note);

            end
         end
      end
   end
   if (_ctx.count <= 4) then
      _ctx.count = (1 + _ctx.count);
   end
   if (_ctx.count > 0) then
      _ctx.gate = 1;
   else

      _ctx.gate = 0;
   end

end

function Synth1_noteOff_init()
   return Synth1__ctx_type_7_init();
end

function Synth1_noteOff(_ctx,note,channel)
   local found = false;
   if (note == _ctx.n1) then
      local _tmp_34_0 = _ctx.n2;
      local _tmp_34_1 = _ctx.n3;
      local _tmp_34_2 = _ctx.n4;
      _ctx.n1 = _tmp_34_0;
      _ctx.n2 = _tmp_34_1;
      _ctx.n3 = _tmp_34_2;
      found = true;

   else

      if (note == _ctx.n2) then
         local _tmp_35_0 = _ctx.n3;
         local _tmp_35_1 = _ctx.n4;
         _ctx.n2 = _tmp_35_0;
         _ctx.n3 = _tmp_35_1;
         found = true;

      else

         if (note == _ctx.n3) then
            _ctx.n3 = _ctx.n4;
            found = true;

         else

            if (note == _ctx.n4) then
               found = true;
            end
         end
      end
   end
   if (found and (_ctx.count > 0)) then
      _ctx.count = (-1 + _ctx.count);
   end
   if (_ctx.count > 0) then
      _ctx.gate = 1;
   else

      _ctx.gate = 0;
   end
   if (_ctx.count == 1) then
      _ctx.pitch = real(_ctx.n1);
   end
   if (_ctx.count == 2) then
      _ctx.pitch = real(_ctx.n2);
   end
   if (_ctx.count == 3) then
      _ctx.pitch = real(_ctx.n3);
   end
   if (_ctx.count == 4) then
      _ctx.pitch = real(_ctx.n4);
   end

end

function Synth1_controlChange_init()
   return Synth1__ctx_type_7_init();
end

function Synth1_controlChange(_ctx,control,value,channel)
   if (control == 30) then
      _ctx.volume = (0.0078741 * value);
   end
   if (control == 31) then
      _ctx.detune = (0.0078741 * value);
   end
   if (control == 32) then
      _ctx.lfo_rate = (0.0078741 * value);
   end
   if (control == 33) then
      _ctx.lfo_amt = (2. * ((-0.5) + (0.0078741 * value)));
   end

end

function Synth1_default_init()
   return Synth1__ctx_type_7_init();
end

function Synth1_default(_ctx)
   _ctx.volume = 1.;
   _ctx.pitch = 45.;
   _ctx.detune = 0.8;
   _ctx.lfo_rate = 0.0700001;
   _ctx.lfo_amt = (-0.8);

end


local this = {}
function this.process(ctx,input) return Synth1_process(ctx,input) end
function this.noteOn(ctx,note,velocity,channel) return Synth1_noteOn(ctx,note,velocity,channel) end
function this.noteOff(ctx,note,channel) return Synth1_noteOff(ctx,note,channel) end
function this.controlChange(ctx,control,value,channel) return Synth1_controlChange(ctx,control,value,channel) end
function this.init() return Synth1_process_init() end
function this.default(ctx) return Synth1_default(ctx) end
this.config = { inputs = 2, outputs = 1, noteon_inputs = 4, noteoff_inputs = 3, controlchange_inputs = 4, is_active = true }
return this
