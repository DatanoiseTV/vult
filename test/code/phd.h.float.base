
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#ifndef PHD_H
#define PHD_H
#include <stdint.h>
#include <math.h>
#include "vultin.h"

typedef struct Util__ctx_type_0 {
   uint8_t pre;
} Util__ctx_type_0;

typedef Util__ctx_type_0 Util_edge_type;

void Util__ctx_type_0_init(Util__ctx_type_0 &_output_);

void Util_edge_init(Util__ctx_type_0 &_output_);

uint8_t Util_edge(Util__ctx_type_0 &_ctx, uint8_t x);

typedef struct Util__ctx_type_1 {
   float pre_x;
} Util__ctx_type_1;

typedef Util__ctx_type_1 Util_change_type;

void Util__ctx_type_1_init(Util__ctx_type_1 &_output_);

void Util_change_init(Util__ctx_type_1 &_output_);

uint8_t Util_change(Util__ctx_type_1 &_ctx, float x);

float Util_map(float x, float x0, float x1, float y0, float y1);

typedef struct Util__ctx_type_3 {
   float y1;
   float x1;
} Util__ctx_type_3;

typedef Util__ctx_type_3 Util_dcblock_type;

void Util__ctx_type_3_init(Util__ctx_type_3 &_output_);

void Util_dcblock_init(Util__ctx_type_3 &_output_);

float Util_dcblock(Util__ctx_type_3 &_ctx, float x0);

typedef struct Util__ctx_type_4 {
   float x;
} Util__ctx_type_4;

typedef Util__ctx_type_4 Util_smooth_type;

void Util__ctx_type_4_init(Util__ctx_type_4 &_output_);

void Util_smooth_init(Util__ctx_type_4 &_output_);

float Util_smooth(Util__ctx_type_4 &_ctx, float input);

typedef struct Util__ctx_type_5 {
   float x0;
} Util__ctx_type_5;

typedef Util__ctx_type_5 Util_average2_type;

void Util__ctx_type_5_init(Util__ctx_type_5 &_output_);

void Util_average2_init(Util__ctx_type_5 &_output_);

float Util_average2(Util__ctx_type_5 &_ctx, float x1);

float Util_cubic_clipper(float x);

static const float Util_pitchToRate_1024_c0[33] = {0.189842f,0.191326f,0.198689f,0.219425f,0.265677f,0.356438f,0.520651f,0.801560f,1.262758f,1.996562f,3.135544f,4.868347f,7.461281f,11.287715f,16.867996f,24.923305f,36.448521f,52.809903f,75.876616f,108.197225f,153.232414f,215.672344f,301.846626f,420.298038f,582.505178f,803.812129f,1104.880165f,1513.124126f,2065.373952f,2810.230550f,3812.902888f,5159.525580f,6963.761469f};
static const float Util_pitchToRate_1024_c1[33] = {0.010913f,0.010176f,0.008334f,0.004867f,(-0.000939f),(-0.010061f),(-0.023820f),(-0.044002f),(-0.073002f),(-0.114025f),(-0.171341f),(-0.250621f),(-0.359381f),(-0.507548f),(-0.708208f),(-0.978575f),(-1.341250f),(-1.825848f),(-2.471123f),(-3.327721f),(-4.461658f),(-5.959006f),(-7.931626f),(-10.525312f),(-13.929212f),(-18.387588f),(-24.219785f),(-31.835151f),(-41.769557f),(-54.706455f),(-71.541226f),(-93.422592f),(-121.823163f)};
static const float Util_pitchToRate_1024_c2[33] = {0.000356f,0.000447f,0.000562f,0.000707f,0.000889f,0.001119f,0.001407f,0.001769f,0.002225f,0.002799f,0.003520f,0.004426f,0.005567f,0.007001f,0.008805f,0.011074f,0.013927f,0.017515f,0.022028f,0.027704f,0.034841f,0.043818f,0.055107f,0.069305f,0.087163f,0.109617f,0.137862f,0.173377f,0.218054f,0.274227f,0.344892f,0.433780f,0.545543f};
float Util_pitchToRate_1024(float pitch);

static const float Util_pitchToRate_c0[33] = {0.000185f,0.000187f,0.000194f,0.000214f,0.000259f,0.000348f,0.000508f,0.000783f,0.001233f,0.001950f,0.003062f,0.004754f,0.007286f,0.011023f,0.016473f,0.024339f,0.035594f,0.051572f,0.074098f,0.105661f,0.149641f,0.210618f,0.294772f,0.410447f,0.568853f,0.784973f,1.078985f,1.477660f,2.016967f,2.744366f,3.723538f,5.038599f,6.800548f};
static const float Util_pitchToRate_c1[33] = {0.000011f,0.000010f,0.000008f,0.000005f,(-0.000001f),(-0.000010f),(-0.000023f),(-0.000043f),(-0.000071f),(-0.000111f),(-0.000167f),(-0.000245f),(-0.000351f),(-0.000496f),(-0.000692f),(-0.000956f),(-0.001310f),(-0.001783f),(-0.002413f),(-0.003250f),(-0.004357f),(-0.005819f),(-0.007746f),(-0.010279f),(-0.013603f),(-0.017957f),(-0.023652f),(-0.031089f),(-0.040791f),(-0.053424f),(-0.069864f),(-0.091233f),(-0.118968f)};
static const float Util_pitchToRate_c2[33] = {0.000000f,0.000000f,0.000001f,0.000001f,0.000001f,0.000001f,0.000001f,0.000002f,0.000002f,0.000003f,0.000003f,0.000004f,0.000005f,0.000007f,0.000009f,0.000011f,0.000014f,0.000017f,0.000022f,0.000027f,0.000034f,0.000043f,0.000054f,0.000068f,0.000085f,0.000107f,0.000135f,0.000169f,0.000213f,0.000268f,0.000337f,0.000424f,0.000533f};
float Util_pitchToRate(float pitch);

float Util_cvToPitch(float cv);

static const float Util_cvToRate_1024_c0[33] = {0.759367f,0.762877f,0.779737f,0.825652f,0.924648f,1.112398f,1.440687f,1.983392f,2.844434f,4.168310f,6.153994f,9.073195f,13.294301f,19.313616f,27.796102f,39.628290f,55.986657f,78.426750f,108.998215f,150.387464f,206.118533f,280.781675f,380.357513f,512.612775f,687.616764f,918.349028f,1221.607949f,1619.052235f,2138.629322f,2815.436671f,3696.162408f,4838.694117f,6318.211520f};
static const float Util_cvToRate_1024_c1[33] = {5.245583f,4.998943f,4.403089f,3.319116f,1.564497f,(-1.099256f),(-4.982226f),(-10.485864f),(-18.127956f),(-28.574100f),(-42.677360f),(-61.528124f),(-86.516770f),(-119.412133f),(-162.460318f),(-218.508269f),(-291.156786f),(-384.956978f),(-505.652297f),(-660.458539f),(-858.494950f),(-1111.173376f),(-1432.858445f),(-1841.544459f),(-2359.816046f),(-3015.795467f),(-3844.838138f),(-4891.101919f),(-6210.197274f),(-7868.993868f),(-9955.778008f),(-12575.747874f),(-15862.234621f)};
static const float Util_cvToRate_1024_c2[33] = {20.125592f,24.457572f,29.722000f,36.119582f,43.894227f,53.342343f,64.824143f,78.777366f,95.733987f,116.340471f,141.382451f,171.814646f,208.797363f,253.740413f,308.357211f,374.730622f,455.389632f,553.410816f,672.536916f,817.290611f,993.216833f,1207.000622f,1466.803875f,1782.529271f,2166.244997f,2632.487590f,3199.072620f,3887.673024f,4724.859179f,5741.245302f,6977.441755f,8479.290028f,10304.455486f};
float Util_cvToRate_1024(float cv);

static const float Util_cvToRate_c0[33] = {0.000742f,0.000745f,0.000761f,0.000806f,0.000903f,0.001086f,0.001407f,0.001937f,0.002778f,0.004071f,0.006010f,0.008861f,0.012983f,0.018861f,0.027145f,0.038700f,0.054674f,0.076589f,0.106444f,0.146863f,0.201288f,0.274201f,0.371443f,0.500598f,0.671501f,0.896825f,1.192977f,1.581106f,2.088505f,2.749450f,3.609534f,4.725287f,6.170128f};
static const float Util_cvToRate_c1[33] = {0.005123f,0.004882f,0.004300f,0.003241f,0.001528f,(-0.001073f),(-0.004865f),(-0.010240f),(-0.017703f),(-0.027904f),(-0.041677f),(-0.060086f),(-0.084489f),(-0.116613f),(-0.158653f),(-0.213387f),(-0.284333f),(-0.375935f),(-0.493801f),(-0.644979f),(-0.838374f),(-1.085130f),(-1.399276f),(-1.798383f),(-2.304508f),(-2.945113f),(-3.754725f),(-4.776467f),(-6.064646f),(-7.684564f),(-9.722439f),(-12.281004f),(-15.490463f)};
static const float Util_cvToRate_c2[33] = {0.019654f,0.023884f,0.029025f,0.035273f,0.042865f,0.052092f,0.063305f,0.076931f,0.093490f,0.113614f,0.138069f,0.167788f,0.203904f,0.247793f,0.301130f,0.365948f,0.444716f,0.540440f,0.656774f,0.798135f,0.969938f,1.178712f,1.432426f,1.740751f,2.115474f,2.570789f,3.124094f,3.796556f,4.614120f,5.606685f,6.813908f,8.280557f,10.062945f};
float Util_cvToRate(float cv);

float Util_pitchToCv(float pitch);

static const float Util_cvToperiod_c0[33] = {674.246035f,671.553838f,662.761782f,646.759522f,623.799428f,594.871802f,561.298277f,524.476942f,485.731369f,446.229382f,406.947440f,368.663774f,331.968683f,297.284156f,264.887666f,234.936857f,207.493124f,182.543016f,160.016907f,139.804832f,121.769557f,105.757117f,91.605116f,79.149088f,68.227249f,58.683895f,50.371734f,43.153355f,36.902033f,31.502025f,26.848494f,22.847166f,19.413794f};
static const float Util_cvToperiod_c1[33] = {(-4656.656311f),(-4481.960579f),(-4198.686133f),(-3855.751543f),(-3487.139455f),(-3115.858821f),(-2756.930319f),(-2419.625141f),(-2109.134753f),(-1827.808334f),(-1576.062963f),(-1353.047092f),(-1157.118864f),(-986.186250f),(-837.944665f),(-710.039113f),(-600.171234f),(-506.166566f),(-426.013463f),(-357.882151f),(-300.130190f),(-251.298904f),(-210.104105f),(-175.423450f),(-146.282114f),(-121.837895f),(-101.366537f),(-84.247726f),(-69.952082f),(-58.029259f),(-48.097248f),(-39.832833f),(-32.963186f)};
static const float Util_cvToperiod_c2[33] = {14548.823162f,11715.369522f,9433.744675f,7596.477297f,6117.026622f,4925.706117f,3966.401040f,3193.925264f,2571.892879f,2071.004308f,1667.666208f,1342.880152f,1081.347751f,870.750049f,701.167268f,564.611553f,454.650724f,366.105298f,294.804521f,237.389916f,191.157082f,153.928316f,123.950032f,99.810164f,80.371652f,64.718885f,52.114569f,41.965005f,33.792117f,27.210939f,21.911477f,17.644111f,14.207835f};
float Util_cvToperiod(float cv);

static const float Util_cvTokHz_c0[33] = {0.032703f,0.032916f,0.033958f,0.036857f,0.043242f,0.055616f,0.077724f,0.115069f,0.175614f,0.270739f,0.416537f,0.635567f,0.959207f,1.430818f,2.109960f,3.078021f,4.445697f,6.362909f,9.031922f,12.724677f,17.805619f,24.761735f,34.241990f,47.109042f,64.506928f,87.949557f,119.436234f,161.602273f,217.915148f,292.929619f,392.619240f,524.806645f,699.721497f};
static const float Util_cvTokHz_c1[33] = {0.225719f,0.212293f,0.179169f,0.117605f,0.015780f,(-0.142178f),(-0.377466f),(-0.718250f),(-1.201797f),(-1.877228f),(-2.809077f),(-4.081867f),(-5.806008f),(-8.125373f),(-11.227028f),(-15.353705f),(-20.819795f),(-28.031798f),(-37.514503f),(-49.944414f),(-66.192449f),(-87.378404f),(-114.940396f),(-150.723337f),(-197.091584f),(-257.072284f),(-334.537674f),(-434.436788f),(-563.089817f),(-728.561858f),(-941.137258f),(-1213.921328f),(-1563.603302f)};
static const float Util_cvTokHz_c2[33] = {0.876338f,1.088287f,1.351498f,1.678368f,2.084294f,2.588397f,3.214421f,3.991854f,4.957315f,6.156280f,7.645225f,9.494282f,11.790549f,14.642185f,18.183512f,22.581336f,28.042809f,34.825181f,43.247923f,53.707771f,66.697415f,82.828706f,102.861476f,127.739327f,158.634081f,197.000973f,244.647198f,303.817033f,377.297556f,468.549918f,581.872376f,722.602756f,897.369877f};
float Util_cvTokHz(float cv);

typedef struct Phase__ctx_type_0 {
   float rate;
   float phase;
   Util__ctx_type_0 _inst25;
   Util__ctx_type_1 _inst23;
} Phase__ctx_type_0;

typedef Phase__ctx_type_0 Phase_process_type;

void Phase__ctx_type_0_init(Phase__ctx_type_0 &_output_);

void Phase_process_init(Phase__ctx_type_0 &_output_);

float Phase_process(Phase__ctx_type_0 &_ctx, float cv, float reset);

typedef Phase__ctx_type_0 Phase_noteOn_type;

void Phase_noteOn_init(Phase__ctx_type_0 &_output_);

void Phase_noteOn(Phase__ctx_type_0 &_ctx, int note, int velocity, int channel);

typedef Phase__ctx_type_0 Phase_noteOff_type;

void Phase_noteOff_init(Phase__ctx_type_0 &_output_);

void Phase_noteOff(Phase__ctx_type_0 &_ctx, int note, int channel);

typedef Phase__ctx_type_0 Phase_controlChange_type;

void Phase_controlChange_init(Phase__ctx_type_0 &_output_);

void Phase_controlChange(Phase__ctx_type_0 &_ctx, int control, int value, int channel);

typedef Phase__ctx_type_0 Phase_default_type;

void Phase_default_init(Phase__ctx_type_0 &_output_);

void Phase_default(Phase__ctx_type_0 &_ctx);

static const float Tables_nsine_c0[129] = {0.000000f,(-0.000059f),(-0.000294f),(-0.000821f),(-0.001748f),(-0.003182f),(-0.005218f),(-0.007945f),(-0.011441f),(-0.015769f),(-0.020982f),(-0.027117f),(-0.034194f),(-0.042218f),(-0.051174f),(-0.061028f),(-0.071728f),(-0.083199f),(-0.095348f),(-0.108059f),(-0.121193f),(-0.134593f),(-0.148077f),(-0.161443f),(-0.174469f),(-0.186911f),(-0.198505f),(-0.208970f),(-0.218004f),(-0.225290f),(-0.230496f),(-0.233273f),(-0.233261f),(-0.230090f),(-0.223377f),(-0.212736f),(-0.197773f),(-0.178091f),(-0.153292f),(-0.122979f),(-0.086760f),(-0.044248f),0.004935f,0.061157f,0.124770f,0.196113f,0.275501f,0.363233f,0.459580f,0.564787f,0.679070f,0.802614f,0.935568f,1.078046f,1.230121f,1.391827f,1.563154f,1.744046f,1.934404f,2.134075f,2.342860f,2.560508f,2.786714f,3.021123f,3.263323f,3.512849f,3.769181f,4.031743f,4.299905f,4.572984f,4.850242f,5.130888f,5.414079f,5.698922f,5.984476f,6.269752f,6.553717f,6.835294f,7.113369f,7.386787f,7.654362f,7.914877f,8.167086f,8.409721f,8.641495f,8.861104f,9.067233f,9.258562f,9.433767f,9.591528f,9.730531f,9.849477f,9.947084f,10.022092f,10.073270f,10.099421f,10.099386f,10.072052f,10.016353f,9.931281f,9.815887f,9.669287f,9.490669f,9.279297f,9.034513f,8.755748f,8.442520f,8.094445f,7.711234f,7.292703f,6.838775f,6.349479f,5.824963f,5.265486f,4.671429f,4.043291f,3.381696f,2.687392f,1.961252f,1.204276f,0.417591f,(-0.397552f),(-1.239772f),(-2.107564f),(-2.999299f),(-3.913225f),(-4.847471f),(-5.800047f),(-6.768847f)};
static const float Tables_nsine_c1[129] = {6.284447f,6.299564f,6.329688f,6.374603f,6.433980f,6.507388f,6.594289f,6.694041f,6.805905f,6.929043f,7.062522f,7.205321f,7.356331f,7.514365f,7.678156f,7.846367f,8.017595f,8.190378f,8.363199f,8.534492f,8.702652f,8.866039f,9.022985f,9.171802f,9.310788f,9.438236f,9.552440f,9.651704f,9.734348f,9.798715f,9.843181f,9.866160f,9.866113f,9.841556f,9.791063f,9.713277f,9.606917f,9.470782f,9.303758f,9.104827f,8.873070f,8.607671f,8.307927f,7.973252f,7.603175f,7.197355f,6.755575f,6.277752f,5.763935f,5.214312f,4.629210f,4.009096f,3.354579f,2.666410f,1.945484f,1.192836f,0.409645f,(-0.402770f),(-1.242953f),(-2.109312f),(-3.000120f),(-3.913520f),(-4.847530f),(-5.800047f),(-6.768847f),(-7.751597f),(-8.745857f),(-9.749086f),(-10.758648f),(-11.771823f),(-12.785807f),(-13.797728f),(-14.804647f),(-15.803569f),(-16.791454f),(-17.765220f),(-18.721759f),(-19.657940f),(-20.570624f),(-21.456668f),(-22.312942f),(-23.136331f),(-23.923752f),(-24.672159f),(-25.378556f),(-26.040006f),(-26.653641f),(-27.216673f),(-27.726403f),(-28.180230f),(-28.575662f),(-28.910326f),(-29.181973f),(-29.388492f),(-29.527917f),(-29.598433f),(-29.598386f),(-29.526292f),(-29.380840f),(-29.160902f),(-28.865538f),(-28.494004f),(-28.045752f),(-27.520443f),(-26.917941f),(-26.238327f),(-25.481894f),(-24.649155f),(-23.740843f),(-22.757909f),(-21.701528f),(-20.573098f),(-19.374236f),(-18.106780f),(-16.772786f),(-15.374524f),(-13.914479f),(-12.395342f),(-10.820010f),(-9.191577f),(-7.513332f),(-5.788748f),(-4.021481f),(-2.215356f),(-0.374364f),1.497351f,3.395497f,5.315646f,7.253247f};
static const float Tables_nsine_c2[129] = {(-0.484400f),(-1.452033f),(-2.416169f),(-3.374483f),(-4.324668f),(-5.264435f),(-6.191519f),(-7.103687f),(-7.998741f),(-8.874526f),(-9.728932f),(-10.559900f),(-11.365428f),(-12.143575f),(-12.892468f),(-13.610302f),(-14.295347f),(-14.945953f),(-15.560554f),(-16.137667f),(-16.675904f),(-17.173967f),(-17.630656f),(-18.044871f),(-18.415615f),(-18.741994f),(-19.023222f),(-19.258621f),(-19.447625f),(-19.589777f),(-19.684736f),(-19.732273f),(-19.732273f),(-19.684736f),(-19.589777f),(-19.447625f),(-19.258621f),(-19.023222f),(-18.741994f),(-18.415615f),(-18.044871f),(-17.630656f),(-17.173967f),(-16.675904f),(-16.137667f),(-15.560554f),(-14.945953f),(-14.295347f),(-13.610302f),(-12.892468f),(-12.143575f),(-11.365428f),(-10.559900f),(-9.728932f),(-8.874526f),(-7.998741f),(-7.103687f),(-6.191519f),(-5.264435f),(-4.324668f),(-3.374483f),(-2.416169f),(-1.452033f),(-0.484400f),0.484400f,1.452033f,2.416169f,3.374483f,4.324668f,5.264435f,6.191519f,7.103687f,7.998741f,8.874526f,9.728932f,10.559900f,11.365428f,12.143575f,12.892468f,13.610302f,14.295347f,14.945953f,15.560554f,16.137667f,16.675904f,17.173967f,17.630656f,18.044871f,18.415615f,18.741994f,19.023222f,19.258621f,19.447625f,19.589777f,19.684736f,19.732273f,19.732273f,19.684736f,19.589777f,19.447625f,19.258621f,19.023222f,18.741994f,18.415615f,18.044871f,17.630656f,17.173967f,16.675904f,16.137667f,15.560554f,14.945953f,14.295347f,13.610302f,12.892468f,12.143575f,11.365428f,10.559900f,9.728932f,8.874526f,7.998741f,7.103687f,6.191519f,5.264435f,4.324668f,3.374483f,2.416169f,1.452033f,0.484400f,(-0.484400f)};
float Tables_nsine(float x);

typedef struct Phd__ctx_type_0 {
   float pre_phase1;
   Phase__ctx_type_0 _inst37;
   Util__ctx_type_4 _inst36;
   Phase__ctx_type_0 _inst35;
} Phd__ctx_type_0;

typedef Phd__ctx_type_0 Phd_process_type;

void Phd__ctx_type_0_init(Phd__ctx_type_0 &_output_);

void Phd_process_init(Phd__ctx_type_0 &_output_);

float Phd_process(Phd__ctx_type_0 &_ctx, float cv, float detune);

typedef Phd__ctx_type_0 Phd_noteOn_type;

void Phd_noteOn_init(Phd__ctx_type_0 &_output_);

void Phd_noteOn(Phd__ctx_type_0 &_ctx, int note, int velocity, int channel);

typedef Phd__ctx_type_0 Phd_noteOff_type;

void Phd_noteOff_init(Phd__ctx_type_0 &_output_);

void Phd_noteOff(Phd__ctx_type_0 &_ctx, int note, int channel);

typedef Phd__ctx_type_0 Phd_controlChange_type;

void Phd_controlChange_init(Phd__ctx_type_0 &_output_);

void Phd_controlChange(Phd__ctx_type_0 &_ctx, int control, int value, int channel);

typedef Phd__ctx_type_0 Phd_default_type;

void Phd_default_init(Phd__ctx_type_0 &_output_);

void Phd_default(Phd__ctx_type_0 &_ctx);



#endif // PHD_H
