
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#include "monocv.h"

void Util__ctx_type_0_init(Util__ctx_type_0 &_output_){
   Util__ctx_type_0 _ctx;
   _ctx.pre = 0;
   _output_ = _ctx;
   return ;
}

void Util_edge_init(Util__ctx_type_0 &_output_){
   Util__ctx_type_0_init(_output_);
   return ;
}

uint8_t Util_edge(Util__ctx_type_0 &_ctx, uint8_t x){
   uint8_t ret;
   ret = (x && bool_not(_ctx.pre));
   _ctx.pre = x;
   return ret;
}

void Util__ctx_type_1_init(Util__ctx_type_1 &_output_){
   Util__ctx_type_1 _ctx;
   _ctx.pre_x = 0x0 /* 0.000000 */;
   _output_ = _ctx;
   return ;
}

void Util_change_init(Util__ctx_type_1 &_output_){
   Util__ctx_type_1_init(_output_);
   return ;
}

uint8_t Util_change(Util__ctx_type_1 &_ctx, fix16_t x){
   uint8_t v;
   v = (_ctx.pre_x != x);
   _ctx.pre_x = x;
   return v;
}

fix16_t Util_map(fix16_t x, fix16_t x0, fix16_t x1, fix16_t y0, fix16_t y1){
   return fix_add(fix_div(fix_mul(fix_add(x,(- x0)),fix_add(y1,(- y0))),fix_add(x1,(- x0))),y0);
}

void Util__ctx_type_3_init(Util__ctx_type_3 &_output_){
   Util__ctx_type_3 _ctx;
   _ctx.y1 = 0x0 /* 0.000000 */;
   _ctx.x1 = 0x0 /* 0.000000 */;
   _output_ = _ctx;
   return ;
}

void Util_dcblock_init(Util__ctx_type_3 &_output_){
   Util__ctx_type_3_init(_output_);
   return ;
}

fix16_t Util_dcblock(Util__ctx_type_3 &_ctx, fix16_t x0){
   fix16_t y0;
   y0 = fix_add(fix_add(x0,(- _ctx.x1)),fix_mul(_ctx.y1,0xfeb8 /* 0.995000 */));
   _ctx.x1 = x0;
   _ctx.y1 = y0;
   return y0;
}

void Util__ctx_type_4_init(Util__ctx_type_4 &_output_){
   Util__ctx_type_4 _ctx;
   _ctx.x = 0x0 /* 0.000000 */;
   _output_ = _ctx;
   return ;
}

void Util_smooth_init(Util__ctx_type_4 &_output_){
   Util__ctx_type_4_init(_output_);
   return ;
}

fix16_t Util_smooth(Util__ctx_type_4 &_ctx, fix16_t input){
   _ctx.x = fix_add(_ctx.x,fix_mul(fix_add(input,(- _ctx.x)),0x147 /* 0.005000 */));
   return _ctx.x;
}

void Util__ctx_type_5_init(Util__ctx_type_5 &_output_){
   Util__ctx_type_5 _ctx;
   _ctx.x0 = 0x0 /* 0.000000 */;
   _output_ = _ctx;
   return ;
}

void Util_average2_init(Util__ctx_type_5 &_output_){
   Util__ctx_type_5_init(_output_);
   return ;
}

fix16_t Util_average2(Util__ctx_type_5 &_ctx, fix16_t x1){
   fix16_t result;
   result = fix_mul(fix_add(_ctx.x0,x1),0x8000 /* 0.500000 */);
   _ctx.x0 = x1;
   return result;
}

fix16_t Util_pitchToRate_1024(fix16_t pitch){
   int index;
   index = int_clip(fix_to_int(fix_mul(0x3e7c /* 0.244094 */,pitch)),0,31);
   return fix_add(fix_get(fix_wrap_array(Util_pitchToRate_1024_c0),index),fix_mul(pitch,fix_add(fix_get(fix_wrap_array(Util_pitchToRate_1024_c1),index),fix_mul(fix_get(fix_wrap_array(Util_pitchToRate_1024_c2),index),pitch))));
}

fix16_t Util_pitchToRate(fix16_t pitch){
   int index;
   index = int_clip(fix_to_int(fix_mul(0x3e7c /* 0.244094 */,pitch)),0,31);
   return fix_add(fix_get(fix_wrap_array(Util_pitchToRate_c0),index),fix_mul(pitch,fix_add(fix_get(fix_wrap_array(Util_pitchToRate_c1),index),fix_mul(fix_get(fix_wrap_array(Util_pitchToRate_c2),index),pitch))));
}

fix16_t Util_cvToPitch(fix16_t cv){
   return fix_add(fix_mul(cv,0x780000 /* 120.000000 */),0x180000 /* 24.000000 */);
}

fix16_t Util_cvToRate_1024(fix16_t cv){
   int index;
   index = int_clip(fix_to_int(fix_mul(0x2271c7 /* 34.444444 */,cv)),0,31);
   return fix_add(fix_get(fix_wrap_array(Util_cvToRate_1024_c0),index),fix_mul(cv,fix_add(fix_get(fix_wrap_array(Util_cvToRate_1024_c1),index),fix_mul(fix_get(fix_wrap_array(Util_cvToRate_1024_c2),index),cv))));
}

fix16_t Util_cvToRate(fix16_t cv){
   int index;
   index = int_clip(fix_to_int(fix_mul(0x2271c7 /* 34.444444 */,cv)),0,31);
   return fix_add(fix_get(fix_wrap_array(Util_cvToRate_c0),index),fix_mul(cv,fix_add(fix_get(fix_wrap_array(Util_cvToRate_c1),index),fix_mul(fix_get(fix_wrap_array(Util_cvToRate_c2),index),cv))));
}

fix16_t Util_pitchToCv(fix16_t pitch){
   return fix_mul(0x222 /* 0.008333 */,fix_add((-0x180000 /* -24.000000 */),pitch));
}

fix16_t Util_cvToperiod(fix16_t cv){
   int index;
   index = int_clip(fix_to_int(fix_mul(0x1f0000 /* 31.000000 */,cv)),0,31);
   return fix_add(fix_get(fix_wrap_array(Util_cvToperiod_c0),index),fix_mul(cv,fix_add(fix_get(fix_wrap_array(Util_cvToperiod_c1),index),fix_mul(fix_get(fix_wrap_array(Util_cvToperiod_c2),index),cv))));
}

void Monocv__ctx_type_0_init(Monocv__ctx_type_0 &_output_){
   Monocv__ctx_type_0 _ctx;
   _ctx.pre = 0;
   int_init_array(4,0,_ctx.notes);
   _ctx.count = 0;
   _output_ = _ctx;
   return ;
}

void Monocv_mono_noteOn_init(Monocv__ctx_type_0 &_output_){
   Monocv__ctx_type_0_init(_output_);
   return ;
}

int Monocv_mono_noteOn(Monocv__ctx_type_0 &_ctx, int n){
   uint8_t _cond_35;
   _cond_35 = (_ctx.count < 4);
   if(_cond_35){
      int_set(_ctx.notes,_ctx.count,n);
      _ctx.pre = n;
      uint8_t _cond_34;
      _cond_34 = (_ctx.count < 4);
      if(_cond_34){
         _ctx.count = (_ctx.count + 1);
      }
   }
   return _ctx.pre;
}

void Monocv_mono_noteOff_init(Monocv__ctx_type_0 &_output_){
   Monocv__ctx_type_0_init(_output_);
   return ;
}

int Monocv_mono_noteOff(Monocv__ctx_type_0 &_ctx, int n){
   uint8_t found;
   found = 0;
   int pos;
   int i;
   i = 0;
   uint8_t _cond_36;
   _cond_36 = (_ctx.count == 0);
   if(_cond_36){
      return _ctx.pre;
   }
   while((i < 4) && bool_not(found)){
      uint8_t _cond_37;
      _cond_37 = (int_get(_ctx.notes,i) == n);
      if(_cond_37){
         pos = i;
         found = 1;
      }
      i = (i + 1);
   }
   if(found){
      int k;
      k = (pos + 1);
      while(k < 4){
         int_set(_ctx.notes,(k + (-1)),int_get(_ctx.notes,k));
         k = (k + 1);
      }
      uint8_t _cond_38;
      _cond_38 = (found && (_ctx.count > 0));
      if(_cond_38){
         _ctx.count = (_ctx.count + (-1));
         _ctx.pre = int_get(_ctx.notes,(_ctx.count + (-1)));
      }
   }
   return _ctx.pre;
}

void Monocv_mono_isGateOn_init(Monocv__ctx_type_0 &_output_){
   Monocv__ctx_type_0_init(_output_);
   return ;
}

uint8_t Monocv_mono_isGateOn(Monocv__ctx_type_0 &_ctx){
   return (_ctx.count > 0);
}

void Monocv__ctx_type_1_init(Monocv__ctx_type_1 &_output_){
   Monocv__ctx_type_1 _ctx;
   _ctx.vel = 0x0 /* 0.000000 */;
   Monocv__ctx_type_0_init(_ctx.notes);
   _ctx.gate = 0x0 /* 0.000000 */;
   _ctx.cv = 0x0 /* 0.000000 */;
   _ctx.channel_in = 0;
   _ctx.active_note = 0;
   _output_ = _ctx;
   return ;
}

void Monocv_process_init(Monocv__ctx_type_1 &_output_){
   Monocv__ctx_type_1_init(_output_);
   return ;
}

void Monocv_process(Monocv__ctx_type_1 &_ctx, int c, _tuple_$_real_real_real_$ &_output_){
   _ctx.channel_in = c;
   uint8_t _cond_40;
   _cond_40 = Monocv_mono_isGateOn(_ctx.notes);
   if(_cond_40){ _ctx.gate = _ctx.vel; }
   else
   { _ctx.gate = 0x0 /* 0.000000 */; }
   _ctx.cv = Util_pitchToCv(int_to_fix(_ctx.active_note));
   _tuple_$_real_real_real_$ _tuple_39;
   {
      _tuple_39.field_0 = _ctx.cv;
      _tuple_39.field_1 = _ctx.vel;
      _tuple_39.field_2 = _ctx.gate;
   }
   _output_ = _tuple_39;
   return ;
}

void Monocv_noteOn_init(Monocv__ctx_type_1 &_output_){
   Monocv__ctx_type_1_init(_output_);
   return ;
}

void Monocv_noteOn(Monocv__ctx_type_1 &_ctx, int note, int velocity, int channel){
   uint8_t _cond_43;
   _cond_43 = (_ctx.channel_in == channel);
   if(_cond_43){
      uint8_t _cond_42;
      _cond_42 = (velocity > 0);
      if(_cond_42){
         _ctx.active_note = Monocv_mono_noteOn(_ctx.notes,note);
         _ctx.vel = fix_mul(int_to_fix(velocity),0x204 /* 0.007874 */);
      }
      else
      {
         _ctx.active_note = Monocv_mono_noteOff(_ctx.notes,note);
      }
   }
}

void Monocv_noteOff_init(Monocv__ctx_type_1 &_output_){
   Monocv__ctx_type_1_init(_output_);
   return ;
}

void Monocv_noteOff(Monocv__ctx_type_1 &_ctx, int note, int channel){
   uint8_t _cond_44;
   _cond_44 = (_ctx.channel_in == channel);
   if(_cond_44){
      _ctx.active_note = Monocv_mono_noteOff(_ctx.notes,note);
   }
}

void Monocv_controlChange_init(Monocv__ctx_type_1 &_output_){
   Monocv__ctx_type_1_init(_output_);
   return ;
}

void Monocv_controlChange(Monocv__ctx_type_1 &_ctx, int control, int value, int channel){
}

void Monocv_default_init(Monocv__ctx_type_1 &_output_){
   Monocv__ctx_type_1_init(_output_);
   return ;
}

void Monocv_default(Monocv__ctx_type_1 &_ctx){
}


