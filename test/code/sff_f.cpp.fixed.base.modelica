
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#include "sff_f.h"

fix16_t Sff_f_process(fix16_t a, fix16_t b){
   return fix_mul(a,b);
}

void Sff_f_noteOn(int note, int velocity, int channel){
}

void Sff_f_noteOff(int note, int channel){
}

void Sff_f_controlChange(int control, int value, int channel){
}

void Sff_f_default(){
}



extern "C" {

EXPORT void *sff_f__constructor()
{
   float *data = (float *)malloc(sizeof(float));
   
   
   return (void *)data;
}

EXPORT void sff_f__destructor(void *object)
{
   float *data = (float *)object;
   free(data);
}

EXPORT double sff_f__process(void *object, double in_0, double in_1)
{
   float *data = (float *)object;
   fix16_t ret =  Sff_f_process(float_to_fix(in_0),float_to_fix(in_1)); 
return fix_to_float(ret); 
}


EXPORT void sff_f__noteOn(void *object, int note,int velocity,int channel){
   float *data = (float *)object;
   if(vel) Sff_f_noteOn((int)note,(int)velocity,(int)channel);
   else Sff_f_noteOff((int)note,(int)channel);
}



EXPORT void sff_f__noteOff(void *object, int note,int channel) {
   float *data = (float *)object;
   Sff_f_noteOff((int)note,(int)channel);
}



EXPORT void sff_f__controlChange(void *object, int control,int value,int channel) {
   float *data = (float *)object;
   Sff_f_controlChange((int)control,(int)value,(int)channel);
}


} // extern "C"
