package .synth2;

import java.util.Arrays;
import java.util.Random;
import .external.*;

public class synth2 {

static int clip(int x, int minv, int maxv) {
   if(x > maxv)
      return maxv;
   else if(x < minv)
      return minv;
   else return x;
}

static float clip(float x, float minv, float maxv) {
   if(x > maxv)
      return maxv;
   else if(x < minv)
      return minv;
   else return x;
}

int[] makeArray(int size, int init) {
   int a[] = new int[size];
   Arrays.fill(a, init);
   return a;
}

float[] makeArray(int size, float init) {
   float a[] = new float[size];
   Arrays.fill(a, init);
   return a;
}

boolean[] makeArray(int size, boolean init) {
   boolean a[] = new boolean[size];
   Arrays.fill(a, init);
   return a;
}

int int_to_fix16(int a) { return a * 0x00010000; }

int fix16_to_int(int a) { return (a >> 16); }

int fix16_add(int x, int y) { return x + y; }

int fix16_sub(int x, int y) { return x - y; }

int fix16_minus(int x) { return -x; }

float fix16_to_float(int a) { return (float)a / 0x00010000; }
int float_to_fix16(float a) {
   float temp = a * 0x00010000;
   return (int)temp;
}

int fix16_mul(int x, int y) {
   long res = (long)x * (long)y;
   return (int)(res >> 16);
}

int fix16_div(int a, int b) {
   if (b == 0)
      return 0;
   int result = (int)(((long)a << 16) / b);
   return result;
}

static boolean not(boolean x) {
   return !x;
}

static float int_to_float(int x) {
   return (float)x;
}

int float_to_int(float x) {
   return (int)x;
}

float floor(float x) {
   return (float)Math.floor(x);
}

static Random rand = new Random();

float random() {
   return rand.nextFloat();
}

int irandom() {
   return rand.nextInt();
}

float get(float[] a, int i) {
   return a[i];
}

void set(float[] a, int i, float val) {
   a[i] = val;
}

int get(int[] a, int i) {
   return a[i];
}

void set(int[] a, int i, int val) {
   a[i] = val;
}

float[] wrap_array(float x[]) {
   return x;
}

int[] wrap_array(int x[]) {
   return x;
}

float cosh(float x) {
   return (float)Math.cosh(x);
}

float cos(float x) {
   return (float)Math.cos(x);
}

float sin(float x) {
   return (float)Math.sin(x);
}

float sinh(float x) {
   return (float)Math.sinh(x);
}

float tan(float x) {
   return (float)Math.tan(x);
}

float tanh(float x) {
   return (float)Math.tanh(x);
}

float sqrt(float x) {
   return (float)Math.sqrt(x);
}

float pow(float x, float y) {
   return (float)Math.pow(x, y);
}

float exp(float x) {
   return (float)Math.exp(x);
}


private class Synth2__ctx_type_1 {
   public float pre_x;
 
   Synth2__ctx_type_1(){ this.pre_x = 0.0f;
    } 
   Synth2__ctx_type_1(float pre_x){ this.pre_x = pre_x;
    } }

private class Synth2__ctx_type_2 {
   public boolean pre_x;
 
   Synth2__ctx_type_2(){ this.pre_x = false;
    } 
   Synth2__ctx_type_2(boolean pre_x){ this.pre_x = pre_x;
    } }

private class Synth2__ctx_type_3 {
   public boolean pre_x;
 
   Synth2__ctx_type_3(){ this.pre_x = false;
    } 
   Synth2__ctx_type_3(boolean pre_x){ this.pre_x = pre_x;
    } }

private class Synth2__ctx_type_4 {
   public int count;
 
   Synth2__ctx_type_4(){ this.count = 0;
    } 
   Synth2__ctx_type_4(int count){ this.count = count;
    } }

private class Synth2__ctx_type_6 {
   public float y1;
   public float x1;
 
   Synth2__ctx_type_6(){ this.y1 = 0.0f;
   this.x1 = 0.0f;
    } 
   Synth2__ctx_type_6(float y1,float x1){ this.y1 = y1;
   this.x1 = x1;
    } }

private class Synth2__ctx_type_7 {
   public float x;
 
   Synth2__ctx_type_7(){ this.x = 0.0f;
    } 
   Synth2__ctx_type_7(float x){ this.x = x;
    } }

private class Synth2__ctx_type_8 {
   public float pre_x;
 
   Synth2__ctx_type_8(){ this.pre_x = 0.0f;
    } 
   Synth2__ctx_type_8(float pre_x){ this.pre_x = pre_x;
    } }

private class Synth2__ctx_type_11 {
   public float state_triang;
   public float state_saw;
   public float state_pulse;
   public float rate;
   public float phase;
   public float output;
   public float m;
   public Synth2__ctx_type_1 _inst38a;
   public Synth2__ctx_type_6 _inst1153;
 
   Synth2__ctx_type_11(){ this.state_triang = 0.0f;
   this.state_saw = 0.0f;
   this.state_pulse = 0.0f;
   this.rate = 0.0f;
   this.phase = 0.0f;
   this.output = 0.0f;
   this.m = 0.0f;
   this._inst38a = new Synth2__ctx_type_1();
   this._inst1153 = new Synth2__ctx_type_6();
    } 
   Synth2__ctx_type_11(float state_triang,float state_saw,float state_pulse,float rate,float phase,float output,float m,Synth2__ctx_type_1 _inst38a,Synth2__ctx_type_6 _inst1153){ this.state_triang = state_triang;
   this.state_saw = state_saw;
   this.state_pulse = state_pulse;
   this.rate = rate;
   this.phase = phase;
   this.output = output;
   this.m = m;
   this._inst38a = _inst38a;
   this._inst1153 = _inst1153;
    } }

private class Synth2__ctx_type_12 {
   public float dlow;
   public float dband;
 
   Synth2__ctx_type_12(){ this.dlow = 0.0f;
   this.dband = 0.0f;
    } 
   Synth2__ctx_type_12(float dlow,float dband){ this.dlow = dlow;
   this.dband = dband;
    } }

private class Synth2__ctx_type_13 {
   public Synth2__ctx_type_12 step;
   public float g;
   public Synth2__ctx_type_1 _inst18a;
 
   Synth2__ctx_type_13(){ this.step = new Synth2__ctx_type_12();
   this.g = 0.0f;
   this._inst18a = new Synth2__ctx_type_1();
    } 
   Synth2__ctx_type_13(Synth2__ctx_type_12 step,float g,Synth2__ctx_type_1 _inst18a){ this.step = step;
   this.g = g;
   this._inst18a = _inst18a;
    } }

private class Synth2__ctx_type_14 {
   public float phase;
   public Synth2__ctx_type_4 _inst3f2;
   public Synth2__ctx_type_3 _inst194;
 
   Synth2__ctx_type_14(){ this.phase = 0.0f;
   this._inst3f2 = new Synth2__ctx_type_4();
   this._inst194 = new Synth2__ctx_type_3();
    } 
   Synth2__ctx_type_14(float phase,Synth2__ctx_type_4 _inst3f2,Synth2__ctx_type_3 _inst194){ this.phase = phase;
   this._inst3f2 = _inst3f2;
   this._inst194 = _inst194;
    } }

private class Synth2__ctx_type_15 {
   public int pre;
   public int notes[];
   public int count;
 
   Synth2__ctx_type_15(){ this.pre = 0;
   this.notes = new int[]{0,0,0,0};
   this.count = 0;
    } 
   Synth2__ctx_type_15(int pre,int notes[],int count){ this.pre = pre;
   this.notes = notes;
   this.count = count;
    } }

private class Synth2__ctx_type_16 {
   public float wave;
   public float volume;
   public float res;
   public float pw;
   public float pitch;
   public Synth2__ctx_type_15 monoin;
   public float lfo_rate;
   public float lfo_amt;
   public float cut;
   public float amp_s;
   public Synth2__ctx_type_13 _inst412;
   public Synth2__ctx_type_7 _inst3f4;
   public Synth2__ctx_type_11 _inst261;
   public Synth2__ctx_type_14 _inst16a;
 
   Synth2__ctx_type_16(){ this.wave = 0.0f;
   this.volume = 0.0f;
   this.res = 0.0f;
   this.pw = 0.0f;
   this.pitch = 0.0f;
   this.monoin = new Synth2__ctx_type_15();
   this.lfo_rate = 0.0f;
   this.lfo_amt = 0.0f;
   this.cut = 0.0f;
   this.amp_s = 0.0f;
   this._inst412 = new Synth2__ctx_type_13();
   this._inst3f4 = new Synth2__ctx_type_7();
   this._inst261 = new Synth2__ctx_type_11();
   this._inst16a = new Synth2__ctx_type_14();
    } 
   Synth2__ctx_type_16(float wave,float volume,float res,float pw,float pitch,Synth2__ctx_type_15 monoin,float lfo_rate,float lfo_amt,float cut,float amp_s,Synth2__ctx_type_13 _inst412,Synth2__ctx_type_7 _inst3f4,Synth2__ctx_type_11 _inst261,Synth2__ctx_type_14 _inst16a){ this.wave = wave;
   this.volume = volume;
   this.res = res;
   this.pw = pw;
   this.pitch = pitch;
   this.monoin = monoin;
   this.lfo_rate = lfo_rate;
   this.lfo_amt = lfo_amt;
   this.cut = cut;
   this.amp_s = amp_s;
   this._inst412 = _inst412;
   this._inst3f4 = _inst3f4;
   this._inst261 = _inst261;
   this._inst16a = _inst16a;
    } }

private float Synth2_minFixed(){return 1.53e-05f;}

private Synth2__ctx_type_1 Synth2__ctx_type_1_init(){
   Synth2__ctx_type_1 _ctx = new Synth2__ctx_type_1(); 
   _ctx.pre_x = 0.0f;
   return _ctx;
}

private Synth2__ctx_type_1 Synth2_change_init(){return Synth2__ctx_type_1_init();}

private boolean Synth2_change(Synth2__ctx_type_1 _ctx, float x){
   boolean v = (_ctx.pre_x != x); 
   _ctx.pre_x = x;
   return v;
}

private Synth2__ctx_type_2 Synth2__ctx_type_2_init(){
   Synth2__ctx_type_2 _ctx = new Synth2__ctx_type_2(); 
   _ctx.pre_x = false;
   return _ctx;
}

private Synth2__ctx_type_2 Synth2_bchange_init(){return Synth2__ctx_type_2_init();}

private boolean Synth2_bchange(Synth2__ctx_type_2 _ctx, boolean x){
   boolean v = (_ctx.pre_x != x); 
   _ctx.pre_x = x;
   return v;
}

private Synth2__ctx_type_3 Synth2__ctx_type_3_init(){
   Synth2__ctx_type_3 _ctx = new Synth2__ctx_type_3(); 
   _ctx.pre_x = false;
   return _ctx;
}

private Synth2__ctx_type_3 Synth2_edge_init(){return Synth2__ctx_type_3_init();}

private boolean Synth2_edge(Synth2__ctx_type_3 _ctx, boolean x){
   boolean v = ((_ctx.pre_x != x) && (_ctx.pre_x == true)); 
   _ctx.pre_x = x;
   return v;
}

private Synth2__ctx_type_4 Synth2__ctx_type_4_init(){
   Synth2__ctx_type_4 _ctx = new Synth2__ctx_type_4(); 
   _ctx.count = 0;
   return _ctx;
}

private Synth2__ctx_type_4 Synth2_each_init(){return Synth2__ctx_type_4_init();}

private boolean Synth2_each(Synth2__ctx_type_4 _ctx, int n){
   boolean ret = (_ctx.count == 0); 
   _ctx.count = ((1 + _ctx.count) % n);
   return ret;
}

private boolean Synth2_near_zero(float x){return (Math.abs(x) < 0.02f);}

private Synth2__ctx_type_6 Synth2__ctx_type_6_init(){
   Synth2__ctx_type_6 _ctx = new Synth2__ctx_type_6(); 
   _ctx.y1 = 0.0f;
   _ctx.x1 = 0.0f;
   return _ctx;
}

private Synth2__ctx_type_6 Synth2_dcblock_init(){return Synth2__ctx_type_6_init();}

private float Synth2_dcblock(Synth2__ctx_type_6 _ctx, float x0){
   float y0 = (x0 + (- _ctx.x1) + (0.995f * _ctx.y1)); 
   _ctx.x1 = x0;
   _ctx.y1 = y0;
   return y0;
}

private Synth2__ctx_type_7 Synth2__ctx_type_7_init(){
   Synth2__ctx_type_7 _ctx = new Synth2__ctx_type_7(); 
   _ctx.x = 0.0f;
   return _ctx;
}

private Synth2__ctx_type_7 Synth2_smooth_init(){return Synth2__ctx_type_7_init();}

private float Synth2_smooth(Synth2__ctx_type_7 _ctx, float input){
   _ctx.x = (_ctx.x + (0.005f * (input + (- _ctx.x))));
   return _ctx.x;
}

private Synth2__ctx_type_8 Synth2__ctx_type_8_init(){
   Synth2__ctx_type_8 _ctx = new Synth2__ctx_type_8(); 
   _ctx.pre_x = 0.0f;
   return _ctx;
}

private Synth2__ctx_type_8 Synth2_lpfilter_init(){return Synth2__ctx_type_8_init();}

private float Synth2_lpfilter(Synth2__ctx_type_8 _ctx, float x){
   float ret = (0.5f * (_ctx.pre_x + x)); 
   _ctx.pre_x = x;
   return ret;
}

private float Synth2_pitchToRate(float d){return (0.0001854f * exp((0.0577623f * d)));}

private float Synth2_pulse_train(float m, float phase){
   float pi_phase = (3.1415927f * phase); 
   float denominator1 = sin(pi_phase); 
   float tmp1 = 0.0f; 
   if(Synth2_near_zero(denominator1)){ tmp1 = 1.f; }
   else
   {
      tmp1 = sin((m * pi_phase));
      tmp1 = (tmp1 / (denominator1 * m));
   }
   return tmp1;
}

private Synth2__ctx_type_11 Synth2__ctx_type_11_init(){
   Synth2__ctx_type_11 _ctx = new Synth2__ctx_type_11(); 
   _ctx.state_triang = 0.0f;
   _ctx.state_saw = 0.0f;
   _ctx.state_pulse = 0.0f;
   _ctx.rate = 0.0f;
   _ctx.phase = 0.0f;
   _ctx.output = 0.0f;
   _ctx.m = 0.0f;
   _ctx._inst38a = Synth2__ctx_type_1_init();
   _ctx._inst1153 = Synth2__ctx_type_6_init();
   return _ctx;
}

private Synth2__ctx_type_11 Synth2_osc_init(){return Synth2__ctx_type_11_init();}

private float Synth2_osc(Synth2__ctx_type_11 _ctx, float pitch, float pw, float wave){
   float fixed_pitch = 0.0f; 
   if(wave < 0.6666667f){ fixed_pitch = pitch; }
   else
   { fixed_pitch = (12.f + pitch); }
   if(Synth2_change(_ctx._inst38a,fixed_pitch)){
      _ctx.rate = Synth2_pitchToRate(fixed_pitch);
      float p = (1.f / _ctx.rate); 
      float maxHarmonics = floor((0.5f * p)); 
      _ctx.m = (1.f + (2.f * maxHarmonics));
   }
   float shift05 = (0.5f + (0.49f * pw)); 
   float shift = (_ctx.phase + shift05); 
   if(shift > 1.f){ shift = (-1.f + shift); }
   float tmp1 = Synth2_pulse_train(_ctx.m,_ctx.phase); 
   float tmp2 = Synth2_pulse_train(_ctx.m,shift); 
   _ctx.phase = (_ctx.phase + _ctx.rate);
   if(_ctx.phase > 1.f){ _ctx.phase = (-1.f + _ctx.phase); }
   _ctx.state_pulse = clip((tmp1 + (- tmp2) + (0.9995f * _ctx.state_pulse)),-1.f,1.f);
   _ctx.state_saw = clip(((0.5f * ((tmp1 + tmp2 + (-2.f * _ctx.rate)) / shift05)) + (0.9995f * _ctx.state_saw)),-1.f,1.f);
   _ctx.state_triang = clip(((0.9995f * _ctx.state_triang) + (2.f * _ctx.rate * _ctx.state_pulse)),-1.f,1.f);
   if(wave < 0.3333334f){ _ctx.output = _ctx.state_pulse; }
   else
   { if(wave < 0.6666667f){ _ctx.output = (2.f * _ctx.state_saw); }
   else
   { _ctx.output = (2.f * _ctx.state_triang * (1.f + pw)); } }
   _ctx.output = Synth2_dcblock(_ctx._inst1153,_ctx.output);
   return clip((0.25f * _ctx.output),-1.f,1.f);
}

private Synth2__ctx_type_12 Synth2__ctx_type_12_init(){
   Synth2__ctx_type_12 _ctx = new Synth2__ctx_type_12(); 
   _ctx.dlow = 0.0f;
   _ctx.dband = 0.0f;
   return _ctx;
}

private Synth2__ctx_type_12 Synth2_svf_step_init(){return Synth2__ctx_type_12_init();}

private float Synth2_svf_step(Synth2__ctx_type_12 _ctx, float input, float g, float q, int sel){
   float low = (_ctx.dlow + (_ctx.dband * g)); 
   float high = (input + (- low) + (- (_ctx.dband * q))); 
   float band = (_ctx.dband + (g * high)); 
   float notch = (high + low); 
   _ctx.dband = clip(band,-1.f,1.f);
   _ctx.dlow = clip(low,-1.f,1.f);
   float output = 0.0f; 
   switch(sel) {
      case 0:
         output = low;
      break;
      case 1:
         output = high;
      break;
      case 2:
         output = band;
      break;
    default: 
      output = notch;
   }
   return output;
}

private Synth2__ctx_type_13 Synth2__ctx_type_13_init(){
   Synth2__ctx_type_13 _ctx = new Synth2__ctx_type_13(); 
   _ctx.step = Synth2__ctx_type_12_init();
   _ctx.g = 0.0f;
   _ctx._inst18a = Synth2__ctx_type_1_init();
   return _ctx;
}

private Synth2__ctx_type_13 Synth2_svf_init(){return Synth2__ctx_type_13_init();}

private float Synth2_svf(Synth2__ctx_type_13 _ctx, float input, float fc, float q, int sel){
   fc = clip(fc,0.0f,1.f);
   q = clip(q,0.0f,1.f);
   float fix_q = (2.f * (1.f + (- q))); 
   if(Synth2_change(_ctx._inst18a,fc)){ _ctx.g = (0.5f * fc); }
   float x1 = Synth2_svf_step(_ctx.step,input,_ctx.g,fix_q,sel); 
   float x2 = Synth2_svf_step(_ctx.step,input,_ctx.g,fix_q,sel); 
   return (0.5f * (x1 + x2));
}

private Synth2__ctx_type_14 Synth2__ctx_type_14_init(){
   Synth2__ctx_type_14 _ctx = new Synth2__ctx_type_14(); 
   _ctx.phase = 0.0f;
   _ctx._inst3f2 = Synth2__ctx_type_4_init();
   _ctx._inst194 = Synth2__ctx_type_3_init();
   return _ctx;
}

private Synth2__ctx_type_14 Synth2_lfo_init(){return Synth2__ctx_type_14_init();}

private float Synth2_lfo(Synth2__ctx_type_14 _ctx, float f, boolean gate){
   float rate = (1.53e-05f + (0.0015259f * f)); 
   if(Synth2_edge(_ctx._inst194,gate)){ _ctx.phase = 0.0f; }
   if(Synth2_each(_ctx._inst3f2,4)){ _ctx.phase = (_ctx.phase + rate); }
   if(_ctx.phase > 1.f){ _ctx.phase = (-1.f + _ctx.phase); }
   return (0.5f + sin((6.2831854f * _ctx.phase)));
}

private Synth2__ctx_type_15 Synth2__ctx_type_15_init(){
   Synth2__ctx_type_15 _ctx = new Synth2__ctx_type_15(); 
   _ctx.pre = 0;
   _ctx.notes = makeArray(4,0);
   _ctx.count = 0;
   return _ctx;
}

private Synth2__ctx_type_15 Synth2_mono_noteOn_init(){return Synth2__ctx_type_15_init();}

private int Synth2_mono_noteOn(Synth2__ctx_type_15 _ctx, int n){
   if(_ctx.count < 4){
      set(_ctx.notes,_ctx.count,n);
      _ctx.pre = n;
      if(_ctx.count < 4){ _ctx.count = (1 + _ctx.count); }
   }
   return _ctx.pre;
}

private Synth2__ctx_type_15 Synth2_mono_noteOff_init(){return Synth2__ctx_type_15_init();}

private int Synth2_mono_noteOff(Synth2__ctx_type_15 _ctx, int n){
   boolean found = false; 
   int pos = 0; 
   int i = 0; 
   if(_ctx.count == 0){ return _ctx.pre; }
   while((i < 4) && not(found)){
      if(get(_ctx.notes,i) == n){
         pos = i;
         found = true;
      }
      i = (1 + i);
   }
   if(found){
      int k = (1 + pos); 
      while(k < 4){
         set(_ctx.notes,((-1) + k),get(_ctx.notes,k));
         k = (1 + k);
      }
      if(found && (_ctx.count > 0)){
         _ctx.count = ((-1) + _ctx.count);
         _ctx.pre = get(_ctx.notes,((-1) + _ctx.count));
      }
   }
   return _ctx.pre;
}

private Synth2__ctx_type_15 Synth2_mono_isGateOn_init(){return Synth2__ctx_type_15_init();}

private boolean Synth2_mono_isGateOn(Synth2__ctx_type_15 _ctx){return (_ctx.count > 0);}

private Synth2__ctx_type_16 Synth2__ctx_type_16_init(){
   Synth2__ctx_type_16 _ctx = new Synth2__ctx_type_16(); 
   _ctx.wave = 0.0f;
   _ctx.volume = 0.0f;
   _ctx.res = 0.0f;
   _ctx.pw = 0.0f;
   _ctx.pitch = 0.0f;
   _ctx.monoin = Synth2__ctx_type_15_init();
   _ctx.lfo_rate = 0.0f;
   _ctx.lfo_amt = 0.0f;
   _ctx.cut = 0.0f;
   _ctx.amp_s = 0.0f;
   _ctx._inst412 = Synth2__ctx_type_13_init();
   _ctx._inst3f4 = Synth2__ctx_type_7_init();
   _ctx._inst261 = Synth2__ctx_type_11_init();
   _ctx._inst16a = Synth2__ctx_type_14_init();
   Synth2_default(_ctx);
   return _ctx;
}

private Synth2__ctx_type_16 Synth2_process_init(){return Synth2__ctx_type_16_init();}

private float Synth2_process(Synth2__ctx_type_16 _ctx, float i){
   boolean gate = Synth2_mono_isGateOn(_ctx.monoin); 
   float lfo1 = (_ctx.lfo_amt * Synth2_lfo(_ctx._inst16a,_ctx.lfo_rate,gate)); 
   float o1 = Synth2_osc(_ctx._inst261,_ctx.pitch,(_ctx.pw + lfo1),_ctx.wave); 
   float amp_env = 0.0f; 
   float _if_5 = 0.0f; 
   if(gate){ _if_5 = 1.f; }
   else
   { _if_5 = 0.0f; }
   amp_env = Synth2_smooth(_ctx._inst3f4,_if_5);
   float output = (amp_env * Synth2_svf(_ctx._inst412,o1,_ctx.cut,_ctx.res,0)); 
   return (_ctx.volume * output);
}

private Synth2__ctx_type_16 Synth2_noteOn_init(){return Synth2__ctx_type_16_init();}

private void Synth2_noteOn(Synth2__ctx_type_16 _ctx, int note, int velocity, int channel){_ctx.pitch = int_to_float(Synth2_mono_noteOn(_ctx.monoin,note));}

private Synth2__ctx_type_16 Synth2_noteOff_init(){return Synth2__ctx_type_16_init();}

private void Synth2_noteOff(Synth2__ctx_type_16 _ctx, int note, int channel){_ctx.pitch = int_to_float(Synth2_mono_noteOff(_ctx.monoin,note));}

private Synth2__ctx_type_16 Synth2_controlChange_init(){return Synth2__ctx_type_16_init();}

private void Synth2_controlChange(Synth2__ctx_type_16 _ctx, int control, int value, int channel){
   float value_0_1 = (0.0078741f * int_to_float(value)); 
   float value_m1_1 = (-1.f + (2.f * value_0_1)); 
   if(control == 30){ _ctx.volume = value_0_1; }
   if(control == 31){ _ctx.wave = value_0_1; }
   if(control == 32){ _ctx.pw = value_0_1; }
   if(control == 33){ _ctx.lfo_rate = value_0_1; }
   if(control == 34){ _ctx.lfo_amt = value_m1_1; }
   if(control == 35){ _ctx.cut = value_0_1; }
   if(control == 36){ _ctx.res = value_0_1; }
}

private Synth2__ctx_type_16 Synth2_default_init(){return Synth2__ctx_type_16_init();}

private void Synth2_default(Synth2__ctx_type_16 _ctx){
   _ctx.volume = 1.f;
   _ctx.pw = 0.0f;
   _ctx.pitch = 42.f;
   _ctx.cut = 1.f;
   _ctx.res = 0.0f;
   _ctx.amp_s = 1.f;
   _ctx.lfo_amt = 0.5f;
   _ctx.lfo_rate = 0.0f;
}


}