#ifndef SYNTH2_H
#define SYNTH2_H
#include <stdint.h>
#include <math.h>
#include "vultin.h"

int32_t Synth2_minFixed();

typedef struct _ctx_type_1 {
   int32_t pre_x;
} _ctx_type_1;

typedef _ctx_type_1 change_type;

_ctx_type_1 Synth2__ctx_type_1_init();

_ctx_type_1 Synth2_change_init();

uint8_t Synth2_change(_ctx_type_1 &_ctx, int32_t x);

typedef struct _ctx_type_2 {
   uint8_t pre_x;
} _ctx_type_2;

typedef _ctx_type_2 bchange_type;

_ctx_type_2 Synth2__ctx_type_2_init();

_ctx_type_2 Synth2_bchange_init();

uint8_t Synth2_bchange(_ctx_type_2 &_ctx, uint8_t x);

typedef struct _ctx_type_3 {
   uint8_t pre_x;
} _ctx_type_3;

typedef _ctx_type_3 edge_type;

_ctx_type_3 Synth2__ctx_type_3_init();

_ctx_type_3 Synth2_edge_init();

uint8_t Synth2_edge(_ctx_type_3 &_ctx, uint8_t x);

typedef struct _ctx_type_4 {
   int count;
} _ctx_type_4;

typedef _ctx_type_4 each_type;

_ctx_type_4 Synth2__ctx_type_4_init();

_ctx_type_4 Synth2_each_init();

uint8_t Synth2_each(_ctx_type_4 &_ctx, int n);

uint8_t Synth2_near_zero(int32_t x);

typedef struct _ctx_type_6 {
   int32_t y1;
   int32_t x1;
} _ctx_type_6;

typedef _ctx_type_6 dcblock_type;

_ctx_type_6 Synth2__ctx_type_6_init();

_ctx_type_6 Synth2_dcblock_init();

int32_t Synth2_dcblock(_ctx_type_6 &_ctx, int32_t x0);

typedef struct _ctx_type_7 {
   int32_t x;
} _ctx_type_7;

typedef _ctx_type_7 smooth_type;

_ctx_type_7 Synth2__ctx_type_7_init();

_ctx_type_7 Synth2_smooth_init();

int32_t Synth2_smooth(_ctx_type_7 &_ctx, int32_t input);

typedef struct _ctx_type_8 {
   int32_t pre_x;
} _ctx_type_8;

typedef _ctx_type_8 lpfilter_type;

_ctx_type_8 Synth2__ctx_type_8_init();

_ctx_type_8 Synth2_lpfilter_init();

int32_t Synth2_lpfilter(_ctx_type_8 &_ctx, int32_t x);

int32_t Synth2_pitchToRate(int32_t d);

int32_t Synth2_pulse_train(int32_t m, int32_t phase);

typedef struct _ctx_type_11 {
   int32_t state_triang;
   int32_t state_saw;
   int32_t state_pulse;
   int32_t rate;
   int32_t phase;
   int32_t output;
   int32_t m;
   _ctx_type_6 _inst1;
   _ctx_type_1 _inst0;
} _ctx_type_11;

typedef _ctx_type_11 osc_type;

_ctx_type_11 Synth2__ctx_type_11_init();

_ctx_type_11 Synth2_osc_init();

int32_t Synth2_osc(_ctx_type_11 &_ctx, int32_t pitch, int32_t pw, int32_t wave);

typedef struct _ctx_type_12 {
   int32_t dlow;
   int32_t dband;
} _ctx_type_12;

typedef _ctx_type_12 svf_step_type;

_ctx_type_12 Synth2__ctx_type_12_init();

_ctx_type_12 Synth2_svf_step_init();

int32_t Synth2_svf_step(_ctx_type_12 &_ctx, int32_t input, int32_t g, int32_t q, int sel);

typedef struct _ctx_type_13 {
   _ctx_type_12 step;
   int32_t g;
   _ctx_type_1 _inst0;
} _ctx_type_13;

typedef _ctx_type_13 svf_type;

_ctx_type_13 Synth2__ctx_type_13_init();

_ctx_type_13 Synth2_svf_init();

int32_t Synth2_svf(_ctx_type_13 &_ctx, int32_t input, int32_t fc, int32_t q, int sel);

typedef struct _ctx_type_14 {
   int32_t phase;
   _ctx_type_4 _inst1;
   _ctx_type_3 _inst0;
} _ctx_type_14;

typedef _ctx_type_14 lfo_type;

_ctx_type_14 Synth2__ctx_type_14_init();

_ctx_type_14 Synth2_lfo_init();

int32_t Synth2_lfo(_ctx_type_14 &_ctx, int32_t f, uint8_t gate);

typedef struct _ctx_type_15 {
   int pre;
   int notes[4];
   int count;
} _ctx_type_15;

typedef _ctx_type_15 mono_noteOn_type;

_ctx_type_15 Synth2__ctx_type_15_init();

_ctx_type_15 Synth2_mono_noteOn_init();

int Synth2_mono_noteOn(_ctx_type_15 &_ctx, int n);

typedef _ctx_type_15 mono_noteOff_type;

_ctx_type_15 Synth2_mono_noteOff_init();

int Synth2_mono_noteOff(_ctx_type_15 &_ctx, int n);

typedef _ctx_type_15 mono_isGateOn_type;

_ctx_type_15 Synth2_mono_isGateOn_init();

uint8_t Synth2_mono_isGateOn(_ctx_type_15 &_ctx);

typedef struct _ctx_type_16 {
   int32_t wave;
   int32_t volume;
   int32_t res;
   int32_t pw;
   int32_t pitch;
   _ctx_type_15 monoin;
   int32_t lfo_rate;
   int32_t lfo_amt;
   int32_t cut;
   int32_t amp_s;
   _ctx_type_13 _inst3;
   _ctx_type_7 _inst2;
   _ctx_type_11 _inst1;
   _ctx_type_14 _inst0;
} _ctx_type_16;

typedef _ctx_type_16 process_type;

_ctx_type_16 Synth2__ctx_type_16_init();

_ctx_type_16 Synth2_process_init();

int32_t Synth2_process(_ctx_type_16 &_ctx, int32_t i);

typedef _ctx_type_16 noteOn_type;

_ctx_type_16 Synth2_noteOn_init();

void Synth2_noteOn(_ctx_type_16 &_ctx, int note, int velocity);

typedef _ctx_type_16 noteOff_type;

_ctx_type_16 Synth2_noteOff_init();

void Synth2_noteOff(_ctx_type_16 &_ctx, int note);

typedef _ctx_type_16 controlChange_type;

_ctx_type_16 Synth2_controlChange_init();

void Synth2_controlChange(_ctx_type_16 &_ctx, int control, int value);

typedef _ctx_type_16 default_type;

_ctx_type_16 Synth2_default_init();

void Synth2_default_(_ctx_type_16 &_ctx);



#endif // SYNTH2_H
