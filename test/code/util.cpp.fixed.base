
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#include "util.h"

void Util__ctx_type_0_init(Util__ctx_type_0 &_output_){
   Util__ctx_type_0 _ctx;
   _ctx.pre_x = 0x0 /* 0.000000 */;
   _output_ = _ctx;
   return ;
}

void Util_change_init(Util__ctx_type_0 &_output_){
   Util__ctx_type_0_init(_output_);
   return ;
}

uint8_t Util_change(Util__ctx_type_0 &_ctx, fix16_t x){
   uint8_t v;
   v = (_ctx.pre_x != x);
   _ctx.pre_x = x;
   return v;
}

fix16_t Util_pitchToRate(fix16_t d){
   return fix_mul(0xc /* 0.000185 */,fix_exp(fix_mul(0xec9 /* 0.057762 */,d)));
}

void Util__ctx_type_2_init(Util__ctx_type_2 &_output_){
   Util__ctx_type_2 _ctx;
   _ctx.rate = 0x0 /* 0.000000 */;
   _ctx.phase = 0x0 /* 0.000000 */;
   Util__ctx_type_0_init(_ctx._inst1);
   Util_phasorInit(_ctx);
   _output_ = _ctx;
   return ;
}

void Util_phasor_init(Util__ctx_type_2 &_output_){
   Util__ctx_type_2_init(_output_);
   return ;
}

fix16_t Util_phasor(Util__ctx_type_2 &_ctx, fix16_t pitch, uint8_t reset){
   uint8_t _cond_3;
   _cond_3 = Util_change(_ctx._inst1,pitch);
   if(_cond_3){
      _ctx.rate = Util_pitchToRate(pitch);
   }
   if(reset){ _ctx.phase = 0x0 /* 0.000000 */; }
   else
   { _ctx.phase = (fix_add(_ctx.phase,_ctx.rate) % 0x10000 /* 1.000000 */); }
   return _ctx.phase;
}

void Util_phasorInit_init(Util__ctx_type_2 &_output_){
   Util__ctx_type_2_init(_output_);
   return ;
}

void Util_phasorInit(Util__ctx_type_2 &_ctx){
   _ctx.rate = Util_pitchToRate(0x3c0000 /* 60.000000 */);
}

fix16_t Util_minFixed(){
   return 0x1 /* 0.000015 */;
}


