
local this = {}
local ffi = require("ffi")
function this.ternary(cond,then_,else_) if cond then return then_ else return else_ end end
function this.eps()             return 1e-18; end
function this.pi()              return 3.1415926535897932384; end
function this.random()          return math.random(); end
function this.irandom()         return math.floor(math.random() * 4294967296); end
function this.clip(x,low,high)  return (this.ternary(x<low,low,this.ternary(x>high,high,x))); end
function this.real(x)           return x; end
function this.int(x)            local int_part,_ = math.modf(x) return int_part; end
function this.sin(x)            return math.sin(x); end
function this.cos(x)            return math.cos(x); end
function this.abs(x)            return math.abs(x); end
function this.exp(x)            return math.exp(x); end
function this.floor(x)          return math.floor(x); end
function this.tan(x)            return math.tan(x); end
function this.tanh(x)           return math.tanh(x); end
function this.sqrt(x)           return x; end
function this.set(a,i,v)        a[i+1]=v; end
function this.get(a,i)          return a[i+1]; end
function this.makeArray(size,v) local a = {}; for i=1,size do a[i]=v end return a; end
function this.wrap_array(a)     return a; end
function this.Synth2_minFixed()
   return 0.000015;

end

function this.Synth2__ctx_type_1_init()
   local _ctx = {};
   _ctx.pre_x = 0.000000;
   return _ctx;

end

function this.Synth2_change_init()
   return this.Synth2__ctx_type_1_init();
end

function this.Synth2_change(_ctx,x)
   local v = (_ctx.pre_x ~= x);
   _ctx.pre_x = x;
   return v;

end

function this.Synth2__ctx_type_2_init()
   local _ctx = {};
   _ctx.pre_x = false;
   return _ctx;

end

function this.Synth2_bchange_init()
   return this.Synth2__ctx_type_2_init();
end

function this.Synth2_bchange(_ctx,x)
   local v = (_ctx.pre_x ~= x);
   _ctx.pre_x = x;
   return v;

end

function this.Synth2__ctx_type_3_init()
   local _ctx = {};
   _ctx.pre_x = false;
   return _ctx;

end

function this.Synth2_edge_init()
   return this.Synth2__ctx_type_3_init();
end

function this.Synth2_edge(_ctx,x)
   local v = ((_ctx.pre_x ~= x) and (_ctx.pre_x == true));
   _ctx.pre_x = x;
   return v;

end

function this.Synth2__ctx_type_4_init()
   local _ctx = {};
   _ctx.count = 0;
   return _ctx;

end

function this.Synth2_each_init()
   return this.Synth2__ctx_type_4_init();
end

function this.Synth2_each(_ctx,n)
   local ret = (_ctx.count == 0);
   _ctx.count = ((_ctx.count + 1) % n);
   return ret;

end

function this.Synth2_near_zero(x)
   return (this.abs(x) < 0.020000);

end

function this.Synth2__ctx_type_6_init()
   local _ctx = {};
   _ctx.y1 = 0.000000;
   _ctx.x1 = 0.000000;
   return _ctx;

end

function this.Synth2_dcblock_init()
   return this.Synth2__ctx_type_6_init();
end

function this.Synth2_dcblock(_ctx,x0)
   local y0 = (x0 + (- _ctx.x1) + (_ctx.y1 * 0.995000));
   _ctx.x1 = x0;
   _ctx.y1 = y0;
   return y0;

end

function this.Synth2__ctx_type_7_init()
   local _ctx = {};
   _ctx.x = 0.000000;
   return _ctx;

end

function this.Synth2_smooth_init()
   return this.Synth2__ctx_type_7_init();
end

function this.Synth2_smooth(_ctx,input)
   _ctx.x = (_ctx.x + ((input + (- _ctx.x)) * 0.005000));
   return _ctx.x;

end

function this.Synth2__ctx_type_8_init()
   local _ctx = {};
   _ctx.pre_x = 0.000000;
   return _ctx;

end

function this.Synth2_lpfilter_init()
   return this.Synth2__ctx_type_8_init();
end

function this.Synth2_lpfilter(_ctx,x)
   local ret = ((x + _ctx.pre_x) * 0.500000);
   _ctx.pre_x = x;
   return ret;

end

function this.Synth2_pitchToRate(d)
   return (0.000185 * this.exp((0.057762 * d)));

end

function this.Synth2_pulse_train(m,phase)
   local pi_phase = (phase * 3.141593);
   local denominator1 = this.sin(pi_phase);
   local tmp1 = 0.000000;
   if this.Synth2_near_zero(denominator1) then
      tmp1 = 1.000000;

   else

      tmp1 = this.sin((m * pi_phase));
      tmp1 = (tmp1 / (m * denominator1));

   end
   return tmp1;

end

function this.Synth2__ctx_type_11_init()
   local _ctx = {};
   _ctx.state_triang = 0.000000;
   _ctx.state_saw = 0.000000;
   _ctx.state_pulse = 0.000000;
   _ctx.rate = 0.000000;
   _ctx.phase = 0.000000;
   _ctx.output = 0.000000;
   _ctx.m = 0.000000;
   _ctx._inst24 = this.Synth2__ctx_type_6_init();
   _ctx._inst16 = this.Synth2__ctx_type_1_init();
   return _ctx;

end

function this.Synth2_osc_init()
   return this.Synth2__ctx_type_11_init();
end

function this.Synth2_osc(_ctx,pitch,pw,wave)
   local fixed_pitch = 0.000000;
   if (wave < 0.666667) then
      fixed_pitch = pitch;

   else

      fixed_pitch = (pitch + 12.000000);

   end
   if this.Synth2_change(_ctx._inst16,fixed_pitch) then
      _ctx.rate = this.Synth2_pitchToRate(fixed_pitch);
      local p = 0.0;
      p = (1.000000 / _ctx.rate);
      local maxHarmonics = 0.0;
      maxHarmonics = this.floor((p * 0.500000));
      _ctx.m = ((2.000000 * maxHarmonics) + 1.000000);

   end
   local shift05 = (0.500000 + (pw * 0.490000));
   local shift = (_ctx.phase + shift05);
   if (shift > 1.000000) then
      shift = (shift + (-1.000000));

   end
   local tmp1 = this.Synth2_pulse_train(_ctx.m,_ctx.phase);
   local tmp2 = this.Synth2_pulse_train(_ctx.m,shift);
   _ctx.phase = (_ctx.phase + _ctx.rate);
   if (_ctx.phase > 1.000000) then
      _ctx.phase = (_ctx.phase + (-1.000000));

   end
   _ctx.state_pulse = this.clip(((_ctx.state_pulse * 0.999500) + tmp1 + (- tmp2)),(-1.000000),1.000000);
   _ctx.state_saw = this.clip(((_ctx.state_saw * 0.999500) + (((tmp1 + tmp2 + ((-2.000000) * _ctx.rate)) / shift05) * 0.500000)),(-1.000000),1.000000);
   _ctx.state_triang = this.clip(((_ctx.state_triang * 0.999500) + (2.000000 * _ctx.state_pulse * _ctx.rate)),(-1.000000),1.000000);
   if (wave < 0.333333) then
      _ctx.output = _ctx.state_pulse;

   else

      local _cond_68 = false;
      _cond_68 = (wave < 0.666667);
      if _cond_68 then
         _ctx.output = (2.000000 * _ctx.state_saw);

      else

         _ctx.output = (2.000000 * _ctx.state_triang * (1.000000 + pw));

      end

   end
   _ctx.output = this.Synth2_dcblock(_ctx._inst24,_ctx.output);
   return this.clip((_ctx.output * 0.250000),(-1.000000),1.000000);

end

function this.Synth2__ctx_type_12_init()
   local _ctx = {};
   _ctx.dlow = 0.000000;
   _ctx.dband = 0.000000;
   return _ctx;

end

function this.Synth2_svf_step_init()
   return this.Synth2__ctx_type_12_init();
end

function this.Synth2_svf_step(_ctx,input,g,q,sel)
   local low = (_ctx.dlow + (g * _ctx.dband));
   local high = (input + (- low) + (- (q * _ctx.dband)));
   local band = ((g * high) + _ctx.dband);
   local notch = (high + low);
   _ctx.dband = this.clip(band,(-1.000000),1.000000);
   _ctx.dlow = this.clip(low,(-1.000000),1.000000);
   local output = 0.0;
   if (sel == 0) then
      output = low;
   else

      local _cond_88 = false;
      _cond_88 = (sel == 1);
      if _cond_88 then
         output = high;
      else

         local _cond_89 = false;
         _cond_89 = (sel == 2);
         if _cond_89 then
            output = band;
         else

            output = notch;
         end

      end

   end
   return output;

end

function this.Synth2__ctx_type_13_init()
   local _ctx = {};
   _ctx.step = this.Synth2__ctx_type_12_init();
   _ctx.g = 0.000000;
   _ctx._inst27 = this.Synth2__ctx_type_1_init();
   return _ctx;

end

function this.Synth2_svf_init()
   return this.Synth2__ctx_type_13_init();
end

function this.Synth2_svf(_ctx,input,fc,q,sel)
   fc = this.clip(fc,0.000000,1.000000);
   q = this.clip(q,0.000000,1.000000);
   local fix_q = (2.000000 * (1.000000 + (- q)));
   if this.Synth2_change(_ctx._inst27,fc) then
      _ctx.g = (fc * 0.500000);

   end
   local x1 = this.Synth2_svf_step(_ctx.step,input,_ctx.g,fix_q,sel);
   local x2 = this.Synth2_svf_step(_ctx.step,input,_ctx.g,fix_q,sel);
   return ((x1 + x2) * 0.500000);

end

function this.Synth2__ctx_type_14_init()
   local _ctx = {};
   _ctx.phase = 0.000000;
   _ctx._inst32 = this.Synth2__ctx_type_4_init();
   _ctx._inst30 = this.Synth2__ctx_type_3_init();
   return _ctx;

end

function this.Synth2_lfo_init()
   return this.Synth2__ctx_type_14_init();
end

function this.Synth2_lfo(_ctx,f,gate)
   local rate = ((0.001526 * f) + 0.000015);
   if this.Synth2_edge(_ctx._inst30,gate) then
      _ctx.phase = 0.000000;

   end
   if this.Synth2_each(_ctx._inst32,4) then
      _ctx.phase = (_ctx.phase + rate);

   end
   if (_ctx.phase > 1.000000) then
      _ctx.phase = (_ctx.phase + (-1.000000));

   end
   return (this.sin((6.283185 * _ctx.phase)) + 0.500000);

end

function this.Synth2__ctx_type_15_init()
   local _ctx = {};
   _ctx.pre = 0;
   _ctx.notes = this.makeArray(4,0);
   _ctx.count = 0;
   return _ctx;

end

function this.Synth2_mono_noteOn_init()
   return this.Synth2__ctx_type_15_init();
end

function this.Synth2_mono_noteOn(_ctx,n)
   if (_ctx.count < 4) then
      this.set(_ctx.notes,_ctx.count,n);
      _ctx.pre = n;
      local _cond_75 = false;
      _cond_75 = (_ctx.count < 4);
      if _cond_75 then
         _ctx.count = (_ctx.count + 1);

      end

   end
   return _ctx.pre;

end

function this.Synth2_mono_noteOff_init()
   return this.Synth2__ctx_type_15_init();
end

function this.Synth2_mono_noteOff(_ctx,n)
   local found = false;
   local pos = 0;
   local i = 0;
   if (_ctx.count == 0) then
      return _ctx.pre;

   end
   while ((i < 4) and (found == false)) do
      local _cond_78 = false;
      _cond_78 = (this.get(_ctx.notes,i) == n);
      if _cond_78 then
         pos = i;
         found = true;

      end
      i = (i + 1);
   end
   if found then
      local k = 0;
      k = (pos + 1);
      while (k < 4) do
         this.set(_ctx.notes,(k + -1),this.get(_ctx.notes,k));
         k = (k + 1);
      end
      local _cond_79 = false;
      _cond_79 = (found and (_ctx.count > 0));
      if _cond_79 then
         _ctx.count = (_ctx.count + -1);
         _ctx.pre = this.get(_ctx.notes,(_ctx.count + -1));

      end

   end
   return _ctx.pre;

end

function this.Synth2_mono_isGateOn_init()
   return this.Synth2__ctx_type_15_init();
end

function this.Synth2_mono_isGateOn(_ctx)
   return (_ctx.count > 0);

end

function this.Synth2__ctx_type_16_init()
   local _ctx = {};
   _ctx.wave = 0.000000;
   _ctx.volume = 0.000000;
   _ctx.res = 0.000000;
   _ctx.pw = 0.000000;
   _ctx.pitch = 0.000000;
   _ctx.monoin = this.Synth2__ctx_type_15_init();
   _ctx.lfo_rate = 0.000000;
   _ctx.lfo_amt = 0.000000;
   _ctx.cut = 0.000000;
   _ctx.amp_s = 0.000000;
   _ctx._inst50 = this.Synth2__ctx_type_13_init();
   _ctx._inst49 = this.Synth2__ctx_type_7_init();
   _ctx._inst48 = this.Synth2__ctx_type_11_init();
   _ctx._inst47 = this.Synth2__ctx_type_14_init();
   this.Synth2_default(_ctx);
   return _ctx;

end

function this.Synth2_process_init()
   return this.Synth2__ctx_type_16_init();
end

function this.Synth2_process(_ctx,i)
   local gate = this.Synth2_mono_isGateOn(_ctx.monoin);
   local lfo1 = (this.Synth2_lfo(_ctx._inst47,_ctx.lfo_rate,gate) * _ctx.lfo_amt);
   local o1 = this.Synth2_osc(_ctx._inst48,_ctx.pitch,(_ctx.pw + lfo1),_ctx.wave);
   local amp_env = 0.0;
   local _if_80 = 0.0;
   if gate then
      _if_80 = 1.000000;
   else

      _if_80 = 0.000000;
   end
   amp_env = this.Synth2_smooth(_ctx._inst49,_if_80);
   local output = (amp_env * this.Synth2_svf(_ctx._inst50,o1,_ctx.cut,_ctx.res,0));
   return (_ctx.volume * output);

end

function this.Synth2_noteOn_init()
   return this.Synth2__ctx_type_16_init();
end

function this.Synth2_noteOn(_ctx,note,velocity,channel)
   _ctx.pitch = this.real(this.Synth2_mono_noteOn(_ctx.monoin,note));

end

function this.Synth2_noteOff_init()
   return this.Synth2__ctx_type_16_init();
end

function this.Synth2_noteOff(_ctx,note,channel)
   _ctx.pitch = this.real(this.Synth2_mono_noteOff(_ctx.monoin,note));

end

function this.Synth2_controlChange_init()
   return this.Synth2__ctx_type_16_init();
end

function this.Synth2_controlChange(_ctx,control,value,channel)
   local value_0_1 = (this.real(value) * 0.007874);
   local value_m1_1 = ((value_0_1 * 2.000000) + (-1.000000));
   if (control == 30) then
      _ctx.volume = value_0_1;

   end
   if (control == 31) then
      _ctx.wave = value_0_1;

   end
   if (control == 32) then
      _ctx.pw = value_0_1;

   end
   if (control == 33) then
      _ctx.lfo_rate = value_0_1;

   end
   if (control == 34) then
      _ctx.lfo_amt = value_m1_1;

   end
   if (control == 35) then
      _ctx.cut = value_0_1;

   end
   if (control == 36) then
      _ctx.res = value_0_1;

   end

end

function this.Synth2_default_init()
   return this.Synth2__ctx_type_16_init();
end

function this.Synth2_default(_ctx)
   _ctx.volume = 1.000000;
   _ctx.pw = 0.000000;
   _ctx.pitch = 42.000000;
   _ctx.cut = 1.000000;
   _ctx.res = 0.000000;
   _ctx.amp_s = 1.000000;
   _ctx.lfo_amt = 0.500000;
   _ctx.lfo_rate = 0.000000;

end


function this.process(ctx,in0) return this.Synth2_process(ctx,in0) end
function this.noteOn(ctx,in0,in1,in2) return this.Synth2_noteOn(ctx,in0,in1,in2) end
function this.noteOff(ctx,in0,in1) return this.Synth2_noteOff(ctx,in0,in1) end
function this.controlChange(ctx,in0,in1,in2) return this.Synth2_controlChange(ctx,in0,in1,in2) end
function this.init() return this.Synth2_process_init() end
function this.default(ctx) return this.Synth2_default(ctx) end
this.config = { inputs = 2, outputs = 1, noteon_inputs = 4, noteoff_inputs = 3, controlchange_inputs = 4, is_active = true }
return this
