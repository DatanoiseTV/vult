

function ternary(cond,then_,else_) if cond then return then_() else return else_() end end
function ternary_value(cond,then_,else_) if cond then return then_ else return else_ end end
function eps()              return 1e-18; end
function pi()               return 3.1415926535897932384; end
function random()           return math.random(); end
function irandom()          return math.floor(math.random() * 4294967296); end
function clip(x,low,high)   if x < low then return low else if x > high then return high else return x end end end
function real(x)            return x; end
function int(x)             local int_part,_ = math.modf(x) return int_part; end
function sin(x)             return math.sin(x); end
function cos(x)             return math.cos(x); end
function abs(x)             return math.abs(x); end
function exp(x)             return math.exp(x); end
function floor(x)           return math.floor(x); end
function tan(x)             return math.tan(x); end
function tanh(x)            return math.tanh(x); end
function pow(a,b)           return math.pow(a,b); end
function sqrt(x)            return x; end
function set(a, i, v)       a[i+1]=v; end
function get(a, i)          return a[i+1]; end
function makeArray(size, v) local a = {}; for i=1,size do a[i]=v end return a; end
function wrap_array(a)      return a; end

function Synth2_minFixed()
   return 1.53e-05;
end

function Synth2__ctx_type_1_init()
   local _ctx = {};
   _ctx.pre_x = 0.;
   return _ctx;

end

function Synth2_change_init()
   return Synth2__ctx_type_1_init();
end

function Synth2_change(_ctx,x)
   local v = (_ctx.pre_x ~= x);
   _ctx.pre_x = x;
   return v;

end

function Synth2__ctx_type_2_init()
   local _ctx = {};
   _ctx.pre_x = false;
   return _ctx;

end

function Synth2_bchange_init()
   return Synth2__ctx_type_2_init();
end

function Synth2_bchange(_ctx,x)
   local v = (_ctx.pre_x ~= x);
   _ctx.pre_x = x;
   return v;

end

function Synth2__ctx_type_3_init()
   local _ctx = {};
   _ctx.pre_x = false;
   return _ctx;

end

function Synth2_edge_init()
   return Synth2__ctx_type_3_init();
end

function Synth2_edge(_ctx,x)
   local v = ((_ctx.pre_x ~= x) and (_ctx.pre_x == true));
   _ctx.pre_x = x;
   return v;

end

function Synth2__ctx_type_4_init()
   local _ctx = {};
   _ctx.count = 0;
   return _ctx;

end

function Synth2_each_init()
   return Synth2__ctx_type_4_init();
end

function Synth2_each(_ctx,n)
   local ret = (_ctx.count == 0);
   _ctx.count = ((1 + _ctx.count) % n);
   return ret;

end

function Synth2_near_zero(x)
   return (abs(x) < 0.02);
end

function Synth2__ctx_type_6_init()
   local _ctx = {};
   _ctx.y1 = 0.;
   _ctx.x1 = 0.;
   return _ctx;

end

function Synth2_dcblock_init()
   return Synth2__ctx_type_6_init();
end

function Synth2_dcblock(_ctx,x0)
   local y0 = (x0 + (- _ctx.x1) + (0.995 * _ctx.y1));
   _ctx.x1 = x0;
   _ctx.y1 = y0;
   return y0;

end

function Synth2__ctx_type_7_init()
   local _ctx = {};
   _ctx.x = 0.;
   return _ctx;

end

function Synth2_smooth_init()
   return Synth2__ctx_type_7_init();
end

function Synth2_smooth(_ctx,input)
   _ctx.x = (_ctx.x + (0.005 * (input + (- _ctx.x))));
   return _ctx.x;

end

function Synth2__ctx_type_8_init()
   local _ctx = {};
   _ctx.pre_x = 0.;
   return _ctx;

end

function Synth2_lpfilter_init()
   return Synth2__ctx_type_8_init();
end

function Synth2_lpfilter(_ctx,x)
   local ret = (0.5 * (_ctx.pre_x + x));
   _ctx.pre_x = x;
   return ret;

end

function Synth2_pitchToRate(d)
   return (0.0001854 * exp((0.0577623 * d)));
end

function Synth2_pulse_train(m,phase)
   local pi_phase = (3.1415927 * phase);
   local denominator1 = sin(pi_phase);
   local tmp1 = 0.;
   if Synth2_near_zero(denominator1) then
      tmp1 = 1.;
   else

      tmp1 = sin((m * pi_phase));
      tmp1 = (tmp1 / (denominator1 * m));

   end
   return tmp1;

end

function Synth2__ctx_type_11_init()
   local _ctx = {};
   _ctx.state_triang = 0.;
   _ctx.state_saw = 0.;
   _ctx.state_pulse = 0.;
   _ctx.rate = 0.;
   _ctx.phase = 0.;
   _ctx.output = 0.;
   _ctx.m = 0.;
   _ctx._inst38a = Synth2__ctx_type_1_init();
   _ctx._inst1153 = Synth2__ctx_type_6_init();
   return _ctx;

end

function Synth2_osc_init()
   return Synth2__ctx_type_11_init();
end

function Synth2_osc(_ctx,pitch,pw,wave)
   local fixed_pitch = 0.;
   if (wave < 0.6666667) then
      fixed_pitch = pitch;
   else

      fixed_pitch = (12. + pitch);
   end
   if Synth2_change(_ctx._inst38a,fixed_pitch) then
      _ctx.rate = Synth2_pitchToRate(fixed_pitch);
      local p = (1. / _ctx.rate);
      local maxHarmonics = floor((0.5 * p));
      _ctx.m = (1. + (2. * maxHarmonics));

   end
   local shift05 = (0.5 + (0.49 * pw));
   local shift = (_ctx.phase + shift05);
   if (shift > 1.) then
      shift = ((-1.) + shift);
   end
   local tmp1 = Synth2_pulse_train(_ctx.m,_ctx.phase);
   local tmp2 = Synth2_pulse_train(_ctx.m,shift);
   _ctx.phase = (_ctx.phase + _ctx.rate);
   if (_ctx.phase > 1.) then
      _ctx.phase = ((-1.) + _ctx.phase);
   end
   _ctx.state_pulse = clip((tmp1 + (- tmp2) + (0.9995 * _ctx.state_pulse)),(-1.),1.);
   _ctx.state_saw = clip(((0.5 * ((tmp1 + tmp2 + ((-2.) * _ctx.rate)) / shift05)) + (0.9995 * _ctx.state_saw)),(-1.),1.);
   _ctx.state_triang = clip(((0.9995 * _ctx.state_triang) + (2. * _ctx.rate * _ctx.state_pulse)),(-1.),1.);
   if (wave < 0.3333334) then
      _ctx.output = _ctx.state_pulse;
   else

      if (wave < 0.6666667) then
         _ctx.output = (2. * _ctx.state_saw);
      else

         _ctx.output = (2. * _ctx.state_triang * (1. + pw));
      end
   end
   _ctx.output = Synth2_dcblock(_ctx._inst1153,_ctx.output);
   return clip((0.25 * _ctx.output),(-1.),1.);

end

function Synth2__ctx_type_12_init()
   local _ctx = {};
   _ctx.dlow = 0.;
   _ctx.dband = 0.;
   return _ctx;

end

function Synth2_svf_step_init()
   return Synth2__ctx_type_12_init();
end

function Synth2_svf_step(_ctx,input,g,q,sel)
   local low = (_ctx.dlow + (_ctx.dband * g));
   local high = (input + (- low) + (- (_ctx.dband * q)));
   local band = (_ctx.dband + (g * high));
   local notch = (high + low);
   _ctx.dband = clip(band,(-1.),1.);
   _ctx.dlow = clip(low,(-1.),1.);
   local output = 0.0;
   if (sel == 0) then
      output = low;
   else

      if (sel == 1) then
         output = high;
      else

         if (sel == 2) then
            output = band;
         else

            output = notch;
         end
      end
   end
   return output;

end

function Synth2__ctx_type_13_init()
   local _ctx = {};
   _ctx.step = Synth2__ctx_type_12_init();
   _ctx.g = 0.;
   _ctx._inst18a = Synth2__ctx_type_1_init();
   return _ctx;

end

function Synth2_svf_init()
   return Synth2__ctx_type_13_init();
end

function Synth2_svf(_ctx,input,fc,q,sel)
   fc = clip(fc,0.,1.);
   q = clip(q,0.,1.);
   local fix_q = (2. * (1. + (- q)));
   if Synth2_change(_ctx._inst18a,fc) then
      _ctx.g = (0.5 * fc);
   end
   local x1 = Synth2_svf_step(_ctx.step,input,_ctx.g,fix_q,sel);
   local x2 = Synth2_svf_step(_ctx.step,input,_ctx.g,fix_q,sel);
   return (0.5 * (x1 + x2));

end

function Synth2__ctx_type_14_init()
   local _ctx = {};
   _ctx.phase = 0.;
   _ctx._inst3f2 = Synth2__ctx_type_4_init();
   _ctx._inst194 = Synth2__ctx_type_3_init();
   return _ctx;

end

function Synth2_lfo_init()
   return Synth2__ctx_type_14_init();
end

function Synth2_lfo(_ctx,f,gate)
   local rate = (1.53e-05 + (0.0015259 * f));
   if Synth2_edge(_ctx._inst194,gate) then
      _ctx.phase = 0.;
   end
   if Synth2_each(_ctx._inst3f2,4) then
      _ctx.phase = (_ctx.phase + rate);
   end
   if (_ctx.phase > 1.) then
      _ctx.phase = ((-1.) + _ctx.phase);
   end
   return (0.5 + sin((6.2831854 * _ctx.phase)));

end

function Synth2__ctx_type_15_init()
   local _ctx = {};
   _ctx.pre = 0;
   _ctx.notes = makeArray(4,0);
   _ctx.count = 0;
   return _ctx;

end

function Synth2_mono_noteOn_init()
   return Synth2__ctx_type_15_init();
end

function Synth2_mono_noteOn(_ctx,n)
   if (_ctx.count < 4) then
      set(_ctx.notes,_ctx.count,n);
      _ctx.pre = n;
      if (_ctx.count < 4) then
         _ctx.count = (1 + _ctx.count);
      end

   end
   return _ctx.pre;

end

function Synth2_mono_noteOff_init()
   return Synth2__ctx_type_15_init();
end

function Synth2_mono_noteOff(_ctx,n)
   local found = false;
   local pos = 0;
   local i = 0;
   if (_ctx.count == 0) then
      return _ctx.pre;
   end
   while ((i < 4) and (found == false)) do
      if (get(_ctx.notes,i) == n) then
         pos = i;
         found = true;

      end
      i = (1 + i);
   end
   if found then
      local k = (1 + pos);
      while (k < 4) do
         set(_ctx.notes,(-1 + k),get(_ctx.notes,k));
         k = (1 + k);
      end
      if (found and (_ctx.count > 0)) then
         _ctx.count = (-1 + _ctx.count);
         _ctx.pre = get(_ctx.notes,(-1 + _ctx.count));

      end

   end
   return _ctx.pre;

end

function Synth2_mono_isGateOn_init()
   return Synth2__ctx_type_15_init();
end

function Synth2_mono_isGateOn(_ctx)
   return (_ctx.count > 0);
end

function Synth2__ctx_type_16_init()
   local _ctx = {};
   _ctx.wave = 0.;
   _ctx.volume = 0.;
   _ctx.res = 0.;
   _ctx.pw = 0.;
   _ctx.pitch = 0.;
   _ctx.monoin = Synth2__ctx_type_15_init();
   _ctx.lfo_rate = 0.;
   _ctx.lfo_amt = 0.;
   _ctx.cut = 0.;
   _ctx.amp_s = 0.;
   _ctx._inst412 = Synth2__ctx_type_13_init();
   _ctx._inst3f4 = Synth2__ctx_type_7_init();
   _ctx._inst261 = Synth2__ctx_type_11_init();
   _ctx._inst16a = Synth2__ctx_type_14_init();
   Synth2_default(_ctx);
   return _ctx;

end

function Synth2_process_init()
   return Synth2__ctx_type_16_init();
end

function Synth2_process(_ctx,i)
   local gate = Synth2_mono_isGateOn(_ctx.monoin);
   local lfo1 = (_ctx.lfo_amt * Synth2_lfo(_ctx._inst16a,_ctx.lfo_rate,gate));
   local o1 = Synth2_osc(_ctx._inst261,_ctx.pitch,(_ctx.pw + lfo1),_ctx.wave);
   local amp_env = 0.0;
   local _if_5 = 0.0;
   if gate then
      _if_5 = 1.;
   else

      _if_5 = 0.;
   end
   amp_env = Synth2_smooth(_ctx._inst3f4,_if_5);
   local output = (amp_env * Synth2_svf(_ctx._inst412,o1,_ctx.cut,_ctx.res,0));
   return (_ctx.volume * output);

end

function Synth2_noteOn_init()
   return Synth2__ctx_type_16_init();
end

function Synth2_noteOn(_ctx,note,velocity,channel)
   _ctx.pitch = real(Synth2_mono_noteOn(_ctx.monoin,note));
end

function Synth2_noteOff_init()
   return Synth2__ctx_type_16_init();
end

function Synth2_noteOff(_ctx,note,channel)
   _ctx.pitch = real(Synth2_mono_noteOff(_ctx.monoin,note));
end

function Synth2_controlChange_init()
   return Synth2__ctx_type_16_init();
end

function Synth2_controlChange(_ctx,control,value,channel)
   local value_0_1 = (0.0078741 * real(value));
   local value_m1_1 = ((-1.) + (2. * value_0_1));
   if (control == 30) then
      _ctx.volume = value_0_1;
   end
   if (control == 31) then
      _ctx.wave = value_0_1;
   end
   if (control == 32) then
      _ctx.pw = value_0_1;
   end
   if (control == 33) then
      _ctx.lfo_rate = value_0_1;
   end
   if (control == 34) then
      _ctx.lfo_amt = value_m1_1;
   end
   if (control == 35) then
      _ctx.cut = value_0_1;
   end
   if (control == 36) then
      _ctx.res = value_0_1;
   end

end

function Synth2_default_init()
   return Synth2__ctx_type_16_init();
end

function Synth2_default(_ctx)
   _ctx.volume = 1.;
   _ctx.pw = 0.;
   _ctx.pitch = 42.;
   _ctx.cut = 1.;
   _ctx.res = 0.;
   _ctx.amp_s = 1.;
   _ctx.lfo_amt = 0.5;
   _ctx.lfo_rate = 0.;

end


function process(ctx,i) return Synth2_process(ctx,i) end
function noteOn(ctx,note,velocity,channel) return Synth2_noteOn(ctx,note,velocity,channel) end
function noteOff(ctx,note,channel) return Synth2_noteOff(ctx,note,channel) end
function controlChange(ctx,control,value,channel) return Synth2_controlChange(ctx,control,value,channel) end
function init() return Synth2_process_init() end
function default(ctx) return Synth2_default(ctx) end
config = { inputs = 2, outputs = 1, noteon_inputs = 4, noteoff_inputs = 3, controlchange_inputs = 4, is_active = true }
