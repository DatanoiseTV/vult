
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#include "math.h"

float Math_sin(float x0){
   float x1 = fmodf(x0,(6.28318530718f));
   uint8_t sign = (x1 > 3.14159265359f);
   float x2 = fmodf(x1,3.14159265359f);
   float x3;
   uint8_t _cond_2 = (x2 > (1.5707963268f));
   if(_cond_2){ x3 = (3.14159265359f + (- x2)); }
   else
   { x3 = x2; }
   float xp2 = (x3 * x3);
   float acc = (x3 * (1.f + ((((-0.166666666667f)) + (0.00833333333333f * xp2)) * xp2)));
   float _if_1;
   if(sign){ _if_1 = (- acc); }
   else
   { _if_1 = acc; }
   return _if_1;
}

float Math_cos(float x0){
   return Math_sin((x0 + (1.5707963268f)));
}

float Math_tanh(float xx){
   uint8_t positive = (xx > 0.f);
   float x;
   if(positive){ x = xx; }
   else
   { x = (- xx); }
   float y;
   int n = 0;
   while((x > 1.f)){
      x = (x * 0.5f);
      n = (n + 1);
   }
   y = ((-0.00409341481604f) + (x * (1.04192726436f + (x * ((-0.191854020579f) + (x * (0.185782226563f + (x * ((-0.920884671533f) + (x * (1.24746375479f + (x * ((-0.916265340718f) + (x * (0.428905299435f + (x * ((-0.13323671176f) + (x * (0.02689551524f + (((-0.00322032138218f) + (0.000174583163406f * x)) * x))))))))))))))))))));
   while((n > 0)){
      y = ((2.f * y) / (1.f + (y * y)));
      n = (n + (-1));
   }
   float _if_3;
   if(positive){ _if_3 = y; }
   else
   { _if_3 = (- y); }
   return _if_3;
}

float Math_tan(float x){
   float xp2 = (x * x);
   return (x * (1.f + (xp2 * ((0.333333333333f) + (xp2 * ((0.133333333333f) + (xp2 * ((0.0539682539683f) + (xp2 * ((0.0218694885362f) + (0.0088632355299f * xp2)))))))))));
}

float Math_exp(float x){
   float acc = ((-0.0164263154557f) + (0.000821315772785f * x));
   acc = (0.166727101875f + (x * acc));
   acc = ((-0.971616559205f) + (x * acc));
   acc = (3.76932607473f + (x * acc));
   acc = ((-9.0794405392f) + (x * acc));
   acc = (15.0359818491f + (x * acc));
   acc = ((-12.2023397685f) + (x * acc));
   acc = (6.29266799816f + (x * acc));
   return acc;
}


