
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#include "math.h"

float Math_sin(float x0){
   float x1;
   x1 = fmodf(x0,6.283185f);
   uint8_t sign;
   sign = (x1 > 3.141593f);
   float x2;
   x2 = fmodf(x1,3.141593f);
   float x3;
   uint8_t _cond_8;
   _cond_8 = (x2 > 1.570796f);
   if(_cond_8){ x3 = (3.141593f + (- x2)); }
   else
   { x3 = x2; }
   float xp2;
   xp2 = (x3 * x3);
   float acc;
   acc = (x3 * (1.000000f + (((-0.166667f) + (0.008333f * xp2)) * xp2)));
   float _if_7;
   if(sign){ _if_7 = (- acc); }
   else
   { _if_7 = acc; }
   return _if_7;
}

float Math_cos(float x0){
   return Math_sin((x0 + 1.570796f));
}

float Math_tanh(float xx){
   uint8_t positive;
   positive = (xx > 0.000000f);
   float x;
   if(positive){ x = xx; }
   else
   { x = (- xx); }
   float y;
   int n;
   n = 0;
   while(x > 1.000000f){
      x = (x * 0.500000f);
      n = (n + 1);
   }
   y = ((-0.004093f) + (x * (1.041927f + (x * ((-0.191854f) + (x * (0.185782f + (x * ((-0.920885f) + (x * (1.247464f + (x * ((-0.916265f) + (x * (0.428905f + (x * ((-0.133237f) + (x * (0.026896f + (((-0.003220f) + (0.000175f * x)) * x))))))))))))))))))));
   while(n > 0){
      y = ((2.000000f * y) / (1.000000f + (y * y)));
      n = (n + (-1));
   }
   float _if_9;
   if(positive){ _if_9 = y; }
   else
   { _if_9 = (- y); }
   return _if_9;
}

float Math_tan(float x){
   float xp2;
   xp2 = (x * x);
   return (x * (1.000000f + (xp2 * (0.333333f + (xp2 * (0.133333f + (xp2 * (0.053968f + (xp2 * (0.021869f + (0.008863f * xp2)))))))))));
}

float Math_exp(float x){
   float acc;
   acc = ((-0.016426f) + (0.000821f * x));
   acc = (0.166727f + (x * acc));
   acc = ((-0.971617f) + (x * acc));
   acc = (3.769326f + (x * acc));
   acc = ((-9.079441f) + (x * acc));
   acc = (15.035982f + (x * acc));
   acc = ((-12.202340f) + (x * acc));
   acc = (6.292668f + (x * acc));
   return acc;
}


