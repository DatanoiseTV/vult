
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#include "saw_eptr.h"

void Util__ctx_type_3_init(Util__ctx_type_3 &_output_){
   Util__ctx_type_3 _ctx;
   _ctx.y1 = 0x0 /* 0.000000 */;
   _ctx.x1 = 0x0 /* 0.000000 */;
   _output_ = _ctx;
   return ;
}

fix16_t Util_dcblock(Util__ctx_type_3 &_ctx, fix16_t x0){
   fix16_t y0;
   y0 = (x0 + (- _ctx.x1) + fix_mul(0xfeb8 /* 0.995000 */,_ctx.y1));
   _ctx.x1 = x0;
   _ctx.y1 = y0;
   return y0;
}

void Saw_eptr__ctx_type_0_init(Saw_eptr__ctx_type_0 &_output_){
   Saw_eptr__ctx_type_0 _ctx;
   _ctx.rate = 0x0 /* 0.000000 */;
   _ctx.phase = 0x0 /* 0.000000 */;
   Util__ctx_type_1_init(_ctx._inst13b);
   Saw_eptr_default(_ctx);
   _output_ = _ctx;
   return ;
}

fix16_t Saw_eptr_process(Saw_eptr__ctx_type_0 &_ctx, fix16_t cv){
   fix16_t y;
   y = 0x0 /* 0.000000 */;
   if(Util_change(_ctx._inst13b,cv)){
      _ctx.rate = Util_cvToRate(cv);
   }
   _ctx.phase = (_ctx.phase + (_ctx.rate << 1));
   if(_ctx.phase > (0x10000 /* 1.000000 */ + (- _ctx.rate))){
      y = (-0x10000 /* -1.000000 */ + _ctx.phase + (- fix_div(_ctx.phase,_ctx.rate)) + fix_div(0x10000 /* 1.000000 */,_ctx.rate));
      _ctx.phase = (-0x20000 /* -2.000000 */ + _ctx.phase);
   }
   else
   {
      y = _ctx.phase;
   }
   return y;
}


