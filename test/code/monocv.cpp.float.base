
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#include "monocv.h"

void Util__ctx_type_0_init(Util__ctx_type_0 &_output_){
   Util__ctx_type_0 _ctx;
   _ctx.pre = 0;
   _output_ = _ctx;
   return ;
}

void Util_edge_init(Util__ctx_type_0 &_output_){
   Util__ctx_type_0_init(_output_);
   return ;
}

uint8_t Util_edge(Util__ctx_type_0 &_ctx, uint8_t x){
   uint8_t ret;
   ret = (x && bool_not(_ctx.pre));
   _ctx.pre = x;
   return ret;
}

void Util__ctx_type_1_init(Util__ctx_type_1 &_output_){
   Util__ctx_type_1 _ctx;
   _ctx.pre_x = 0.000000f;
   _output_ = _ctx;
   return ;
}

void Util_change_init(Util__ctx_type_1 &_output_){
   Util__ctx_type_1_init(_output_);
   return ;
}

uint8_t Util_change(Util__ctx_type_1 &_ctx, float x){
   uint8_t v;
   v = (_ctx.pre_x != x);
   _ctx.pre_x = x;
   return v;
}

float Util_map(float x, float x0, float x1, float y0, float y1){
   return ((((x + (- x0)) * (y1 + (- y0))) / (x1 + (- x0))) + y0);
}

void Util__ctx_type_3_init(Util__ctx_type_3 &_output_){
   Util__ctx_type_3 _ctx;
   _ctx.y1 = 0.000000f;
   _ctx.x1 = 0.000000f;
   _output_ = _ctx;
   return ;
}

void Util_dcblock_init(Util__ctx_type_3 &_output_){
   Util__ctx_type_3_init(_output_);
   return ;
}

float Util_dcblock(Util__ctx_type_3 &_ctx, float x0){
   float y0;
   y0 = (x0 + (- _ctx.x1) + (_ctx.y1 * 0.995000f));
   _ctx.x1 = x0;
   _ctx.y1 = y0;
   return y0;
}

void Util__ctx_type_4_init(Util__ctx_type_4 &_output_){
   Util__ctx_type_4 _ctx;
   _ctx.x = 0.000000f;
   _output_ = _ctx;
   return ;
}

void Util_smooth_init(Util__ctx_type_4 &_output_){
   Util__ctx_type_4_init(_output_);
   return ;
}

float Util_smooth(Util__ctx_type_4 &_ctx, float input){
   _ctx.x = (_ctx.x + ((input + (- _ctx.x)) * 0.005000f));
   return _ctx.x;
}

void Util__ctx_type_5_init(Util__ctx_type_5 &_output_){
   Util__ctx_type_5 _ctx;
   _ctx.x0 = 0.000000f;
   _output_ = _ctx;
   return ;
}

void Util_average2_init(Util__ctx_type_5 &_output_){
   Util__ctx_type_5_init(_output_);
   return ;
}

float Util_average2(Util__ctx_type_5 &_ctx, float x1){
   float result;
   result = ((_ctx.x0 + x1) * 0.500000f);
   _ctx.x0 = x1;
   return result;
}

float Util_pitchToRate(float pitch){
   int index;
   index = int_clip(float_to_int((0.244094f * pitch)),0,31);
   return (float_get(float_wrap_array(Util_pitchToRate_c0),index) + (pitch * (float_get(float_wrap_array(Util_pitchToRate_c1),index) + (float_get(float_wrap_array(Util_pitchToRate_c2),index) * pitch))));
}

float Util_cvToPitch(float cv){
   return ((cv * 120.000000f) + 24.000000f);
}

float Util_cvToRate(float cv){
   int index;
   index = int_clip(float_to_int((34.444444f * cv)),0,31);
   return (float_get(float_wrap_array(Util_cvToRate_c0),index) + (cv * (float_get(float_wrap_array(Util_cvToRate_c1),index) + (float_get(float_wrap_array(Util_cvToRate_c2),index) * cv))));
}

float Util_pitchToCv(float pitch){
   return (0.008333f * ((-24.000000f) + pitch));
}

float Util_cvToRate_unit(float cv){
   int index;
   index = int_clip(float_to_int((34.444444f * cv)),0,31);
   return (float_get(float_wrap_array(Util_cvToRate_unit_c0),index) + (cv * (float_get(float_wrap_array(Util_cvToRate_unit_c1),index) + (float_get(float_wrap_array(Util_cvToRate_unit_c2),index) * cv))));
}

void Monocv__ctx_type_0_init(Monocv__ctx_type_0 &_output_){
   Monocv__ctx_type_0 _ctx;
   _ctx.pre = 0;
   int_init_array(4,0,_ctx.notes);
   _ctx.count = 0;
   _output_ = _ctx;
   return ;
}

void Monocv_mono_noteOn_init(Monocv__ctx_type_0 &_output_){
   Monocv__ctx_type_0_init(_output_);
   return ;
}

int Monocv_mono_noteOn(Monocv__ctx_type_0 &_ctx, int n){
   uint8_t _cond_33;
   _cond_33 = (_ctx.count < 4);
   if(_cond_33){
      int_set(_ctx.notes,_ctx.count,n);
      _ctx.pre = n;
      uint8_t _cond_32;
      _cond_32 = (_ctx.count < 4);
      if(_cond_32){
         _ctx.count = (_ctx.count + 1);
      }
   }
   return _ctx.pre;
}

void Monocv_mono_noteOff_init(Monocv__ctx_type_0 &_output_){
   Monocv__ctx_type_0_init(_output_);
   return ;
}

int Monocv_mono_noteOff(Monocv__ctx_type_0 &_ctx, int n){
   uint8_t found;
   found = 0;
   int pos;
   int i;
   i = 0;
   uint8_t _cond_34;
   _cond_34 = (_ctx.count == 0);
   if(_cond_34){
      return _ctx.pre;
   }
   while((i < 4) && bool_not(found)){
      uint8_t _cond_35;
      _cond_35 = (int_get(_ctx.notes,i) == n);
      if(_cond_35){
         pos = i;
         found = 1;
      }
      i = (i + 1);
   }
   if(found){
      int k;
      k = (pos + 1);
      while(k < 4){
         int_set(_ctx.notes,(k + (-1)),int_get(_ctx.notes,k));
         k = (k + 1);
      }
      uint8_t _cond_36;
      _cond_36 = (found && (_ctx.count > 0));
      if(_cond_36){
         _ctx.count = (_ctx.count + (-1));
         _ctx.pre = int_get(_ctx.notes,(_ctx.count + (-1)));
      }
   }
   return _ctx.pre;
}

void Monocv_mono_isGateOn_init(Monocv__ctx_type_0 &_output_){
   Monocv__ctx_type_0_init(_output_);
   return ;
}

uint8_t Monocv_mono_isGateOn(Monocv__ctx_type_0 &_ctx){
   return (_ctx.count > 0);
}

void Monocv__ctx_type_1_init(Monocv__ctx_type_1 &_output_){
   Monocv__ctx_type_1 _ctx;
   _ctx.vel = 0.000000f;
   Monocv__ctx_type_0_init(_ctx.notes);
   _ctx.gate = 0.000000f;
   _ctx.cv = 0.000000f;
   _ctx.channel_in = 0;
   _ctx.active_note = 0;
   _output_ = _ctx;
   return ;
}

void Monocv_process_init(Monocv__ctx_type_1 &_output_){
   Monocv__ctx_type_1_init(_output_);
   return ;
}

void Monocv_process(Monocv__ctx_type_1 &_ctx, int c, _tuple_$_real_real_real_$ &_output_){
   _ctx.channel_in = c;
   uint8_t _cond_38;
   _cond_38 = Monocv_mono_isGateOn(_ctx.notes);
   if(_cond_38){ _ctx.gate = _ctx.vel; }
   else
   { _ctx.gate = 0.000000f; }
   _ctx.cv = Util_pitchToCv(int_to_float(_ctx.active_note));
   _tuple_$_real_real_real_$ _tuple_37;
   {
      _tuple_37.field_0 = _ctx.cv;
      _tuple_37.field_1 = _ctx.vel;
      _tuple_37.field_2 = _ctx.gate;
   }
   _output_ = _tuple_37;
   return ;
}

void Monocv_noteOn_init(Monocv__ctx_type_1 &_output_){
   Monocv__ctx_type_1_init(_output_);
   return ;
}

void Monocv_noteOn(Monocv__ctx_type_1 &_ctx, int note, int velocity, int channel){
   uint8_t _cond_41;
   _cond_41 = (_ctx.channel_in == channel);
   if(_cond_41){
      uint8_t _cond_40;
      _cond_40 = (velocity > 0);
      if(_cond_40){
         _ctx.active_note = Monocv_mono_noteOn(_ctx.notes,note);
         _ctx.vel = (int_to_float(velocity) * 0.007874f);
      }
      else
      {
         _ctx.active_note = Monocv_mono_noteOff(_ctx.notes,note);
      }
   }
}

void Monocv_noteOff_init(Monocv__ctx_type_1 &_output_){
   Monocv__ctx_type_1_init(_output_);
   return ;
}

void Monocv_noteOff(Monocv__ctx_type_1 &_ctx, int note, int channel){
   uint8_t _cond_42;
   _cond_42 = (_ctx.channel_in == channel);
   if(_cond_42){
      _ctx.active_note = Monocv_mono_noteOff(_ctx.notes,note);
   }
}

void Monocv_controlChange_init(Monocv__ctx_type_1 &_output_){
   Monocv__ctx_type_1_init(_output_);
   return ;
}

void Monocv_controlChange(Monocv__ctx_type_1 &_ctx, int control, int value, int channel){
}

void Monocv_default_init(Monocv__ctx_type_1 &_output_){
   Monocv__ctx_type_1_init(_output_);
   return ;
}

void Monocv_default(Monocv__ctx_type_1 &_ctx){
}


