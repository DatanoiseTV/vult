
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#include "monocv.h"

void Util__ctx_type_0_init(Util__ctx_type_0 &_output_){
   Util__ctx_type_0 _ctx;
   _ctx.pre = false;
   _output_ = _ctx;
   return ;
}

void Util_edge_init(Util__ctx_type_0 &_output_){
   Util__ctx_type_0_init(_output_);
   return ;
}

uint8_t Util_edge(Util__ctx_type_0 &_ctx, uint8_t x){
   uint8_t ret;
   ret = (x && bool_not(_ctx.pre));
   _ctx.pre = x;
   return ret;
}

void Util__ctx_type_1_init(Util__ctx_type_1 &_output_){
   Util__ctx_type_1 _ctx;
   _ctx.pre_x = 0.f;
   _output_ = _ctx;
   return ;
}

void Util_change_init(Util__ctx_type_1 &_output_){
   Util__ctx_type_1_init(_output_);
   return ;
}

uint8_t Util_change(Util__ctx_type_1 &_ctx, float x){
   uint8_t v;
   v = (_ctx.pre_x != x);
   _ctx.pre_x = x;
   return v;
}

float Util_map(float x, float x0, float x1, float y0, float y1){
   return ((((x + (- x0)) * (y1 + (- y0))) / (x1 + (- x0))) + y0);
}

void Util__ctx_type_3_init(Util__ctx_type_3 &_output_){
   Util__ctx_type_3 _ctx;
   _ctx.y1 = 0.f;
   _ctx.x1 = 0.f;
   _output_ = _ctx;
   return ;
}

void Util_dcblock_init(Util__ctx_type_3 &_output_){
   Util__ctx_type_3_init(_output_);
   return ;
}

float Util_dcblock(Util__ctx_type_3 &_ctx, float x0){
   float y0;
   y0 = (x0 + (- _ctx.x1) + (_ctx.y1 * 0.995f));
   _ctx.x1 = x0;
   _ctx.y1 = y0;
   return y0;
}

void Util__ctx_type_4_init(Util__ctx_type_4 &_output_){
   Util__ctx_type_4 _ctx;
   _ctx.x = 0.f;
   _output_ = _ctx;
   return ;
}

void Util_smooth_init(Util__ctx_type_4 &_output_){
   Util__ctx_type_4_init(_output_);
   return ;
}

float Util_smooth(Util__ctx_type_4 &_ctx, float input){
   _ctx.x = (_ctx.x + ((input + (- _ctx.x)) * 0.005f));
   return _ctx.x;
}

void Util__ctx_type_5_init(Util__ctx_type_5 &_output_){
   Util__ctx_type_5 _ctx;
   _ctx.x0 = 0.f;
   _output_ = _ctx;
   return ;
}

void Util_average2_init(Util__ctx_type_5 &_output_){
   Util__ctx_type_5_init(_output_);
   return ;
}

float Util_average2(Util__ctx_type_5 &_ctx, float x1){
   float result;
   result = ((_ctx.x0 + x1) * 0.5f);
   _ctx.x0 = x1;
   return result;
}

float Util_cubic_clipper(float x){
   if(x <= -0.6666666f){
      return -0.6666666f;
   }
   else
   {
      if(x >= 0.6666667f){
         return 0.6666667f;
      }
      else
      {
         return (x + (-0.3333333f * x * x * x));
      }
   }
}

float Util_pitchToRate_1024_raw_c0(int index){
   return Util_pitchToRate_1024_c0[index];
}

float Util_pitchToRate_1024_raw_c1(int index){
   return Util_pitchToRate_1024_c1[index];
}

float Util_pitchToRate_1024_raw_c2(int index){
   return Util_pitchToRate_1024_c2[index];
}

float Util_pitchToRate_1024(float pitch){
   int index;
   index = int_clip(float_to_int((0.2440945f * pitch)),0,31);
   return (float_wrap_array(Util_pitchToRate_1024_c0)[index] + (pitch * (float_wrap_array(Util_pitchToRate_1024_c1)[index] + (float_wrap_array(Util_pitchToRate_1024_c2)[index] * pitch))));
}

float Util_pitchToRate_raw_c0(int index){
   return Util_pitchToRate_c0[index];
}

float Util_pitchToRate_raw_c1(int index){
   return Util_pitchToRate_c1[index];
}

float Util_pitchToRate_raw_c2(int index){
   return Util_pitchToRate_c2[index];
}

float Util_pitchToRate(float pitch){
   int index;
   index = int_clip(float_to_int((0.2440945f * pitch)),0,31);
   return (float_wrap_array(Util_pitchToRate_c0)[index] + (pitch * (float_wrap_array(Util_pitchToRate_c1)[index] + (float_wrap_array(Util_pitchToRate_c2)[index] * pitch))));
}

float Util_cvToPitch(float cv){
   return ((cv * 120.f) + 24.f);
}

float Util_cvToRate_1024_raw_c0(int index){
   return Util_cvToRate_1024_c0[index];
}

float Util_cvToRate_1024_raw_c1(int index){
   return Util_cvToRate_1024_c1[index];
}

float Util_cvToRate_1024_raw_c2(int index){
   return Util_cvToRate_1024_c2[index];
}

float Util_cvToRate_1024(float cv){
   int index;
   index = int_clip(float_to_int((34.4444445f * cv)),0,31);
   return (float_wrap_array(Util_cvToRate_1024_c0)[index] + (cv * (float_wrap_array(Util_cvToRate_1024_c1)[index] + (float_wrap_array(Util_cvToRate_1024_c2)[index] * cv))));
}

float Util_cvToRate_raw_c0(int index){
   return Util_cvToRate_c0[index];
}

float Util_cvToRate_raw_c1(int index){
   return Util_cvToRate_c1[index];
}

float Util_cvToRate_raw_c2(int index){
   return Util_cvToRate_c2[index];
}

float Util_cvToRate(float cv){
   int index;
   index = int_clip(float_to_int((141.1111112f * cv)),0,127);
   return (float_wrap_array(Util_cvToRate_c0)[index] + (cv * (float_wrap_array(Util_cvToRate_c1)[index] + (float_wrap_array(Util_cvToRate_c2)[index] * cv))));
}

float Util_pitchToCv(float pitch){
   return (0.0083334f * (-24.f + pitch));
}

float Util_cvToperiod_raw_c0(int index){
   return Util_cvToperiod_c0[index];
}

float Util_cvToperiod_raw_c1(int index){
   return Util_cvToperiod_c1[index];
}

float Util_cvToperiod_raw_c2(int index){
   return Util_cvToperiod_c2[index];
}

float Util_cvToperiod(float cv){
   int index;
   index = int_clip(float_to_int((31.f * cv)),0,31);
   return (float_wrap_array(Util_cvToperiod_c0)[index] + (cv * (float_wrap_array(Util_cvToperiod_c1)[index] + (float_wrap_array(Util_cvToperiod_c2)[index] * cv))));
}

float Util_cvTokHz_raw_c0(int index){
   return Util_cvTokHz_c0[index];
}

float Util_cvTokHz_raw_c1(int index){
   return Util_cvTokHz_c1[index];
}

float Util_cvTokHz_raw_c2(int index){
   return Util_cvTokHz_c2[index];
}

float Util_cvTokHz(float cv){
   int index;
   index = int_clip(float_to_int((31.f * cv)),0,31);
   return (float_wrap_array(Util_cvTokHz_c0)[index] + (cv * (float_wrap_array(Util_cvTokHz_c1)[index] + (float_wrap_array(Util_cvTokHz_c2)[index] * cv))));
}

void Monocv__ctx_type_0_init(Monocv__ctx_type_0 &_output_){
   Monocv__ctx_type_0 _ctx;
   _ctx.pre = 0;
   int_init_array(4,0,_ctx.notes);
   _ctx.count = 0;
   _output_ = _ctx;
   return ;
}

void Monocv_mono_noteOn_init(Monocv__ctx_type_0 &_output_){
   Monocv__ctx_type_0_init(_output_);
   return ;
}

int Monocv_mono_noteOn(Monocv__ctx_type_0 &_ctx, int n){
   if(_ctx.count < 4){
      int_set(_ctx.notes,_ctx.count,n);
      _ctx.pre = n;
      if(_ctx.count < 4){
         _ctx.count = (_ctx.count + 1);
      }
   }
   return _ctx.pre;
}

void Monocv_mono_noteOff_init(Monocv__ctx_type_0 &_output_){
   Monocv__ctx_type_0_init(_output_);
   return ;
}

int Monocv_mono_noteOff(Monocv__ctx_type_0 &_ctx, int n){
   uint8_t found;
   found = false;
   int pos;
   int i;
   i = 0;
   if(_ctx.count == 0){
      return _ctx.pre;
   }
   while((i < 4) && bool_not(found)){
      if(int_get(_ctx.notes,i) == n){
         pos = i;
         found = true;
      }
      i = (i + 1);
   }
   if(found){
      int k;
      k = (pos + 1);
      while(k < 4){
         int_set(_ctx.notes,(k + (-1)),int_get(_ctx.notes,k));
         k = (k + 1);
      }
      if(found && (_ctx.count > 0)){
         _ctx.count = (_ctx.count + (-1));
         _ctx.pre = int_get(_ctx.notes,(_ctx.count + (-1)));
      }
   }
   return _ctx.pre;
}

void Monocv_mono_isGateOn_init(Monocv__ctx_type_0 &_output_){
   Monocv__ctx_type_0_init(_output_);
   return ;
}

uint8_t Monocv_mono_isGateOn(Monocv__ctx_type_0 &_ctx){
   return (_ctx.count > 0);
}

void Monocv__ctx_type_1_init(Monocv__ctx_type_1 &_output_){
   Monocv__ctx_type_1 _ctx;
   _ctx.vel = 0.f;
   _ctx.process_ret_2 = 0.f;
   _ctx.process_ret_1 = 0.f;
   _ctx.process_ret_0 = 0.f;
   Monocv__ctx_type_0_init(_ctx.notes);
   _ctx.gate = 0.f;
   _ctx.cv = 0.f;
   _ctx.channel_in = 0;
   _ctx.active_note = 0;
   Util__ctx_type_1_init(_ctx._inst31);
   _output_ = _ctx;
   return ;
}

void Monocv_process_init(Monocv__ctx_type_1 &_output_){
   Monocv__ctx_type_1_init(_output_);
   return ;
}

void Monocv_process(Monocv__ctx_type_1 &_ctx, int c){
   _ctx.channel_in = c;
   if(Monocv_mono_isGateOn(_ctx.notes)){
      _ctx.gate = _ctx.vel;
   }
   else
   {
      _ctx.gate = 0.f;
   }
   float note;
   note = int_to_float(_ctx.active_note);
   if(Util_change(_ctx._inst31,note)){
      _ctx.cv = Util_pitchToCv(note);
   }
   _ctx.process_ret_0 = _ctx.cv;
   _ctx.process_ret_1 = _ctx.vel;
   _ctx.process_ret_2 = _ctx.gate;
   return ;
}

void Monocv_process_ret_0_init(Monocv__ctx_type_1 &_output_){
   Monocv__ctx_type_1_init(_output_);
   return ;
}

float Monocv_process_ret_0(Monocv__ctx_type_1 &_ctx){
   return _ctx.process_ret_0;
}

void Monocv_process_ret_1_init(Monocv__ctx_type_1 &_output_){
   Monocv__ctx_type_1_init(_output_);
   return ;
}

float Monocv_process_ret_1(Monocv__ctx_type_1 &_ctx){
   return _ctx.process_ret_1;
}

void Monocv_process_ret_2_init(Monocv__ctx_type_1 &_output_){
   Monocv__ctx_type_1_init(_output_);
   return ;
}

float Monocv_process_ret_2(Monocv__ctx_type_1 &_ctx){
   return _ctx.process_ret_2;
}

void Monocv_noteOn_init(Monocv__ctx_type_1 &_output_){
   Monocv__ctx_type_1_init(_output_);
   return ;
}

void Monocv_noteOn(Monocv__ctx_type_1 &_ctx, int note, int velocity, int channel){
   if(_ctx.channel_in == channel){
      if(velocity > 0){
         _ctx.active_note = Monocv_mono_noteOn(_ctx.notes,note);
         _ctx.vel = (int_to_float(velocity) * 0.0078741f);
      }
      else
      {
         _ctx.active_note = Monocv_mono_noteOff(_ctx.notes,note);
      }
   }
}

void Monocv_noteOff_init(Monocv__ctx_type_1 &_output_){
   Monocv__ctx_type_1_init(_output_);
   return ;
}

void Monocv_noteOff(Monocv__ctx_type_1 &_ctx, int note, int channel){
   if(_ctx.channel_in == channel){
      _ctx.active_note = Monocv_mono_noteOff(_ctx.notes,note);
   }
}

void Monocv_controlChange_init(Monocv__ctx_type_1 &_output_){
   Monocv__ctx_type_1_init(_output_);
   return ;
}

void Monocv_controlChange(Monocv__ctx_type_1 &_ctx, int control, int value, int channel){
}

void Monocv_default_init(Monocv__ctx_type_1 &_output_){
   Monocv__ctx_type_1_init(_output_);
   return ;
}

void Monocv_default(Monocv__ctx_type_1 &_ctx){
}


