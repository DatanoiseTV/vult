
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#include "aff_ff.h"

void Aff_ff__ctx_type_0_init(Aff_ff__ctx_type_0 &_output_){
   Aff_ff__ctx_type_0 _ctx;
   _ctx.x = 0;
   _ctx.process_ret_1 = 0x0 /* 0.000000 */;
   _ctx.process_ret_0 = 0x0 /* 0.000000 */;
   _output_ = _ctx;
   return ;
}



extern "C" {

static t_class *aff_ff_tilde_class;

typedef struct _aff_ff_tilde {
   t_pxobject  x_obj;
   float dummy;
   
   float in0_value;
   short in0_connected;
   float in1_value;
   short in1_connected;
   Aff_ff_process_type data;
} t_aff_ff_tilde;

void aff_ff_tilde_perform(t_aff_ff_tilde *x, t_object *dsp64, double **ins, long numins, double **outs, long numouts, long sampleframes, long flags, void *userparam)
{
   
   double *in_0 = ins[0];
   double *in_1 = ins[1];
   double *out_0 = outs[0];
   double *out_1 = outs[1];

   int n = sampleframes;
   while (n--) {
   
   float in_0_value = x->in0_connected? *(in_0++): x->in0_value;
   float in_1_value = x->in1_connected? *(in_1++): x->in1_value;
   
    Aff_ff_process(x->data,float_to_fix(in_0_value),float_to_fix(in_1_value));
   *(out_0++) = fix_to_float(Aff_ff_process_ret_0(x->data)); 
   *(out_1++) = fix_to_float(Aff_ff_process_ret_1(x->data)); 

   }
}

void aff_ff_tilde_dsp(t_aff_ff_tilde *x, t_object *dsp64, short *count, double samplerate, long maxvectorsize, long flags)
{
   
   x->in0_connected = count[0];
   x->in1_connected = count[1];
   object_method(dsp64, gensym("dsp_add64"), x, aff_ff_tilde_perform, 0, NULL);
}

void *aff_ff_tilde_new(t_symbol *s, long argc, t_atom *argv)
{
   t_aff_ff_tilde *x = (t_aff_ff_tilde *)object_alloc(aff_ff_tilde_class);

   Aff_ff_process_init(x->data);
   Aff_ff_default(x->data);
   dsp_setup((t_pxobject *)x, 2);
   
   outlet_new((t_object *)x, "signal");
   outlet_new((t_object *)x, "signal");

   return (void *)x;
}

void aff_ff_tilde_delete(t_aff_ff_tilde *x){

}


void aff_ff_noteOn(t_aff_ff_tilde *x, double note, double velocity, double channel){
   if((int)velocity) Aff_ff_noteOn(x->data,(int)note,(int)velocity,(int)channel);
   else Aff_ff_noteOff(x->data,(int)note,(int)channel);
}


void aff_ff_noteOff(t_aff_ff_tilde *x, double note, double channel) {
   Aff_ff_noteOff(x->data,(int)note,(int)channel);
}


void aff_ff_controlChange(t_aff_ff_tilde *x, double control, double value, double channel) {
   Aff_ff_controlChange(x->data,(int)control,(int)value,(int)channel);
}


void aff_ff_float(t_aff_ff_tilde *x, double f){
   int in = proxy_getinlet((t_object *)x);
   
   if(in == 0) x->in0_value = f;
   if(in == 1) x->in1_value = f;
}

void ext_main(void *r) {
   aff_ff_tilde_class = class_new("aff_ff~",
      (method)aff_ff_tilde_new, // constructor function
      (method)aff_ff_tilde_delete, // destructor function
      (long)sizeof(t_aff_ff_tilde), // size of the object
       0L, A_GIMME, 0); // arguments passed

   class_addmethod(aff_ff_tilde_class,(method)aff_ff_tilde_dsp, "dsp64", A_CANT, 0);

   class_addmethod(aff_ff_tilde_class, (method)aff_ff_noteOn,        "noteOn",        A_DEFFLOAT, A_DEFFLOAT, A_DEFFLOAT, 0);
   class_addmethod(aff_ff_tilde_class, (method)aff_ff_noteOff,       "noteOff",       A_DEFFLOAT, A_DEFFLOAT, 0);
   class_addmethod(aff_ff_tilde_class, (method)aff_ff_controlChange, "controlChange", A_DEFFLOAT, A_DEFFLOAT, A_DEFFLOAT, 0);
   class_addmethod(aff_ff_tilde_class, (method)aff_ff_float, "float", A_FLOAT, 0);

   class_dspinit(aff_ff_tilde_class);
   class_register(CLASS_BOX, aff_ff_tilde_class);
}

} // extern "C"
