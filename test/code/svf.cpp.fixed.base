
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#include "svf.h"

void Util__ctx_type_0_init(Util__ctx_type_0 &_output_){
   Util__ctx_type_0 _ctx;
   _ctx.pre = 0;
   _output_ = _ctx;
   return ;
}

void Util_edge_init(Util__ctx_type_0 &_output_){
   Util__ctx_type_0_init(_output_);
   return ;
}

uint8_t Util_edge(Util__ctx_type_0 &_ctx, uint8_t x){
   uint8_t ret;
   ret = (x && bool_not(_ctx.pre));
   _ctx.pre = x;
   return ret;
}

void Util__ctx_type_1_init(Util__ctx_type_1 &_output_){
   Util__ctx_type_1 _ctx;
   _ctx.pre_x = 0x0 /* 0.000000 */;
   _output_ = _ctx;
   return ;
}

void Util_change_init(Util__ctx_type_1 &_output_){
   Util__ctx_type_1_init(_output_);
   return ;
}

uint8_t Util_change(Util__ctx_type_1 &_ctx, fix16_t x){
   uint8_t v;
   v = (_ctx.pre_x != x);
   _ctx.pre_x = x;
   return v;
}

fix16_t Util_map(fix16_t x, fix16_t x0, fix16_t x1, fix16_t y0, fix16_t y1){
   return fix_add(fix_div(fix_mul(fix_add(x,(- x0)),fix_add(y1,(- y0))),fix_add(x1,(- x0))),y0);
}

void Util__ctx_type_3_init(Util__ctx_type_3 &_output_){
   Util__ctx_type_3 _ctx;
   _ctx.y1 = 0x0 /* 0.000000 */;
   _ctx.x1 = 0x0 /* 0.000000 */;
   _output_ = _ctx;
   return ;
}

void Util_dcblock_init(Util__ctx_type_3 &_output_){
   Util__ctx_type_3_init(_output_);
   return ;
}

fix16_t Util_dcblock(Util__ctx_type_3 &_ctx, fix16_t x0){
   fix16_t y0;
   y0 = fix_add(fix_add(x0,(- _ctx.x1)),fix_mul(_ctx.y1,0xfeb8 /* 0.995000 */));
   _ctx.x1 = x0;
   _ctx.y1 = y0;
   return y0;
}

void Util__ctx_type_4_init(Util__ctx_type_4 &_output_){
   Util__ctx_type_4 _ctx;
   _ctx.x = 0x0 /* 0.000000 */;
   _output_ = _ctx;
   return ;
}

void Util_smooth_init(Util__ctx_type_4 &_output_){
   Util__ctx_type_4_init(_output_);
   return ;
}

fix16_t Util_smooth(Util__ctx_type_4 &_ctx, fix16_t input){
   _ctx.x = fix_add(_ctx.x,fix_mul(fix_add(input,(- _ctx.x)),0x147 /* 0.005000 */));
   return _ctx.x;
}

void Util__ctx_type_5_init(Util__ctx_type_5 &_output_){
   Util__ctx_type_5 _ctx;
   _ctx.x0 = 0x0 /* 0.000000 */;
   _output_ = _ctx;
   return ;
}

void Util_average2_init(Util__ctx_type_5 &_output_){
   Util__ctx_type_5_init(_output_);
   return ;
}

fix16_t Util_average2(Util__ctx_type_5 &_ctx, fix16_t x1){
   fix16_t result;
   result = fix_mul(fix_add(_ctx.x0,x1),0x8000 /* 0.500000 */);
   _ctx.x0 = x1;
   return result;
}

fix16_t Util_pitchToRate_1024(fix16_t pitch){
   int index;
   index = int_clip(fix_to_int(fix_mul(0x3e7c /* 0.244094 */,pitch)),0,31);
   return fix_add(fix_get(fix_wrap_array(Util_pitchToRate_1024_c0),index),fix_mul(pitch,fix_add(fix_get(fix_wrap_array(Util_pitchToRate_1024_c1),index),fix_mul(fix_get(fix_wrap_array(Util_pitchToRate_1024_c2),index),pitch))));
}

fix16_t Util_pitchToRate(fix16_t pitch){
   int index;
   index = int_clip(fix_to_int(fix_mul(0x3e7c /* 0.244094 */,pitch)),0,31);
   return fix_add(fix_get(fix_wrap_array(Util_pitchToRate_c0),index),fix_mul(pitch,fix_add(fix_get(fix_wrap_array(Util_pitchToRate_c1),index),fix_mul(fix_get(fix_wrap_array(Util_pitchToRate_c2),index),pitch))));
}

fix16_t Util_cvToPitch(fix16_t cv){
   return fix_add(fix_mul(cv,0x780000 /* 120.000000 */),0x180000 /* 24.000000 */);
}

fix16_t Util_cvToRate_1024(fix16_t cv){
   int index;
   index = int_clip(fix_to_int(fix_mul(0x2271c7 /* 34.444444 */,cv)),0,31);
   return fix_add(fix_get(fix_wrap_array(Util_cvToRate_1024_c0),index),fix_mul(cv,fix_add(fix_get(fix_wrap_array(Util_cvToRate_1024_c1),index),fix_mul(fix_get(fix_wrap_array(Util_cvToRate_1024_c2),index),cv))));
}

fix16_t Util_cvToRate(fix16_t cv){
   int index;
   index = int_clip(fix_to_int(fix_mul(0x2271c7 /* 34.444444 */,cv)),0,31);
   return fix_add(fix_get(fix_wrap_array(Util_cvToRate_c0),index),fix_mul(cv,fix_add(fix_get(fix_wrap_array(Util_cvToRate_c1),index),fix_mul(fix_get(fix_wrap_array(Util_cvToRate_c2),index),cv))));
}

fix16_t Util_pitchToCv(fix16_t pitch){
   return fix_mul(0x222 /* 0.008333 */,fix_add((-0x180000 /* -24.000000 */),pitch));
}

fix16_t Util_cvToperiod(fix16_t cv){
   int index;
   index = int_clip(fix_to_int(fix_mul(0x1f0000 /* 31.000000 */,cv)),0,31);
   return fix_add(fix_get(fix_wrap_array(Util_cvToperiod_c0),index),fix_mul(cv,fix_add(fix_get(fix_wrap_array(Util_cvToperiod_c1),index),fix_mul(fix_get(fix_wrap_array(Util_cvToperiod_c2),index),cv))));
}

fix16_t Util_cvTokHz(fix16_t cv){
   int index;
   index = int_clip(fix_to_int(fix_mul(0x1f0000 /* 31.000000 */,cv)),0,31);
   return fix_add(fix_get(fix_wrap_array(Util_cvTokHz_c0),index),fix_mul(cv,fix_add(fix_get(fix_wrap_array(Util_cvTokHz_c1),index),fix_mul(fix_get(fix_wrap_array(Util_cvTokHz_c2),index),cv))));
}

fix16_t Saturate_soft_table(fix16_t x){
   int index;
   index = int_clip(fix_to_int(fix_mul(0x18000 /* 1.500000 */,x)),0,9);
   return fix_add(fix_get(fix_wrap_array(Saturate_soft_table_c0),index),fix_mul(x,fix_add(fix_get(fix_wrap_array(Saturate_soft_table_c1),index),fix_mul(fix_get(fix_wrap_array(Saturate_soft_table_c2),index),x))));
}

fix16_t Saturate_soft_process(fix16_t x){
   uint8_t _cond_24;
   _cond_24 = (x == 0x0 /* 0.000000 */);
   if(_cond_24){
      return 0x0 /* 0.000000 */;
   }
   fix16_t fixed;
   uint8_t sign;
   uint8_t _cond_26;
   _cond_26 = (x > 0x0 /* 0.000000 */);
   if(_cond_26){
      fixed = x;
      sign = 0;
   }
   else
   {
      fixed = (- x);
      sign = 1;
   }
   fix16_t out;
   out = 0x0 /* 0.000000 */;
   uint8_t _cond_25;
   _cond_25 = (fixed > 0x60000 /* 6.000000 */);
   if(_cond_25){
      out = 0x10000 /* 1.000000 */;
   }
   else
   {
      out = Saturate_soft_table(fixed);
   }
   if(sign){ out = (- out); }
   return out;
}

void Saturate_soft_noteOn(int note, int velocity, int channel){
}

void Saturate_soft_noteOff(int note, int channel){
}

void Saturate_soft_controlChange(int control, int value, int channel){
}

void Saturate_soft_default(){
}

fix16_t Svf_calc_g(fix16_t cv){
   int index;
   index = int_clip(fix_to_int(fix_mul(0x8d1c71 /* 141.111111 */,cv)),0,127);
   return fix_add(fix_get(fix_wrap_array(Svf_calc_g_c0),index),fix_mul(cv,fix_add(fix_get(fix_wrap_array(Svf_calc_g_c1),index),fix_mul(fix_get(fix_wrap_array(Svf_calc_g_c2),index),cv))));
}

void Svf__ctx_type_1_init(Svf__ctx_type_1 &_output_){
   Svf__ctx_type_1 _ctx;
   _ctx.z2 = 0x0 /* 0.000000 */;
   _ctx.z1 = 0x0 /* 0.000000 */;
   _ctx.inv_den = 0x0 /* 0.000000 */;
   _ctx.g = 0x0 /* 0.000000 */;
   Util__ctx_type_1_init(_ctx._inst32);
   Util__ctx_type_1_init(_ctx._inst31);
   _ctx.R = 0x0 /* 0.000000 */;
   Svf_default(_ctx);
   _output_ = _ctx;
   return ;
}

void Svf_process_init(Svf__ctx_type_1 &_output_){
   Svf__ctx_type_1_init(_output_);
   return ;
}

fix16_t Svf_process(Svf__ctx_type_1 &_ctx, fix16_t x, fix16_t cv, fix16_t q, int sel){
   q = fix_add(q,0x8000 /* 0.500000 */);
   uint8_t _cond_38;
   _cond_38 = (Util_change(_ctx._inst31,cv) || Util_change(_ctx._inst32,q));
   if(_cond_38){
      _ctx.g = Svf_calc_g(cv);
      _ctx.R = fix_div(0x10000 /* 1.000000 */,fix_mul(0x20000 /* 2.000000 */,fix_add(q,0x0 /* 0.000000 */)));
      _ctx.inv_den = fix_div(0x10000 /* 1.000000 */,fix_add(fix_add(0x10000 /* 1.000000 */,fix_mul(fix_mul(0x20000 /* 2.000000 */,_ctx.R),_ctx.g)),fix_mul(_ctx.g,_ctx.g)));
   }
   fix16_t high;
   high = fix_mul(fix_add(fix_add(x,(- fix_mul(fix_add(fix_mul(0x20000 /* 2.000000 */,_ctx.R),_ctx.g),_ctx.z1))),(- _ctx.z2)),_ctx.inv_den);
   fix16_t band;
   band = fix_add(fix_mul(_ctx.g,high),_ctx.z1);
   fix16_t low;
   low = fix_add(fix_mul(_ctx.g,band),_ctx.z2);
   fix16_t notch;
   notch = fix_add(low,high);
   _ctx.z1 = fix_add(fix_mul(_ctx.g,high),band);
   _ctx.z2 = fix_add(fix_mul(_ctx.g,band),low);
   fix16_t output;
   uint8_t _cond_39;
   _cond_39 = (sel == 0);
   if(_cond_39){ output = low; }
   else
   {
      uint8_t _cond_40;
      _cond_40 = (sel == 1);
      if(_cond_40){ output = high; }
      else
      {
         uint8_t _cond_41;
         _cond_41 = (sel == 2);
         if(_cond_41){ output = band; }
         else
         { output = notch; }
      }
   }
   return Saturate_soft_process(output);
}

void Svf_noteOn_init(Svf__ctx_type_1 &_output_){
   Svf__ctx_type_1_init(_output_);
   return ;
}

void Svf_noteOn(Svf__ctx_type_1 &_ctx, int note, int velocity, int channel){
}

void Svf_noteOff_init(Svf__ctx_type_1 &_output_){
   Svf__ctx_type_1_init(_output_);
   return ;
}

void Svf_noteOff(Svf__ctx_type_1 &_ctx, int note, int channel){
}

void Svf_controlChange_init(Svf__ctx_type_1 &_output_){
   Svf__ctx_type_1_init(_output_);
   return ;
}

void Svf_controlChange(Svf__ctx_type_1 &_ctx, int control, int value, int channel){
}

void Svf_default_init(Svf__ctx_type_1 &_output_){
   Svf__ctx_type_1_init(_output_);
   return ;
}

void Svf_default(Svf__ctx_type_1 &_ctx){
   _ctx.g = 0x98 /* 0.002330 */;
   _ctx.R = 0x10000 /* 1.000000 */;
   _ctx.inv_den = fix_div(0x10000 /* 1.000000 */,fix_add(0x10000 /* 1.000000 */,fix_mul(_ctx.g,_ctx.g)));
}


