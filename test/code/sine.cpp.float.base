
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#include "sine.h"

void Util__ctx_type_0_init(Util__ctx_type_0 &_output_){
   Util__ctx_type_0 _ctx;
   _ctx.pre = 0;
   _output_ = _ctx;
   return ;
}

void Util_edge_init(Util__ctx_type_0 &_output_){
   Util__ctx_type_0_init(_output_);
   return ;
}

uint8_t Util_edge(Util__ctx_type_0 &_ctx, uint8_t x){
   uint8_t ret;
   ret = (x && bool_not(_ctx.pre));
   _ctx.pre = x;
   return ret;
}

void Util__ctx_type_1_init(Util__ctx_type_1 &_output_){
   Util__ctx_type_1 _ctx;
   _ctx.pre_x = 0.000000f;
   _output_ = _ctx;
   return ;
}

void Util_change_init(Util__ctx_type_1 &_output_){
   Util__ctx_type_1_init(_output_);
   return ;
}

uint8_t Util_change(Util__ctx_type_1 &_ctx, float x){
   uint8_t v;
   v = (_ctx.pre_x != x);
   _ctx.pre_x = x;
   return v;
}

float Util_map(float x, float x0, float x1, float y0, float y1){
   return ((((x + (- x0)) * (y1 + (- y0))) / (x1 + (- x0))) + y0);
}

void Util__ctx_type_3_init(Util__ctx_type_3 &_output_){
   Util__ctx_type_3 _ctx;
   _ctx.y1 = 0.000000f;
   _ctx.x1 = 0.000000f;
   _output_ = _ctx;
   return ;
}

void Util_dcblock_init(Util__ctx_type_3 &_output_){
   Util__ctx_type_3_init(_output_);
   return ;
}

float Util_dcblock(Util__ctx_type_3 &_ctx, float x0){
   float y0;
   y0 = (x0 + (- _ctx.x1) + (_ctx.y1 * 0.995000f));
   _ctx.x1 = x0;
   _ctx.y1 = y0;
   return y0;
}

void Util__ctx_type_4_init(Util__ctx_type_4 &_output_){
   Util__ctx_type_4 _ctx;
   _ctx.x = 0.000000f;
   _output_ = _ctx;
   return ;
}

void Util_smooth_init(Util__ctx_type_4 &_output_){
   Util__ctx_type_4_init(_output_);
   return ;
}

float Util_smooth(Util__ctx_type_4 &_ctx, float input){
   _ctx.x = (_ctx.x + ((input + (- _ctx.x)) * 0.005000f));
   return _ctx.x;
}

void Util__ctx_type_5_init(Util__ctx_type_5 &_output_){
   Util__ctx_type_5 _ctx;
   _ctx.x0 = 0.000000f;
   _output_ = _ctx;
   return ;
}

void Util_average2_init(Util__ctx_type_5 &_output_){
   Util__ctx_type_5_init(_output_);
   return ;
}

float Util_average2(Util__ctx_type_5 &_ctx, float x1){
   float result;
   result = ((_ctx.x0 + x1) * 0.500000f);
   _ctx.x0 = x1;
   return result;
}

float Util_cubic_clipper(float x){
   uint8_t _cond_21;
   _cond_21 = (x <= (-0.666667f));
   if(_cond_21){
      return (-0.666667f);
   }
   else
   {
      uint8_t _cond_20;
      _cond_20 = (x >= 0.666667f);
      if(_cond_20){
         return 0.666667f;
      }
      else
      {
         return (x + ((-0.333333f) * x * x * x));
      }
   }
}

float Util_pitchToRate_1024(float pitch){
   int index;
   index = int_clip(float_to_int((0.244094f * pitch)),0,31);
   return (float_get(float_wrap_array(Util_pitchToRate_1024_c0),index) + (pitch * (float_get(float_wrap_array(Util_pitchToRate_1024_c1),index) + (float_get(float_wrap_array(Util_pitchToRate_1024_c2),index) * pitch))));
}

float Util_pitchToRate(float pitch){
   int index;
   index = int_clip(float_to_int((0.244094f * pitch)),0,31);
   return (float_get(float_wrap_array(Util_pitchToRate_c0),index) + (pitch * (float_get(float_wrap_array(Util_pitchToRate_c1),index) + (float_get(float_wrap_array(Util_pitchToRate_c2),index) * pitch))));
}

float Util_cvToPitch(float cv){
   return ((cv * 120.000000f) + 24.000000f);
}

float Util_cvToRate_1024(float cv){
   int index;
   index = int_clip(float_to_int((34.444444f * cv)),0,31);
   return (float_get(float_wrap_array(Util_cvToRate_1024_c0),index) + (cv * (float_get(float_wrap_array(Util_cvToRate_1024_c1),index) + (float_get(float_wrap_array(Util_cvToRate_1024_c2),index) * cv))));
}

float Util_cvToRate(float cv){
   int index;
   index = int_clip(float_to_int((34.444444f * cv)),0,31);
   return (float_get(float_wrap_array(Util_cvToRate_c0),index) + (cv * (float_get(float_wrap_array(Util_cvToRate_c1),index) + (float_get(float_wrap_array(Util_cvToRate_c2),index) * cv))));
}

float Util_pitchToCv(float pitch){
   return (0.008333f * ((-24.000000f) + pitch));
}

float Util_cvToperiod(float cv){
   int index;
   index = int_clip(float_to_int((31.000000f * cv)),0,31);
   return (float_get(float_wrap_array(Util_cvToperiod_c0),index) + (cv * (float_get(float_wrap_array(Util_cvToperiod_c1),index) + (float_get(float_wrap_array(Util_cvToperiod_c2),index) * cv))));
}

float Util_cvTokHz(float cv){
   int index;
   index = int_clip(float_to_int((31.000000f * cv)),0,31);
   return (float_get(float_wrap_array(Util_cvTokHz_c0),index) + (cv * (float_get(float_wrap_array(Util_cvTokHz_c1),index) + (float_get(float_wrap_array(Util_cvTokHz_c2),index) * cv))));
}

void Phase__ctx_type_0_init(Phase__ctx_type_0 &_output_){
   Phase__ctx_type_0 _ctx;
   _ctx.rate = 0.000000f;
   _ctx.phase = 0.000000f;
   Util__ctx_type_0_init(_ctx._inst25);
   Util__ctx_type_1_init(_ctx._inst23);
   Phase_default(_ctx);
   _output_ = _ctx;
   return ;
}

void Phase_process_init(Phase__ctx_type_0 &_output_){
   Phase__ctx_type_0_init(_output_);
   return ;
}

float Phase_process(Phase__ctx_type_0 &_ctx, float cv, float reset){
   uint8_t _cond_30;
   _cond_30 = Util_change(_ctx._inst23,cv);
   if(_cond_30){
      _ctx.rate = Util_cvToRate_1024(cv);
   }
   uint8_t _cond_31;
   _cond_31 = Util_edge(_ctx._inst25,(reset > 0.500000f));
   if(_cond_31){ _ctx.phase = 0.000000f; }
   else
   { _ctx.phase = (_ctx.phase + _ctx.rate); }
   uint8_t _cond_32;
   _cond_32 = (_ctx.phase > 1024.000000f);
   if(_cond_32){ _ctx.phase = (_ctx.phase + (-1024.000000f)); }
   return (_ctx.phase * 0.000977f);
}

void Phase_noteOn_init(Phase__ctx_type_0 &_output_){
   Phase__ctx_type_0_init(_output_);
   return ;
}

void Phase_noteOn(Phase__ctx_type_0 &_ctx, int note, int velocity, int channel){
}

void Phase_noteOff_init(Phase__ctx_type_0 &_output_){
   Phase__ctx_type_0_init(_output_);
   return ;
}

void Phase_noteOff(Phase__ctx_type_0 &_ctx, int note, int channel){
}

void Phase_controlChange_init(Phase__ctx_type_0 &_output_){
   Phase__ctx_type_0_init(_output_);
   return ;
}

void Phase_controlChange(Phase__ctx_type_0 &_ctx, int control, int value, int channel){
}

void Phase_default_init(Phase__ctx_type_0 &_output_){
   Phase__ctx_type_0_init(_output_);
   return ;
}

void Phase_default(Phase__ctx_type_0 &_ctx){
   _ctx.rate = 0.759367f;
}

float Tables_nsine(float x){
   int index;
   index = int_clip(float_to_int((127.000000f * x)),0,127);
   return (float_get(float_wrap_array(Tables_nsine_c0),index) + (x * (float_get(float_wrap_array(Tables_nsine_c1),index) + (float_get(float_wrap_array(Tables_nsine_c2),index) * x))));
}

void Sine__ctx_type_0_init(Sine__ctx_type_0 &_output_){
   Sine__ctx_type_0 _ctx;
   _ctx.trig = 0;
   Phase__ctx_type_0_init(_ctx.p);
   Util__ctx_type_0_init(_ctx._inst35);
   _output_ = _ctx;
   return ;
}

void Sine_process_init(Sine__ctx_type_0 &_output_){
   Sine__ctx_type_0_init(_output_);
   return ;
}

float Sine_process(Sine__ctx_type_0 &_ctx, float cv, float reset){
   uint8_t _cond_42;
   _cond_42 = Util_edge(_ctx._inst35,(reset > 0.500000f));
   if(_cond_42){
      _ctx.trig = 1;
   }
   float phase;
   phase = Phase_process(_ctx.p,cv,0.000000f);
   uint8_t _cond_43;
   _cond_43 = ((phase < 0.000000f) && _ctx.trig);
   if(_cond_43){
      _ctx.trig = 0;
      Phase_process(_ctx.p,cv,0.000000f);
   }
   return Tables_nsine(phase);
}

void Sine_noteOn_init(Sine__ctx_type_0 &_output_){
   Sine__ctx_type_0_init(_output_);
   return ;
}

void Sine_noteOn(Sine__ctx_type_0 &_ctx, int note, int velocity, int channel){
}

void Sine_noteOff_init(Sine__ctx_type_0 &_output_){
   Sine__ctx_type_0_init(_output_);
   return ;
}

void Sine_noteOff(Sine__ctx_type_0 &_ctx, int note, int channel){
}

void Sine_controlChange_init(Sine__ctx_type_0 &_output_){
   Sine__ctx_type_0_init(_output_);
   return ;
}

void Sine_controlChange(Sine__ctx_type_0 &_ctx, int control, int value, int channel){
}

void Sine_default_init(Sine__ctx_type_0 &_output_){
   Sine__ctx_type_0_init(_output_);
   return ;
}

void Sine_default(Sine__ctx_type_0 &_ctx){
}


