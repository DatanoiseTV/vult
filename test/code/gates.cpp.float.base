
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#include "gates.h"

float Gates_velToCV(int vel){
   return (int_to_float(vel) * 0.007874f);
}

void Gates__ctx_type_1_init(Gates__ctx_type_1 &_output_){
   Gates__ctx_type_1 _ctx;
   int_init_array(8,0,_ctx.vel);
   _output_ = _ctx;
   return ;
}

void Gates_gates_noteOn_init(Gates__ctx_type_1 &_output_){
   Gates__ctx_type_1_init(_output_);
   return ;
}

void Gates_gates_noteOn(Gates__ctx_type_1 &_ctx, int note, int velocity){
   uint8_t _cond_13;
   _cond_13 = ((note >= 36) && (note <= 43));
   if(_cond_13){
      int n;
      n = (note + (-36));
      int_set(_ctx.vel,n,velocity);
   }
}

void Gates_gates_noteOff_init(Gates__ctx_type_1 &_output_){
   Gates__ctx_type_1_init(_output_);
   return ;
}

void Gates_gates_noteOff(Gates__ctx_type_1 &_ctx, int note){
   uint8_t _cond_14;
   _cond_14 = ((note >= 36) && (note <= 43));
   if(_cond_14){
      int n;
      n = (note + (-36));
      int_set(_ctx.vel,n,0);
   }
}

void Gates_gates_state_init(Gates__ctx_type_1 &_output_){
   Gates__ctx_type_1_init(_output_);
   return ;
}

void Gates_gates_state(Gates__ctx_type_1 &_ctx, _tuple___real_real_real_real_real_real_real_real__ &_output_){
   float vel1;
   vel1 = Gates_velToCV(int_get(_ctx.vel,0));
   float vel2;
   vel2 = Gates_velToCV(int_get(_ctx.vel,1));
   float vel3;
   vel3 = Gates_velToCV(int_get(_ctx.vel,2));
   float vel4;
   vel4 = Gates_velToCV(int_get(_ctx.vel,3));
   float vel5;
   vel5 = Gates_velToCV(int_get(_ctx.vel,4));
   float vel6;
   vel6 = Gates_velToCV(int_get(_ctx.vel,5));
   float vel7;
   vel7 = Gates_velToCV(int_get(_ctx.vel,6));
   float vel8;
   vel8 = Gates_velToCV(int_get(_ctx.vel,7));
   _tuple___real_real_real_real_real_real_real_real__ _tuple_15;
   {
      _tuple_15.field_0 = vel1;
      _tuple_15.field_1 = vel2;
      _tuple_15.field_2 = vel3;
      _tuple_15.field_3 = vel4;
      _tuple_15.field_4 = vel5;
      _tuple_15.field_5 = vel6;
      _tuple_15.field_6 = vel7;
      _tuple_15.field_7 = vel8;
   }
   _output_ = _tuple_15;
   return ;
}

void Gates__ctx_type_2_init(Gates__ctx_type_2 &_output_){
   Gates__ctx_type_2 _ctx;
   Gates__ctx_type_1_init(_ctx.gates);
   _ctx.channel_in = 0;
   _output_ = _ctx;
   return ;
}

void Gates_process_init(Gates__ctx_type_2 &_output_){
   Gates__ctx_type_2_init(_output_);
   return ;
}

void Gates_process(Gates__ctx_type_2 &_ctx, int c, _tuple___real_real_real_real_real_real_real_real__ &_output_){
   _ctx.channel_in = c;
   _tuple___real_real_real_real_real_real_real_real__ _call_17;
   Gates_gates_state(_ctx.gates,_call_17);
   _output_ = _call_17;
   return ;
}

void Gates_noteOn_init(Gates__ctx_type_2 &_output_){
   Gates__ctx_type_2_init(_output_);
   return ;
}

void Gates_noteOn(Gates__ctx_type_2 &_ctx, int note, int velocity, int channel){
   uint8_t _cond_19;
   _cond_19 = (_ctx.channel_in == channel);
   if(_cond_19){
      Gates_gates_noteOn(_ctx.gates,note,velocity);
   }
}

void Gates_noteOff_init(Gates__ctx_type_2 &_output_){
   Gates__ctx_type_2_init(_output_);
   return ;
}

void Gates_noteOff(Gates__ctx_type_2 &_ctx, int note, int channel){
   uint8_t _cond_20;
   _cond_20 = (_ctx.channel_in == channel);
   if(_cond_20){
      Gates_gates_noteOff(_ctx.gates,note);
   }
}

void Gates_controlChange_init(Gates__ctx_type_2 &_output_){
   Gates__ctx_type_2_init(_output_);
   return ;
}

void Gates_controlChange(Gates__ctx_type_2 &_ctx, int control, int value, int channel){
}

void Gates_default_init(Gates__ctx_type_2 &_output_){
   Gates__ctx_type_2_init(_output_);
   return ;
}

void Gates_default(Gates__ctx_type_2 &_ctx){
}


