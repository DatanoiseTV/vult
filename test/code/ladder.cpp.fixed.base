
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#include "ladder.h"

void Util__ctx_type_0_init(Util__ctx_type_0 &_output_){
   Util__ctx_type_0 _ctx;
   _ctx.pre = 0;
   _output_ = _ctx;
   return ;
}

void Util_edge_init(Util__ctx_type_0 &_output_){
   Util__ctx_type_0_init(_output_);
   return ;
}

uint8_t Util_edge(Util__ctx_type_0 &_ctx, uint8_t x){
   uint8_t ret;
   ret = (x && bool_not(_ctx.pre));
   _ctx.pre = x;
   return ret;
}

void Util__ctx_type_1_init(Util__ctx_type_1 &_output_){
   Util__ctx_type_1 _ctx;
   _ctx.pre_x = 0x0 /* 0.000000 */;
   _output_ = _ctx;
   return ;
}

void Util_change_init(Util__ctx_type_1 &_output_){
   Util__ctx_type_1_init(_output_);
   return ;
}

uint8_t Util_change(Util__ctx_type_1 &_ctx, fix16_t x){
   uint8_t v;
   v = (_ctx.pre_x != x);
   _ctx.pre_x = x;
   return v;
}

fix16_t Util_map(fix16_t x, fix16_t x0, fix16_t x1, fix16_t y0, fix16_t y1){
   return fix_add(fix_div(fix_mul(fix_add(x,(- x0)),fix_add(y1,(- y0))),fix_add(x1,(- x0))),y0);
}

void Util__ctx_type_3_init(Util__ctx_type_3 &_output_){
   Util__ctx_type_3 _ctx;
   _ctx.y1 = 0x0 /* 0.000000 */;
   _ctx.x1 = 0x0 /* 0.000000 */;
   _output_ = _ctx;
   return ;
}

void Util_dcblock_init(Util__ctx_type_3 &_output_){
   Util__ctx_type_3_init(_output_);
   return ;
}

fix16_t Util_dcblock(Util__ctx_type_3 &_ctx, fix16_t x0){
   fix16_t y0;
   y0 = fix_add(fix_add(x0,(- _ctx.x1)),fix_mul(_ctx.y1,0xfeb8 /* 0.995000 */));
   _ctx.x1 = x0;
   _ctx.y1 = y0;
   return y0;
}

void Util__ctx_type_4_init(Util__ctx_type_4 &_output_){
   Util__ctx_type_4 _ctx;
   _ctx.x = 0x0 /* 0.000000 */;
   _output_ = _ctx;
   return ;
}

void Util_smooth_init(Util__ctx_type_4 &_output_){
   Util__ctx_type_4_init(_output_);
   return ;
}

fix16_t Util_smooth(Util__ctx_type_4 &_ctx, fix16_t input){
   _ctx.x = fix_add(_ctx.x,fix_mul(fix_add(input,(- _ctx.x)),0x147 /* 0.005000 */));
   return _ctx.x;
}

void Util__ctx_type_5_init(Util__ctx_type_5 &_output_){
   Util__ctx_type_5 _ctx;
   _ctx.x0 = 0x0 /* 0.000000 */;
   _output_ = _ctx;
   return ;
}

void Util_average2_init(Util__ctx_type_5 &_output_){
   Util__ctx_type_5_init(_output_);
   return ;
}

fix16_t Util_average2(Util__ctx_type_5 &_ctx, fix16_t x1){
   fix16_t result;
   result = fix_mul(fix_add(_ctx.x0,x1),0x8000 /* 0.500000 */);
   _ctx.x0 = x1;
   return result;
}

fix16_t Util_pitchToRate_1024(fix16_t pitch){
   int index;
   index = int_clip(fix_to_int(fix_mul(0x3e7c /* 0.244094 */,pitch)),0,31);
   return fix_add(fix_get(fix_wrap_array(Util_pitchToRate_1024_c0),index),fix_mul(pitch,fix_add(fix_get(fix_wrap_array(Util_pitchToRate_1024_c1),index),fix_mul(fix_get(fix_wrap_array(Util_pitchToRate_1024_c2),index),pitch))));
}

fix16_t Util_pitchToRate(fix16_t pitch){
   int index;
   index = int_clip(fix_to_int(fix_mul(0x3e7c /* 0.244094 */,pitch)),0,31);
   return fix_add(fix_get(fix_wrap_array(Util_pitchToRate_c0),index),fix_mul(pitch,fix_add(fix_get(fix_wrap_array(Util_pitchToRate_c1),index),fix_mul(fix_get(fix_wrap_array(Util_pitchToRate_c2),index),pitch))));
}

fix16_t Util_cvToPitch(fix16_t cv){
   return fix_add(fix_mul(cv,0x780000 /* 120.000000 */),0x180000 /* 24.000000 */);
}

fix16_t Util_cvToRate_1024(fix16_t cv){
   int index;
   index = int_clip(fix_to_int(fix_mul(0x2271c7 /* 34.444444 */,cv)),0,31);
   return fix_add(fix_get(fix_wrap_array(Util_cvToRate_1024_c0),index),fix_mul(cv,fix_add(fix_get(fix_wrap_array(Util_cvToRate_1024_c1),index),fix_mul(fix_get(fix_wrap_array(Util_cvToRate_1024_c2),index),cv))));
}

fix16_t Util_cvToRate(fix16_t cv){
   int index;
   index = int_clip(fix_to_int(fix_mul(0x2271c7 /* 34.444444 */,cv)),0,31);
   return fix_add(fix_get(fix_wrap_array(Util_cvToRate_c0),index),fix_mul(cv,fix_add(fix_get(fix_wrap_array(Util_cvToRate_c1),index),fix_mul(fix_get(fix_wrap_array(Util_cvToRate_c2),index),cv))));
}

fix16_t Util_pitchToCv(fix16_t pitch){
   return fix_mul(0x222 /* 0.008333 */,fix_add((-0x180000 /* -24.000000 */),pitch));
}

fix16_t Util_cvToperiod(fix16_t cv){
   int index;
   index = int_clip(fix_to_int(fix_mul(0x1f0000 /* 31.000000 */,cv)),0,31);
   return fix_add(fix_get(fix_wrap_array(Util_cvToperiod_c0),index),fix_mul(cv,fix_add(fix_get(fix_wrap_array(Util_cvToperiod_c1),index),fix_mul(fix_get(fix_wrap_array(Util_cvToperiod_c2),index),cv))));
}

fix16_t Saturate_table(fix16_t x){
   int index;
   index = int_clip(fix_to_int(fix_mul(0x18000 /* 1.500000 */,x)),0,9);
   return fix_add(fix_get(fix_wrap_array(Saturate_table_c0),index),fix_mul(x,fix_add(fix_get(fix_wrap_array(Saturate_table_c1),index),fix_mul(fix_get(fix_wrap_array(Saturate_table_c2),index),x))));
}

fix16_t Saturate_process(fix16_t x){
   uint8_t _cond_23;
   _cond_23 = (x == 0x0 /* 0.000000 */);
   if(_cond_23){
      return 0x0 /* 0.000000 */;
   }
   fix16_t fixed;
   uint8_t sign;
   uint8_t _cond_25;
   _cond_25 = (x > 0x0 /* 0.000000 */);
   if(_cond_25){
      fixed = x;
      sign = 0;
   }
   else
   {
      fixed = (- x);
      sign = 1;
   }
   fix16_t out;
   out = 0x0 /* 0.000000 */;
   uint8_t _cond_24;
   _cond_24 = (fixed > 0x60000 /* 6.000000 */);
   if(_cond_24){
      out = 0x10000 /* 1.000000 */;
   }
   else
   {
      out = Saturate_table(fixed);
   }
   if(sign){ out = (- out); }
   else
   { out = out; }
   return out;
}

void Saturate_noteOn(int note, int velocity, int channel){
}

void Saturate_noteOff(int note, int channel){
}

void Saturate_controlChange(int control, int value, int channel){
}

void Saturate_default(){
}

fix16_t Ladder_getTune(fix16_t cv){
   int index;
   index = int_clip(fix_to_int(fix_mul(0x7f0000 /* 127.000000 */,cv)),0,127);
   return fix_add(fix_get(fix_wrap_array(Ladder_getTune_c0),index),fix_mul(cv,fix_add(fix_get(fix_wrap_array(Ladder_getTune_c1),index),fix_mul(fix_get(fix_wrap_array(Ladder_getTune_c2),index),cv))));
}

void Ladder__ctx_type_1_init(Ladder__ctx_type_1 &_output_){
   Ladder__ctx_type_1 _ctx;
   _ctx.yd = 0x0 /* 0.000000 */;
   _ctx.yc = 0x0 /* 0.000000 */;
   _ctx.yb = 0x0 /* 0.000000 */;
   _ctx.ya = 0x0 /* 0.000000 */;
   _ctx.wc = 0x0 /* 0.000000 */;
   _ctx.wb = 0x0 /* 0.000000 */;
   _ctx.wa = 0x0 /* 0.000000 */;
   _ctx.tune = 0x0 /* 0.000000 */;
   Util__ctx_type_1_init(_ctx._inst30);
   _output_ = _ctx;
   return ;
}

void Ladder_step_init(Ladder__ctx_type_1 &_output_){
   Ladder__ctx_type_1_init(_output_);
   return ;
}

fix16_t Ladder_step(Ladder__ctx_type_1 &_ctx, fix16_t x, fix16_t cv, fix16_t res){
   fix16_t _2vt;
   _2vt = 0x27100 /* 2.441406 */;
   uint8_t _cond_37;
   _cond_37 = Util_change(_ctx._inst30,cv);
   if(_cond_37){
      _ctx.tune = fix_mul(_2vt,Ladder_getTune(cv));
   }
   _ctx.ya = fix_add(_ctx.ya,fix_mul(_ctx.tune,fix_add(Saturate_process(fix_div(fix_add(x,fix_mul(fix_mul((-0x40000 /* -4.000000 */),res),_ctx.yd)),_2vt)),(- _ctx.wa))));
   _ctx.wa = Saturate_process(fix_div(_ctx.ya,_2vt));
   _ctx.yb = fix_add(_ctx.yb,fix_mul(_ctx.tune,fix_add(_ctx.wa,(- _ctx.wb))));
   _ctx.wb = Saturate_process(fix_div(_ctx.yb,_2vt));
   _ctx.yc = fix_add(_ctx.yc,fix_mul(_ctx.tune,fix_add(_ctx.wb,(- _ctx.wc))));
   _ctx.wc = Saturate_process(fix_div(_ctx.yc,_2vt));
   _ctx.yd = fix_add(_ctx.yd,fix_mul(_ctx.tune,fix_add(_ctx.wc,(- Saturate_process(fix_div(_ctx.yd,_2vt))))));
   return _ctx.yd;
}

void Ladder__ctx_type_2_init(Ladder__ctx_type_2 &_output_){
   Ladder__ctx_type_2 _ctx;
   Ladder__ctx_type_1_init(_ctx.filter);
   _output_ = _ctx;
   return ;
}

void Ladder_process_init(Ladder__ctx_type_2 &_output_){
   Ladder__ctx_type_2_init(_output_);
   return ;
}

fix16_t Ladder_process(Ladder__ctx_type_2 &_ctx, fix16_t input, fix16_t cut, fix16_t res){
   res = fix_clip(res,0x0 /* 0.000000 */,0x10000 /* 1.000000 */);
   cut = fix_clip(cut,(-0x4ccc /* -0.300000 */),0x10000 /* 1.000000 */);
   fix16_t i;
   i = fix_mul(input,0x8000 /* 0.500000 */);
   fix16_t x0;
   x0 = Ladder_step(_ctx.filter,input,cut,res);
   fix16_t x1;
   x1 = Ladder_step(_ctx.filter,input,cut,res);
   return fix_mul(fix_add(x0,x1),fix_add(0x10000 /* 1.000000 */,fix_mul(0x20000 /* 2.000000 */,res)));
}

void Ladder_noteOn_init(Ladder__ctx_type_2 &_output_){
   Ladder__ctx_type_2_init(_output_);
   return ;
}

void Ladder_noteOn(Ladder__ctx_type_2 &_ctx, int note, int velocity, int channel){
}

void Ladder_noteOff_init(Ladder__ctx_type_2 &_output_){
   Ladder__ctx_type_2_init(_output_);
   return ;
}

void Ladder_noteOff(Ladder__ctx_type_2 &_ctx, int note, int channel){
}

void Ladder_controlChange_init(Ladder__ctx_type_2 &_output_){
   Ladder__ctx_type_2_init(_output_);
   return ;
}

void Ladder_controlChange(Ladder__ctx_type_2 &_ctx, int control, int value, int channel){
}

void Ladder_default_init(Ladder__ctx_type_2 &_output_){
   Ladder__ctx_type_2_init(_output_);
   return ;
}

void Ladder_default(Ladder__ctx_type_2 &_ctx){
}


