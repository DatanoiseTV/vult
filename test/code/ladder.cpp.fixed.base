
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#include "ladder.h"

void Util__ctx_type_0_init(Util__ctx_type_0 &_output_){
   Util__ctx_type_0 _ctx;
   _ctx.pre = 0;
   _output_ = _ctx;
   return ;
}

void Util_edge_init(Util__ctx_type_0 &_output_){
   Util__ctx_type_0_init(_output_);
   return ;
}

uint8_t Util_edge(Util__ctx_type_0 &_ctx, uint8_t x){
   uint8_t ret;
   ret = (x && bool_not(_ctx.pre));
   _ctx.pre = x;
   return ret;
}

void Util__ctx_type_1_init(Util__ctx_type_1 &_output_){
   Util__ctx_type_1 _ctx;
   _ctx.pre_x = 0x0 /* 0.000000 */;
   _output_ = _ctx;
   return ;
}

void Util_change_init(Util__ctx_type_1 &_output_){
   Util__ctx_type_1_init(_output_);
   return ;
}

uint8_t Util_change(Util__ctx_type_1 &_ctx, fix16_t x){
   uint8_t v;
   v = (_ctx.pre_x != x);
   _ctx.pre_x = x;
   return v;
}

fix16_t Util_map(fix16_t x, fix16_t x0, fix16_t x1, fix16_t y0, fix16_t y1){
   return (fix_div(fix_mul((x + (- x0)),(y1 + (- y0))),(x1 + (- x0))) + y0);
}

void Util__ctx_type_3_init(Util__ctx_type_3 &_output_){
   Util__ctx_type_3 _ctx;
   _ctx.y1 = 0x0 /* 0.000000 */;
   _ctx.x1 = 0x0 /* 0.000000 */;
   _output_ = _ctx;
   return ;
}

void Util_dcblock_init(Util__ctx_type_3 &_output_){
   Util__ctx_type_3_init(_output_);
   return ;
}

fix16_t Util_dcblock(Util__ctx_type_3 &_ctx, fix16_t x0){
   fix16_t y0;
   y0 = (x0 + (- _ctx.x1) + fix_mul(_ctx.y1,0xfeb8 /* 0.995000 */));
   _ctx.x1 = x0;
   _ctx.y1 = y0;
   return y0;
}

void Util__ctx_type_4_init(Util__ctx_type_4 &_output_){
   Util__ctx_type_4 _ctx;
   _ctx.x = 0x0 /* 0.000000 */;
   _output_ = _ctx;
   return ;
}

void Util_smooth_init(Util__ctx_type_4 &_output_){
   Util__ctx_type_4_init(_output_);
   return ;
}

fix16_t Util_smooth(Util__ctx_type_4 &_ctx, fix16_t input){
   _ctx.x = (_ctx.x + fix_mul((input + (- _ctx.x)),0x147 /* 0.005000 */));
   return _ctx.x;
}

void Util__ctx_type_5_init(Util__ctx_type_5 &_output_){
   Util__ctx_type_5 _ctx;
   _ctx.x0 = 0x0 /* 0.000000 */;
   _output_ = _ctx;
   return ;
}

void Util_average2_init(Util__ctx_type_5 &_output_){
   Util__ctx_type_5_init(_output_);
   return ;
}

fix16_t Util_average2(Util__ctx_type_5 &_ctx, fix16_t x1){
   fix16_t result;
   result = fix_mul((_ctx.x0 + x1),0x8000 /* 0.500000 */);
   _ctx.x0 = x1;
   return result;
}

fix16_t Util_cubic_clipper(fix16_t x){
   uint8_t _cond_21;
   _cond_21 = (x <= (-0xaaaa /* -0.666667 */));
   if(_cond_21){
      return (-0xaaaa /* -0.666667 */);
   }
   else
   {
      uint8_t _cond_20;
      _cond_20 = (x >= 0xaaaa /* 0.666667 */);
      if(_cond_20){
         return 0xaaaa /* 0.666667 */;
      }
      else
      {
         return (x + fix_mul(fix_mul(fix_mul((-0x5555 /* -0.333333 */),x),x),x));
      }
   }
}

fix16_t Util_pitchToRate_1024(fix16_t pitch){
   int index;
   index = int_clip(fix_to_int(fix_mul(0x3e7c /* 0.244094 */,pitch)),0,31);
   return (fix_get(fix_wrap_array(Util_pitchToRate_1024_c0),index) + fix_mul(pitch,(fix_get(fix_wrap_array(Util_pitchToRate_1024_c1),index) + fix_mul(fix_get(fix_wrap_array(Util_pitchToRate_1024_c2),index),pitch))));
}

fix16_t Util_pitchToRate(fix16_t pitch){
   int index;
   index = int_clip(fix_to_int(fix_mul(0x3e7c /* 0.244094 */,pitch)),0,31);
   return (fix_get(fix_wrap_array(Util_pitchToRate_c0),index) + fix_mul(pitch,(fix_get(fix_wrap_array(Util_pitchToRate_c1),index) + fix_mul(fix_get(fix_wrap_array(Util_pitchToRate_c2),index),pitch))));
}

fix16_t Util_cvToPitch(fix16_t cv){
   return (fix_mul(cv,0x780000 /* 120.000000 */) + 0x180000 /* 24.000000 */);
}

fix16_t Util_cvToRate_1024(fix16_t cv){
   int index;
   index = int_clip(fix_to_int(fix_mul(0x2271c7 /* 34.444444 */,cv)),0,31);
   return (fix_get(fix_wrap_array(Util_cvToRate_1024_c0),index) + fix_mul(cv,(fix_get(fix_wrap_array(Util_cvToRate_1024_c1),index) + fix_mul(fix_get(fix_wrap_array(Util_cvToRate_1024_c2),index),cv))));
}

fix16_t Util_cvToRate(fix16_t cv){
   int index;
   index = int_clip(fix_to_int(fix_mul(0x2271c7 /* 34.444444 */,cv)),0,31);
   return (fix_get(fix_wrap_array(Util_cvToRate_c0),index) + fix_mul(cv,(fix_get(fix_wrap_array(Util_cvToRate_c1),index) + fix_mul(fix_get(fix_wrap_array(Util_cvToRate_c2),index),cv))));
}

fix16_t Util_pitchToCv(fix16_t pitch){
   return fix_mul(0x222 /* 0.008333 */,((-0x180000 /* -24.000000 */) + pitch));
}

fix16_t Util_cvToperiod(fix16_t cv){
   int index;
   index = int_clip(fix_to_int(fix_mul(0x1f0000 /* 31.000000 */,cv)),0,31);
   return (fix_get(fix_wrap_array(Util_cvToperiod_c0),index) + fix_mul(cv,(fix_get(fix_wrap_array(Util_cvToperiod_c1),index) + fix_mul(fix_get(fix_wrap_array(Util_cvToperiod_c2),index),cv))));
}

fix16_t Util_cvTokHz(fix16_t cv){
   int index;
   index = int_clip(fix_to_int(fix_mul(0x1f0000 /* 31.000000 */,cv)),0,31);
   return (fix_get(fix_wrap_array(Util_cvTokHz_c0),index) + fix_mul(cv,(fix_get(fix_wrap_array(Util_cvTokHz_c1),index) + fix_mul(fix_get(fix_wrap_array(Util_cvTokHz_c2),index),cv))));
}

fix16_t Ladder_tune(fix16_t cut){
   int index;
   index = int_clip(fix_to_int(fix_mul(0x7f0000 /* 127.000000 */,cut)),0,127);
   return (fix_get(fix_wrap_array(Ladder_tune_c0),index) + fix_mul(cut,(fix_get(fix_wrap_array(Ladder_tune_c1),index) + fix_mul(fix_get(fix_wrap_array(Ladder_tune_c2),index),cut))));
}

void Ladder_ladder_step(fix16_t input, fix16_t fh, fix16_t res, fix16_t (&p)[4], fix16_t (&dp)[4]){
   fix16_t w0;
   w0 = Util_cubic_clipper((input + fix_mul(fix_mul((-0x40000 /* -4.000000 */),res),fix_get(p,3))));
   fix16_t w1;
   w1 = Util_cubic_clipper(fix_get(p,0));
   fix_set(dp,0,fix_mul((w0 + (- w1)),fh));
   fix16_t w3;
   w3 = Util_cubic_clipper(fix_get(p,1));
   fix_set(dp,1,fix_mul((w1 + (- w3)),fh));
   fix16_t w5;
   w5 = Util_cubic_clipper(fix_get(p,2));
   fix_set(dp,2,fix_mul((w3 + (- w5)),fh));
   fix16_t w7;
   w7 = Util_cubic_clipper(fix_get(p,3));
   fix_set(dp,3,fix_mul((w5 + (- w7)),fh));
}

void Ladder__ctx_type_2_init(Ladder__ctx_type_2 &_output_){
   Ladder__ctx_type_2 _ctx;
   fix_init_array(4,0x0 /* 0.000000 */,_ctx.p);
   _ctx.fh = 0x0 /* 0.000000 */;
   Util__ctx_type_1_init(_ctx._inst25);
   _output_ = _ctx;
   return ;
}

void Ladder_heun_init(Ladder__ctx_type_2 &_output_){
   Ladder__ctx_type_2_init(_output_);
   return ;
}

fix16_t Ladder_heun(Ladder__ctx_type_2 &_ctx, fix16_t input, fix16_t cut, fix16_t res){
   fix16_t dp[4];
   fix16_t pt[4];
   fix16_t dpt[4];
   uint8_t _cond_38;
   _cond_38 = Util_change(_ctx._inst25,cut);
   if(_cond_38){
      _ctx.fh = Ladder_tune(cut);
   }
   Ladder_ladder_step(input,_ctx.fh,res,_ctx.p,dpt);
   fix_set(pt,0,(fix_get(_ctx.p,0) + fix_get(dpt,0)));
   fix_set(pt,1,(fix_get(_ctx.p,1) + fix_get(dpt,1)));
   fix_set(pt,2,(fix_get(_ctx.p,2) + fix_get(dpt,2)));
   fix_set(pt,3,(fix_get(_ctx.p,3) + fix_get(dpt,3)));
   Ladder_ladder_step(input,_ctx.fh,res,pt,dp);
   fix_set(_ctx.p,0,(fix_get(_ctx.p,0) + fix_mul((fix_get(dp,0) + fix_get(dpt,0)),0x8000 /* 0.500000 */)));
   fix_set(_ctx.p,1,(fix_get(_ctx.p,1) + fix_mul((fix_get(dp,1) + fix_get(dpt,1)),0x8000 /* 0.500000 */)));
   fix_set(_ctx.p,2,(fix_get(_ctx.p,2) + fix_mul((fix_get(dp,2) + fix_get(dpt,2)),0x8000 /* 0.500000 */)));
   fix_set(_ctx.p,3,(fix_get(_ctx.p,3) + fix_mul((fix_get(dp,3) + fix_get(dpt,3)),0x8000 /* 0.500000 */)));
   return fix_get(_ctx.p,3);
}

void Ladder__ctx_type_3_init(Ladder__ctx_type_3 &_output_){
   Ladder__ctx_type_3 _ctx;
   fix_init_array(4,0x0 /* 0.000000 */,_ctx.p);
   _ctx.fh = 0x0 /* 0.000000 */;
   Util__ctx_type_1_init(_ctx._inst28);
   _output_ = _ctx;
   return ;
}

void Ladder_euler_init(Ladder__ctx_type_3 &_output_){
   Ladder__ctx_type_3_init(_output_);
   return ;
}

fix16_t Ladder_euler(Ladder__ctx_type_3 &_ctx, fix16_t input, fix16_t cut, fix16_t res){
   fix16_t dpt[4];
   uint8_t _cond_39;
   _cond_39 = Util_change(_ctx._inst28,cut);
   if(_cond_39){
      _ctx.fh = Ladder_tune(cut);
   }
   Ladder_ladder_step(input,_ctx.fh,res,_ctx.p,dpt);
   fix_set(_ctx.p,0,(fix_get(_ctx.p,0) + fix_get(dpt,0)));
   fix_set(_ctx.p,1,(fix_get(_ctx.p,1) + fix_get(dpt,1)));
   fix_set(_ctx.p,2,(fix_get(_ctx.p,2) + fix_get(dpt,2)));
   fix_set(_ctx.p,3,(fix_get(_ctx.p,3) + fix_get(dpt,3)));
   return fix_get(_ctx.p,3);
}

void Ladder__ctx_type_4_init(Ladder__ctx_type_4 &_output_){
   Ladder__ctx_type_4 _ctx;
   Ladder__ctx_type_3_init(_ctx.e);
   _output_ = _ctx;
   return ;
}

void Ladder_process_euler_init(Ladder__ctx_type_4 &_output_){
   Ladder__ctx_type_4_init(_output_);
   return ;
}

fix16_t Ladder_process_euler(Ladder__ctx_type_4 &_ctx, fix16_t input, fix16_t cut, fix16_t res){
   Ladder_euler(_ctx.e,input,cut,res);
   Ladder_euler(_ctx.e,input,cut,res);
   Ladder_euler(_ctx.e,input,cut,res);
   fix16_t out;
   out = Ladder_euler(_ctx.e,input,cut,res);
   return out;
}

void Ladder__ctx_type_5_init(Ladder__ctx_type_5 &_output_){
   Ladder__ctx_type_5 _ctx;
   Ladder__ctx_type_2_init(_ctx.h);
   _output_ = _ctx;
   return ;
}

void Ladder_process_heun_init(Ladder__ctx_type_5 &_output_){
   Ladder__ctx_type_5_init(_output_);
   return ;
}

fix16_t Ladder_process_heun(Ladder__ctx_type_5 &_ctx, fix16_t input, fix16_t cut, fix16_t res){
   Ladder_heun(_ctx.h,input,cut,res);
   Ladder_heun(_ctx.h,input,cut,res);
   Ladder_heun(_ctx.h,input,cut,res);
   fix16_t out;
   out = Ladder_heun(_ctx.h,input,cut,res);
   return out;
}

void Ladder__ctx_type_6_init(Ladder__ctx_type_6 &_output_){
   Ladder__ctx_type_6 _ctx;
   Ladder__ctx_type_5_init(_ctx._inst33);
   _output_ = _ctx;
   return ;
}

void Ladder_process_init(Ladder__ctx_type_6 &_output_){
   Ladder__ctx_type_6_init(_output_);
   return ;
}

fix16_t Ladder_process(Ladder__ctx_type_6 &_ctx, fix16_t input, fix16_t cut, fix16_t res){
   return Ladder_process_heun(_ctx._inst33,input,cut,res);
}

void Ladder_noteOn_init(Ladder__ctx_type_6 &_output_){
   Ladder__ctx_type_6_init(_output_);
   return ;
}

void Ladder_noteOn(Ladder__ctx_type_6 &_ctx, int note, int velocity, int channel){
}

void Ladder_noteOff_init(Ladder__ctx_type_6 &_output_){
   Ladder__ctx_type_6_init(_output_);
   return ;
}

void Ladder_noteOff(Ladder__ctx_type_6 &_ctx, int note, int channel){
}

void Ladder_controlChange_init(Ladder__ctx_type_6 &_output_){
   Ladder__ctx_type_6_init(_output_);
   return ;
}

void Ladder_controlChange(Ladder__ctx_type_6 &_ctx, int control, int value, int channel){
}

void Ladder_default_init(Ladder__ctx_type_6 &_output_){
   Ladder__ctx_type_6_init(_output_);
   return ;
}

void Ladder_default(Ladder__ctx_type_6 &_ctx){
}


