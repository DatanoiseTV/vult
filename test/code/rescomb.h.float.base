
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#ifndef RESCOMB_H
#define RESCOMB_H
#include <stdint.h>
#include <math.h>
#include "vultin.h"

static const float Saturate_soft_table_c0[66] = {(-8.551395f),(-8.031581f),(-7.495173f),(-6.941354f),(-6.372317f),(-5.793511f),(-5.207770f),(-4.619621f),(-4.035829f),(-3.461083f),(-2.902259f),(-2.366490f),(-1.860709f),(-1.392085f),(-0.967287f),(-0.592455f),(-0.272557f),(-0.011069f),0.190456f,0.332663f,0.418609f,0.453804f,0.446033f,0.404924f,0.341291f,0.266251f,0.190231f,0.121953f,0.067564f,0.030037f,0.008985f,0.000923f,0.000000f,(-0.000923f),(-0.008985f),(-0.030037f),(-0.067564f),(-0.121953f),(-0.190231f),(-0.266251f),(-0.341291f),(-0.404924f),(-0.446033f),(-0.453804f),(-0.418609f),(-0.332666f),(-0.190451f),0.011068f,0.272539f,0.592436f,0.967277f,1.392035f,1.860709f,2.366538f,2.902329f,3.461142f,4.036128f,4.619653f,5.207774f,5.793615f,6.371757f,6.940220f,7.494295f,8.032314f,8.552015f,9.049418f};
static const float Saturate_soft_table_c1[66] = {0.359022f,0.392434f,0.428240f,0.466430f,0.506928f,0.549736f,0.594640f,0.641433f,0.689913f,0.739571f,0.790028f,0.840660f,0.890789f,0.939610f,0.986252f,1.029749f,1.069123f,1.103374f,1.131586f,1.152958f,1.166892f,1.173069f,1.171520f,1.162678f,1.147415f,1.127033f,1.103218f,1.077944f,1.053342f,1.031519f,1.014380f,1.003443f,0.999685f,1.003443f,1.014380f,1.031519f,1.053342f,1.077944f,1.103218f,1.127033f,1.147415f,1.162678f,1.171520f,1.173069f,1.166892f,1.152959f,1.131586f,1.103374f,1.069121f,1.029748f,0.986250f,0.939611f,0.890792f,0.840665f,0.790033f,0.739584f,0.689894f,0.641441f,0.594623f,0.549769f,0.506907f,0.466408f,0.428263f,0.392457f,0.359046f,0.327989f};
static const float Saturate_soft_table_c2[66] = {0.004508f,0.005046f,0.005642f,0.006300f,0.007022f,0.007812f,0.008672f,0.009605f,0.010610f,0.011683f,0.012822f,0.014018f,0.015260f,0.016531f,0.017811f,0.019074f,0.020285f,0.021407f,0.022394f,0.023197f,0.023762f,0.024033f,0.023956f,0.023480f,0.022565f,0.021181f,0.019316f,0.016977f,0.014195f,0.011022f,0.007534f,0.003824f,0.000000f,(-0.003824f),(-0.007534f),(-0.011022f),(-0.014195f),(-0.016977f),(-0.019316f),(-0.021181f),(-0.022565f),(-0.023480f),(-0.023956f),(-0.024033f),(-0.023762f),(-0.023197f),(-0.022394f),(-0.021407f),(-0.020285f),(-0.019074f),(-0.017812f),(-0.016531f),(-0.015260f),(-0.014018f),(-0.012822f),(-0.011683f),(-0.010609f),(-0.009605f),(-0.008672f),(-0.007813f),(-0.007021f),(-0.006299f),(-0.005642f),(-0.005046f),(-0.004508f),(-0.004021f)};
float Saturate_soft_table(float x);

float Saturate_soft_process(float x);

void Saturate_soft_noteOn(int note, int velocity, int channel);

void Saturate_soft_noteOff(int note, int channel);

void Saturate_soft_controlChange(int control, int value, int channel);

void Saturate_soft_default();

typedef struct Util__ctx_type_0 {
   uint8_t pre;
} Util__ctx_type_0;

typedef Util__ctx_type_0 Util_edge_type;

void Util__ctx_type_0_init(Util__ctx_type_0 &_output_);

void Util_edge_init(Util__ctx_type_0 &_output_);

uint8_t Util_edge(Util__ctx_type_0 &_ctx, uint8_t x);

typedef struct Util__ctx_type_1 {
   float pre_x;
} Util__ctx_type_1;

typedef Util__ctx_type_1 Util_change_type;

void Util__ctx_type_1_init(Util__ctx_type_1 &_output_);

void Util_change_init(Util__ctx_type_1 &_output_);

uint8_t Util_change(Util__ctx_type_1 &_ctx, float x);

float Util_map(float x, float x0, float x1, float y0, float y1);

typedef struct Util__ctx_type_3 {
   float y1;
   float x1;
} Util__ctx_type_3;

typedef Util__ctx_type_3 Util_dcblock_type;

void Util__ctx_type_3_init(Util__ctx_type_3 &_output_);

void Util_dcblock_init(Util__ctx_type_3 &_output_);

float Util_dcblock(Util__ctx_type_3 &_ctx, float x0);

typedef struct Util__ctx_type_4 {
   float x;
} Util__ctx_type_4;

typedef Util__ctx_type_4 Util_smooth_type;

void Util__ctx_type_4_init(Util__ctx_type_4 &_output_);

void Util_smooth_init(Util__ctx_type_4 &_output_);

float Util_smooth(Util__ctx_type_4 &_ctx, float input);

typedef struct Util__ctx_type_5 {
   float x0;
} Util__ctx_type_5;

typedef Util__ctx_type_5 Util_average2_type;

void Util__ctx_type_5_init(Util__ctx_type_5 &_output_);

void Util_average2_init(Util__ctx_type_5 &_output_);

float Util_average2(Util__ctx_type_5 &_ctx, float x1);

float Util_cubic_clipper(float x);

static const float Util_pitchToRate_1024_c0[33] = {0.189842f,0.191326f,0.198689f,0.219425f,0.265677f,0.356438f,0.520651f,0.801560f,1.262758f,1.996562f,3.135544f,4.868347f,7.461281f,11.287715f,16.867996f,24.923305f,36.448521f,52.809903f,75.876616f,108.197225f,153.232414f,215.672344f,301.846626f,420.298038f,582.505178f,803.812129f,1104.880165f,1513.124126f,2065.373952f,2810.230550f,3812.902888f,5159.525580f,6963.761469f};
static const float Util_pitchToRate_1024_c1[33] = {0.010913f,0.010176f,0.008334f,0.004867f,(-0.000939f),(-0.010061f),(-0.023820f),(-0.044002f),(-0.073002f),(-0.114025f),(-0.171341f),(-0.250621f),(-0.359381f),(-0.507548f),(-0.708208f),(-0.978575f),(-1.341250f),(-1.825848f),(-2.471123f),(-3.327721f),(-4.461658f),(-5.959006f),(-7.931626f),(-10.525312f),(-13.929212f),(-18.387588f),(-24.219785f),(-31.835151f),(-41.769557f),(-54.706455f),(-71.541226f),(-93.422592f),(-121.823163f)};
static const float Util_pitchToRate_1024_c2[33] = {0.000356f,0.000447f,0.000562f,0.000707f,0.000889f,0.001119f,0.001407f,0.001769f,0.002225f,0.002799f,0.003520f,0.004426f,0.005567f,0.007001f,0.008805f,0.011074f,0.013927f,0.017515f,0.022028f,0.027704f,0.034841f,0.043818f,0.055107f,0.069305f,0.087163f,0.109617f,0.137862f,0.173377f,0.218054f,0.274227f,0.344892f,0.433780f,0.545543f};
float Util_pitchToRate_1024(float pitch);

static const float Util_pitchToRate_c0[33] = {0.000185f,0.000187f,0.000194f,0.000214f,0.000259f,0.000348f,0.000508f,0.000783f,0.001233f,0.001950f,0.003062f,0.004754f,0.007286f,0.011023f,0.016473f,0.024339f,0.035594f,0.051572f,0.074098f,0.105661f,0.149641f,0.210618f,0.294772f,0.410447f,0.568853f,0.784973f,1.078985f,1.477660f,2.016967f,2.744366f,3.723538f,5.038599f,6.800548f};
static const float Util_pitchToRate_c1[33] = {0.000011f,0.000010f,0.000008f,0.000005f,(-0.000001f),(-0.000010f),(-0.000023f),(-0.000043f),(-0.000071f),(-0.000111f),(-0.000167f),(-0.000245f),(-0.000351f),(-0.000496f),(-0.000692f),(-0.000956f),(-0.001310f),(-0.001783f),(-0.002413f),(-0.003250f),(-0.004357f),(-0.005819f),(-0.007746f),(-0.010279f),(-0.013603f),(-0.017957f),(-0.023652f),(-0.031089f),(-0.040791f),(-0.053424f),(-0.069864f),(-0.091233f),(-0.118968f)};
static const float Util_pitchToRate_c2[33] = {0.000000f,0.000000f,0.000001f,0.000001f,0.000001f,0.000001f,0.000001f,0.000002f,0.000002f,0.000003f,0.000003f,0.000004f,0.000005f,0.000007f,0.000009f,0.000011f,0.000014f,0.000017f,0.000022f,0.000027f,0.000034f,0.000043f,0.000054f,0.000068f,0.000085f,0.000107f,0.000135f,0.000169f,0.000213f,0.000268f,0.000337f,0.000424f,0.000533f};
float Util_pitchToRate(float pitch);

float Util_cvToPitch(float cv);

static const float Util_cvToRate_1024_c0[33] = {0.759367f,0.762877f,0.779737f,0.825652f,0.924648f,1.112398f,1.440687f,1.983392f,2.844434f,4.168310f,6.153994f,9.073195f,13.294301f,19.313616f,27.796102f,39.628290f,55.986657f,78.426750f,108.998215f,150.387464f,206.118533f,280.781675f,380.357513f,512.612775f,687.616764f,918.349028f,1221.607949f,1619.052235f,2138.629322f,2815.436671f,3696.162408f,4838.694117f,6318.211520f};
static const float Util_cvToRate_1024_c1[33] = {5.245583f,4.998943f,4.403089f,3.319116f,1.564497f,(-1.099256f),(-4.982226f),(-10.485864f),(-18.127956f),(-28.574100f),(-42.677360f),(-61.528124f),(-86.516770f),(-119.412133f),(-162.460318f),(-218.508269f),(-291.156786f),(-384.956978f),(-505.652297f),(-660.458539f),(-858.494950f),(-1111.173376f),(-1432.858445f),(-1841.544459f),(-2359.816046f),(-3015.795467f),(-3844.838138f),(-4891.101919f),(-6210.197274f),(-7868.993868f),(-9955.778008f),(-12575.747874f),(-15862.234621f)};
static const float Util_cvToRate_1024_c2[33] = {20.125592f,24.457572f,29.722000f,36.119582f,43.894227f,53.342343f,64.824143f,78.777366f,95.733987f,116.340471f,141.382451f,171.814646f,208.797363f,253.740413f,308.357211f,374.730622f,455.389632f,553.410816f,672.536916f,817.290611f,993.216833f,1207.000622f,1466.803875f,1782.529271f,2166.244997f,2632.487590f,3199.072620f,3887.673024f,4724.859179f,5741.245302f,6977.441755f,8479.290028f,10304.455486f};
float Util_cvToRate_1024(float cv);

static const float Util_cvToRate_c0[33] = {0.000742f,0.000745f,0.000761f,0.000806f,0.000903f,0.001086f,0.001407f,0.001937f,0.002778f,0.004071f,0.006010f,0.008861f,0.012983f,0.018861f,0.027145f,0.038700f,0.054674f,0.076589f,0.106444f,0.146863f,0.201288f,0.274201f,0.371443f,0.500598f,0.671501f,0.896825f,1.192977f,1.581106f,2.088505f,2.749450f,3.609534f,4.725287f,6.170128f};
static const float Util_cvToRate_c1[33] = {0.005123f,0.004882f,0.004300f,0.003241f,0.001528f,(-0.001073f),(-0.004865f),(-0.010240f),(-0.017703f),(-0.027904f),(-0.041677f),(-0.060086f),(-0.084489f),(-0.116613f),(-0.158653f),(-0.213387f),(-0.284333f),(-0.375935f),(-0.493801f),(-0.644979f),(-0.838374f),(-1.085130f),(-1.399276f),(-1.798383f),(-2.304508f),(-2.945113f),(-3.754725f),(-4.776467f),(-6.064646f),(-7.684564f),(-9.722439f),(-12.281004f),(-15.490463f)};
static const float Util_cvToRate_c2[33] = {0.019654f,0.023884f,0.029025f,0.035273f,0.042865f,0.052092f,0.063305f,0.076931f,0.093490f,0.113614f,0.138069f,0.167788f,0.203904f,0.247793f,0.301130f,0.365948f,0.444716f,0.540440f,0.656774f,0.798135f,0.969938f,1.178712f,1.432426f,1.740751f,2.115474f,2.570789f,3.124094f,3.796556f,4.614120f,5.606685f,6.813908f,8.280557f,10.062945f};
float Util_cvToRate(float cv);

float Util_pitchToCv(float pitch);

static const float Util_cvToperiod_c0[33] = {674.246035f,671.553838f,662.761782f,646.759522f,623.799428f,594.871802f,561.298277f,524.476942f,485.731369f,446.229382f,406.947440f,368.663774f,331.968683f,297.284156f,264.887666f,234.936857f,207.493124f,182.543016f,160.016907f,139.804832f,121.769557f,105.757117f,91.605116f,79.149088f,68.227249f,58.683895f,50.371734f,43.153355f,36.902033f,31.502025f,26.848494f,22.847166f,19.413794f};
static const float Util_cvToperiod_c1[33] = {(-4656.656311f),(-4481.960579f),(-4198.686133f),(-3855.751543f),(-3487.139455f),(-3115.858821f),(-2756.930319f),(-2419.625141f),(-2109.134753f),(-1827.808334f),(-1576.062963f),(-1353.047092f),(-1157.118864f),(-986.186250f),(-837.944665f),(-710.039113f),(-600.171234f),(-506.166566f),(-426.013463f),(-357.882151f),(-300.130190f),(-251.298904f),(-210.104105f),(-175.423450f),(-146.282114f),(-121.837895f),(-101.366537f),(-84.247726f),(-69.952082f),(-58.029259f),(-48.097248f),(-39.832833f),(-32.963186f)};
static const float Util_cvToperiod_c2[33] = {14548.823162f,11715.369522f,9433.744675f,7596.477297f,6117.026622f,4925.706117f,3966.401040f,3193.925264f,2571.892879f,2071.004308f,1667.666208f,1342.880152f,1081.347751f,870.750049f,701.167268f,564.611553f,454.650724f,366.105298f,294.804521f,237.389916f,191.157082f,153.928316f,123.950032f,99.810164f,80.371652f,64.718885f,52.114569f,41.965005f,33.792117f,27.210939f,21.911477f,17.644111f,14.207835f};
float Util_cvToperiod(float cv);

static const float Util_cvTokHz_c0[33] = {0.032703f,0.032916f,0.033958f,0.036857f,0.043242f,0.055616f,0.077724f,0.115069f,0.175614f,0.270739f,0.416537f,0.635567f,0.959207f,1.430818f,2.109960f,3.078021f,4.445697f,6.362909f,9.031922f,12.724677f,17.805619f,24.761735f,34.241990f,47.109042f,64.506928f,87.949557f,119.436234f,161.602273f,217.915148f,292.929619f,392.619240f,524.806645f,699.721497f};
static const float Util_cvTokHz_c1[33] = {0.225719f,0.212293f,0.179169f,0.117605f,0.015780f,(-0.142178f),(-0.377466f),(-0.718250f),(-1.201797f),(-1.877228f),(-2.809077f),(-4.081867f),(-5.806008f),(-8.125373f),(-11.227028f),(-15.353705f),(-20.819795f),(-28.031798f),(-37.514503f),(-49.944414f),(-66.192449f),(-87.378404f),(-114.940396f),(-150.723337f),(-197.091584f),(-257.072284f),(-334.537674f),(-434.436788f),(-563.089817f),(-728.561858f),(-941.137258f),(-1213.921328f),(-1563.603302f)};
static const float Util_cvTokHz_c2[33] = {0.876338f,1.088287f,1.351498f,1.678368f,2.084294f,2.588397f,3.214421f,3.991854f,4.957315f,6.156280f,7.645225f,9.494282f,11.790549f,14.642185f,18.183512f,22.581336f,28.042809f,34.825181f,43.247923f,53.707771f,66.697415f,82.828706f,102.861476f,127.739327f,158.634081f,197.000973f,244.647198f,303.817033f,377.297556f,468.549918f,581.872376f,722.602756f,897.369877f};
float Util_cvTokHz(float cv);

typedef struct Rescomb__ctx_type_0 {
   int write_pos;
   float buffer[675];
} Rescomb__ctx_type_0;

typedef Rescomb__ctx_type_0 Rescomb_delay_type;

void Rescomb__ctx_type_0_init(Rescomb__ctx_type_0 &_output_);

void Rescomb_delay_init(Rescomb__ctx_type_0 &_output_);

float Rescomb_delay(Rescomb__ctx_type_0 &_ctx, float x, float cv);

static const float Rescomb_toneCurve_c0[65] = {(-0.407589f),(-0.401009f),(-0.394386f),(-0.387630f),(-0.380829f),(-0.373747f),(-0.366680f),(-0.359397f),(-0.351983f),(-0.344420f),(-0.336656f),(-0.328740f),(-0.320616f),(-0.312280f),(-0.303717f),(-0.294902f),(-0.285819f),(-0.276434f),(-0.266718f),(-0.256634f),(-0.246135f),(-0.235166f),(-0.223657f),(-0.211519f),(-0.198634f),(-0.184844f),(-0.169923f),(-0.153529f),(-0.135098f),(-0.113552f),(-0.086112f),(-0.000000f),0.000000f,0.086112f,0.113552f,0.135098f,0.153529f,0.169923f,0.184844f,0.198634f,0.211519f,0.223657f,0.235166f,0.246135f,0.256634f,0.266718f,0.276434f,0.285820f,0.294904f,0.303717f,0.312280f,0.320616f,0.328748f,0.336666f,0.344416f,0.351974f,0.359399f,0.366662f,0.373799f,0.380751f,0.387624f,0.394354f,0.401060f,0.407639f,0.413891f};
static const float Rescomb_toneCurve_c1[65] = {0.690206f,0.701353f,0.713091f,0.725512f,0.738640f,0.752398f,0.767019f,0.782508f,0.799002f,0.816570f,0.835348f,0.855499f,0.877168f,0.900572f,0.925959f,0.953625f,0.983931f,1.017323f,1.054364f,1.095775f,1.142486f,1.195738f,1.257215f,1.329286f,1.415395f,1.520799f,1.654015f,1.829994f,2.078198f,2.468227f,3.231982f,9.441957f,9.441957f,3.231982f,2.468227f,2.078198f,1.829994f,1.654015f,1.520799f,1.415395f,1.329286f,1.257215f,1.195737f,1.142486f,1.095774f,1.054363f,1.017323f,0.983932f,0.953627f,0.925962f,0.900572f,0.877168f,0.855505f,0.835351f,0.816582f,0.799001f,0.782507f,0.767034f,0.752413f,0.738546f,0.725485f,0.713091f,0.701330f,0.690121f,0.679350f};
static const float Rescomb_toneCurve_c2[65] = {0.097358f,0.102203f,0.107458f,0.113169f,0.119347f,0.126195f,0.133683f,0.141960f,0.151119f,0.161304f,0.172686f,0.185478f,0.199938f,0.216376f,0.235190f,0.256897f,0.282166f,0.311868f,0.347176f,0.389687f,0.441645f,0.506276f,0.588374f,0.695352f,0.839219f,1.040634f,1.337963f,1.810204f,2.645769f,4.410255f,9.715489f,114.079447f,(-114.079447f),(-9.715489f),(-4.410255f),(-2.645769f),(-1.810204f),(-1.337963f),(-1.040634f),(-0.839219f),(-0.695352f),(-0.588375f),(-0.506276f),(-0.441644f),(-0.389686f),(-0.347174f),(-0.311870f),(-0.282168f),(-0.256896f),(-0.235192f),(-0.216376f),(-0.199938f),(-0.185496f),(-0.172693f),(-0.161300f),(-0.151125f),(-0.141960f),(-0.133689f),(-0.126160f),(-0.119376f),(-0.113169f),(-0.107418f),(-0.102217f),(-0.097324f),(-0.092934f)};
float Rescomb_toneCurve(float tone);

typedef struct Rescomb__ctx_type_2 {
   float stone;
   float output;
   Rescomb__ctx_type_0 _inst34;
   Util__ctx_type_3 _inst33;
   Util__ctx_type_1 _inst31;
} Rescomb__ctx_type_2;

typedef Rescomb__ctx_type_2 Rescomb_do_type;

void Rescomb__ctx_type_2_init(Rescomb__ctx_type_2 &_output_);

void Rescomb_do_init(Rescomb__ctx_type_2 &_output_);

float Rescomb_do(Rescomb__ctx_type_2 &_ctx, float in, float cv, float tone, float res);

typedef struct Rescomb__ctx_type_3 {
   Rescomb__ctx_type_2 _inst36;
} Rescomb__ctx_type_3;

typedef Rescomb__ctx_type_3 Rescomb_process_type;

void Rescomb__ctx_type_3_init(Rescomb__ctx_type_3 &_output_);

void Rescomb_process_init(Rescomb__ctx_type_3 &_output_);

float Rescomb_process(Rescomb__ctx_type_3 &_ctx, float in, float cv, float tone, float res);

typedef Rescomb__ctx_type_3 Rescomb_noteOn_type;

void Rescomb_noteOn_init(Rescomb__ctx_type_3 &_output_);

void Rescomb_noteOn(Rescomb__ctx_type_3 &_ctx, int note, int velocity, int channel);

typedef Rescomb__ctx_type_3 Rescomb_noteOff_type;

void Rescomb_noteOff_init(Rescomb__ctx_type_3 &_output_);

void Rescomb_noteOff(Rescomb__ctx_type_3 &_ctx, int note, int channel);

typedef Rescomb__ctx_type_3 Rescomb_controlChange_type;

void Rescomb_controlChange_init(Rescomb__ctx_type_3 &_output_);

void Rescomb_controlChange(Rescomb__ctx_type_3 &_ctx, int control, int value, int channel);

typedef Rescomb__ctx_type_3 Rescomb_default_type;

void Rescomb_default_init(Rescomb__ctx_type_3 &_output_);

void Rescomb_default(Rescomb__ctx_type_3 &_ctx);



#endif // RESCOMB_H
