package .rescomb;

import java.util.Arrays;
import java.util.Random;
import .external.*;

public class rescomb {

static int clip(int x, int minv, int maxv) {
   if(x > maxv)
      return maxv;
   else if(x < minv)
      return minv;
   else return x;
}

static float clip(float x, float minv, float maxv) {
   if(x > maxv)
      return maxv;
   else if(x < minv)
      return minv;
   else return x;
}

int[] makeArray(int size, int init) {
   int a[] = new int[size];
   Arrays.fill(a, init);
   return a;
}

float[] makeArray(int size, float init) {
   float a[] = new float[size];
   Arrays.fill(a, init);
   return a;
}

boolean[] makeArray(int size, boolean init) {
   boolean a[] = new boolean[size];
   Arrays.fill(a, init);
   return a;
}

int int_to_fix16(int a) { return a * 0x00010000; }

int fix16_to_int(int a) { return (a >> 16); }

int fix16_add(int x, int y) { return x + y; }

int fix16_sub(int x, int y) { return x - y; }

int fix16_minus(int x) { return -x; }

float fix16_to_float(int a) { return (float)a / 0x00010000; }
int float_to_fix16(float a) {
   float temp = a * 0x00010000;
   return (int)temp;
}

int fix16_mul(int x, int y) {
   long res = (long)x * (long)y;
   return (int)(res >> 16);
}

int fix16_div(int a, int b) {
   if (b == 0)
      return 0;
   int result = (int)(((long)a << 16) / b);
   return result;
}

static boolean not(boolean x) {
   return !x;
}

static float int_to_float(int x) {
   return (float)x;
}

int float_to_int(float x) {
   return (int)x;
}

float floor(float x) {
   return (float)Math.floor(x);
}

static Random rand = new Random();

float random() {
   return rand.nextFloat();
}

int irandom() {
   return rand.nextInt();
}

float get(float[] a, int i) {
   return a[i];
}

void set(float[] a, int i, float val) {
   a[i] = val;
}

int get(int[] a, int i) {
   return a[i];
}

void set(int[] a, int i, int val) {
   a[i] = val;
}

float[] wrap_array(float x[]) {
   return x;
}

int[] wrap_array(int x[]) {
   return x;
}

float cosh(float x) {
   return (float)Math.cosh(x);
}

float cos(float x) {
   return (float)Math.cos(x);
}

float sin(float x) {
   return (float)Math.sin(x);
}

float sinh(float x) {
   return (float)Math.sinh(x);
}

float tan(float x) {
   return (float)Math.tan(x);
}

float tanh(float x) {
   return (float)Math.tanh(x);
}

float sqrt(float x) {
   return (float)Math.sqrt(x);
}

float pow(float x, float y) {
   return (float)Math.pow(x, y);
}

float exp(float x) {
   return (float)Math.exp(x);
}


float Saturate_soft_tanh_table_c0[];
         public void set_Saturate_soft_tanh_table_c0(java.nio.FloatBuffer buffer){
            Saturate_soft_tanh_table_c0 = new float[241];
            buffer.get(Saturate_soft_tanh_table_c0);
            }
float Saturate_soft_tanh_table_c1[];
         public void set_Saturate_soft_tanh_table_c1(java.nio.FloatBuffer buffer){
            Saturate_soft_tanh_table_c1 = new float[241];
            buffer.get(Saturate_soft_tanh_table_c1);
            }
float Saturate_soft_tanh_table_c2[];
         public void set_Saturate_soft_tanh_table_c2(java.nio.FloatBuffer buffer){
            Saturate_soft_tanh_table_c2 = new float[241];
            buffer.get(Saturate_soft_tanh_table_c2);
            }
private class Util__ctx_type_0 {
   public boolean pre;
 
   Util__ctx_type_0(){ this.pre = false;
    } 
   Util__ctx_type_0(boolean pre){ this.pre = pre;
    } }

private class Util__ctx_type_1 {
   public float pre_x;
 
   Util__ctx_type_1(){ this.pre_x = 0.0f;
    } 
   Util__ctx_type_1(float pre_x){ this.pre_x = pre_x;
    } }

private class Util__ctx_type_3 {
   public float y1;
   public float x1;
 
   Util__ctx_type_3(){ this.y1 = 0.0f;
   this.x1 = 0.0f;
    } 
   Util__ctx_type_3(float y1,float x1){ this.y1 = y1;
   this.x1 = x1;
    } }

private class Util__ctx_type_4 {
   public float x;
 
   Util__ctx_type_4(){ this.x = 0.0f;
    } 
   Util__ctx_type_4(float x){ this.x = x;
    } }

private class Util__ctx_type_5 {
   public float x0;
 
   Util__ctx_type_5(){ this.x0 = 0.0f;
    } 
   Util__ctx_type_5(float x0){ this.x0 = x0;
    } }

float Util_pitchToRate_1024_c0[];
         public void set_Util_pitchToRate_1024_c0(java.nio.FloatBuffer buffer){
            Util_pitchToRate_1024_c0 = new float[32];
            buffer.get(Util_pitchToRate_1024_c0);
            }
float Util_pitchToRate_1024_c1[];
         public void set_Util_pitchToRate_1024_c1(java.nio.FloatBuffer buffer){
            Util_pitchToRate_1024_c1 = new float[32];
            buffer.get(Util_pitchToRate_1024_c1);
            }
float Util_pitchToRate_1024_c2[];
         public void set_Util_pitchToRate_1024_c2(java.nio.FloatBuffer buffer){
            Util_pitchToRate_1024_c2 = new float[32];
            buffer.get(Util_pitchToRate_1024_c2);
            }
float Util_pitchToRate_c0[];
         public void set_Util_pitchToRate_c0(java.nio.FloatBuffer buffer){
            Util_pitchToRate_c0 = new float[32];
            buffer.get(Util_pitchToRate_c0);
            }
float Util_pitchToRate_c1[];
         public void set_Util_pitchToRate_c1(java.nio.FloatBuffer buffer){
            Util_pitchToRate_c1 = new float[32];
            buffer.get(Util_pitchToRate_c1);
            }
float Util_pitchToRate_c2[];
         public void set_Util_pitchToRate_c2(java.nio.FloatBuffer buffer){
            Util_pitchToRate_c2 = new float[32];
            buffer.get(Util_pitchToRate_c2);
            }
float Util_cvToRate_1024_c0[];
         public void set_Util_cvToRate_1024_c0(java.nio.FloatBuffer buffer){
            Util_cvToRate_1024_c0 = new float[32];
            buffer.get(Util_cvToRate_1024_c0);
            }
float Util_cvToRate_1024_c1[];
         public void set_Util_cvToRate_1024_c1(java.nio.FloatBuffer buffer){
            Util_cvToRate_1024_c1 = new float[32];
            buffer.get(Util_cvToRate_1024_c1);
            }
float Util_cvToRate_1024_c2[];
         public void set_Util_cvToRate_1024_c2(java.nio.FloatBuffer buffer){
            Util_cvToRate_1024_c2 = new float[32];
            buffer.get(Util_cvToRate_1024_c2);
            }
float Util_cvToRate_c0[];
         public void set_Util_cvToRate_c0(java.nio.FloatBuffer buffer){
            Util_cvToRate_c0 = new float[128];
            buffer.get(Util_cvToRate_c0);
            }
float Util_cvToRate_c1[];
         public void set_Util_cvToRate_c1(java.nio.FloatBuffer buffer){
            Util_cvToRate_c1 = new float[128];
            buffer.get(Util_cvToRate_c1);
            }
float Util_cvToRate_c2[];
         public void set_Util_cvToRate_c2(java.nio.FloatBuffer buffer){
            Util_cvToRate_c2 = new float[128];
            buffer.get(Util_cvToRate_c2);
            }
float Util_cvToperiod_c0[];
         public void set_Util_cvToperiod_c0(java.nio.FloatBuffer buffer){
            Util_cvToperiod_c0 = new float[32];
            buffer.get(Util_cvToperiod_c0);
            }
float Util_cvToperiod_c1[];
         public void set_Util_cvToperiod_c1(java.nio.FloatBuffer buffer){
            Util_cvToperiod_c1 = new float[32];
            buffer.get(Util_cvToperiod_c1);
            }
float Util_cvToperiod_c2[];
         public void set_Util_cvToperiod_c2(java.nio.FloatBuffer buffer){
            Util_cvToperiod_c2 = new float[32];
            buffer.get(Util_cvToperiod_c2);
            }
float Util_cvTokHz_c0[];
         public void set_Util_cvTokHz_c0(java.nio.FloatBuffer buffer){
            Util_cvTokHz_c0 = new float[32];
            buffer.get(Util_cvTokHz_c0);
            }
float Util_cvTokHz_c1[];
         public void set_Util_cvTokHz_c1(java.nio.FloatBuffer buffer){
            Util_cvTokHz_c1 = new float[32];
            buffer.get(Util_cvTokHz_c1);
            }
float Util_cvTokHz_c2[];
         public void set_Util_cvTokHz_c2(java.nio.FloatBuffer buffer){
            Util_cvTokHz_c2 = new float[32];
            buffer.get(Util_cvTokHz_c2);
            }
private class Rescomb__ctx_type_0 {
   public int write_pos;
   public float buffer[];
 
   Rescomb__ctx_type_0(){ this.write_pos = 0;
   this.buffer = makeArray(675,0.0f);
    } 
   Rescomb__ctx_type_0(int write_pos,float buffer[]){ this.write_pos = write_pos;
   this.buffer = buffer;
    } }

float Rescomb_toneCurve_c0[];
         public void set_Rescomb_toneCurve_c0(java.nio.FloatBuffer buffer){
            Rescomb_toneCurve_c0 = new float[64];
            buffer.get(Rescomb_toneCurve_c0);
            }
float Rescomb_toneCurve_c1[];
         public void set_Rescomb_toneCurve_c1(java.nio.FloatBuffer buffer){
            Rescomb_toneCurve_c1 = new float[64];
            buffer.get(Rescomb_toneCurve_c1);
            }
float Rescomb_toneCurve_c2[];
         public void set_Rescomb_toneCurve_c2(java.nio.FloatBuffer buffer){
            Rescomb_toneCurve_c2 = new float[64];
            buffer.get(Rescomb_toneCurve_c2);
            }
private class Rescomb__ctx_type_5 {
   public float stone;
   public float output;
   public Rescomb__ctx_type_0 _inst47a;
   public Util__ctx_type_3 _inst37d;
   public Util__ctx_type_1 _inst13b;
 
   Rescomb__ctx_type_5(){ this.stone = 0.0f;
   this.output = 0.0f;
   this._inst47a = new Rescomb__ctx_type_0();
   this._inst37d = new Util__ctx_type_3();
   this._inst13b = new Util__ctx_type_1();
    } 
   Rescomb__ctx_type_5(float stone,float output,Rescomb__ctx_type_0 _inst47a,Util__ctx_type_3 _inst37d,Util__ctx_type_1 _inst13b){ this.stone = stone;
   this.output = output;
   this._inst47a = _inst47a;
   this._inst37d = _inst37d;
   this._inst13b = _inst13b;
    } }

private class Rescomb__ctx_type_6 {
   public Rescomb__ctx_type_5 _inst179;
 
   Rescomb__ctx_type_6(){ this._inst179 = new Rescomb__ctx_type_5();
    } 
   Rescomb__ctx_type_6(Rescomb__ctx_type_5 _inst179){ this._inst179 = _inst179;
    } }

private float Saturate_soft_tanh_table_raw_c0(int index){return Saturate_soft_tanh_table_c0[index];}

private float Saturate_soft_tanh_table_raw_c1(int index){return Saturate_soft_tanh_table_c1[index];}

private float Saturate_soft_tanh_table_raw_c2(int index){return Saturate_soft_tanh_table_c2[index];}

private float Saturate_soft_tanh_table(float x){
   int index = clip(float_to_int((5.f * (24.f + x))),0,240); 
   return (wrap_array(Saturate_soft_tanh_table_c0)[index] + (x * (wrap_array(Saturate_soft_tanh_table_c1)[index] + (x * wrap_array(Saturate_soft_tanh_table_c2)[index]))));
}

private float Saturate_soft_process(float x){return Saturate_soft_tanh_table(x);}

private void Saturate_soft_noteOn(int note, int velocity, int channel){
}

private void Saturate_soft_noteOff(int note, int channel){
}

private void Saturate_soft_controlChange(int control, int value, int channel){
}

private void Saturate_soft_default(){
}

private Util__ctx_type_0 Util__ctx_type_0_init(){
   Util__ctx_type_0 _ctx = new Util__ctx_type_0(); 
   _ctx.pre = false;
   return _ctx;
}

private Util__ctx_type_0 Util_edge_init(){return Util__ctx_type_0_init();}

private boolean Util_edge(Util__ctx_type_0 _ctx, boolean x){
   boolean ret = (x && not(_ctx.pre)); 
   _ctx.pre = x;
   return ret;
}

private Util__ctx_type_1 Util__ctx_type_1_init(){
   Util__ctx_type_1 _ctx = new Util__ctx_type_1(); 
   _ctx.pre_x = 0.0f;
   return _ctx;
}

private Util__ctx_type_1 Util_change_init(){return Util__ctx_type_1_init();}

private boolean Util_change(Util__ctx_type_1 _ctx, float x){
   boolean v = (_ctx.pre_x != x); 
   _ctx.pre_x = x;
   return v;
}

private float Util_map(float x, float x0, float x1, float y0, float y1){return (y0 + (((x + (- x0)) * (y1 + (- y0))) / (x1 + (- x0))));}

private Util__ctx_type_3 Util__ctx_type_3_init(){
   Util__ctx_type_3 _ctx = new Util__ctx_type_3(); 
   _ctx.y1 = 0.0f;
   _ctx.x1 = 0.0f;
   return _ctx;
}

private Util__ctx_type_3 Util_dcblock_init(){return Util__ctx_type_3_init();}

private float Util_dcblock(Util__ctx_type_3 _ctx, float x0){
   float y0 = (x0 + (- _ctx.x1) + (0.995f * _ctx.y1)); 
   _ctx.x1 = x0;
   _ctx.y1 = y0;
   return y0;
}

private Util__ctx_type_4 Util__ctx_type_4_init(){
   Util__ctx_type_4 _ctx = new Util__ctx_type_4(); 
   _ctx.x = 0.0f;
   return _ctx;
}

private Util__ctx_type_4 Util_smooth_init(){return Util__ctx_type_4_init();}

private float Util_smooth(Util__ctx_type_4 _ctx, float input){
   _ctx.x = (_ctx.x + (0.005f * (input + (- _ctx.x))));
   return _ctx.x;
}

private Util__ctx_type_5 Util__ctx_type_5_init(){
   Util__ctx_type_5 _ctx = new Util__ctx_type_5(); 
   _ctx.x0 = 0.0f;
   return _ctx;
}

private Util__ctx_type_5 Util_average2_init(){return Util__ctx_type_5_init();}

private float Util_average2(Util__ctx_type_5 _ctx, float x1){
   float result = (0.5f * (_ctx.x0 + x1)); 
   _ctx.x0 = x1;
   return result;
}

private float Util_cubic_clipper(float x){if(x <= -0.6666666f){ return -0.6666666f; }
else
{ if(x >= 0.6666667f){ return 0.6666667f; }
else
{ return (x + (-0.3333333f * x * x * x)); } }}

private float Util_pitchToRate_1024_raw_c0(int index){return Util_pitchToRate_1024_c0[index];}

private float Util_pitchToRate_1024_raw_c1(int index){return Util_pitchToRate_1024_c1[index];}

private float Util_pitchToRate_1024_raw_c2(int index){return Util_pitchToRate_1024_c2[index];}

private float Util_pitchToRate_1024(float pitch){
   int index = clip(float_to_int((0.2440945f * pitch)),0,31); 
   return (wrap_array(Util_pitchToRate_1024_c0)[index] + (pitch * (wrap_array(Util_pitchToRate_1024_c1)[index] + (pitch * wrap_array(Util_pitchToRate_1024_c2)[index]))));
}

private float Util_pitchToRate_raw_c0(int index){return Util_pitchToRate_c0[index];}

private float Util_pitchToRate_raw_c1(int index){return Util_pitchToRate_c1[index];}

private float Util_pitchToRate_raw_c2(int index){return Util_pitchToRate_c2[index];}

private float Util_pitchToRate(float pitch){
   int index = clip(float_to_int((0.2440945f * pitch)),0,31); 
   return (wrap_array(Util_pitchToRate_c0)[index] + (pitch * (wrap_array(Util_pitchToRate_c1)[index] + (pitch * wrap_array(Util_pitchToRate_c2)[index]))));
}

private float Util_cvToPitch(float cv){return (24.f + (120.f * cv));}

private float Util_cvToRate_1024_raw_c0(int index){return Util_cvToRate_1024_c0[index];}

private float Util_cvToRate_1024_raw_c1(int index){return Util_cvToRate_1024_c1[index];}

private float Util_cvToRate_1024_raw_c2(int index){return Util_cvToRate_1024_c2[index];}

private float Util_cvToRate_1024(float cv){
   int index = clip(float_to_int((34.4444445f * cv)),0,31); 
   return (wrap_array(Util_cvToRate_1024_c0)[index] + (cv * (wrap_array(Util_cvToRate_1024_c1)[index] + (cv * wrap_array(Util_cvToRate_1024_c2)[index]))));
}

private float Util_cvToRate_raw_c0(int index){return Util_cvToRate_c0[index];}

private float Util_cvToRate_raw_c1(int index){return Util_cvToRate_c1[index];}

private float Util_cvToRate_raw_c2(int index){return Util_cvToRate_c2[index];}

private float Util_cvToRate(float cv){
   int index = clip(float_to_int((141.1111112f * cv)),0,127); 
   return (wrap_array(Util_cvToRate_c0)[index] + (cv * (wrap_array(Util_cvToRate_c1)[index] + (cv * wrap_array(Util_cvToRate_c2)[index]))));
}

private float Util_pitchToCv(float pitch){return (0.0083334f * (-24.f + pitch));}

private float Util_cvToperiod_raw_c0(int index){return Util_cvToperiod_c0[index];}

private float Util_cvToperiod_raw_c1(int index){return Util_cvToperiod_c1[index];}

private float Util_cvToperiod_raw_c2(int index){return Util_cvToperiod_c2[index];}

private float Util_cvToperiod(float cv){
   int index = clip(float_to_int((31.f * cv)),0,31); 
   return (wrap_array(Util_cvToperiod_c0)[index] + (cv * (wrap_array(Util_cvToperiod_c1)[index] + (cv * wrap_array(Util_cvToperiod_c2)[index]))));
}

private float Util_cvTokHz_raw_c0(int index){return Util_cvTokHz_c0[index];}

private float Util_cvTokHz_raw_c1(int index){return Util_cvTokHz_c1[index];}

private float Util_cvTokHz_raw_c2(int index){return Util_cvTokHz_c2[index];}

private float Util_cvTokHz(float cv){
   int index = clip(float_to_int((31.f * cv)),0,31); 
   return (wrap_array(Util_cvTokHz_c0)[index] + (cv * (wrap_array(Util_cvTokHz_c1)[index] + (cv * wrap_array(Util_cvTokHz_c2)[index]))));
}

private Rescomb__ctx_type_0 Rescomb__ctx_type_0_init(){
   Rescomb__ctx_type_0 _ctx = new Rescomb__ctx_type_0(); 
   _ctx.write_pos = 0;
   _ctx.buffer = makeArray(675,0.0f);
   return _ctx;
}

private Rescomb__ctx_type_0 Rescomb_delay_init(){return Rescomb__ctx_type_0_init();}

private float Rescomb_delay(Rescomb__ctx_type_0 _ctx, float x, float cv){
   _ctx.write_pos = ((1 + _ctx.write_pos) % 675);
   set(_ctx.buffer,_ctx.write_pos,x);
   float r_size = 675.f; 
   float r_index = ((int_to_float(_ctx.write_pos) + (- Util_cvToperiod(cv))) % r_size); 
   if(r_index < 0.0f){ r_index = (r_index + r_size); }
   int t1 = (float_to_int(floor(r_index)) % 675); 
   int t2 = ((1 + t1) % 675); 
   float decimal = (r_index + (- int_to_float(t1))); 
   float x1 = get(_ctx.buffer,t1); 
   float x2 = get(_ctx.buffer,t2); 
   float ret = (x1 + (decimal * (x2 + (- x1)))); 
   return ret;
}

private float Rescomb_toneCurve_raw_c0(int index){return Rescomb_toneCurve_c0[index];}

private float Rescomb_toneCurve_raw_c1(int index){return Rescomb_toneCurve_c1[index];}

private float Rescomb_toneCurve_raw_c2(int index){return Rescomb_toneCurve_c2[index];}

private float Rescomb_toneCurve(float tone){
   int index = clip(float_to_int((26.25f * (1.2f + tone))),0,63); 
   return (wrap_array(Rescomb_toneCurve_c0)[index] + (tone * (wrap_array(Rescomb_toneCurve_c1)[index] + (tone * wrap_array(Rescomb_toneCurve_c2)[index]))));
}

private Rescomb__ctx_type_5 Rescomb__ctx_type_5_init(){
   Rescomb__ctx_type_5 _ctx = new Rescomb__ctx_type_5(); 
   _ctx.stone = 0.0f;
   _ctx.output = 0.0f;
   _ctx._inst47a = Rescomb__ctx_type_0_init();
   _ctx._inst37d = Util__ctx_type_3_init();
   _ctx._inst13b = Util__ctx_type_1_init();
   return _ctx;
}

private Rescomb__ctx_type_5 Rescomb_do_init(){return Rescomb__ctx_type_5_init();}

private float Rescomb_do(Rescomb__ctx_type_5 _ctx, float in, float cv, float tone, float res){
   if(Util_change(_ctx._inst13b,tone)){ _ctx.stone = Rescomb_toneCurve(tone); }
   float feedback = Util_dcblock(_ctx._inst37d,(_ctx.output * res)); 
   float saturated_input = Saturate_soft_process((feedback + in)); 
   _ctx.output = (in + (_ctx.stone * Rescomb_delay(_ctx._inst47a,saturated_input,cv)));
   return Saturate_soft_process(_ctx.output);
}

private Rescomb__ctx_type_6 Rescomb__ctx_type_6_init(){
   Rescomb__ctx_type_6 _ctx = new Rescomb__ctx_type_6(); 
   _ctx._inst179 = Rescomb__ctx_type_5_init();
   return _ctx;
}

private Rescomb__ctx_type_6 Rescomb_process_init(){return Rescomb__ctx_type_6_init();}

private float Rescomb_process(Rescomb__ctx_type_6 _ctx, float in, float cv, float tone, float res){return Rescomb_do(_ctx._inst179,in,cv,tone,res);}

private Rescomb__ctx_type_6 Rescomb_noteOn_init(){return Rescomb__ctx_type_6_init();}

private void Rescomb_noteOn(Rescomb__ctx_type_6 _ctx, int note, int velocity, int channel){
}

private Rescomb__ctx_type_6 Rescomb_noteOff_init(){return Rescomb__ctx_type_6_init();}

private void Rescomb_noteOff(Rescomb__ctx_type_6 _ctx, int note, int channel){
}

private Rescomb__ctx_type_6 Rescomb_controlChange_init(){return Rescomb__ctx_type_6_init();}

private void Rescomb_controlChange(Rescomb__ctx_type_6 _ctx, int control, int value, int channel){
}

private Rescomb__ctx_type_6 Rescomb_default_init(){return Rescomb__ctx_type_6_init();}

private void Rescomb_default(Rescomb__ctx_type_6 _ctx){
}


}