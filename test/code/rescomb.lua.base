
local this = {}
local ffi = require("ffi")
function this.ternary(cond,then_,else_) if cond then return then_ else return else_ end end
function this.eps()             return 1e-18; end
function this.pi()              return 3.1415926535897932384; end
function this.random()          return math.random(); end
function this.irandom()         return math.floor(math.random() * 4294967296); end
function this.clip(x,low,high)  return (this.ternary(x<low,low,this.ternary(x>high,high,x))); end
function this.real(x)           return x; end
function this.int(x)            local int_part,_ = math.modf(x) return int_part; end
function this.sin(x)            return math.sin(x); end
function this.cos(x)            return math.cos(x); end
function this.abs(x)            return math.abs(x); end
function this.exp(x)            return math.exp(x); end
function this.floor(x)          return math.floor(x); end
function this.tan(x)            return math.tan(x); end
function this.tanh(x)           return math.tanh(x); end
function this.sqrt(x)           return x; end
function this.set(a,i,v)        a[i+1]=v; end
function this.get(a,i)          return a[i+1]; end
function this.makeArray(size,v) local a = {}; for i=1,size do a[i]=v end return a; end
function this.wrap_array(a)     return a; end
local Saturate_soft_table_c0 = {(-4.19790),(-4.08010),(-3.96270),(-3.84580),(-3.72930),(-3.61330),(-3.49790),(-3.38320),(-3.26910),(-3.15580),(-3.04330),(-2.93160),(-2.82090),(-2.71120),(-2.60240),(-2.49480),(-2.38840),(-2.28310),(-2.17920),(-2.07650),(-1.97530),(-1.87550),(-1.77730),(-1.68060),(-1.58550),(-1.49210),(-1.40040),(-1.31060),(-1.22260),(-1.13650),(-1.05230),(-0.97010),(-0.89000),(-0.81200),(-0.73610),(-0.66240),(-0.59090),(-0.52160),(-0.45470),(-0.39000),(-0.32770),(-0.26780),(-0.21030),(-0.15520),(-0.10250),(-0.05230),(-0.00450),0.04070,0.08360,0.12400,0.16190,0.19740,0.23040,0.26110,0.28930,0.31520,0.33870,0.36000,0.37900,0.39570,0.41030,0.42280,0.43320,0.44160,0.44800,0.45260,0.45530,0.45630,0.45570,0.45340,0.44970,0.44450,0.43810,0.43030,0.42140,0.41150,0.40060,0.38870,0.37620,0.36290,0.34900,0.33460,0.31980,0.30460,0.28920,0.27370,0.25810,0.24250,0.22700,0.21160,0.19650,0.18170,0.16730,0.15330,0.13970,0.12670,0.11420,0.10240,0.09110,0.08060,0.07070,0.06150,0.05300,0.04530,0.03820,0.03180,0.02610,0.02110,0.01680,0.01300,0.00980,0.00720,0.00510,0.00340,0.00210,0.00120,0.00060,0.00020,0.00000,0.00000,0.00000,0.00000,0.00000,(-0.00020),(-0.00060),(-0.00120),(-0.00210),(-0.00340),(-0.00510),(-0.00720),(-0.00980),(-0.01300),(-0.01680),(-0.02110),(-0.02610),(-0.03180),(-0.03820),(-0.04530),(-0.05300),(-0.06150),(-0.07070),(-0.08060),(-0.09110),(-0.10240),(-0.11420),(-0.12670),(-0.13970),(-0.15330),(-0.16730),(-0.18170),(-0.19650),(-0.21160),(-0.22700),(-0.24250),(-0.25810),(-0.27370),(-0.28920),(-0.30460),(-0.31980),(-0.33460),(-0.34900),(-0.36290),(-0.37620),(-0.38870),(-0.40060),(-0.41150),(-0.42140),(-0.43030),(-0.43810),(-0.44450),(-0.44970),(-0.45340),(-0.45570),(-0.45630),(-0.45530),(-0.45260),(-0.44800),(-0.44160),(-0.43320),(-0.42280),(-0.41030),(-0.39570),(-0.37900),(-0.36000),(-0.33870),(-0.31520),(-0.28930),(-0.26110),(-0.23040),(-0.19740),(-0.16190),(-0.12400),(-0.08360),(-0.04070),0.00450,0.05230,0.10250,0.15520,0.21030,0.26780,0.32770,0.39000,0.45470,0.52160,0.59090,0.66240,0.73610,0.81200,0.89000,0.97010,1.05230,1.13650,1.22260,1.31060,1.40040,1.49210,1.58550,1.68060,1.77730,1.87550,1.97530,2.07650,2.17920,2.28310,2.38840,2.49480,2.60240,2.71120,2.82090,2.93160,3.04330,3.15580,3.26910,3.38320,3.49790,3.61330,3.72930,3.84580,3.96270,4.08010,4.19790,4.31590};
local Saturate_soft_table_c1 = {0.67630,0.68620,0.69610,0.70610,0.71620,0.72620,0.73640,0.74650,0.75670,0.76690,0.77710,0.78740,0.79760,0.80790,0.81810,0.82840,0.83860,0.84880,0.85900,0.86910,0.87930,0.88930,0.89930,0.90930,0.91920,0.92900,0.93880,0.94840,0.95800,0.96740,0.97680,0.98600,0.99510,1.00400,1.01280,1.02150,1.03000,1.03830,1.04650,1.05440,1.06220,1.06980,1.07710,1.08430,1.09120,1.09790,1.10430,1.11050,1.11640,1.12210,1.12750,1.13260,1.13750,1.14200,1.14630,1.15030,1.15390,1.15730,1.16030,1.16310,1.16550,1.16760,1.16940,1.17080,1.17200,1.17280,1.17330,1.17350,1.17340,1.17290,1.17220,1.17120,1.16980,1.16820,1.16630,1.16410,1.16160,1.15890,1.15590,1.15270,1.14920,1.14560,1.14170,1.13760,1.13340,1.12900,1.12450,1.11980,1.11500,1.11010,1.10510,1.10010,1.09500,1.08990,1.08480,1.07960,1.07450,1.06950,1.06440,1.05950,1.05470,1.04990,1.04530,1.04090,1.03660,1.03240,1.02850,1.02480,1.02130,1.01800,1.01500,1.01220,1.00970,1.00740,1.00550,1.00380,1.00240,1.00130,1.00060,1.00010,0.99990,1.00010,1.00060,1.00130,1.00240,1.00380,1.00550,1.00740,1.00970,1.01220,1.01500,1.01800,1.02130,1.02480,1.02850,1.03240,1.03660,1.04090,1.04530,1.04990,1.05470,1.05950,1.06440,1.06950,1.07450,1.07960,1.08480,1.08990,1.09500,1.10010,1.10510,1.11010,1.11500,1.11980,1.12450,1.12900,1.13340,1.13760,1.14170,1.14560,1.14920,1.15270,1.15590,1.15890,1.16160,1.16410,1.16630,1.16820,1.16980,1.17120,1.17220,1.17290,1.17340,1.17350,1.17330,1.17280,1.17200,1.17080,1.16940,1.16760,1.16550,1.16310,1.16030,1.15730,1.15390,1.15030,1.14630,1.14200,1.13750,1.13260,1.12750,1.12210,1.11640,1.11050,1.10430,1.09790,1.09120,1.08430,1.07710,1.06980,1.06220,1.05440,1.04650,1.03830,1.03000,1.02150,1.01280,1.00400,0.99510,0.98600,0.97680,0.96740,0.95800,0.94840,0.93880,0.92900,0.91920,0.90930,0.89930,0.88930,0.87930,0.86910,0.85900,0.84880,0.83860,0.82840,0.81810,0.80790,0.79760,0.78740,0.77710,0.76690,0.75670,0.74650,0.73640,0.72620,0.71620,0.70610,0.69610,0.68620,0.67630,0.66640};
local Saturate_soft_table_c2 = {0.01030,0.01050,0.01070,0.01090,0.01110,0.01130,0.01160,0.01180,0.01200,0.01220,0.01250,0.01270,0.01300,0.01320,0.01340,0.01370,0.01390,0.01420,0.01440,0.01470,0.01490,0.01520,0.01540,0.01570,0.01590,0.01620,0.01650,0.01670,0.01700,0.01720,0.01750,0.01780,0.01800,0.01830,0.01850,0.01880,0.01900,0.01930,0.01950,0.01980,0.02000,0.02030,0.02050,0.02070,0.02100,0.02120,0.02140,0.02160,0.02180,0.02200,0.02220,0.02240,0.02260,0.02270,0.02290,0.02300,0.02320,0.02330,0.02340,0.02360,0.02370,0.02370,0.02380,0.02390,0.02390,0.02400,0.02400,0.02400,0.02400,0.02400,0.02390,0.02390,0.02380,0.02370,0.02360,0.02350,0.02340,0.02320,0.02300,0.02280,0.02260,0.02240,0.02210,0.02190,0.02160,0.02130,0.02090,0.02060,0.02020,0.01980,0.01940,0.01900,0.01850,0.01810,0.01760,0.01710,0.01660,0.01600,0.01550,0.01490,0.01430,0.01370,0.01310,0.01240,0.01180,0.01110,0.01040,0.00970,0.00900,0.00830,0.00760,0.00680,0.00610,0.00530,0.00460,0.00380,0.00310,0.00230,0.00150,0.00070,0.00000,(-0.00070),(-0.00150),(-0.00230),(-0.00310),(-0.00380),(-0.00460),(-0.00530),(-0.00610),(-0.00680),(-0.00760),(-0.00830),(-0.00900),(-0.00970),(-0.01040),(-0.01110),(-0.01180),(-0.01240),(-0.01310),(-0.01370),(-0.01430),(-0.01490),(-0.01550),(-0.01600),(-0.01660),(-0.01710),(-0.01760),(-0.01810),(-0.01850),(-0.01900),(-0.01940),(-0.01980),(-0.02020),(-0.02060),(-0.02090),(-0.02130),(-0.02160),(-0.02190),(-0.02210),(-0.02240),(-0.02260),(-0.02280),(-0.02300),(-0.02320),(-0.02340),(-0.02350),(-0.02360),(-0.02370),(-0.02380),(-0.02390),(-0.02390),(-0.02400),(-0.02400),(-0.02400),(-0.02400),(-0.02400),(-0.02390),(-0.02390),(-0.02380),(-0.02370),(-0.02370),(-0.02360),(-0.02340),(-0.02330),(-0.02320),(-0.02300),(-0.02290),(-0.02270),(-0.02260),(-0.02240),(-0.02220),(-0.02200),(-0.02180),(-0.02160),(-0.02140),(-0.02120),(-0.02100),(-0.02070),(-0.02050),(-0.02030),(-0.02000),(-0.01980),(-0.01950),(-0.01930),(-0.01900),(-0.01880),(-0.01850),(-0.01830),(-0.01800),(-0.01780),(-0.01750),(-0.01720),(-0.01700),(-0.01670),(-0.01650),(-0.01620),(-0.01590),(-0.01570),(-0.01540),(-0.01520),(-0.01490),(-0.01470),(-0.01440),(-0.01420),(-0.01390),(-0.01370),(-0.01340),(-0.01320),(-0.01300),(-0.01270),(-0.01250),(-0.01220),(-0.01200),(-0.01180),(-0.01160),(-0.01130),(-0.01110),(-0.01090),(-0.01070),(-0.01050),(-0.01030),(-0.01010)};
function this.Saturate_soft_table(x)
   local index = this.clip(this.int((5.00000 * (x + 24.00000))),0,240);
   return (Saturate_soft_table_c0[index+1] + (x * (Saturate_soft_table_c1[index+1] + (Saturate_soft_table_c2[index+1] * x))));

end

function this.Saturate_soft_process(x)
   return this.Saturate_soft_table(x);

end

function this.Saturate_soft_noteOn(note,velocity,channel)

end

function this.Saturate_soft_noteOff(note,channel)

end

function this.Saturate_soft_controlChange(control,value,channel)

end

function this.Saturate_soft_default()

end

function this.Util__ctx_type_0_init()
   local _ctx = {};
   _ctx.pre = false;
   return _ctx;

end

function this.Util_edge_init()
   return this.Util__ctx_type_0_init();
end

function this.Util_edge(_ctx,x)
   local ret = (x and (_ctx.pre == false));
   _ctx.pre = x;
   return ret;

end

function this.Util__ctx_type_1_init()
   local _ctx = {};
   _ctx.pre_x = 0.00000;
   return _ctx;

end

function this.Util_change_init()
   return this.Util__ctx_type_1_init();
end

function this.Util_change(_ctx,x)
   local v = (_ctx.pre_x ~= x);
   _ctx.pre_x = x;
   return v;

end

function this.Util_map(x,x0,x1,y0,y1)
   return ((((x + (- x0)) * (y1 + (- y0))) / (x1 + (- x0))) + y0);

end

function this.Util__ctx_type_3_init()
   local _ctx = {};
   _ctx.y1 = 0.00000;
   _ctx.x1 = 0.00000;
   return _ctx;

end

function this.Util_dcblock_init()
   return this.Util__ctx_type_3_init();
end

function this.Util_dcblock(_ctx,x0)
   local y0 = (x0 + (- _ctx.x1) + (_ctx.y1 * 0.99500));
   _ctx.x1 = x0;
   _ctx.y1 = y0;
   return y0;

end

function this.Util__ctx_type_4_init()
   local _ctx = {};
   _ctx.x = 0.00000;
   return _ctx;

end

function this.Util_smooth_init()
   return this.Util__ctx_type_4_init();
end

function this.Util_smooth(_ctx,input)
   _ctx.x = (_ctx.x + ((input + (- _ctx.x)) * 0.00500));
   return _ctx.x;

end

function this.Util__ctx_type_5_init()
   local _ctx = {};
   _ctx.x0 = 0.00000;
   return _ctx;

end

function this.Util_average2_init()
   return this.Util__ctx_type_5_init();
end

function this.Util_average2(_ctx,x1)
   local result = ((_ctx.x0 + x1) * 0.50000);
   _ctx.x0 = x1;
   return result;

end

function this.Util_cubic_clipper(x)
   if (x <= (-0.66660)) then
      return (-0.66660);

   else

      local _cond_26 = false;
      _cond_26 = (x >= 0.66660);
      if _cond_26 then
         return 0.66660;

      else

         return (x + ((-0.33330) * x * x * x));

      end

   end

end

local Util_pitchToRate_1024_c0 = {0.18980,0.19130,0.19860,0.21940,0.26560,0.35640,0.52060,0.80150,1.26270,1.99650,3.13550,4.86830,7.46120,11.28770,16.86800,24.92330,36.44850,52.80980,75.87660,108.19650,153.23160,215.67100,301.84940,420.30170,582.50030,803.83190,1104.89000,1513.18400,2065.39420,2810.34650,3812.92900,5159.24510,6963.38620};
local Util_pitchToRate_1024_c1 = {0.01090,0.01010,0.00830,0.00480,(-0.00090),(-0.01000),(-0.02380),(-0.04400),(-0.07300),(-0.11400),(-0.17130),(-0.25060),(-0.35930),(-0.50750),(-0.70820),(-0.97850),(-1.34120),(-1.82580),(-2.47110),(-3.32770),(-4.46160),(-5.95890),(-7.93170),(-10.52540),(-13.92910),(-18.38800),(-24.22000),(-31.83650),(-41.76990),(-54.70870),(-71.54200),(-93.41760),(-121.81660)};
local Util_pitchToRate_1024_c2 = {0.00030,0.00040,0.00050,0.00070,0.00080,0.00110,0.00140,0.00170,0.00220,0.00270,0.00350,0.00440,0.00550,0.00700,0.00880,0.01100,0.01390,0.01750,0.02200,0.02770,0.03480,0.04380,0.05510,0.06930,0.08710,0.10960,0.13780,0.17330,0.21800,0.27420,0.34480,0.43370,0.54550};
function this.Util_pitchToRate_1024(pitch)
   local index = this.clip(this.int((0.24400 * pitch)),0,31);
   return (Util_pitchToRate_1024_c0[index+1] + (pitch * (Util_pitchToRate_1024_c1[index+1] + (Util_pitchToRate_1024_c2[index+1] * pitch))));

end

local Util_pitchToRate_c0 = {0.00010,0.00010,0.00010,0.00020,0.00020,0.00030,0.00050,0.00070,0.00120,0.00190,0.00300,0.00470,0.00720,0.01100,0.01640,0.02430,0.03550,0.05150,0.07400,0.10560,0.14960,0.21060,0.29470,0.41040,0.56880,0.78490,1.07890,1.47770,2.01690,2.74440,3.72350,5.03830,6.80010};
local Util_pitchToRate_c1 = {0.00000,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000,(-0.00010),(-0.00010),(-0.00020),(-0.00030),(-0.00040),(-0.00060),(-0.00090),(-0.00130),(-0.00170),(-0.00240),(-0.00320),(-0.00430),(-0.00580),(-0.00770),(-0.01020),(-0.01360),(-0.01790),(-0.02360),(-0.03100),(-0.04070),(-0.05340),(-0.06980),(-0.09120),(-0.11890)};
local Util_pitchToRate_c2 = {0.00000,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000,0.00010,0.00010,0.00010,0.00020,0.00020,0.00030,0.00040,0.00050};
function this.Util_pitchToRate(pitch)
   local index = this.clip(this.int((0.24400 * pitch)),0,31);
   return (Util_pitchToRate_c0[index+1] + (pitch * (Util_pitchToRate_c1[index+1] + (Util_pitchToRate_c2[index+1] * pitch))));

end

function this.Util_cvToPitch(cv)
   return ((cv * 120.00000) + 24.00000);

end

local Util_cvToRate_1024_c0 = {0.75930,0.76280,0.77970,0.82560,0.92460,1.11230,1.44060,1.98330,2.84440,4.16830,6.15390,9.07310,13.29420,19.31360,27.79610,39.62820,55.98670,78.42680,108.99740,150.38780,206.11770,280.78100,380.35730,512.61160,687.60520,918.34730,1221.62600,1619.06680,2138.47840,2815.56350,3696.08980,4838.64320,6318.11650};
local Util_cvToRate_1024_c1 = {5.24550,4.99890,4.40300,3.31910,1.56440,(-1.09920),(-4.98220),(-10.48580),(-18.12790),(-28.57410),(-42.67730),(-61.52810),(-86.51670),(-119.41210),(-162.46030),(-218.50810),(-291.15710),(-384.95730),(-505.64830),(-660.46050),(-858.49110),(-1111.17280),(-1432.85750),(-1841.54350),(-2359.78030),(-3015.79410),(-3844.88630),(-4891.17230),(-6209.73980),(-7869.32870),(-9955.65580),(-12575.53830),(-15862.00680)};
local Util_cvToRate_1024_c2 = {20.12550,24.45750,29.72200,36.11950,43.89420,53.34230,64.82410,78.77730,95.73390,116.34040,141.38240,171.81460,208.79730,253.74030,308.35730,374.73040,455.39010,553.41160,672.53200,817.29280,993.21290,1206.99940,1466.80280,1782.52830,2166.21280,2632.48440,3199.11970,3887.72180,4724.54370,5741.48930,6977.32970,8479.18150,10304.30300};
function this.Util_cvToRate_1024(cv)
   local index = this.clip(this.int((34.44440 * cv)),0,31);
   return (Util_cvToRate_1024_c0[index+1] + (cv * (Util_cvToRate_1024_c1[index+1] + (Util_cvToRate_1024_c2[index+1] * cv))));

end

local Util_cvToRate_c0 = {0.00070,0.00070,0.00070,0.00070,0.00070,0.00070,0.00070,0.00070,0.00070,0.00070,0.00070,0.00070,0.00070,0.00070,0.00080,0.00080,0.00080,0.00080,0.00090,0.00090,0.00100,0.00100,0.00110,0.00110,0.00120,0.00130,0.00140,0.00150,0.00170,0.00180,0.00200,0.00220,0.00240,0.00260,0.00290,0.00320,0.00350,0.00380,0.00420,0.00470,0.00510,0.00570,0.00630,0.00690,0.00760,0.00840,0.00930,0.01020,0.01120,0.01230,0.01360,0.01490,0.01640,0.01800,0.01970,0.02160,0.02370,0.02590,0.02840,0.03100,0.03390,0.03700,0.04040,0.04410,0.04800,0.05240,0.05700,0.06210,0.06750,0.07340,0.07980,0.08670,0.09410,0.10220,0.11080,0.12020,0.13020,0.14110,0.15280,0.16540,0.17890,0.19350,0.20920,0.22610,0.24430,0.26380,0.28480,0.30740,0.33160,0.35760,0.38560,0.41560,0.44770,0.48230,0.51930,0.55900,0.60160,0.64730,0.69620,0.74860,0.80480,0.86490,0.92930,0.99830,1.07210,1.15110,1.23560,1.32610,1.42280,1.52630,1.63690,1.75510,1.88160,2.01670,2.16110,2.31540,2.48020,2.65620,2.84420,3.04490,3.25930,3.48810,3.73230,3.99290,4.27100,4.56780,4.88430,5.22200,5.58220};
local Util_cvToRate_c1 = {0.00510,0.00510,0.00500,0.00500,0.00490,0.00490,0.00480,0.00470,0.00450,0.00430,0.00410,0.00390,0.00360,0.00330,0.00300,0.00260,0.00220,0.00170,0.00120,0.00060,0.00000,(-0.00070),(-0.00140),(-0.00230),(-0.00320),(-0.00430),(-0.00540),(-0.00660),(-0.00800),(-0.00940),(-0.01100),(-0.01270),(-0.01460),(-0.01660),(-0.01880),(-0.02110),(-0.02370),(-0.02640),(-0.02940),(-0.03260),(-0.03600),(-0.03970),(-0.04360),(-0.04790),(-0.05250),(-0.05740),(-0.06270),(-0.06840),(-0.07450),(-0.08100),(-0.08800),(-0.09550),(-0.10350),(-0.11200),(-0.12120),(-0.13100),(-0.14150),(-0.15270),(-0.16460),(-0.17740),(-0.19100),(-0.20560),(-0.22120),(-0.23770),(-0.25540),(-0.27430),(-0.29440),(-0.31580),(-0.33860),(-0.36300),(-0.38890),(-0.41650),(-0.44590),(-0.47710),(-0.51040),(-0.54580),(-0.58350),(-0.62360),(-0.66630),(-0.71160),(-0.75980),(-0.81110),(-0.86560),(-0.92350),(-0.98500),(-1.05030),(-1.11980),(-1.19350),(-1.27180),(-1.35500),(-1.44330),(-1.53700),(-1.63660),(-1.74220),(-1.85420),(-1.97320),(-2.09930),(-2.23320),(-2.37520),(-2.52580),(-2.68560),(-2.85490),(-3.03450),(-3.22500),(-3.42680),(-3.64080),(-3.86770),(-4.10810),(-4.36280),(-4.63280),(-4.91880),(-5.22190),(-5.54300),(-5.88310),(-6.24340),(-6.62490),(-7.02900),(-7.45700),(-7.91020),(-8.39000),(-8.89800),(-9.43590),(-10.00530),(-10.60800),(-11.24590),(-11.92120),(-12.63580),(-13.39210),(-14.19230)};
local Util_cvToRate_c2 = {0.01820,0.01910,0.02010,0.02110,0.02210,0.02320,0.02440,0.02560,0.02690,0.02830,0.02970,0.03120,0.03270,0.03430,0.03610,0.03790,0.03980,0.04180,0.04380,0.04600,0.04830,0.05080,0.05330,0.05600,0.05870,0.06170,0.06480,0.06800,0.07140,0.07500,0.07870,0.08270,0.08680,0.09110,0.09570,0.10050,0.10550,0.11070,0.11630,0.12210,0.12820,0.13460,0.14130,0.14840,0.15580,0.16360,0.17170,0.18030,0.18930,0.19880,0.20870,0.21920,0.23010,0.24160,0.25370,0.26630,0.27960,0.29360,0.30830,0.32370,0.33980,0.35680,0.37460,0.39340,0.41300,0.43360,0.45530,0.47800,0.50190,0.52700,0.55330,0.58090,0.61000,0.64040,0.67240,0.70600,0.74130,0.77830,0.81720,0.85800,0.90080,0.94580,0.99310,1.04270,1.09480,1.14940,1.20680,1.26710,1.33040,1.39690,1.46660,1.53990,1.61680,1.69750,1.78230,1.87130,1.96480,2.06290,2.16600,2.27410,2.38770,2.50700,2.63220,2.76370,2.90170,3.04660,3.19880,3.35850,3.52630,3.70240,3.88730,4.08150,4.28530,4.49930,4.72410,4.96000,5.20770,5.46780,5.74090,6.02760,6.32870,6.64480,6.97660,7.32510,7.69090,8.07510,8.47840,8.90180,9.34640};
function this.Util_cvToRate(cv)
   local index = this.clip(this.int((141.11110 * cv)),0,127);
   return (Util_cvToRate_c0[index+1] + (cv * (Util_cvToRate_c1[index+1] + (Util_cvToRate_c2[index+1] * cv))));

end

function this.Util_pitchToCv(pitch)
   return (0.00830 * ((-24.00000) + pitch));

end

local Util_cvToperiod_c0 = {674.24600,671.55380,662.76170,646.75950,623.79940,594.87180,561.29820,524.47690,485.73130,446.22930,406.94740,368.66370,331.96860,297.28410,264.88760,234.93680,207.49310,182.54300,160.01690,139.80480,121.76950,105.75710,91.60510,79.14900,68.22720,58.68380,50.37170,43.15330,36.90200,31.50200,26.84840,22.84710,19.41370};
local Util_cvToperiod_c1 = {(-4656.65630),(-4481.96050),(-4198.68610),(-3855.75150),(-3487.13940),(-3115.85880),(-2756.93030),(-2419.62510),(-2109.13470),(-1827.80830),(-1576.06290),(-1353.04700),(-1157.11880),(-986.18620),(-837.94460),(-710.03910),(-600.17120),(-506.16650),(-426.01340),(-357.88210),(-300.13010),(-251.29890),(-210.10410),(-175.42340),(-146.28210),(-121.83780),(-101.36650),(-84.24770),(-69.95200),(-58.02920),(-48.09720),(-39.83280),(-32.96310)};
local Util_cvToperiod_c2 = {14548.82310,11715.36950,9433.74460,7596.47720,6117.02660,4925.70610,3966.40100,3193.92520,2571.89280,2071.00430,1667.66620,1342.88010,1081.34770,870.75000,701.16720,564.61150,454.65070,366.10520,294.80450,237.38990,191.15700,153.92830,123.95000,99.81010,80.37160,64.71880,52.11450,41.96500,33.79210,27.21090,21.91140,17.64410,14.20780};
function this.Util_cvToperiod(cv)
   local index = this.clip(this.int((31.00000 * cv)),0,31);
   return (Util_cvToperiod_c0[index+1] + (cv * (Util_cvToperiod_c1[index+1] + (Util_cvToperiod_c2[index+1] * cv))));

end

local Util_cvTokHz_c0 = {0.03270,0.03290,0.03390,0.03680,0.04320,0.05560,0.07770,0.11500,0.17560,0.27070,0.41650,0.63550,0.95920,1.43080,2.10990,3.07800,4.44560,6.36290,9.03190,12.72460,17.80560,24.76170,34.24190,47.10900,64.50690,87.94950,119.43620,161.60220,217.91510,292.92960,392.61920,524.80660,699.72140};
local Util_cvTokHz_c1 = {0.22570,0.21220,0.17910,0.11760,0.01570,(-0.14210),(-0.37740),(-0.71820),(-1.20170),(-1.87720),(-2.80900),(-4.08180),(-5.80600),(-8.12530),(-11.22700),(-15.35370),(-20.81970),(-28.03170),(-37.51450),(-49.94440),(-66.19240),(-87.37840),(-114.94030),(-150.72330),(-197.09150),(-257.07220),(-334.53760),(-434.43670),(-563.08980),(-728.56180),(-941.13720),(-1213.92130),(-1563.60330)};
local Util_cvTokHz_c2 = {0.87630,1.08820,1.35140,1.67830,2.08420,2.58830,3.21440,3.99180,4.95730,6.15620,7.64520,9.49420,11.79050,14.64210,18.18350,22.58130,28.04280,34.82510,43.24790,53.70770,66.69740,82.82870,102.86140,127.73930,158.63400,197.00090,244.64710,303.81700,377.29750,468.54990,581.87230,722.60270,897.36980};
function this.Util_cvTokHz(cv)
   local index = this.clip(this.int((31.00000 * cv)),0,31);
   return (Util_cvTokHz_c0[index+1] + (cv * (Util_cvTokHz_c1[index+1] + (Util_cvTokHz_c2[index+1] * cv))));

end

function this.Rescomb__ctx_type_0_init()
   local _ctx = {};
   _ctx.write_pos = 0;
   _ctx.buffer = this.makeArray(675,0.00000);
   return _ctx;

end

function this.Rescomb_delay_init()
   return this.Rescomb__ctx_type_0_init();
end

function this.Rescomb_delay(_ctx,x,cv)
   _ctx.write_pos = ((_ctx.write_pos + 1) % 675);
   this.set(_ctx.buffer,_ctx.write_pos,x);
   local r_size = 675.00000;
   local r_index = ((this.real(_ctx.write_pos) + (- this.Util_cvToperiod(cv))) % r_size);
   if (r_index < 0.00000) then
      r_index = (r_size + r_index);
   end
   local t1 = this.int(this.floor(r_index));
   local t2 = ((t1 + 1) % 675);
   local decimal = (r_index + (- this.real(t1)));
   local x1 = this.get(_ctx.buffer,t1);
   local x2 = this.get(_ctx.buffer,t2);
   local ret = (((x2 + (- x1)) * decimal) + x1);
   return ret;

end

local Rescomb_toneCurve_c0 = {(-0.40750),(-0.40100),(-0.39430),(-0.38760),(-0.38070),(-0.37370),(-0.36660),(-0.35940),(-0.35190),(-0.34440),(-0.33660),(-0.32870),(-0.32060),(-0.31220),(-0.30370),(-0.29490),(-0.28580),(-0.27640),(-0.26670),(-0.25660),(-0.24610),(-0.23510),(-0.22360),(-0.21150),(-0.19860),(-0.18480),(-0.16990),(-0.15350),(-0.13500),(-0.11350),(-0.08610),0.00000,0.00000,0.08610,0.11350,0.13500,0.15350,0.16990,0.18480,0.19860,0.21150,0.22360,0.23510,0.24610,0.25660,0.26670,0.27640,0.28580,0.29490,0.30370,0.31220,0.32060,0.32870,0.33660,0.34440,0.35190,0.35940,0.36660,0.37370,0.38070,0.38760,0.39430,0.40100,0.40750,0.41390};
local Rescomb_toneCurve_c1 = {0.69000,0.70130,0.71310,0.72550,0.73850,0.75240,0.76700,0.78250,0.79900,0.81650,0.83530,0.85540,0.87710,0.90050,0.92590,0.95360,0.98390,1.01730,1.05430,1.09570,1.14240,1.19570,1.25720,1.32920,1.41530,1.52070,1.65400,1.82990,2.07810,2.46820,3.23190,9.44190,9.44190,3.23190,2.46820,2.07810,1.82990,1.65400,1.52070,1.41530,1.32920,1.25720,1.19570,1.14240,1.09570,1.05430,1.01730,0.98390,0.95360,0.92590,0.90050,0.87710,0.85540,0.83530,0.81650,0.79900,0.78250,0.76700,0.75240,0.73850,0.72550,0.71310,0.70130,0.69000,0.67930};
local Rescomb_toneCurve_c2 = {0.09730,0.10210,0.10740,0.11310,0.11930,0.12610,0.13360,0.14190,0.15110,0.16130,0.17260,0.18540,0.19990,0.21630,0.23510,0.25680,0.28210,0.31180,0.34710,0.38960,0.44160,0.50620,0.58830,0.69530,0.83920,1.04060,1.33790,1.81020,2.64570,4.41020,9.71540,114.07940,(-114.07940),(-9.71540),(-4.41020),(-2.64570),(-1.81020),(-1.33790),(-1.04060),(-0.83920),(-0.69530),(-0.58830),(-0.50620),(-0.44160),(-0.38960),(-0.34710),(-0.31180),(-0.28210),(-0.25680),(-0.23510),(-0.21630),(-0.19990),(-0.18540),(-0.17260),(-0.16130),(-0.15110),(-0.14190),(-0.13360),(-0.12610),(-0.11930),(-0.11310),(-0.10740),(-0.10210),(-0.09730),(-0.09290)};
function this.Rescomb_toneCurve(tone)
   local index = this.clip(this.int((26.25000 * (tone + 1.20000))),0,63);
   return (Rescomb_toneCurve_c0[index+1] + (tone * (Rescomb_toneCurve_c1[index+1] + (Rescomb_toneCurve_c2[index+1] * tone))));

end

function this.Rescomb__ctx_type_2_init()
   local _ctx = {};
   _ctx.stone = 0.00000;
   _ctx.output = 0.00000;
   _ctx._inst34 = this.Rescomb__ctx_type_0_init();
   _ctx._inst33 = this.Util__ctx_type_3_init();
   _ctx._inst31 = this.Util__ctx_type_1_init();
   return _ctx;

end

function this.Rescomb_do_init()
   return this.Rescomb__ctx_type_2_init();
end

function this.Rescomb_do(_ctx,in_,cv,tone,res)
   if this.Util_change(_ctx._inst31,tone) then
      _ctx.stone = this.Rescomb_toneCurve(tone);

   end
   local feedback = this.Util_dcblock(_ctx._inst33,(_ctx.output * res));
   local saturated_input = this.Saturate_soft_process((in_ + feedback));
   _ctx.output = ((_ctx.stone * this.Rescomb_delay(_ctx._inst34,saturated_input,cv)) + in_);
   return this.Saturate_soft_process(_ctx.output);

end

function this.Rescomb__ctx_type_3_init()
   local _ctx = {};
   _ctx._inst36 = this.Rescomb__ctx_type_2_init();
   return _ctx;

end

function this.Rescomb_process_init()
   return this.Rescomb__ctx_type_3_init();
end

function this.Rescomb_process(_ctx,in_,cv,tone,res)
   return this.Rescomb_do(_ctx._inst36,in_,cv,tone,res);

end

function this.Rescomb_noteOn_init()
   return this.Rescomb__ctx_type_3_init();
end

function this.Rescomb_noteOn(_ctx,note,velocity,channel)

end

function this.Rescomb_noteOff_init()
   return this.Rescomb__ctx_type_3_init();
end

function this.Rescomb_noteOff(_ctx,note,channel)

end

function this.Rescomb_controlChange_init()
   return this.Rescomb__ctx_type_3_init();
end

function this.Rescomb_controlChange(_ctx,control,value,channel)

end

function this.Rescomb_default_init()
   return this.Rescomb__ctx_type_3_init();
end

function this.Rescomb_default(_ctx)

end


function this.process(ctx,in_,cv,tone,res) return this.Rescomb_process(ctx,in_,cv,tone,res) end
function this.noteOn(ctx,note,velocity,channel) return this.Rescomb_noteOn(ctx,note,velocity,channel) end
function this.noteOff(ctx,note,channel) return this.Rescomb_noteOff(ctx,note,channel) end
function this.controlChange(ctx,control,value,channel) return this.Rescomb_controlChange(ctx,control,value,channel) end
function this.init() return this.Rescomb_process_init() end
function this.default(ctx) return this.Rescomb_default(ctx) end
this.config = { inputs = 5, outputs = 1, noteon_inputs = 4, noteoff_inputs = 3, controlchange_inputs = 4, is_active = true }
return this
