#ifndef VOLUME_H
#define VOLUME_H
#include <stdint.h>
#include <math.h>
#include "vultin.h"

typedef struct _ctx_type_0 {
   float x;
} _ctx_type_0;

typedef _ctx_type_0 smooth_type;

_ctx_type_0 _Volume__ctx_type_0_init();

_ctx_type_0 _Volume_smooth_init();

float _Volume_smooth(_ctx_type_0 &_ctx, float input);

typedef struct _ctx_type_1 {
   float volume;
   _ctx_type_0 _inst0;
} _ctx_type_1;

typedef _ctx_type_1 process_type;

_ctx_type_1 _Volume__ctx_type_1_init();

_ctx_type_1 _Volume_process_init();

float _Volume_process(_ctx_type_1 &_ctx, float input);

typedef _ctx_type_1 noteOn_type;

_ctx_type_1 _Volume_noteOn_init();

void _Volume_noteOn(_ctx_type_1 &_ctx, int note, int velocity);

typedef _ctx_type_1 noteOff_type;

_ctx_type_1 _Volume_noteOff_init();

void _Volume_noteOff(_ctx_type_1 &_ctx, int note);

typedef _ctx_type_1 controlChange_type;

_ctx_type_1 _Volume_controlChange_init();

void _Volume_controlChange(_ctx_type_1 &_ctx, int control, int value);

typedef _ctx_type_1 default_type;

_ctx_type_1 _Volume_default_init();

void _Volume_default_(_ctx_type_1 &_ctx);



#endif // VOLUME_H
