
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#ifndef VOLUME_H
#define VOLUME_H
#include <stdint.h>
#include <math.h>
#include "vultin.h"
#include "volume.tables.h"

typedef struct Volume__ctx_type_0 {
   float x;
} Volume__ctx_type_0;

typedef Volume__ctx_type_0 Volume_smooth_type;

static_inline void Volume__ctx_type_0_init(Volume__ctx_type_0 &_output_){
   Volume__ctx_type_0 _ctx;
   _ctx.x = 0.f;
   _output_ = _ctx;
   return ;
}

static_inline void Volume_smooth_init(Volume__ctx_type_0 &_output_){
   Volume__ctx_type_0_init(_output_);
   return ;
}

static_inline float Volume_smooth(Volume__ctx_type_0 &_ctx, float input){
   _ctx.x = (_ctx.x + (0.005f * (input + (- _ctx.x))));
   return _ctx.x;
}

typedef struct Volume__ctx_type_1 {
   float volume;
   Volume__ctx_type_0 _inst2;
} Volume__ctx_type_1;

typedef Volume__ctx_type_1 Volume_process_type;

void Volume__ctx_type_1_init(Volume__ctx_type_1 &_output_);

static_inline void Volume_process_init(Volume__ctx_type_1 &_output_){
   Volume__ctx_type_1_init(_output_);
   return ;
}

static_inline float Volume_process(Volume__ctx_type_1 &_ctx, float input){
   return (input * Volume_smooth(_ctx._inst2,_ctx.volume));
};

typedef Volume__ctx_type_1 Volume_noteOn_type;

static_inline void Volume_noteOn_init(Volume__ctx_type_1 &_output_){
   Volume__ctx_type_1_init(_output_);
   return ;
}

static_inline void Volume_noteOn(Volume__ctx_type_1 &_ctx, int note, int velocity, int channel){
}

typedef Volume__ctx_type_1 Volume_noteOff_type;

static_inline void Volume_noteOff_init(Volume__ctx_type_1 &_output_){
   Volume__ctx_type_1_init(_output_);
   return ;
}

static_inline void Volume_noteOff(Volume__ctx_type_1 &_ctx, int note, int channel){
}

typedef Volume__ctx_type_1 Volume_controlChange_type;

static_inline void Volume_controlChange_init(Volume__ctx_type_1 &_output_){
   Volume__ctx_type_1_init(_output_);
   return ;
}

static_inline void Volume_controlChange(Volume__ctx_type_1 &_ctx, int control, int value, int channel){
   if(control == 30){
      _ctx.volume = (0.0078741f * int_to_float(value));
   }
};

typedef Volume__ctx_type_1 Volume_default_type;

static_inline void Volume_default_init(Volume__ctx_type_1 &_output_){
   Volume__ctx_type_1_init(_output_);
   return ;
}

static_inline void Volume_default(Volume__ctx_type_1 &_ctx){
   _ctx.volume = 0.f;
};



#endif // VOLUME_H
