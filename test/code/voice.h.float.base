
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#ifndef VOICE_H
#define VOICE_H
#include <stdint.h>
#include <math.h>
#include "vultin.h"

float Voice_minFixed();

typedef struct Voice__ctx_type_1 {
   float pre_x;
} Voice__ctx_type_1;

typedef Voice__ctx_type_1 Voice_change_type;

void Voice__ctx_type_1_init(Voice__ctx_type_1 &_output_);

void Voice_change_init(Voice__ctx_type_1 &_output_);

uint8_t Voice_change(Voice__ctx_type_1 &_ctx, float x);

typedef struct Voice__ctx_type_2 {
   uint8_t pre_x;
} Voice__ctx_type_2;

typedef Voice__ctx_type_2 Voice_bchange_type;

void Voice__ctx_type_2_init(Voice__ctx_type_2 &_output_);

void Voice_bchange_init(Voice__ctx_type_2 &_output_);

uint8_t Voice_bchange(Voice__ctx_type_2 &_ctx, uint8_t x);

typedef struct Voice__ctx_type_3 {
   uint8_t pre_x;
} Voice__ctx_type_3;

typedef Voice__ctx_type_3 Voice_edge_type;

void Voice__ctx_type_3_init(Voice__ctx_type_3 &_output_);

void Voice_edge_init(Voice__ctx_type_3 &_output_);

uint8_t Voice_edge(Voice__ctx_type_3 &_ctx, uint8_t x);

typedef struct Voice__ctx_type_4 {
   int count;
} Voice__ctx_type_4;

typedef Voice__ctx_type_4 Voice_each_type;

void Voice__ctx_type_4_init(Voice__ctx_type_4 &_output_);

void Voice_each_init(Voice__ctx_type_4 &_output_);

uint8_t Voice_each(Voice__ctx_type_4 &_ctx, int n);

uint8_t Voice_near_zero(float x);

typedef struct Voice__ctx_type_6 {
   float y1;
   float x1;
} Voice__ctx_type_6;

typedef Voice__ctx_type_6 Voice_dcblock_type;

void Voice__ctx_type_6_init(Voice__ctx_type_6 &_output_);

void Voice_dcblock_init(Voice__ctx_type_6 &_output_);

float Voice_dcblock(Voice__ctx_type_6 &_ctx, float x0);

typedef struct Voice__ctx_type_7 {
   float pre_x;
} Voice__ctx_type_7;

typedef Voice__ctx_type_7 Voice_lpfilter_type;

void Voice__ctx_type_7_init(Voice__ctx_type_7 &_output_);

void Voice_lpfilter_init(Voice__ctx_type_7 &_output_);

float Voice_lpfilter(Voice__ctx_type_7 &_ctx, float x);

float Voice_pitchToRate(float d);

float Voice_pulse_train(float m, float phase);

typedef struct Voice__ctx_type_10 {
   float state_triang;
   float state_saw;
   float state_pulse;
   float rate;
   float phase;
   float output;
   float m;
   Voice__ctx_type_6 _inst23;
   Voice__ctx_type_1 _inst15;
} Voice__ctx_type_10;

typedef Voice__ctx_type_10 Voice_osc_type;

void Voice__ctx_type_10_init(Voice__ctx_type_10 &_output_);

void Voice_osc_init(Voice__ctx_type_10 &_output_);

float Voice_osc(Voice__ctx_type_10 &_ctx, float pitch, float pw, float wave);

typedef struct Voice__ctx_type_11 {
   float dlow;
   float dband;
} Voice__ctx_type_11;

typedef Voice__ctx_type_11 Voice_svf_step_type;

void Voice__ctx_type_11_init(Voice__ctx_type_11 &_output_);

void Voice_svf_step_init(Voice__ctx_type_11 &_output_);

float Voice_svf_step(Voice__ctx_type_11 &_ctx, float input, float g, float q, int sel);

typedef struct Voice__ctx_type_12 {
   Voice__ctx_type_11 step;
   float g;
   Voice__ctx_type_1 _inst26;
} Voice__ctx_type_12;

typedef Voice__ctx_type_12 Voice_svf_type;

void Voice__ctx_type_12_init(Voice__ctx_type_12 &_output_);

void Voice_svf_init(Voice__ctx_type_12 &_output_);

float Voice_svf(Voice__ctx_type_12 &_ctx, float input, float fc, float q, int sel);

typedef struct Voice__ctx_type_13 {
   float target;
   int state;
   float rate;
   float out;
} Voice__ctx_type_13;

typedef Voice__ctx_type_13 Voice_adsr_type;

void Voice__ctx_type_13_init(Voice__ctx_type_13 &_output_);

void Voice_adsr_init(Voice__ctx_type_13 &_output_);

float Voice_adsr(Voice__ctx_type_13 &_ctx, uint8_t gate, float a, float d, float s, float r);

typedef struct Voice__ctx_type_14 {
   float phase;
   Voice__ctx_type_4 _inst39;
   Voice__ctx_type_3 _inst37;
} Voice__ctx_type_14;

typedef Voice__ctx_type_14 Voice_lfo_type;

void Voice__ctx_type_14_init(Voice__ctx_type_14 &_output_);

void Voice_lfo_init(Voice__ctx_type_14 &_output_);

float Voice_lfo(Voice__ctx_type_14 &_ctx, float f, uint8_t gate);

typedef struct Voice__ctx_type_15 {
   int pre;
   int n4;
   int n3;
   int n2;
   int n1;
   int count;
} Voice__ctx_type_15;

typedef Voice__ctx_type_15 Voice_mono_noteOn_type;

void Voice__ctx_type_15_init(Voice__ctx_type_15 &_output_);

void Voice_mono_noteOn_init(Voice__ctx_type_15 &_output_);

int Voice_mono_noteOn(Voice__ctx_type_15 &_ctx, int n);

typedef Voice__ctx_type_15 Voice_mono_noteOff_type;

void Voice_mono_noteOff_init(Voice__ctx_type_15 &_output_);

int Voice_mono_noteOff(Voice__ctx_type_15 &_ctx, int n);

typedef Voice__ctx_type_15 Voice_mono_isGateOn_type;

void Voice_mono_isGateOn_init(Voice__ctx_type_15 &_output_);

uint8_t Voice_mono_isGateOn(Voice__ctx_type_15 &_ctx);

typedef struct Voice__ctx_type_16 {
   float wave;
   float res;
   float pw;
   float pitch;
   Voice__ctx_type_15 monoin;
   float lfo_rate;
   float lfo_amt;
   float flt_atm;
   float env_s;
   float env_r;
   float env_d;
   float env_a;
   float end_r;
   float cut;
   float amp_s;
   float amp_r;
   float amp_d;
   float amp_a;
   Voice__ctx_type_12 _inst70;
   Voice__ctx_type_13 _inst69;
   Voice__ctx_type_13 _inst68;
   Voice__ctx_type_10 _inst67;
   Voice__ctx_type_14 _inst66;
} Voice__ctx_type_16;

typedef Voice__ctx_type_16 Voice_process_type;

void Voice__ctx_type_16_init(Voice__ctx_type_16 &_output_);

void Voice_process_init(Voice__ctx_type_16 &_output_);

float Voice_process(Voice__ctx_type_16 &_ctx, float i);

typedef Voice__ctx_type_16 Voice_noteOn_type;

void Voice_noteOn_init(Voice__ctx_type_16 &_output_);

void Voice_noteOn(Voice__ctx_type_16 &_ctx, int note, int velocity, int channel);

typedef Voice__ctx_type_16 Voice_noteOff_type;

void Voice_noteOff_init(Voice__ctx_type_16 &_output_);

void Voice_noteOff(Voice__ctx_type_16 &_ctx, int note, int channel);

typedef Voice__ctx_type_16 Voice_controlChange_type;

void Voice_controlChange_init(Voice__ctx_type_16 &_output_);

void Voice_controlChange(Voice__ctx_type_16 &_ctx, int control, int value, int channel);

typedef Voice__ctx_type_16 Voice_default_type;

void Voice_default_init(Voice__ctx_type_16 &_output_);

void Voice_default(Voice__ctx_type_16 &_ctx);



#endif // VOICE_H
