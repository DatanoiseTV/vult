
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#include "ahr.h"

void Util__ctx_type_3_init(Util__ctx_type_3 &_output_){
   Util__ctx_type_3 _ctx;
   _ctx.y1 = 0x0 /* 0.000000 */;
   _ctx.x1 = 0x0 /* 0.000000 */;
   _output_ = _ctx;
   return ;
}

fix16_t Util_dcblock(Util__ctx_type_3 &_ctx, fix16_t x0){
   fix16_t y0;
   y0 = (x0 + (- _ctx.x1) + fix_mul(0xfeb8 /* 0.995000 */,_ctx.y1));
   _ctx.x1 = x0;
   _ctx.y1 = y0;
   return y0;
}

void Ahr__ctx_type_0_init(Ahr__ctx_type_0 &_output_){
   Ahr__ctx_type_0 _ctx;
   _ctx.target = 0x0 /* 0.000000 */;
   _ctx.state = 0;
   _ctx.rate = 0x0 /* 0.000000 */;
   _ctx.out = 0x0 /* 0.000000 */;
   _ctx.hold_phase = 0x0 /* 0.000000 */;
   _ctx.do_ret_1 = 0x0 /* 0.000000 */;
   _ctx.do_ret_0 = 0x0 /* 0.000000 */;
   Util__ctx_type_0_init(_ctx._inst351);
   Util__ctx_type_0_init(_ctx._inst151);
   _output_ = _ctx;
   return ;
}

void Ahr_do(Ahr__ctx_type_0 &_ctx, fix16_t gate, fix16_t a, fix16_t h, fix16_t r){
   int release;
   release = 0;
   int attack;
   attack = 1;
   int hold;
   hold = 2;
   int reset;
   reset = 3;
   uint8_t bgate;
   bgate = (gate > 0x0 /* 0.000000 */);
   if(Util_edge(_ctx._inst151,bgate)){
      _ctx.state = reset;
   }
   fix16_t resetting;
   if(_ctx.state == reset){
      resetting = 0x10000 /* 1.000000 */;
   }
   else
   {
      resetting = 0x0 /* 0.000000 */;
   }
   if(Util_edge(_ctx._inst351,(_ctx.out > 0x4000000 /* 1024.000000 */))){
      _ctx.hold_phase = 0x0 /* 0.000000 */;
      _ctx.state = hold;
   }
   if((_ctx.out < 0xa0000 /* 10.000000 */) && (_ctx.state == reset)){
      _ctx.state = attack;
   }
   if((_ctx.hold_phase > 0x640000 /* 100.000000 */) && (_ctx.state == hold)){
      _ctx.state = release;
   }
   if(_ctx.state == reset){
      _ctx.rate = 0xfd77 /* 0.990099 */;
      _ctx.target = 0x0 /* 0.000000 */;
   }
   if(_ctx.state == attack){
      _ctx.rate = fix_div(0x10000 /* 1.000000 */,(0x28f /* 0.010000 */ + fix_mul(0x640000 /* 100.000000 */,a)));
      _ctx.target = 0x4cccccc /* 1228.800000 */;
   }
   if(_ctx.state == hold){
      fix16_t hrate;
      hrate = fix_div(0x10000 /* 1.000000 */,(0x28f /* 0.010000 */ + fix_mul(0x640000 /* 100.000000 */,h)));
      _ctx.hold_phase = (_ctx.hold_phase + hrate);
   }
   if(_ctx.state == release){
      _ctx.rate = fix_div(0x10000 /* 1.000000 */,(0x28f /* 0.010000 */ + fix_mul(0x640000 /* 100.000000 */,r)));
      _ctx.target = 0x0 /* 0.000000 */;
   }
   _ctx.out = (_ctx.out + fix_mul(fix_mul(0x147 /* 0.005000 */,_ctx.rate),(_ctx.target + (- _ctx.out))));
   _ctx.do_ret_0 = fix_clip((_ctx.out >> 10),0x0 /* 0.000000 */,0x10000 /* 1.000000 */);
   _ctx.do_ret_1 = resetting;
   return ;
}

void Ahr__ctx_type_1_init(Ahr__ctx_type_1 &_output_){
   Ahr__ctx_type_1 _ctx;
   _ctx.process_ret_1 = 0x0 /* 0.000000 */;
   _ctx.process_ret_0 = 0x0 /* 0.000000 */;
   _ctx.knob3 = 0x0 /* 0.000000 */;
   _ctx.knob2 = 0x0 /* 0.000000 */;
   _ctx.knob1 = 0x0 /* 0.000000 */;
   Ahr__ctx_type_0_init(_ctx._inst147);
   _output_ = _ctx;
   return ;
}

void Ahr_controlChange(Ahr__ctx_type_1 &_ctx, int control, int value, int channel){
   if(control == 1){
      _ctx.knob1 = fix_mul(0x204 /* 0.007874 */,int_to_fix(value));
   }
   if(control == 2){
      _ctx.knob2 = fix_mul(0x204 /* 0.007874 */,int_to_fix(value));
   }
   if(control == 3){
      _ctx.knob3 = fix_mul(0x204 /* 0.007874 */,int_to_fix(value));
   }
}


