

local this = {}
function this.ternary(cond,then_,else_) if cond then return then_() else return else_() end end
function this.ternary_value(cond,then_,else_) if cond then return then_ else return else_ end end
function this.eps()              return 1e-18; end
function this.pi()               return 3.1415926535897932384; end
function this.random()           return math.random(); end
function this.irandom()          return math.floor(math.random() * 4294967296); end
function this.clip(x,low,high)   return (this.ternary_value(x<low, low, this.ternary_value(x>high, high, x))); end
function this.real(x)            return x; end
function this.int(x)             local int_part,_ = math.modf(x) return int_part; end
function this.sin(x)             return math.sin(x); end
function this.cos(x)             return math.cos(x); end
function this.abs(x)             return math.abs(x); end
function this.exp(x)             return math.exp(x); end
function this.floor(x)           return math.floor(x); end
function this.tan(x)             return math.tan(x); end
function this.tanh(x)            return math.tanh(x); end
function this.sqrt(x)            return x; end
function this.set(a, i, v)       a[i+1]=v; end
function this.get(a, i)          return a[i+1]; end
function this.makeArray(size, v) local a = {}; for i=1,size do a[i]=v end return a; end
function this.wrap_array(a)      return a; end
this.bit = bit

function this.Array_defined_type_dot_init()
   local _ctx = {}; 
   _ctx.y = 0.; 
   _ctx.x = 0.; 
   return _ctx; 

end

function this.Array_defined_type__ctx_type_0_init()
   local _ctx = {}; 
   _ctx.p1 = this.makeArray(12,this.Array_defined_type_dot_init()); 
   return _ctx; 

end

function this.Array_defined_type_foo_init()
   return this.Array_defined_type__ctx_type_0_init(); 
end

function this.Array_defined_type_foo(_ctx)

end

function this.Array_defined_type__ctx_type_1_init()
   local _ctx = {}; 
   _ctx._inst1b1 = this.Array_defined_type__ctx_type_0_init(); 
   return _ctx; 

end

function this.Array_defined_type_process_init()
   return this.Array_defined_type__ctx_type_1_init(); 
end

function this.Array_defined_type_process(_ctx,input)
   this.Array_defined_type_foo(_ctx._inst1b1);
   return input; 

end

function this.Array_defined_type_noteOn_init()
   return this.Array_defined_type__ctx_type_1_init(); 
end

function this.Array_defined_type_noteOn(_ctx,note,velocity,channel)

end

function this.Array_defined_type_noteOff_init()
   return this.Array_defined_type__ctx_type_1_init(); 
end

function this.Array_defined_type_noteOff(_ctx,note,channel)

end

function this.Array_defined_type_controlChange_init()
   return this.Array_defined_type__ctx_type_1_init(); 
end

function this.Array_defined_type_controlChange(_ctx,control,value,channel)

end

function this.Array_defined_type_default_init()
   return this.Array_defined_type__ctx_type_1_init(); 
end

function this.Array_defined_type_default(_ctx)

end


function this.process(ctx,input) return this.Array_defined_type_process(ctx,input) end
function this.noteOn(ctx,note,velocity,channel) return this.Array_defined_type_noteOn(ctx,note,velocity,channel) end
function this.noteOff(ctx,note,channel) return this.Array_defined_type_noteOff(ctx,note,channel) end
function this.controlChange(ctx,control,value,channel) return this.Array_defined_type_controlChange(ctx,control,value,channel) end
function this.init() return this.Array_defined_type_process_init() end
function this.default(ctx) return this.Array_defined_type_default(ctx) end
this.config = { inputs = 2, outputs = 1, noteon_inputs = 4, noteoff_inputs = 3, controlchange_inputs = 4, is_active = true }
return this
