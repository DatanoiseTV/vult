
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#include "volume.h"

void Volume__ctx_type_0_init(Volume__ctx_type_0 &_output_){
   Volume__ctx_type_0 _ctx;
   _ctx.x = 0x0 /* 0.000000 */;
   _output_ = _ctx;
   return ;
}

void Volume_smooth_init(Volume__ctx_type_0 &_output_){
   Volume__ctx_type_0_init(_output_);
   return ;
}

fix16_t Volume_smooth(Volume__ctx_type_0 &_ctx, fix16_t input){
   _ctx.x = (_ctx.x + fix_mul((input + (- _ctx.x)),0x147 /* 0.005000 */));
   return _ctx.x;
}

void Volume__ctx_type_1_init(Volume__ctx_type_1 &_output_){
   Volume__ctx_type_1 _ctx;
   _ctx.volume = 0x0 /* 0.000000 */;
   Volume__ctx_type_0_init(_ctx._inst2);
   _output_ = _ctx;
   return ;
}

void Volume_process_init(Volume__ctx_type_1 &_output_){
   Volume__ctx_type_1_init(_output_);
   return ;
}

fix16_t Volume_process(Volume__ctx_type_1 &_ctx, fix16_t input){
   return fix_mul(input,Volume_smooth(_ctx._inst2,_ctx.volume));
}

void Volume_noteOn_init(Volume__ctx_type_1 &_output_){
   Volume__ctx_type_1_init(_output_);
   return ;
}

void Volume_noteOn(Volume__ctx_type_1 &_ctx, int note, int velocity, int channel){
}

void Volume_noteOff_init(Volume__ctx_type_1 &_output_){
   Volume__ctx_type_1_init(_output_);
   return ;
}

void Volume_noteOff(Volume__ctx_type_1 &_ctx, int note, int channel){
}

void Volume_controlChange_init(Volume__ctx_type_1 &_output_){
   Volume__ctx_type_1_init(_output_);
   return ;
}

void Volume_controlChange(Volume__ctx_type_1 &_ctx, int control, int value, int channel){
   uint8_t _cond_8;
   _cond_8 = (control == 30);
   if(_cond_8){
      _ctx.volume = fix_mul(int_to_fix(value),0x1ff /* 0.007800 */);
   }
}

void Volume_default_init(Volume__ctx_type_1 &_output_){
   Volume__ctx_type_1_init(_output_);
   return ;
}

void Volume_default(Volume__ctx_type_1 &_ctx){
   _ctx.volume = 0x0 /* 0.000000 */;
}


