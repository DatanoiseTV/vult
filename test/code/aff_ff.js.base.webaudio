
(function(audioContext) {
   var code = function () {
       // Vult runtime functions
            this.random = function()         { return Math.random(); };
            this.irandom = function()        { return Math.floor(Math.random() * 4294967296); };
            this.eps  = function()           { return 1e-18 };
            this.pi   = function()           { return 3.1415926535897932384; }
            this.clip = function(x,low,high) { return x<low?low:(x>high?high:x); };
            this.not  = function(x)          { return x==0?1:0; };
            this.real = function(x)          { return x; };
            this.int  = function(x)          { return x|0; };
            this.sin  = function(x)          { return Math.sin(x); };
            this.cos  = function(x)          { return Math.cos(x); };
            this.abs  = function(x)          { return Math.abs(x); };
            this.exp  = function(x)          { return Math.exp(x); };
            this.floor= function(x)          { return Math.floor(x); };
            this.tan  = function(x)          { return Math.tan(x); };
            this.tanh = function(x)          { return Math.tanh(x); };
            this.sqrt = function(x)          { return x; };
            this.set  = function(a,i,v)      { a[i]=v; };
            this.get  = function(a,i)        { return a[i]; };
            this.int_to_float = function(i){ return i; };
            this.float_to_int = function(i){ return Math.floor(i); };
            this.makeArray = function(size,v){ var a = new Array(size); for(var i=0;i<size;i++) a[i]=v; return a; };
            this.wrap_array = function(a) { return a; }
            this.log = function(x) { console.log(x); }
         
      this.Aff_ff__ctx_type_0_init = function(){
   var _ctx = {};
   _ctx.x = ((0|0)|0);
   return _ctx;
}
this.Aff_ff_process_init = function() { return this.Aff_ff__ctx_type_0_init();}
this.Aff_ff_process = function(_ctx,a,b){
   _ctx.x = ((_ctx.x + (1|0))|0);
   var _tuple_5 = { field_0 : (a + b), field_1 : (a + (- b)) };
   return _tuple_5;
}
this.Aff_ff_noteOn_init = function() { return this.Aff_ff__ctx_type_0_init();}
this.Aff_ff_noteOn = function(_ctx,note,velocity,channel){
}
this.Aff_ff_noteOff_init = function() { return this.Aff_ff__ctx_type_0_init();}
this.Aff_ff_noteOff = function(_ctx,note,channel){
}
this.Aff_ff_controlChange_init = function() { return this.Aff_ff__ctx_type_0_init();}
this.Aff_ff_controlChange = function(_ctx,control,value,channel){
}
this.Aff_ff_default_init = function() { return this.Aff_ff__ctx_type_0_init();}
this.Aff_ff_default = function(_ctx){
}

      this.context = this.Aff_ff_process_init();
      };
   var processor = new code ();
   processor.Aff_ff_default(processor.context);
   var node = audioContext.createScriptProcessor(0, 2, 2);
   node.inputs = 2;
   node.outputs = 2;
   node.onaudioprocess = function (e) {

   var in_0 = e.inputBuffer.getChannelData(0);
   var in_1 = e.inputBuffer.getChannelData(1);

   var out_0 = e.outputBuffer.getChannelData(0);
   var out_1 = e.outputBuffer.getChannelData(1);

   for (var n = 0; n < e.inputBuffer.length; n++) {
             var ret = processor.Aff_ff_process(processor.context,in_0[n],in_1[n],ret);
   out_0[n] = ret.field_0;
   out_1[n] = ret.field_1;
    
   }
   }

   node.noteOn = function(note, velocity, channel){
      if(velocity > 0) processor.Aff_ff_noteOn(processor.context,note,velocity,channel);
      else processor.Aff_ff_noteOff(processor.context,note,channel);
   }

   node.noteOff = function(note, channel) {
      processor.Aff_ff_noteOff(processor.context,note,channel);
   }

   node.controlChange = function(control,value,channel) {
      processor.Aff_ff_controlChange(processor.context,control,value,channel);
   }

   return node;
   })
