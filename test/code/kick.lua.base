
local this = {}
local ffi = require("ffi")
function this.ternary(cond,then_,else_) if cond then return then_ else return else_ end end
function this.eps()             return 1e-18; end
function this.random()          return math.random(); end
function this.irandom()         return math.floor(math.random() * 4294967296); end
function this.clip(x,low,high)  return (this.ternary(x<low,low,this.ternary(x>high,high,x))); end
function this.real(x)           return x; end
function this.int(x)            local int_part,_ = math.modf(x) return int_part; end
function this.sin(x)            return math.sin(x); end
function this.cos(x)            return math.cos(x); end
function this.abs(x)            return math.abs(x); end
function this.exp(x)            return math.exp(x); end
function this.floor(x)          return math.floor(x); end
function this.tan(x)            return math.tan(x); end
function this.tanh(x)           return math.tanh(x); end
function this.sqrt(x)           return x; end
function this.set(a,i,v)        a[i]=v; end
function this.get(a,i)          return a[i]; end
function this.makeArray(size,v) local a = ffi.new("double[?]",size); for i=0,size-1 do a[i]=v end return a; end
function this.wrap_array(a)     return a; end
function this.Noise__ctx_type_0_init()
   local _ctx = {};
   _ctx.w1 = 0.000000;
   return _ctx;

end

function this.Noise_pinker_init()
   return this.Noise__ctx_type_0_init();
end

function this.Noise_pinker(_ctx,x)
   local b0 = 0.027713;
   local b1 = 0.027713;
   local a1 = (-0.944574);
   local w0 = (x + (- (a1 * _ctx.w1)));
   local y0 = ((b0 * w0) + (b1 * _ctx.w1));
   _ctx.w1 = w0;
   return y0;

end

function this.Noise__ctx_type_1_init()
   local _ctx = {};
   _ctx.x2 = 0;
   _ctx.x1 = 0;
   _ctx._inst2 = this.Noise__ctx_type_0_init();
   return _ctx;

end

function this.Noise_process_init()
   return this.Noise__ctx_type_1_init();
end

function this.Noise_process(_ctx,color)
   _ctx.x1 = (((_ctx.x1 * 17389) + 7919) % 32768);
   local y1 = (this.real(_ctx.x1) * 0.000031);
   _ctx.x2 = (((_ctx.x2 * 27449) + 12553) % 32768);
   local y2 = (this.real(_ctx.x2) * 0.000031);
   local out = 0.0;
   if (color > 0.500000) then
      out = this.Noise_pinker(_ctx._inst2,(y1 + (- y2)));
   else

      out = (y1 + (- y2));
   end
   return (2.000000 * out);

end

function this.Noise_noteOn_init()
   return this.Noise__ctx_type_1_init();
end

function this.Noise_noteOn(_ctx,note,velocity,channel)

end

function this.Noise_noteOff_init()
   return this.Noise__ctx_type_1_init();
end

function this.Noise_noteOff(_ctx,note,channel)

end

function this.Noise_controlChange_init()
   return this.Noise__ctx_type_1_init();
end

function this.Noise_controlChange(_ctx,control,value,channel)

end

function this.Noise_default_init()
   return this.Noise__ctx_type_1_init();
end

function this.Noise_default(_ctx)

end

function this.Util__ctx_type_0_init()
   local _ctx = {};
   _ctx.pre = false;
   return _ctx;

end

function this.Util_edge_init()
   return this.Util__ctx_type_0_init();
end

function this.Util_edge(_ctx,x)
   local ret = (x and (not _ctx.pre));
   _ctx.pre = x;
   return ret;

end

function this.Util__ctx_type_1_init()
   local _ctx = {};
   _ctx.pre_x = 0.000000;
   return _ctx;

end

function this.Util_change_init()
   return this.Util__ctx_type_1_init();
end

function this.Util_change(_ctx,x)
   local v = (_ctx.pre_x ~= x);
   _ctx.pre_x = x;
   return v;

end

function this.Util_map(x,x0,x1,y0,y1)
   return ((((x + (- x0)) * (y1 + (- y0))) / (x1 + (- x0))) + y0);

end

function this.Util__ctx_type_3_init()
   local _ctx = {};
   _ctx.y1 = 0.000000;
   _ctx.x1 = 0.000000;
   return _ctx;

end

function this.Util_dcblock_init()
   return this.Util__ctx_type_3_init();
end

function this.Util_dcblock(_ctx,x0)
   local y0 = (x0 + (- _ctx.x1) + (_ctx.y1 * 0.995000));
   _ctx.x1 = x0;
   _ctx.y1 = y0;
   return y0;

end

function this.Util__ctx_type_4_init()
   local _ctx = {};
   _ctx.x = 0.000000;
   return _ctx;

end

function this.Util_smooth_init()
   return this.Util__ctx_type_4_init();
end

function this.Util_smooth(_ctx,input)
   _ctx.x = (_ctx.x + ((input + (- _ctx.x)) * 0.005000));
   return _ctx.x;

end

function this.Util__ctx_type_5_init()
   local _ctx = {};
   _ctx.x0 = 0.000000;
   return _ctx;

end

function this.Util_average2_init()
   return this.Util__ctx_type_5_init();
end

function this.Util_average2(_ctx,x1)
   local result = ((_ctx.x0 + x1) * 0.500000);
   _ctx.x0 = x1;
   return result;

end

local Util_pitchToRate_c0 = ffi.new("double[33]", {0.189842,0.191326,0.198689,0.219425,0.265677,0.356438,0.520651,0.801560,1.262758,1.996562,3.135544,4.868347,7.461281,11.287715,16.867996,24.923305,36.448521,52.809903,75.876616,108.197225,153.232414,215.672344,301.846626,420.298038,582.505178,803.812129,1104.880165,1513.124126,2065.373952,2810.230550,3812.902888,5159.525580,6963.761469});
local Util_pitchToRate_c1 = ffi.new("double[33]", {0.010913,0.010176,0.008334,0.004867,(-0.000939),(-0.010061),(-0.023820),(-0.044002),(-0.073002),(-0.114025),(-0.171341),(-0.250621),(-0.359381),(-0.507548),(-0.708208),(-0.978575),(-1.341250),(-1.825848),(-2.471123),(-3.327721),(-4.461658),(-5.959006),(-7.931626),(-10.525312),(-13.929212),(-18.387588),(-24.219785),(-31.835151),(-41.769557),(-54.706455),(-71.541226),(-93.422592),(-121.823163)});
local Util_pitchToRate_c2 = ffi.new("double[33]", {0.000356,0.000447,0.000562,0.000707,0.000889,0.001119,0.001407,0.001769,0.002225,0.002799,0.003520,0.004426,0.005567,0.007001,0.008805,0.011074,0.013927,0.017515,0.022028,0.027704,0.034841,0.043818,0.055107,0.069305,0.087163,0.109617,0.137862,0.173377,0.218054,0.274227,0.344892,0.433780,0.545543});
function this.Util_pitchToRate(pitch)
   local index = this.clip(this.int((0.244094 * pitch)),0,31);
   return (this.get(this.wrap_array(Util_pitchToRate_c0),index) + (pitch * (this.get(this.wrap_array(Util_pitchToRate_c1),index) + (this.get(this.wrap_array(Util_pitchToRate_c2),index) * pitch))));

end

function this.Util_cvToPitch(cv)
   return ((cv * 120.000000) + 24.000000);

end

local Util_cvToRate_c0 = ffi.new("double[33]", {0.759367,0.762877,0.779737,0.825652,0.924648,1.112398,1.440687,1.983392,2.844434,4.168310,6.153994,9.073195,13.294301,19.313616,27.796102,39.628290,55.986657,78.426750,108.998215,150.387464,206.118533,280.781675,380.357513,512.612775,687.616764,918.349028,1221.607949,1619.052235,2138.629322,2815.436671,3696.162408,4838.694117,6318.211520});
local Util_cvToRate_c1 = ffi.new("double[33]", {5.245583,4.998943,4.403089,3.319116,1.564497,(-1.099256),(-4.982226),(-10.485864),(-18.127956),(-28.574100),(-42.677360),(-61.528124),(-86.516770),(-119.412133),(-162.460318),(-218.508269),(-291.156786),(-384.956978),(-505.652297),(-660.458539),(-858.494950),(-1111.173376),(-1432.858445),(-1841.544459),(-2359.816046),(-3015.795467),(-3844.838138),(-4891.101919),(-6210.197274),(-7868.993868),(-9955.778008),(-12575.747874),(-15862.234621)});
local Util_cvToRate_c2 = ffi.new("double[33]", {20.125592,24.457572,29.722000,36.119582,43.894227,53.342343,64.824143,78.777366,95.733987,116.340471,141.382451,171.814646,208.797363,253.740413,308.357211,374.730622,455.389632,553.410816,672.536916,817.290611,993.216833,1207.000622,1466.803875,1782.529271,2166.244997,2632.487590,3199.072620,3887.673024,4724.859179,5741.245302,6977.441755,8479.290028,10304.455486});
function this.Util_cvToRate(cv)
   local index = this.clip(this.int((34.444444 * cv)),0,31);
   return (this.get(this.wrap_array(Util_cvToRate_c0),index) + (cv * (this.get(this.wrap_array(Util_cvToRate_c1),index) + (this.get(this.wrap_array(Util_cvToRate_c2),index) * cv))));

end

function this.Util_pitchToCv(pitch)
   return (0.008333 * ((-24.000000) + pitch));

end

local Util_cvToRate_unit_c0 = ffi.new("double[33]", {0.000742,0.000745,0.000761,0.000806,0.000903,0.001086,0.001407,0.001937,0.002778,0.004071,0.006010,0.008861,0.012983,0.018861,0.027145,0.038700,0.054674,0.076589,0.106444,0.146863,0.201288,0.274201,0.371443,0.500598,0.671501,0.896825,1.192977,1.581106,2.088505,2.749450,3.609534,4.725287,6.170128});
local Util_cvToRate_unit_c1 = ffi.new("double[33]", {0.005123,0.004882,0.004300,0.003241,0.001528,(-0.001073),(-0.004865),(-0.010240),(-0.017703),(-0.027904),(-0.041677),(-0.060086),(-0.084489),(-0.116613),(-0.158653),(-0.213387),(-0.284333),(-0.375935),(-0.493801),(-0.644979),(-0.838374),(-1.085130),(-1.399276),(-1.798383),(-2.304508),(-2.945113),(-3.754725),(-4.776467),(-6.064646),(-7.684564),(-9.722439),(-12.281004),(-15.490463)});
local Util_cvToRate_unit_c2 = ffi.new("double[33]", {0.019654,0.023884,0.029025,0.035273,0.042865,0.052092,0.063305,0.076931,0.093490,0.113614,0.138069,0.167788,0.203904,0.247793,0.301130,0.365948,0.444716,0.540440,0.656774,0.798135,0.969938,1.178712,1.432426,1.740751,2.115474,2.570789,3.124094,3.796556,4.614120,5.606685,6.813908,8.280557,10.062945});
function this.Util_cvToRate_unit(cv)
   local index = this.clip(this.int((34.444444 * cv)),0,31);
   return (this.get(this.wrap_array(Util_cvToRate_unit_c0),index) + (cv * (this.get(this.wrap_array(Util_cvToRate_unit_c1),index) + (this.get(this.wrap_array(Util_cvToRate_unit_c2),index) * cv))));

end

function this.Tricore__ctx_type_0_init()
   local _ctx = {};
   _ctx.reset_state = false;
   _ctx.reset_phase = 0.000000;
   _ctx.rate = 0.000000;
   _ctx.phase = 0.000000;
   _ctx.direction = false;
   _ctx._inst24 = this.Util__ctx_type_0_init();
   _ctx._inst23 = this.Util__ctx_type_0_init();
   _ctx._inst21 = this.Util__ctx_type_1_init();
   this.Tricore_default(_ctx);
   return _ctx;

end

function this.Tricore_process_init()
   return this.Tricore__ctx_type_0_init();
end

function this.Tricore_process(_ctx,cv,reset,disable)
   local out = 0.000000;
   if this.Util_change(_ctx._inst21,cv) then
      _ctx.rate = (4.000000 * this.Util_cvToRate(cv));

   end
   local new_phase = 0.0;
   local _if_37 = 0.0;
   if _ctx.direction then
      _if_37 = _ctx.rate;
   else

      _if_37 = (- _ctx.rate);
   end
   new_phase = (_ctx.phase + _if_37);
   local bdisable = (disable > 0.500000);
   if (this.Util_edge(_ctx._inst23,(reset > 0.000000)) or this.Util_edge(_ctx._inst24,bdisable)) then
      _ctx.reset_phase = _ctx.phase;
      _ctx.reset_state = true;
      new_phase = 0.000000;

   end
   if (new_phase > 1024.000000) then
      new_phase = (1024.000000 + (- (new_phase + (-1024.000000))));
      _ctx.direction = false;

   else

      local _cond_39 = false;
      _cond_39 = (new_phase < (-1024.000000));
      if _cond_39 then
         _ctx.direction = true;
         new_phase = new_phase;

      end

   end
   if bdisable then
      _ctx.phase = 0.000000;
   else

      _ctx.phase = new_phase;
   end
   if _ctx.reset_state then
      local _cond_42 = false;
      _cond_42 = ((this.abs(_ctx.reset_phase) > 10.000000) or bdisable);
      if _cond_42 then
         local reset_speed = 0.0;
         if bdisable then
            reset_speed = 0.010000;
         else

            reset_speed = 0.500000;
         end
         _ctx.reset_phase = (_ctx.reset_phase + (- (_ctx.reset_phase * reset_speed)));

      else

         local _cond_41 = false;
         _cond_41 = (_ctx.reset_phase > 10.000000);
         if _cond_41 then
            _ctx.reset_phase = _ctx.reset_phase;
         else

            _ctx.reset_phase = 0.000000;
         end
         _ctx.reset_state = false;
         _ctx.direction = true;

      end
      out = _ctx.reset_phase;

   end
   out = (out + _ctx.phase);
   return (out * 0.000977);

end

function this.Tricore_noteOn_init()
   return this.Tricore__ctx_type_0_init();
end

function this.Tricore_noteOn(_ctx,note,velocity,channel)

end

function this.Tricore_noteOff_init()
   return this.Tricore__ctx_type_0_init();
end

function this.Tricore_noteOff(_ctx,note,channel)

end

function this.Tricore_controlChange_init()
   return this.Tricore__ctx_type_0_init();
end

function this.Tricore_controlChange(_ctx,control,value,channel)

end

function this.Tricore_default_init()
   return this.Tricore__ctx_type_0_init();
end

function this.Tricore_default(_ctx)
   _ctx.rate = 0.759367;

end

function this.Swept__ctx_type_0_init()
   local _ctx = {};
   _ctx.out = 0.000000;
   _ctx._inst44 = this.Util__ctx_type_0_init();
   return _ctx;

end

function this.Swept_process_init()
   return this.Swept__ctx_type_0_init();
end

function this.Swept_process(_ctx,gate,start,end_,rate)
   local a_rate = (1.000000 / ((100.000000 * rate) + 0.010000));
   local bgate = (gate > 0.500000);
   _ctx.out = (_ctx.out + (((end_ * 1024.000000) + (- _ctx.out)) * rate * 0.004000));
   if this.Util_edge(_ctx._inst44,bgate) then
      _ctx.out = (start * 1024.000000);

   end
   return (_ctx.out * 0.000977);

end

function this.Swept_noteOn_init()
   return this.Swept__ctx_type_0_init();
end

function this.Swept_noteOn(_ctx,note,velocity,channel)

end

function this.Swept_noteOff_init()
   return this.Swept__ctx_type_0_init();
end

function this.Swept_noteOff(_ctx,note,channel)

end

function this.Swept_controlChange_init()
   return this.Swept__ctx_type_0_init();
end

function this.Swept_controlChange(_ctx,control,value,channel)

end

function this.Swept_default_init()
   return this.Swept__ctx_type_0_init();
end

function this.Swept_default(_ctx)

end

local Saturate_table_c0 = ffi.new("double[11]", {0.000000,(-0.007122),0.249321,0.586047,0.806743,0.917595,0.966766,0.987103,0.995137,0.998208,0.999352});
local Saturate_table_c1 = ffi.new("double[11]", {1.047001,1.113257,0.685850,0.304651,0.117525,0.042540,0.014886,0.005099,0.001720,0.000574,0.000189});
local Saturate_table_c2 = ffi.new("double[11]", {(-0.253198),(-0.343842),(-0.165755),(-0.057906),(-0.018252),(-0.005573),(-0.001686),(-0.000508),(-0.000153),(-0.000046),(-0.000014)});
function this.Saturate_table(x)
   local index = this.clip(this.int((1.500000 * x)),0,9);
   return (this.get(this.wrap_array(Saturate_table_c0),index) + (x * (this.get(this.wrap_array(Saturate_table_c1),index) + (this.get(this.wrap_array(Saturate_table_c2),index) * x))));

end

function this.Saturate_process(x)
   if (x == 0.000000) then
      return 0.000000;

   end
   local fixed = 0.0;
   local sign = false;
   if (x > 0.000000) then
      fixed = x;
      sign = false;

   else

      fixed = (- x);
      sign = true;

   end
   local out = 0.000000;
   if (fixed > 6.000000) then
      out = 1.000000;

   else

      out = this.Saturate_table(fixed);

   end
   if sign then
      out = (- out);
   else

      out = out;
   end
   return out;

end

function this.Saturate_noteOn(note,velocity,channel)

end

function this.Saturate_noteOff(note,channel)

end

function this.Saturate_controlChange(control,value,channel)

end

function this.Saturate_default()

end

function this.Ahr__ctx_type_0_init()
   local _ctx = {};
   _ctx.target = 0.000000;
   _ctx.state = 0;
   _ctx.rate = 0.000000;
   _ctx.out = 0.000000;
   _ctx.hold_phase = 0.000000;
   _ctx._inst68 = this.Util__ctx_type_0_init();
   _ctx._inst66 = this.Util__ctx_type_0_init();
   return _ctx;

end

function this.Ahr_do_init()
   return this.Ahr__ctx_type_0_init();
end

function this.Ahr_do(_ctx,gate,a,h,r)
   local release = 0;
   local attack = 1;
   local hold = 2;
   local reset = 3;
   local bgate = (gate > 0.000000);
   if this.Util_edge(_ctx._inst66,bgate) then
      _ctx.state = reset;

   end
   local resetting = 0.0;
   if (_ctx.state == reset) then
      resetting = 1.000000;
   else

      resetting = 0.000000;
   end
   if this.Util_edge(_ctx._inst68,(_ctx.out > 1024.000000)) then
      _ctx.hold_phase = 0.000000;
      _ctx.state = hold;

   end
   if ((_ctx.out < 10.000000) and (_ctx.state == reset)) then
      _ctx.state = attack;

   end
   if ((_ctx.hold_phase > 100.000000) and (_ctx.state == hold)) then
      _ctx.state = release;

   end
   if (_ctx.state == reset) then
      _ctx.rate = 0.990099;
      _ctx.target = 0.000000;

   end
   if (_ctx.state == attack) then
      _ctx.rate = (1.000000 / ((100.000000 * a) + 0.010000));
      _ctx.target = 1228.800000;

   end
   if (_ctx.state == hold) then
      local hrate = 0.0;
      hrate = (1.000000 / ((100.000000 * h) + 0.010000));
      _ctx.hold_phase = (_ctx.hold_phase + hrate);

   end
   if (_ctx.state == release) then
      _ctx.rate = (1.000000 / ((100.000000 * r) + 0.010000));
      _ctx.target = 0.000000;

   end
   _ctx.out = (_ctx.out + ((_ctx.target + (- _ctx.out)) * _ctx.rate * 0.005000));
   local _tuple_93 = { field_0 = this.clip((_ctx.out * 0.000977),0.000000,1.000000), field_1 = resetting };
   return _tuple_93;

end

function this.Ahr__ctx_type_1_init()
   local _ctx = {};
   _ctx.knob3 = 0.000000;
   _ctx.knob2 = 0.000000;
   _ctx.knob1 = 0.000000;
   _ctx._inst77 = this.Ahr__ctx_type_0_init();
   return _ctx;

end

function this.Ahr_process_init()
   return this.Ahr__ctx_type_1_init();
end

function this.Ahr_process(_ctx,gate)
   local _call_96 = this.Ahr_do(_ctx._inst77,gate,_ctx.knob1,_ctx.knob2,_ctx.knob3);
   return _call_96;

end

function this.Ahr_noteOn_init()
   return this.Ahr__ctx_type_1_init();
end

function this.Ahr_noteOn(_ctx,note,velocity,channel)

end

function this.Ahr_noteOff_init()
   return this.Ahr__ctx_type_1_init();
end

function this.Ahr_noteOff(_ctx,note,channel)

end

function this.Ahr_controlChange_init()
   return this.Ahr__ctx_type_1_init();
end

function this.Ahr_controlChange(_ctx,control,value,channel)
   if (control == 1) then
      _ctx.knob1 = (this.real(value) * 0.007874);

   end
   if (control == 2) then
      _ctx.knob2 = (this.real(value) * 0.007874);

   end
   if (control == 3) then
      _ctx.knob3 = (this.real(value) * 0.007874);

   end

end

function this.Ahr_default_init()
   return this.Ahr__ctx_type_1_init();
end

function this.Ahr_default(_ctx)
   _ctx.knob1 = 0.000000;
   _ctx.knob2 = 0.500000;
   _ctx.knob3 = 0.500000;

end

function this.Kick__ctx_type_0_init()
   local _ctx = {};
   _ctx._inst114 = this.Noise__ctx_type_1_init();
   _ctx._inst113 = this.Ahr__ctx_type_0_init();
   _ctx._inst112 = this.Tricore__ctx_type_0_init();
   _ctx._inst111 = this.Swept__ctx_type_0_init();
   _ctx._inst110 = this.Ahr__ctx_type_0_init();
   return _ctx;

end

function this.Kick_do_init()
   return this.Kick__ctx_type_0_init();
end

function this.Kick_do(_ctx,gate,odecay,pitch,swept,noise)
   local osc_env = 0.0;
   local env_reset = 0.0;
   local _call_125 = this.Ahr_do(_ctx._inst110,gate,0.005000,(0.100000 + odecay),(odecay + 0.010000));
   osc_env = _call_125[1]; env_reset = _call_125[2]; 
   local cv = this.Swept_process(_ctx._inst111,(1.000000 + (- env_reset)),(pitch + (swept * 0.400000)),pitch,0.100000);
   local osc = this.Tricore_process(_ctx._inst112,cv,0.000000,env_reset);
   local osc_sat = this.Saturate_process((1.500000 * osc));
   local noise_env = 0.0;
   local _call_126 = this.Ahr_do(_ctx._inst113,gate,0.001000,0.010000,((noise * 0.010000) + 0.001000));
   noise_env = _call_126[1]; 
   local noise_osc = (noise * this.Noise_process(_ctx._inst114,1.000000) * 0.333333);
   return ((osc_env * osc_sat) + (noise_env * noise_osc));

end

function this.Kick__ctx_type_1_init()
   local _ctx = {};
   _ctx.swept = 0.000000;
   _ctx.pitch = 0.000000;
   _ctx.odecay = 0.000000;
   _ctx.noise = 0.000000;
   _ctx._inst116 = this.Kick__ctx_type_0_init();
   return _ctx;

end

function this.Kick_process_init()
   return this.Kick__ctx_type_1_init();
end

function this.Kick_process(_ctx,gate)
   return this.Kick_do(_ctx._inst116,gate,_ctx.odecay,_ctx.pitch,_ctx.swept,_ctx.noise);

end

function this.Kick_noteOn_init()
   return this.Kick__ctx_type_1_init();
end

function this.Kick_noteOn(_ctx,note,velocity,channel)

end

function this.Kick_noteOff_init()
   return this.Kick__ctx_type_1_init();
end

function this.Kick_noteOff(_ctx,note,channel)

end

function this.Kick_controlChange_init()
   return this.Kick__ctx_type_1_init();
end

function this.Kick_controlChange(_ctx,control,value,channel)
   if (control == 30) then
      _ctx.odecay = (this.real(value) * 0.007874);

   end
   if (control == 31) then
      _ctx.pitch = this.Util_map(this.real(value),0.000000,127.000000,0.000000,0.100000);

   end
   if (control == 32) then
      _ctx.swept = (this.real(value) * 0.007874);

   end
   if (control == 33) then
      _ctx.noise = (this.real(value) * 0.007874);

   end

end

function this.Kick_default_init()
   return this.Kick__ctx_type_1_init();
end

function this.Kick_default(_ctx)

end


function this.process(ctx,in0) return this.Kick_process(ctx,in0) end
function this.noteOn(ctx,in0,in1,in2) return this.Kick_noteOn(ctx,in0,in1,in2) end
function this.noteOff(ctx,in0,in1) return this.Kick_noteOff(ctx,in0,in1) end
function this.controlChange(ctx,in0,in1,in2) return this.Kick_controlChange(ctx,in0,in1,in2) end
function this.init() return this.Kick_process_init() end
function this.default(ctx) return this.Kick_default(ctx) end
this.config = { inputs = 2, outputs = 1, noteon_inputs = 4, noteoff_inputs = 3, controlchange_inputs = 4, is_active = true }
return this
