
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#include "ad.h"

void Util__ctx_type_0_init(Util__ctx_type_0 &_output_){
   Util__ctx_type_0 _ctx;
   _ctx.pre = 0;
   _output_ = _ctx;
   return ;
}

void Util_edge_init(Util__ctx_type_0 &_output_){
   Util__ctx_type_0_init(_output_);
   return ;
}

uint8_t Util_edge(Util__ctx_type_0 &_ctx, uint8_t x){
   uint8_t ret;
   ret = (x && bool_not(_ctx.pre));
   _ctx.pre = x;
   return ret;
}

void Util__ctx_type_1_init(Util__ctx_type_1 &_output_){
   Util__ctx_type_1 _ctx;
   _ctx.pre_x = 0x0 /* 0.000000 */;
   _output_ = _ctx;
   return ;
}

void Util_change_init(Util__ctx_type_1 &_output_){
   Util__ctx_type_1_init(_output_);
   return ;
}

uint8_t Util_change(Util__ctx_type_1 &_ctx, fix16_t x){
   uint8_t v;
   v = (_ctx.pre_x != x);
   _ctx.pre_x = x;
   return v;
}

fix16_t Util_map(fix16_t x, fix16_t x0, fix16_t x1, fix16_t y0, fix16_t y1){
   return fix_add(fix_div(fix_mul(fix_add(x,(- x0)),fix_add(y1,(- y0))),fix_add(x1,(- x0))),y0);
}

void Util__ctx_type_3_init(Util__ctx_type_3 &_output_){
   Util__ctx_type_3 _ctx;
   _ctx.y1 = 0x0 /* 0.000000 */;
   _ctx.x1 = 0x0 /* 0.000000 */;
   _output_ = _ctx;
   return ;
}

void Util_dcblock_init(Util__ctx_type_3 &_output_){
   Util__ctx_type_3_init(_output_);
   return ;
}

fix16_t Util_dcblock(Util__ctx_type_3 &_ctx, fix16_t x0){
   fix16_t y0;
   y0 = fix_add(fix_add(x0,(- _ctx.x1)),fix_mul(_ctx.y1,0xfeb8 /* 0.995000 */));
   _ctx.x1 = x0;
   _ctx.y1 = y0;
   return y0;
}

void Util__ctx_type_4_init(Util__ctx_type_4 &_output_){
   Util__ctx_type_4 _ctx;
   _ctx.x = 0x0 /* 0.000000 */;
   _output_ = _ctx;
   return ;
}

void Util_smooth_init(Util__ctx_type_4 &_output_){
   Util__ctx_type_4_init(_output_);
   return ;
}

fix16_t Util_smooth(Util__ctx_type_4 &_ctx, fix16_t input){
   _ctx.x = fix_add(_ctx.x,fix_mul(fix_add(input,(- _ctx.x)),0x147 /* 0.005000 */));
   return _ctx.x;
}

void Util__ctx_type_5_init(Util__ctx_type_5 &_output_){
   Util__ctx_type_5 _ctx;
   _ctx.x0 = 0x0 /* 0.000000 */;
   _output_ = _ctx;
   return ;
}

void Util_average2_init(Util__ctx_type_5 &_output_){
   Util__ctx_type_5_init(_output_);
   return ;
}

fix16_t Util_average2(Util__ctx_type_5 &_ctx, fix16_t x1){
   fix16_t result;
   result = fix_mul(fix_add(_ctx.x0,x1),0x8000 /* 0.500000 */);
   _ctx.x0 = x1;
   return result;
}

fix16_t Util_pitchToRate(fix16_t pitch){
   int index;
   index = int_clip(fix_to_int(fix_mul(0x3e7c /* 0.244094 */,pitch)),0,31);
   return fix_add(fix_get(fix_wrap_array(Util_pitchToRate_c0),index),fix_mul(pitch,fix_add(fix_get(fix_wrap_array(Util_pitchToRate_c1),index),fix_mul(fix_get(fix_wrap_array(Util_pitchToRate_c2),index),pitch))));
}

fix16_t Util_cvToPitch(fix16_t cv){
   return fix_add(fix_mul(cv,0x780000 /* 120.000000 */),0x180000 /* 24.000000 */);
}

fix16_t Util_cvToRate(fix16_t cv){
   int index;
   index = int_clip(fix_to_int(fix_mul(0x2271c7 /* 34.444444 */,cv)),0,31);
   return fix_add(fix_get(fix_wrap_array(Util_cvToRate_c0),index),fix_mul(cv,fix_add(fix_get(fix_wrap_array(Util_cvToRate_c1),index),fix_mul(fix_get(fix_wrap_array(Util_cvToRate_c2),index),cv))));
}

fix16_t Util_pitchToCv(fix16_t pitch){
   return fix_mul(0x222 /* 0.008333 */,fix_add((-0x180000 /* -24.000000 */),pitch));
}

fix16_t Util_cvToRate_unit(fix16_t cv){
   int index;
   index = int_clip(fix_to_int(fix_mul(0x2271c7 /* 34.444444 */,cv)),0,31);
   return fix_add(fix_get(fix_wrap_array(Util_cvToRate_unit_c0),index),fix_mul(cv,fix_add(fix_get(fix_wrap_array(Util_cvToRate_unit_c1),index),fix_mul(fix_get(fix_wrap_array(Util_cvToRate_unit_c2),index),cv))));
}

void Ad__ctx_type_0_init(Ad__ctx_type_0 &_output_){
   Ad__ctx_type_0 _ctx;
   _ctx.target = 0x0 /* 0.000000 */;
   _ctx.state = 0;
   _ctx.scale = 0x0 /* 0.000000 */;
   _ctx.rate = 0x0 /* 0.000000 */;
   _ctx.out = 0x0 /* 0.000000 */;
   Util__ctx_type_0_init(_ctx._inst14);
   _output_ = _ctx;
   return ;
}

void Ad_do_init(Ad__ctx_type_0 &_output_){
   Ad__ctx_type_0_init(_output_);
   return ;
}

fix16_t Ad_do(Ad__ctx_type_0 &_ctx, fix16_t gate, fix16_t a, fix16_t d){
   fix16_t a_rate;
   a_rate = fix_div(0x10000 /* 1.000000 */,fix_add(fix_mul(0x640000 /* 100.000000 */,a),0x28f /* 0.010000 */));
   fix16_t d_rate;
   d_rate = fix_div(0x10000 /* 1.000000 */,fix_add(fix_mul(0x640000 /* 100.000000 */,d),0x28f /* 0.010000 */));
   uint8_t bgate;
   bgate = (gate > 0x0 /* 0.000000 */);
   _ctx.out = fix_add(_ctx.out,fix_mul(fix_mul(fix_add(_ctx.target,(- _ctx.out)),_ctx.rate),0x106 /* 0.004000 */));
   uint8_t _cond_27;
   _cond_27 = (_ctx.state == 0);
   if(_cond_27){
      uint8_t _cond_26;
      _cond_26 = Util_edge(_ctx._inst14,bgate);
      if(_cond_26){
         _ctx.state = 1;
         _ctx.scale = fix_mul(gate,0x3333 /* 0.200000 */);
      }
      _ctx.rate = d_rate;
      _ctx.target = 0x0 /* 0.000000 */;
   }
   uint8_t _cond_29;
   _cond_29 = (_ctx.state == 1);
   if(_cond_29){
      uint8_t _cond_28;
      _cond_28 = (bool_not(bgate) || (_ctx.out > 0x4000000 /* 1024.000000 */));
      if(_cond_28){
         _ctx.state = 0;
      }
      _ctx.rate = a_rate;
      _ctx.target = 0x4cccccc /* 1228.800000 */;
   }
   return fix_mul(fix_clip(fix_mul(_ctx.out,0x40 /* 0.000977 */),0x0 /* 0.000000 */,0x10000 /* 1.000000 */),_ctx.scale);
}

void Ad__ctx_type_1_init(Ad__ctx_type_1 &_output_){
   Ad__ctx_type_1 _ctx;
   _ctx.knob2 = 0x0 /* 0.000000 */;
   _ctx.knob1 = 0x0 /* 0.000000 */;
   Ad__ctx_type_0_init(_ctx._inst19);
   _output_ = _ctx;
   return ;
}

void Ad_process_init(Ad__ctx_type_1 &_output_){
   Ad__ctx_type_1_init(_output_);
   return ;
}

fix16_t Ad_process(Ad__ctx_type_1 &_ctx, fix16_t gate){
   return Ad_do(_ctx._inst19,gate,_ctx.knob1,_ctx.knob2);
}

void Ad_noteOn_init(Ad__ctx_type_1 &_output_){
   Ad__ctx_type_1_init(_output_);
   return ;
}

void Ad_noteOn(Ad__ctx_type_1 &_ctx, int note, int velocity, int channel){
}

void Ad_noteOff_init(Ad__ctx_type_1 &_output_){
   Ad__ctx_type_1_init(_output_);
   return ;
}

void Ad_noteOff(Ad__ctx_type_1 &_ctx, int note, int channel){
}

void Ad_controlChange_init(Ad__ctx_type_1 &_output_){
   Ad__ctx_type_1_init(_output_);
   return ;
}

void Ad_controlChange(Ad__ctx_type_1 &_ctx, int control, int value, int channel){
   uint8_t _cond_30;
   _cond_30 = (control == 1);
   if(_cond_30){
      _ctx.knob1 = fix_mul(int_to_fix(value),0x204 /* 0.007874 */);
   }
   uint8_t _cond_31;
   _cond_31 = (control == 2);
   if(_cond_31){
      _ctx.knob2 = fix_mul(int_to_fix(value),0x204 /* 0.007874 */);
   }
}

void Ad_default_init(Ad__ctx_type_1 &_output_){
   Ad__ctx_type_1_init(_output_);
   return ;
}

void Ad_default(Ad__ctx_type_1 &_ctx){
   _ctx.knob1 = 0x0 /* 0.000000 */;
   _ctx.knob2 = 0x8000 /* 0.500000 */;
}


