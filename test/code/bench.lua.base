
local this = {}
local ffi = require("ffi")
function this.ternary(cond,then_,else_) if cond then return then_ else return else_ end end
function this.eps()             return 1e-18; end
function this.random()          return math.random(); end
function this.irandom()         return math.floor(math.random() * 4294967296); end
function this.clip(x,low,high)  return (this.ternary(x<low,low,this.ternary(x>high,high,x))); end
function this.real(x)           return x; end
function this.int(x)            local int_part,_ = math.modf(x) return int_part; end
function this.sin(x)            return math.sin(x); end
function this.cos(x)            return math.cos(x); end
function this.abs(x)            return math.abs(x); end
function this.exp(x)            return math.exp(x); end
function this.floor(x)          return math.floor(x); end
function this.tan(x)            return math.tan(x); end
function this.tanh(x)           return math.tanh(x); end
function this.sqrt(x)           return x; end
function this.set(a,i,v)        a[i]=v; end
function this.get(a,i)          return a[i]; end
function this.makeArray(size,v) local a = ffi.new("double[?]",size); for i=0,size-1 do a[i]=v end return a; end
function this.wrap_array(a)     return a; end
function this.Bench_near_zero(x)
   return (this.abs(x) < 0.000000);

end

local Bench_pitchToRate_c0 = ffi.new("double[33]", {0.000185,0.000187,0.000194,0.000214,0.000259,0.000348,0.000508,0.000783,0.001233,0.001950,0.003062,0.004754,0.007286,0.011023,0.016473,0.024339,0.035594,0.051572,0.074099,0.105662,0.149642,0.210618,0.294773,0.410449,0.568856,0.784977,1.078990,1.477668,2.016978,2.744381,3.723559,5.038629,6.800589});
local Bench_pitchToRate_c1 = ffi.new("double[33]", {0.000011,0.000010,0.000008,0.000005,(-0.000001),(-0.000010),(-0.000023),(-0.000043),(-0.000071),(-0.000111),(-0.000167),(-0.000245),(-0.000351),(-0.000496),(-0.000692),(-0.000956),(-0.001310),(-0.001783),(-0.002413),(-0.003250),(-0.004357),(-0.005819),(-0.007746),(-0.010279),(-0.013603),(-0.017957),(-0.023652),(-0.031089),(-0.040791),(-0.053425),(-0.069865),(-0.091234),(-0.118969)});
local Bench_pitchToRate_c2 = ffi.new("double[33]", {0.000000,0.000000,0.000001,0.000001,0.000001,0.000001,0.000001,0.000002,0.000002,0.000003,0.000003,0.000004,0.000005,0.000007,0.000009,0.000011,0.000014,0.000017,0.000022,0.000027,0.000034,0.000043,0.000054,0.000068,0.000085,0.000107,0.000135,0.000169,0.000213,0.000268,0.000337,0.000424,0.000533});
function this.Bench_pitchToRate(d)
   local index = this.clip(this.int((0.244094 * d)),0,31);
   return (this.get(this.wrap_array(Bench_pitchToRate_c0),index) + (d * (this.get(this.wrap_array(Bench_pitchToRate_c1),index) + (this.get(this.wrap_array(Bench_pitchToRate_c2),index) * d))));

end

local Bench_cvToRate_c0 = ffi.new("double[33]", {0.000109,0.000151,0.000206,0.000279,0.000376,0.000501,0.000661,0.000860,0.001102,0.001388,0.001712,0.002057,0.002398,0.002692,0.002891,0.002966,0.002966,0.003165,0.004357,0.008457,0.019649,0.046546,0.106173,0.231177,0.482734,0.973374,1.906978,3.648305,6.842964,12.623166,22.958585,41.251682,73.343276});
local Bench_cvToRate_c1 = ffi.new("double[33]", {0.000019,0.000028,0.000041,0.000059,0.000085,0.000121,0.000172,0.000243,0.000341,0.000472,0.000645,0.000868,0.001142,0.001458,0.001782,0.002029,0.002018,0.001400,(-0.000482),(-0.004817),(-0.013711),(-0.030834),(-0.062493),(-0.119419),(-0.219705),(-0.393635),(-0.691587),(-1.196919),(-2.046922),(-3.466801),(-5.824649),(-9.720185),(-16.127720)});
local Bench_cvToRate_c2 = ffi.new("double[33]", {0.000001,0.000001,0.000002,0.000003,0.000005,0.000008,0.000012,0.000018,0.000028,0.000043,0.000066,0.000102,0.000157,0.000242,0.000374,0.000576,0.000888,0.001370,0.002113,0.003259,0.005025,0.007750,0.011953,0.018434,0.028429,0.043843,0.067615,0.104276,0.160816,0.248012,0.382487,0.589876,0.909714});
function this.Bench_cvToRate(cv)
   local index = this.clip(this.int((1.550000 * (cv + 10.000000))),0,31);
   return (this.get(this.wrap_array(Bench_cvToRate_c0),index) + (cv * (this.get(this.wrap_array(Bench_cvToRate_c1),index) + (this.get(this.wrap_array(Bench_cvToRate_c2),index) * cv))));

end

local Bench_otanh_c0 = ffi.new("double[33]", {(-0.999989),(-0.999975),(-0.999931),(-0.999817),(-0.999516),(-0.998739),(-0.996764),(-0.991844),(-0.979903),(-0.951884),(-0.889177),(-0.758820),(-0.521641),(-0.197113),0.015439,0.000000,0.000000,(-0.015439),0.197113,0.521641,0.758820,0.889177,0.951884,0.979903,0.991844,0.996764,0.998739,0.999516,0.999817,0.999931,0.999975,0.999989,0.999995});
local Bench_otanh_c1 = ffi.new("double[33]", {0.000002,0.000006,0.000017,0.000048,0.000138,0.000391,0.001098,0.003057,0.008410,0.022784,0.060373,0.154335,0.368522,0.759358,1.134520,1.042518,1.042518,1.134520,0.759358,0.368522,0.154335,0.060373,0.022784,0.008410,0.003057,0.001098,0.000391,0.000138,0.000048,0.000017,0.000006,0.000002,0.000001});
local Bench_otanh_c2 = ffi.new("double[33]", {0.000000,0.000000,0.000001,0.000003,0.000010,0.000030,0.000094,0.000289,0.000889,0.002732,0.008364,0.025293,0.073638,0.191281,0.356816,0.242051,(-0.242051),(-0.356816),(-0.191281),(-0.073638),(-0.025293),(-0.008364),(-0.002732),(-0.000889),(-0.000289),(-0.000094),(-0.000030),(-0.000010),(-0.000003),(-0.000001),(-0.000000),(-0.000000),(-0.000000)});
function this.Bench_otanh(x)
   local index = this.clip(this.int((1.722222 * (x + 9.000000))),0,31);
   return (this.get(this.wrap_array(Bench_otanh_c0),index) + (x * (this.get(this.wrap_array(Bench_otanh_c1),index) + (this.get(this.wrap_array(Bench_otanh_c2),index) * x))));

end

local Bench_osin_table_c0 = ffi.new("double[129]", {(-0.000000),(-0.000008),(-0.000038),(-0.000105),(-0.000225),(-0.000411),(-0.000679),(-0.001042),(-0.001514),(-0.002109),(-0.002838),(-0.003715),(-0.004751),(-0.005957),(-0.007345),(-0.008923),(-0.010700),(-0.012685),(-0.014888),(-0.017308),(-0.019955),(-0.022839),(-0.025953),(-0.029312),(-0.032905),(-0.036722),(-0.040813),(-0.045118),(-0.049629),(-0.054421),(-0.059420),(-0.064674),(-0.070044),(-0.075674),(-0.081509),(-0.087493),(-0.093628),(-0.099864),(-0.106349),(-0.112817),(-0.119625),(-0.126007),(-0.132927),(-0.139517),(-0.146559),(-0.153451),(-0.159610),(-0.166885),(-0.172530),(-0.178839),(-0.186004),(-0.191243),(-0.197796),(-0.202271),(-0.206125),(-0.211988),(-0.215932),(-0.220193),(-0.227281),(-0.228385),(-0.231242),(-0.230797),(-0.233873),(-0.238633),(-0.225660),(-0.231332),(-0.243947),(-0.223099),(-0.221825),(-0.217393),(-0.218040),(-0.215365),(-0.194217),(-0.183516),(-0.169532),(-0.172745),(-0.148364),(-0.132921),(-0.124959),(-0.100212),(-0.090938),(-0.044562),(-0.054425),0.001049,0.002033,0.035995,0.027905,0.089716,0.136848,0.176165,0.199116,0.252990,0.275900,0.309444,0.324745,0.392132,0.427874,0.509048,0.546721,0.534998,0.706054,0.754917,0.824874,0.971612,0.928143,1.036225,1.182441,1.191092,1.299743,1.256961,1.890715,1.453732,1.948986,1.478734,1.495686,2.011178,1.493637,1.629685,4.158053,4.385466,2.290062,2.422288,2.507535,2.639007,2.181678,2.849300,2.972793,3.082973,2.563551});
local Bench_osin_table_c1 = ffi.new("double[129]", {1.000051,1.000660,1.001877,1.003701,1.006126,1.009150,1.012767,1.016969,1.021750,1.027100,1.033009,1.039467,1.046462,1.053980,1.062008,1.070530,1.079528,1.088989,1.098895,1.109216,1.119949,1.131079,1.142551,1.154378,1.166500,1.178904,1.191586,1.204504,1.217712,1.230968,1.244514,1.258156,1.271888,1.285726,1.299704,1.313396,1.327117,1.340822,1.354293,1.368318,1.381844,1.394292,1.407118,1.420913,1.434107,1.446680,1.458532,1.469497,1.481530,1.488794,1.498377,1.511411,1.518143,1.526427,1.534681,1.536873,1.544699,1.553641,1.558855,1.555876,1.564717,1.567205,1.579057,1.581423,1.563014,1.563252,1.593135,1.560170,1.565418,1.562001,1.562564,1.540688,1.523995,1.512351,1.488195,1.497791,1.488144,1.506517,1.436557,1.440698,1.388449,1.362101,1.367590,1.349761,1.369187,1.312449,1.299535,1.274467,1.259258,1.142085,1.071607,1.125073,1.081280,1.015525,0.930016,0.929467,0.926993,0.830052,0.733113,0.659428,0.722232,0.659659,0.611804,0.653129,0.516031,0.455595,0.438406,0.377567,0.315380,0.239248,0.242515,0.129443,0.062916,(-0.007284),(-0.062047),(-0.173137),(-0.172944),(-0.207809),(-0.691306),(-0.837591),(-0.487564),(-0.541086),(-0.614241),(-0.694590),(-0.615837),(-0.841580),(-0.915244),(-0.990932),(-0.854964)});
local Bench_osin_table_c2 = ffi.new("double[129]", {(-0.006172),(-0.018511),(-0.030839),(-0.043149),(-0.055432),(-0.067681),(-0.079889),(-0.092049),(-0.104152),(-0.116192),(-0.128160),(-0.140052),(-0.151858),(-0.163569),(-0.175187),(-0.186693),(-0.198083),(-0.209357),(-0.220506),(-0.231501),(-0.242372),(-0.253103),(-0.263675),(-0.274068),(-0.284325),(-0.294344),(-0.304275),(-0.313925),(-0.323477),(-0.332702),(-0.341919),(-0.350845),(-0.359549),(-0.367788),(-0.376294),(-0.384406),(-0.391870),(-0.399435),(-0.406574),(-0.413587),(-0.421090),(-0.426855),(-0.432673),(-0.439720),(-0.445656),(-0.451737),(-0.456269),(-0.461404),(-0.465966),(-0.468720),(-0.472836),(-0.478999),(-0.481056),(-0.484679),(-0.486791),(-0.485688),(-0.491236),(-0.493958),(-0.495775),(-0.495489),(-0.497076),(-0.498236),(-0.506077),(-0.505513),(-0.496879),(-0.497021),(-0.513113),(-0.494646),(-0.499243),(-0.497348),(-0.502916),(-0.493444),(-0.483921),(-0.483231),(-0.475870),(-0.481524),(-0.477846),(-0.480350),(-0.457070),(-0.465376),(-0.449796),(-0.436060),(-0.449949),(-0.441653),(-0.447251),(-0.426776),(-0.441272),(-0.433692),(-0.431058),(-0.389097),(-0.368218),(-0.385463),(-0.378954),(-0.353455),(-0.325848),(-0.349282),(-0.357152),(-0.322215),(-0.270027),(-0.247896),(-0.298665),(-0.288973),(-0.277646),(-0.315053),(-0.255505),(-0.248218),(-0.273684),(-0.225559),(-0.255106),(-0.206505),(-0.257199),(-0.186347),(-0.239884),(-0.138681),(-0.125941),(-0.160150),(-0.098556),(-0.089017),(-0.219011),(-0.189367),(-0.084284),(-0.068491),(-0.058547),(-0.045631),(-0.025660),(-0.020873),(-0.009187),0.002929,0.011511});
function this.Bench_osin_table(x)
   local index = this.clip(this.int((40.189873 * x)),0,127);
   return (this.get(this.wrap_array(Bench_osin_table_c0),index) + (x * (this.get(this.wrap_array(Bench_osin_table_c1),index) + (this.get(this.wrap_array(Bench_osin_table_c2),index) * x))));

end

function this.Bench_osin(x)
   return this.Bench_osin_table((x % 3.141593));

end

function this.Bench__ctx_type_6_init()
   local _ctx = {};
   _ctx.y1 = 0.000000;
   _ctx.x1 = 0.000000;
   return _ctx;

end

function this.Bench_dcblock_init()
   return this.Bench__ctx_type_6_init();
end

function this.Bench_dcblock(_ctx,x0)
   local y0 = (x0 + (- _ctx.x1) + (_ctx.y1 * 0.995000));
   _ctx.x1 = x0;
   _ctx.y1 = y0;
   return y0;

end

function this.Bench__ctx_type_7_init()
   local _ctx = {};
   _ctx.pre_x = 0.000000;
   return _ctx;

end

function this.Bench_change_init()
   return this.Bench__ctx_type_7_init();
end

function this.Bench_change(_ctx,x)
   local v = (_ctx.pre_x ~= x);
   _ctx.pre_x = x;
   return v;

end

function this.Bench__ctx_type_8_init()
   local _ctx = {};
   _ctx.phase = 0.000000;
   _ctx.inc = 0.000000;
   _ctx._inst9 = this.Bench__ctx_type_7_init();
   this.Bench_init(_ctx);
   return _ctx;

end

function this.Bench_osc_saw_init()
   return this.Bench__ctx_type_8_init();
end

function this.Bench_osc_saw(_ctx,cv)
   if this.Bench_change(_ctx._inst9,cv) then
      _ctx.inc = this.Bench_cvToRate(cv);

   end
   local i = 0.0;
   if (_ctx.inc < 0.000000) then
      i = 0.000000;
   else

      i = _ctx.inc;
   end
   _ctx.phase = (((2.000000 * _ctx.inc) + _ctx.phase) % 2.000000);
   local ph = (_ctx.phase + (-1.000000));
   local o = 0.000000;
   if (ph >= (1.000000 + (- i))) then
      local b = 0.0;
      b = ((1.000000 + (- i) + (- ph)) / i);
      o = ((b * this.abs(b)) + ph);

   else

      local _cond_51 = false;
      _cond_51 = (ph <= (i + (-1.000000)));
      if _cond_51 then
         local b = 0.0;
         b = ((i + (-1.000000) + (- ph)) / i);
         o = ((b * this.abs(b)) + ph);

      else

         o = ph;

      end

   end
   return o;

end

function this.Bench_init_init()
   return this.Bench__ctx_type_8_init();
end

function this.Bench_init(_ctx)
   _ctx.inc = 0.002966;

end

function this.Bench_pulse_train(m,phase)
   local pi_phase = (phase * 3.141593);
   local denominator1 = this.Bench_osin(pi_phase);
   local tmp1 = 0.000000;
   if this.Bench_near_zero(denominator1) then
      tmp1 = 1.000000;

   else

      tmp1 = this.Bench_osin((m * pi_phase));
      tmp1 = (tmp1 / (m * denominator1));

   end
   return tmp1;

end

function this.Bench__ctx_type_10_init()
   local _ctx = {};
   _ctx.state_triang = 0.000000;
   _ctx.state_saw = 0.000000;
   _ctx.state_pulse = 0.000000;
   _ctx.rate = 0.000000;
   _ctx.phase = 0.000000;
   _ctx.output = 0.000000;
   _ctx.m = 0.000000;
   _ctx._inst30 = this.Bench__ctx_type_6_init();
   _ctx._inst22 = this.Bench__ctx_type_7_init();
   this.Bench_init_blit(_ctx);
   return _ctx;

end

function this.Bench_osc_blit_init()
   return this.Bench__ctx_type_10_init();
end

function this.Bench_osc_blit(_ctx,cv,pw,wave)
   local fixed_cv = 0.000000;
   if (wave < 2.000000) then
      fixed_cv = cv;

   else

      fixed_cv = (cv + 1.000000);

   end
   if this.Bench_change(_ctx._inst22,fixed_cv) then
      _ctx.rate = this.Bench_cvToRate(fixed_cv);
      local p = 0.0;
      p = (1.000000 / _ctx.rate);
      local maxHarmonics = 0.0;
      maxHarmonics = this.floor((p * 0.500000));
      _ctx.m = ((2.000000 * maxHarmonics) + 1.000000);

   end
   local shift05 = (0.500000 + (pw * 0.490000));
   local shift = (_ctx.phase + shift05);
   if (shift > 1.000000) then
      shift = (shift + (-1.000000));

   end
   local tmp1 = this.Bench_pulse_train(_ctx.m,_ctx.phase);
   local tmp2 = this.Bench_pulse_train(_ctx.m,shift);
   _ctx.phase = (_ctx.phase + _ctx.rate);
   if (_ctx.phase > 1.000000) then
      _ctx.phase = (_ctx.phase + (-1.000000));

   end
   _ctx.state_pulse = this.clip(((_ctx.state_pulse * 0.999500) + tmp1 + (- tmp2)),(-1.000000),1.000000);
   _ctx.state_saw = this.clip(((_ctx.state_saw * 0.999500) + (((tmp1 + tmp2 + ((-2.000000) * _ctx.rate)) / shift05) * 0.500000)),(-1.000000),1.000000);
   _ctx.state_triang = this.clip(((_ctx.state_triang * 0.999500) + (2.000000 * _ctx.state_pulse * _ctx.rate)),(-1.000000),1.000000);
   if (wave < 1.000000) then
      _ctx.output = _ctx.state_pulse;

   else

      local _cond_59 = false;
      _cond_59 = (wave < 2.000000);
      if _cond_59 then
         _ctx.output = (2.000000 * _ctx.state_saw);

      else

         _ctx.output = (2.000000 * _ctx.state_triang * (1.000000 + pw));

      end

   end
   _ctx.output = this.Bench_dcblock(_ctx._inst30,_ctx.output);
   return this.clip(_ctx.output,(-1.000000),1.000000);

end

function this.Bench_init_blit_init()
   return this.Bench__ctx_type_10_init();
end

function this.Bench_init_blit(_ctx)
   _ctx.rate = 0.002966;
   local p = (1.000000 / _ctx.rate);
   local maxHarmonics = this.floor((p * 0.500000));
   _ctx.m = ((2.000000 * maxHarmonics) + 1.000000);

end

function this.Bench_map(x,x0,x1,y0,y1)
   return ((((x + (- x0)) * (y1 + (- y0))) / (x1 + (- x0))) + y0);

end

function this.Bench__ctx_type_12_init()
   local _ctx = {};
   _ctx.dlow = 0.000000;
   _ctx.dband = 0.000000;
   return _ctx;

end

function this.Bench_svf_step_init()
   return this.Bench__ctx_type_12_init();
end

function this.Bench_svf_step(_ctx,input,g,q,sel)
   local low = (_ctx.dlow + (g * _ctx.dband));
   local high = (input + (- low) + (- (q * _ctx.dband)));
   local band = ((g * high) + _ctx.dband);
   local notch = (high + low);
   _ctx.dband = (16.000000 * this.Bench_otanh((band * 0.062500)));
   _ctx.dlow = (16.000000 * this.Bench_otanh((low * 0.062500)));
   local output = 0.0;
   if (sel == 0) then
      output = low;
   else

      local _cond_63 = false;
      _cond_63 = (sel == 1);
      if _cond_63 then
         output = high;
      else

         local _cond_64 = false;
         _cond_64 = (sel == 2);
         if _cond_64 then
            output = band;
         else

            output = notch;
         end

      end

   end
   return output;

end

local Bench_cv_to_g_c0 = ffi.new("double[33]", {(-8.010426),(-3.546207),(-1.478840),(-0.575231),(-0.205810),(-0.066036),(-0.017618),(-0.002284),0.002404,0.004181,0.005354,0.006462,0.007533,0.008456,0.009084,0.009319,0.009319,0.009942,0.013684,0.026546,0.061588,0.145478,0.330087,0.712245,1.466064,2.893671,5.501678,10.111821,18.014672,31.174450,52.490150,86.112365,137.805377});
local Bench_cv_to_g_c1 = ffi.new("double[33]", {(-1.803533),(-0.853566),(-0.382390),(-0.160709),(-0.062583),(-0.022111),(-0.006703),(-0.001287),0.000576,0.001386,0.002013,0.002725,0.003588,0.004582,0.005599,0.006373,0.006340,0.004398,(-0.001512),(-0.015110),(-0.042959),(-0.096365),(-0.194393),(-0.368450),(-0.669023),(-1.175223),(-2.007785),(-3.346094),(-5.449613),(-8.683635),(-13.548725),(-20.712239),(-31.039049)});
local Bench_cv_to_g_c2 = ffi.new("double[33]", {(-0.102285),(-0.051748),(-0.024902),(-0.011306),(-0.004790),(-0.001860),(-0.000634),(-0.000156),0.000029,0.000121,0.000205,0.000320,0.000493,0.000761,0.001173,0.001810,0.002791,0.004304,0.006636,0.010230,0.015763,0.024262,0.037276,0.057094,0.087056,0.131928,0.198373,0.295499,0.435473,0.634163,0.911764,1.293326,1.809077});
function this.Bench_cv_to_g(cv)
   local index = this.clip(this.int((1.550000 * (cv + 10.000000))),0,31);
   return (this.get(this.wrap_array(Bench_cv_to_g_c0),index) + (cv * (this.get(this.wrap_array(Bench_cv_to_g_c1),index) + (this.get(this.wrap_array(Bench_cv_to_g_c2),index) * cv))));

end

function this.Bench__ctx_type_14_init()
   local _ctx = {};
   _ctx.step = this.Bench__ctx_type_12_init();
   _ctx.g = 0.000000;
   _ctx._inst36 = this.Bench__ctx_type_7_init();
   return _ctx;

end

function this.Bench_flt_svf_init()
   return this.Bench__ctx_type_14_init();
end

function this.Bench_flt_svf(_ctx,input,cv,q,sel)
   cv = this.clip(cv,(-1.000000),6.000000);
   q = this.clip(q,0.000000,5.000000);
   local fix_q = this.Bench_map(q,0.000000,5.000000,2.000000,0.000000);
   if this.Bench_change(_ctx._inst36,cv) then
      _ctx.g = this.Bench_cv_to_g(cv);

   end
   local x1 = this.Bench_svf_step(_ctx.step,input,_ctx.g,fix_q,sel);
   local x2 = this.Bench_svf_step(_ctx.step,input,_ctx.g,fix_q,sel);
   return ((x1 + x2) * 0.500000);

end

function this.Bench__ctx_type_15_init()
   local _ctx = {};
   _ctx._inst44 = this.Bench__ctx_type_14_init();
   _ctx._inst43 = this.Bench__ctx_type_10_init();
   _ctx._inst42 = this.Bench__ctx_type_8_init();
   _ctx._inst41 = this.Bench__ctx_type_8_init();
   _ctx._inst40 = this.Bench__ctx_type_8_init();
   _ctx._inst39 = this.Bench__ctx_type_8_init();
   return _ctx;

end

function this.Bench_process_init()
   return this.Bench__ctx_type_15_init();
end

function this.Bench_process(_ctx)
   local lfo1 = this.Bench_osc_saw(_ctx._inst39,(-7.000000));
   local lfo2 = (- this.Bench_osc_saw(_ctx._inst40,(-8.500000)));
   local lfo3 = this.Bench_osc_saw(_ctx._inst41,(-9.000000));
   local lfo4 = this.Bench_osc_saw(_ctx._inst42,(-9.500000));
   local o1 = this.Bench_osc_blit(_ctx._inst43,lfo1,lfo2,this.abs((lfo3 * 2.000000)));
   local o = this.Bench_flt_svf(_ctx._inst44,o1,this.abs((lfo4 * 5.000000)),0.500000,0);
   return o;

end

function this.Bench_noteOn_init()
   return this.Bench__ctx_type_15_init();
end

function this.Bench_noteOn(_ctx,note,velocity,channel)

end

function this.Bench_noteOff_init()
   return this.Bench__ctx_type_15_init();
end

function this.Bench_noteOff(_ctx,note,channel)

end

function this.Bench_controlChange_init()
   return this.Bench__ctx_type_15_init();
end

function this.Bench_controlChange(_ctx,control,value,channel)

end

function this.Bench_default_init()
   return this.Bench__ctx_type_15_init();
end

function this.Bench_default(_ctx)

end


function this.process(ctx) return this.Bench_process(ctx) end
function this.noteOn(ctx,in0,in1,in2) return this.Bench_noteOn(ctx,in0,in1,in2) end
function this.noteOff(ctx,in0,in1) return this.Bench_noteOff(ctx,in0,in1) end
function this.controlChange(ctx,in0,in1,in2) return this.Bench_controlChange(ctx,in0,in1,in2) end
function this.init() return this.Bench_process_init() end
function this.default(ctx) return this.Bench_default(ctx) end
this.config = { inputs = 1, outputs = 1, noteon_inputs = 4, noteoff_inputs = 3, controlchange_inputs = 4, is_active = true }
return this
