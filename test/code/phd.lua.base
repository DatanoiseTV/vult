
local this = {}
local ffi = require("ffi")
function this.ternary(cond,then_,else_) if cond then return then_ else return else_ end end
function this.eps()             return 1e-18; end
function this.pi()              return 3.1415926535897932384; end
function this.random()          return math.random(); end
function this.irandom()         return math.floor(math.random() * 4294967296); end
function this.clip(x,low,high)  return (this.ternary(x<low,low,this.ternary(x>high,high,x))); end
function this.real(x)           return x; end
function this.int(x)            local int_part,_ = math.modf(x) return int_part; end
function this.sin(x)            return math.sin(x); end
function this.cos(x)            return math.cos(x); end
function this.abs(x)            return math.abs(x); end
function this.exp(x)            return math.exp(x); end
function this.floor(x)          return math.floor(x); end
function this.tan(x)            return math.tan(x); end
function this.tanh(x)           return math.tanh(x); end
function this.sqrt(x)           return x; end
function this.set(a,i,v)        a[i+1]=v; end
function this.get(a,i)          return a[i+1]; end
function this.makeArray(size,v) local a = {}; for i=1,size do a[i]=v end return a; end
function this.wrap_array(a)     return a; end
function this.Util__ctx_type_0_init()
   local _ctx = {};
   _ctx.pre = false;
   return _ctx;

end

function this.Util_edge_init()
   return this.Util__ctx_type_0_init();
end

function this.Util_edge(_ctx,x)
   local ret = (x and (_ctx.pre == false));
   _ctx.pre = x;
   return ret;

end

function this.Util__ctx_type_1_init()
   local _ctx = {};
   _ctx.pre_x = 0.0000;
   return _ctx;

end

function this.Util_change_init()
   return this.Util__ctx_type_1_init();
end

function this.Util_change(_ctx,x)
   local v = (_ctx.pre_x ~= x);
   _ctx.pre_x = x;
   return v;

end

function this.Util_map(x,x0,x1,y0,y1)
   return ((((x + (- x0)) * (y1 + (- y0))) / (x1 + (- x0))) + y0);

end

function this.Util__ctx_type_3_init()
   local _ctx = {};
   _ctx.y1 = 0.0000;
   _ctx.x1 = 0.0000;
   return _ctx;

end

function this.Util_dcblock_init()
   return this.Util__ctx_type_3_init();
end

function this.Util_dcblock(_ctx,x0)
   local y0 = (x0 + (- _ctx.x1) + (_ctx.y1 * 0.9950));
   _ctx.x1 = x0;
   _ctx.y1 = y0;
   return y0;

end

function this.Util__ctx_type_4_init()
   local _ctx = {};
   _ctx.x = 0.0000;
   return _ctx;

end

function this.Util_smooth_init()
   return this.Util__ctx_type_4_init();
end

function this.Util_smooth(_ctx,input)
   _ctx.x = (_ctx.x + ((input + (- _ctx.x)) * 0.0050));
   return _ctx.x;

end

function this.Util__ctx_type_5_init()
   local _ctx = {};
   _ctx.x0 = 0.0000;
   return _ctx;

end

function this.Util_average2_init()
   return this.Util__ctx_type_5_init();
end

function this.Util_average2(_ctx,x1)
   local result = ((_ctx.x0 + x1) * 0.5000);
   _ctx.x0 = x1;
   return result;

end

function this.Util_cubic_clipper(x)
   if (x <= (-0.6667)) then
      return (-0.6667);

   else

      local _cond_20 = false;
      _cond_20 = (x >= 0.6667);
      if _cond_20 then
         return 0.6667;

      else

         return (x + ((-0.3333) * x * x * x));

      end

   end

end

local Util_pitchToRate_1024_c0 = {0.1898,0.1913,0.1987,0.2194,0.2657,0.3564,0.5207,0.8016,1.2628,1.9966,3.1355,4.8683,7.4613,11.2877,16.8680,24.9233,36.4485,52.8099,75.8766,108.1966,153.2316,215.6711,301.8494,420.3017,582.5003,803.8319,1104.8901,1513.1840,2065.3943,2810.3466,3812.9291,5159.2452,6963.3862};
local Util_pitchToRate_1024_c1 = {0.0109,0.0102,0.0083,0.0049,(-0.0009),(-0.0101),(-0.0238),(-0.0440),(-0.0730),(-0.1140),(-0.1713),(-0.2506),(-0.3594),(-0.5075),(-0.7082),(-0.9786),(-1.3412),(-1.8258),(-2.4711),(-3.3277),(-4.4616),(-5.9590),(-7.9317),(-10.5254),(-13.9291),(-18.3881),(-24.2200),(-31.8365),(-41.7700),(-54.7088),(-71.5420),(-93.4177),(-121.8166)};
local Util_pitchToRate_1024_c2 = {0.0004,0.0004,0.0006,0.0007,0.0009,0.0011,0.0014,0.0018,0.0022,0.0028,0.0035,0.0044,0.0056,0.0070,0.0088,0.0111,0.0139,0.0175,0.0220,0.0277,0.0348,0.0438,0.0551,0.0693,0.0872,0.1096,0.1379,0.1734,0.2181,0.2742,0.3449,0.4338,0.5455};
function this.Util_pitchToRate_1024(pitch)
   local index = this.clip(this.int((0.2441 * pitch)),0,31);
   return (Util_pitchToRate_1024_c0[index+1] + (pitch * (Util_pitchToRate_1024_c1[index+1] + (Util_pitchToRate_1024_c2[index+1] * pitch))));

end

local Util_pitchToRate_c0 = {0.0002,0.0002,0.0002,0.0002,0.0003,0.0003,0.0005,0.0008,0.0012,0.0019,0.0031,0.0048,0.0073,0.0110,0.0165,0.0243,0.0356,0.0516,0.0741,0.1057,0.1496,0.2106,0.2948,0.4105,0.5688,0.7850,1.0790,1.4777,2.0170,2.7445,3.7236,5.0383,6.8002};
local Util_pitchToRate_c1 = {0.0000,0.0000,0.0000,0.0000,(-0.0000),(-0.0000),(-0.0000),(-0.0000),(-0.0001),(-0.0001),(-0.0002),(-0.0002),(-0.0004),(-0.0005),(-0.0007),(-0.0010),(-0.0013),(-0.0018),(-0.0024),(-0.0032),(-0.0044),(-0.0058),(-0.0077),(-0.0103),(-0.0136),(-0.0180),(-0.0237),(-0.0311),(-0.0408),(-0.0534),(-0.0699),(-0.0912),(-0.1190)};
local Util_pitchToRate_c2 = {0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0001,0.0001,0.0001,0.0001,0.0001,0.0002,0.0002,0.0003,0.0003,0.0004,0.0005};
function this.Util_pitchToRate(pitch)
   local index = this.clip(this.int((0.2441 * pitch)),0,31);
   return (Util_pitchToRate_c0[index+1] + (pitch * (Util_pitchToRate_c1[index+1] + (Util_pitchToRate_c2[index+1] * pitch))));

end

function this.Util_cvToPitch(cv)
   return ((cv * 120.0000) + 24.0000);

end

local Util_cvToRate_1024_c0 = {0.7594,0.7629,0.7797,0.8257,0.9246,1.1124,1.4407,1.9834,2.8444,4.1683,6.1540,9.0732,13.2943,19.3136,27.7961,39.6283,55.9867,78.4269,108.9974,150.3878,206.1178,280.7811,380.3573,512.6116,687.6053,918.3474,1221.6261,1619.0668,2138.4785,2815.5636,3696.0898,4838.6433,6318.1165};
local Util_cvToRate_1024_c1 = {5.2456,4.9989,4.4031,3.3191,1.5645,(-1.0993),(-4.9822),(-10.4859),(-18.1280),(-28.5741),(-42.6774),(-61.5281),(-86.5167),(-119.4121),(-162.4604),(-218.5081),(-291.1571),(-384.9574),(-505.6483),(-660.4605),(-858.4912),(-1111.1728),(-1432.8575),(-1841.5435),(-2359.7804),(-3015.7941),(-3844.8864),(-4891.1724),(-6209.7399),(-7869.3288),(-9955.6558),(-12575.5384),(-15862.0069)};
local Util_cvToRate_1024_c2 = {20.1256,24.4576,29.7220,36.1196,43.8942,53.3423,64.8241,78.7774,95.7340,116.3405,141.3825,171.8147,208.7973,253.7404,308.3573,374.7304,455.3902,553.4117,672.5321,817.2928,993.2130,1206.9994,1466.8029,1782.5283,2166.2129,2632.4845,3199.1198,3887.7219,4724.5438,5741.4893,6977.3298,8479.1816,10304.3030};
function this.Util_cvToRate_1024(cv)
   local index = this.clip(this.int((34.4444 * cv)),0,31);
   return (Util_cvToRate_1024_c0[index+1] + (cv * (Util_cvToRate_1024_c1[index+1] + (Util_cvToRate_1024_c2[index+1] * cv))));

end

local Util_cvToRate_c0 = {0.0007,0.0007,0.0007,0.0007,0.0007,0.0007,0.0007,0.0007,0.0008,0.0008,0.0008,0.0008,0.0008,0.0008,0.0008,0.0008,0.0009,0.0009,0.0009,0.0010,0.0010,0.0011,0.0011,0.0012,0.0013,0.0014,0.0015,0.0016,0.0017,0.0019,0.0020,0.0022,0.0024,0.0027,0.0029,0.0032,0.0035,0.0039,0.0043,0.0047,0.0052,0.0057,0.0063,0.0070,0.0077,0.0085,0.0093,0.0102,0.0113,0.0124,0.0136,0.0150,0.0164,0.0180,0.0198,0.0217,0.0237,0.0260,0.0284,0.0311,0.0339,0.0371,0.0404,0.0441,0.0481,0.0524,0.0571,0.0621,0.0676,0.0735,0.0799,0.0867,0.0942,0.1022,0.1109,0.1202,0.1303,0.1411,0.1528,0.1654,0.1790,0.1936,0.2093,0.2262,0.2443,0.2639,0.2849,0.3074,0.3317,0.3577,0.3856,0.4156,0.4478,0.4823,0.5194,0.5591,0.6017,0.6473,0.6963,0.7487,0.8048,0.8650,0.9294,0.9983,1.0722,1.1512,1.2357,1.3261,1.4229,1.5263,1.6369,1.7552,1.8816,2.0167,2.1611,2.3154,2.4802,2.6562,2.8442,3.0450,3.2593,3.4881,3.7323,3.9930,4.2711,4.5678,4.8844,5.2221,5.5822};
local Util_cvToRate_c1 = {0.0051,0.0051,0.0051,0.0051,0.0050,0.0049,0.0048,0.0047,0.0046,0.0044,0.0042,0.0040,0.0037,0.0034,0.0031,0.0027,0.0023,0.0018,0.0012,0.0007,0.0000,(-0.0007),(-0.0015),(-0.0023),(-0.0033),(-0.0043),(-0.0055),(-0.0067),(-0.0080),(-0.0095),(-0.0111),(-0.0128),(-0.0146),(-0.0166),(-0.0188),(-0.0212),(-0.0237),(-0.0265),(-0.0294),(-0.0326),(-0.0360),(-0.0397),(-0.0437),(-0.0480),(-0.0526),(-0.0575),(-0.0628),(-0.0684),(-0.0745),(-0.0810),(-0.0880),(-0.0955),(-0.1035),(-0.1121),(-0.1212),(-0.1310),(-0.1415),(-0.1527),(-0.1647),(-0.1775),(-0.1911),(-0.2057),(-0.2212),(-0.2378),(-0.2555),(-0.2743),(-0.2944),(-0.3159),(-0.3387),(-0.3630),(-0.3889),(-0.4165),(-0.4459),(-0.4772),(-0.5105),(-0.5459),(-0.5836),(-0.6237),(-0.6663),(-0.7117),(-0.7599),(-0.8111),(-0.8656),(-0.9235),(-0.9850),(-1.0504),(-1.1198),(-1.1936),(-1.2719),(-1.3551),(-1.4434),(-1.5371),(-1.6366),(-1.7422),(-1.8543),(-1.9732),(-2.0994),(-2.2333),(-2.3753),(-2.5259),(-2.6856),(-2.8550),(-3.0346),(-3.2250),(-3.4269),(-3.6409),(-3.8677),(-4.1081),(-4.3629),(-4.6328),(-4.9189),(-5.2220),(-5.5430),(-5.8831),(-6.2434),(-6.6250),(-7.0291),(-7.4570),(-7.9102),(-8.3900),(-8.8981),(-9.4359),(-10.0053),(-10.6080),(-11.2460),(-11.9212),(-12.6358),(-13.3921),(-14.1924)};
local Util_cvToRate_c2 = {0.0183,0.0192,0.0201,0.0211,0.0222,0.0233,0.0245,0.0257,0.0270,0.0283,0.0297,0.0312,0.0328,0.0344,0.0361,0.0379,0.0398,0.0418,0.0439,0.0461,0.0484,0.0508,0.0533,0.0560,0.0588,0.0617,0.0648,0.0681,0.0715,0.0750,0.0788,0.0827,0.0868,0.0912,0.0957,0.1005,0.1055,0.1108,0.1163,0.1221,0.1282,0.1346,0.1414,0.1484,0.1558,0.1636,0.1718,0.1804,0.1894,0.1988,0.2088,0.2192,0.2302,0.2416,0.2537,0.2664,0.2797,0.2937,0.3083,0.3237,0.3399,0.3569,0.3747,0.3934,0.4131,0.4337,0.4553,0.4781,0.5020,0.5270,0.5534,0.5810,0.6100,0.6405,0.6725,0.7061,0.7413,0.7783,0.8172,0.8580,0.9009,0.9459,0.9931,1.0427,1.0948,1.1495,1.2069,1.2672,1.3305,1.3969,1.4667,1.5399,1.6168,1.6976,1.7824,1.8714,1.9649,2.0630,2.1660,2.2742,2.3878,2.5070,2.6322,2.7637,2.9017,3.0467,3.1988,3.3586,3.5263,3.7025,3.8874,4.0815,4.2854,4.4994,4.7241,4.9601,5.2078,5.4679,5.7410,6.0277,6.3287,6.6448,6.9767,7.3251,7.6910,8.0751,8.4784,8.9019,9.3465};
function this.Util_cvToRate(cv)
   local index = this.clip(this.int((141.1111 * cv)),0,127);
   return (Util_cvToRate_c0[index+1] + (cv * (Util_cvToRate_c1[index+1] + (Util_cvToRate_c2[index+1] * cv))));

end

function this.Util_pitchToCv(pitch)
   return (0.0083 * ((-24.0000) + pitch));

end

local Util_cvToperiod_c0 = {674.2460,671.5538,662.7618,646.7595,623.7994,594.8718,561.2983,524.4769,485.7314,446.2294,406.9474,368.6638,331.9687,297.2842,264.8877,234.9369,207.4931,182.5430,160.0169,139.8048,121.7696,105.7571,91.6051,79.1491,68.2272,58.6839,50.3717,43.1534,36.9020,31.5020,26.8485,22.8472,19.4138};
local Util_cvToperiod_c1 = {(-4656.6563),(-4481.9606),(-4198.6861),(-3855.7515),(-3487.1395),(-3115.8588),(-2756.9303),(-2419.6251),(-2109.1348),(-1827.8083),(-1576.0630),(-1353.0471),(-1157.1189),(-986.1863),(-837.9447),(-710.0391),(-600.1712),(-506.1666),(-426.0135),(-357.8822),(-300.1302),(-251.2989),(-210.1041),(-175.4235),(-146.2821),(-121.8379),(-101.3665),(-84.2477),(-69.9521),(-58.0293),(-48.0972),(-39.8328),(-32.9632)};
local Util_cvToperiod_c2 = {14548.8232,11715.3695,9433.7447,7596.4773,6117.0266,4925.7061,3966.4010,3193.9253,2571.8929,2071.0043,1667.6662,1342.8802,1081.3478,870.7500,701.1673,564.6116,454.6507,366.1053,294.8045,237.3899,191.1571,153.9283,123.9500,99.8102,80.3717,64.7189,52.1146,41.9650,33.7921,27.2109,21.9115,17.6441,14.2078};
function this.Util_cvToperiod(cv)
   local index = this.clip(this.int((31.0000 * cv)),0,31);
   return (Util_cvToperiod_c0[index+1] + (cv * (Util_cvToperiod_c1[index+1] + (Util_cvToperiod_c2[index+1] * cv))));

end

local Util_cvTokHz_c0 = {0.0327,0.0329,0.0340,0.0369,0.0432,0.0556,0.0777,0.1151,0.1756,0.2707,0.4165,0.6356,0.9592,1.4308,2.1100,3.0780,4.4457,6.3629,9.0319,12.7247,17.8056,24.7617,34.2420,47.1090,64.5069,87.9496,119.4362,161.6023,217.9151,292.9296,392.6192,524.8066,699.7215};
local Util_cvTokHz_c1 = {0.2257,0.2123,0.1792,0.1176,0.0158,(-0.1422),(-0.3775),(-0.7183),(-1.2018),(-1.8772),(-2.8091),(-4.0819),(-5.8060),(-8.1254),(-11.2270),(-15.3537),(-20.8198),(-28.0318),(-37.5145),(-49.9444),(-66.1924),(-87.3784),(-114.9404),(-150.7233),(-197.0916),(-257.0723),(-334.5377),(-434.4368),(-563.0898),(-728.5619),(-941.1373),(-1213.9213),(-1563.6033)};
local Util_cvTokHz_c2 = {0.8763,1.0883,1.3515,1.6784,2.0843,2.5884,3.2144,3.9919,4.9573,6.1563,7.6452,9.4943,11.7905,14.6422,18.1835,22.5813,28.0428,34.8252,43.2479,53.7078,66.6974,82.8287,102.8615,127.7393,158.6341,197.0010,244.6472,303.8170,377.2976,468.5499,581.8724,722.6028,897.3699};
function this.Util_cvTokHz(cv)
   local index = this.clip(this.int((31.0000 * cv)),0,31);
   return (Util_cvTokHz_c0[index+1] + (cv * (Util_cvTokHz_c1[index+1] + (Util_cvTokHz_c2[index+1] * cv))));

end

function this.Phase__ctx_type_0_init()
   local _ctx = {};
   _ctx.rate = 0.0000;
   _ctx.phase = 0.0000;
   _ctx._inst25 = this.Util__ctx_type_0_init();
   _ctx._inst23 = this.Util__ctx_type_1_init();
   this.Phase_default(_ctx);
   return _ctx;

end

function this.Phase_process_init()
   return this.Phase__ctx_type_0_init();
end

function this.Phase_process(_ctx,cv,reset)
   if this.Util_change(_ctx._inst23,cv) then
      _ctx.rate = this.Util_cvToRate_1024(cv);

   end
   if this.Util_edge(_ctx._inst25,(reset > 0.5000)) then
      _ctx.phase = 0.0000;
   else

      _ctx.phase = (_ctx.phase + _ctx.rate);
   end
   if (_ctx.phase > 1024.0000) then
      _ctx.phase = (_ctx.phase + (-1024.0000));
   end
   return (_ctx.phase * 0.0010);

end

function this.Phase_noteOn_init()
   return this.Phase__ctx_type_0_init();
end

function this.Phase_noteOn(_ctx,note,velocity,channel)

end

function this.Phase_noteOff_init()
   return this.Phase__ctx_type_0_init();
end

function this.Phase_noteOff(_ctx,note,channel)

end

function this.Phase_controlChange_init()
   return this.Phase__ctx_type_0_init();
end

function this.Phase_controlChange(_ctx,control,value,channel)

end

function this.Phase_default_init()
   return this.Phase__ctx_type_0_init();
end

function this.Phase_default(_ctx)
   _ctx.rate = 0.7594;

end

local Tables_nsine_c0 = {0.0000,(-0.0001),(-0.0003),(-0.0008),(-0.0017),(-0.0032),(-0.0052),(-0.0079),(-0.0114),(-0.0158),(-0.0210),(-0.0271),(-0.0342),(-0.0422),(-0.0512),(-0.0610),(-0.0717),(-0.0832),(-0.0953),(-0.1081),(-0.1212),(-0.1346),(-0.1481),(-0.1614),(-0.1745),(-0.1869),(-0.1985),(-0.2090),(-0.2180),(-0.2253),(-0.2305),(-0.2333),(-0.2333),(-0.2301),(-0.2234),(-0.2127),(-0.1978),(-0.1781),(-0.1533),(-0.1230),(-0.0868),(-0.0442),0.0049,0.0612,0.1248,0.1961,0.2755,0.3632,0.4596,0.5648,0.6791,0.8026,0.9356,1.0780,1.2301,1.3918,1.5632,1.7440,1.9344,2.1341,2.3429,2.5605,2.7867,3.0211,3.2633,3.5128,3.7692,4.0317,4.2999,4.5730,4.8502,5.1309,5.4141,5.6989,5.9845,6.2698,6.5537,6.8353,7.1134,7.3868,7.6544,7.9149,8.1671,8.4097,8.6415,8.8611,9.0672,9.2586,9.4338,9.5915,9.7305,9.8495,9.9471,10.0221,10.0733,10.0994,10.0994,10.0721,10.0164,9.9313,9.8159,9.6693,9.4907,9.2793,9.0345,8.7557,8.4425,8.0944,7.7112,7.2927,6.8388,6.3495,5.8250,5.2655,4.6714,4.0433,3.3817,2.6874,1.9613,1.2043,0.4176,(-0.3976),(-1.2398),(-2.1076),(-2.9993),(-3.9132),(-4.8475),(-5.8000),(-6.7688)};
local Tables_nsine_c1 = {6.2844,6.2996,6.3297,6.3746,6.4340,6.5074,6.5943,6.6940,6.8059,6.9290,7.0625,7.2053,7.3563,7.5144,7.6782,7.8464,8.0176,8.1904,8.3632,8.5345,8.7027,8.8660,9.0230,9.1718,9.3108,9.4382,9.5524,9.6517,9.7343,9.7987,9.8432,9.8662,9.8661,9.8416,9.7911,9.7133,9.6069,9.4708,9.3038,9.1048,8.8731,8.6077,8.3079,7.9733,7.6032,7.1974,6.7556,6.2778,5.7639,5.2143,4.6292,4.0091,3.3546,2.6664,1.9455,1.1928,0.4096,(-0.4028),(-1.2430),(-2.1093),(-3.0001),(-3.9135),(-4.8475),(-5.8000),(-6.7688),(-7.7516),(-8.7459),(-9.7491),(-10.7586),(-11.7718),(-12.7858),(-13.7977),(-14.8046),(-15.8036),(-16.7915),(-17.7652),(-18.7218),(-19.6579),(-20.5706),(-21.4567),(-22.3129),(-23.1363),(-23.9238),(-24.6722),(-25.3786),(-26.0400),(-26.6536),(-27.2167),(-27.7264),(-28.1802),(-28.5757),(-28.9103),(-29.1820),(-29.3885),(-29.5279),(-29.5984),(-29.5984),(-29.5263),(-29.3808),(-29.1609),(-28.8655),(-28.4940),(-28.0458),(-27.5204),(-26.9179),(-26.2383),(-25.4819),(-24.6492),(-23.7408),(-22.7579),(-21.7015),(-20.5731),(-19.3742),(-18.1068),(-16.7728),(-15.3745),(-13.9145),(-12.3953),(-10.8200),(-9.1916),(-7.5133),(-5.7887),(-4.0215),(-2.2154),(-0.3744),1.4974,3.3955,5.3156,7.2532};
local Tables_nsine_c2 = {(-0.4844),(-1.4520),(-2.4162),(-3.3745),(-4.3247),(-5.2644),(-6.1915),(-7.1037),(-7.9987),(-8.8745),(-9.7289),(-10.5599),(-11.3654),(-12.1436),(-12.8925),(-13.6103),(-14.2953),(-14.9460),(-15.5606),(-16.1377),(-16.6759),(-17.1740),(-17.6307),(-18.0449),(-18.4156),(-18.7420),(-19.0232),(-19.2586),(-19.4476),(-19.5898),(-19.6847),(-19.7323),(-19.7323),(-19.6847),(-19.5898),(-19.4476),(-19.2586),(-19.0232),(-18.7420),(-18.4156),(-18.0449),(-17.6307),(-17.1740),(-16.6759),(-16.1377),(-15.5606),(-14.9460),(-14.2953),(-13.6103),(-12.8925),(-12.1436),(-11.3654),(-10.5599),(-9.7289),(-8.8745),(-7.9987),(-7.1037),(-6.1915),(-5.2644),(-4.3247),(-3.3745),(-2.4162),(-1.4520),(-0.4844),0.4844,1.4520,2.4162,3.3745,4.3247,5.2644,6.1915,7.1037,7.9987,8.8745,9.7289,10.5599,11.3654,12.1436,12.8925,13.6103,14.2953,14.9460,15.5606,16.1377,16.6759,17.1740,17.6307,18.0449,18.4156,18.7420,19.0232,19.2586,19.4476,19.5898,19.6847,19.7323,19.7323,19.6847,19.5898,19.4476,19.2586,19.0232,18.7420,18.4156,18.0449,17.6307,17.1740,16.6759,16.1377,15.5606,14.9460,14.2953,13.6103,12.8925,12.1436,11.3654,10.5599,9.7289,8.8745,7.9987,7.1037,6.1915,5.2644,4.3247,3.3745,2.4162,1.4520,0.4844,(-0.4844)};
function this.Tables_nsine(x)
   local index = this.clip(this.int((127.0000 * x)),0,127);
   return (Tables_nsine_c0[index+1] + (x * (Tables_nsine_c1[index+1] + (Tables_nsine_c2[index+1] * x))));

end

function this.Phd__ctx_type_0_init()
   local _ctx = {};
   _ctx.pre_phase1 = 0.0000;
   _ctx._inst37 = this.Phase__ctx_type_0_init();
   _ctx._inst36 = this.Util__ctx_type_4_init();
   _ctx._inst35 = this.Phase__ctx_type_0_init();
   return _ctx;

end

function this.Phd_process_init()
   return this.Phd__ctx_type_0_init();
end

function this.Phd_process(_ctx,cv,detune)
   local phase1 = this.Phase_process(_ctx._inst35,cv,0.0000);
   local comp = (1.0000 + (- phase1));
   local reset = (_ctx.pre_phase1 + (- phase1));
   _ctx.pre_phase1 = phase1;
   local phase2 = this.Phase_process(_ctx._inst37,(cv + this.Util_smooth(_ctx._inst36,(detune * 0.5000))),reset);
   local sine = this.Tables_nsine(phase2);
   return (sine * comp);

end

function this.Phd_noteOn_init()
   return this.Phd__ctx_type_0_init();
end

function this.Phd_noteOn(_ctx,note,velocity,channel)

end

function this.Phd_noteOff_init()
   return this.Phd__ctx_type_0_init();
end

function this.Phd_noteOff(_ctx,note,channel)

end

function this.Phd_controlChange_init()
   return this.Phd__ctx_type_0_init();
end

function this.Phd_controlChange(_ctx,control,value,channel)

end

function this.Phd_default_init()
   return this.Phd__ctx_type_0_init();
end

function this.Phd_default(_ctx)

end


function this.process(ctx,cv,detune) return this.Phd_process(ctx,cv,detune) end
function this.noteOn(ctx,note,velocity,channel) return this.Phd_noteOn(ctx,note,velocity,channel) end
function this.noteOff(ctx,note,channel) return this.Phd_noteOff(ctx,note,channel) end
function this.controlChange(ctx,control,value,channel) return this.Phd_controlChange(ctx,control,value,channel) end
function this.init() return this.Phd_process_init() end
function this.default(ctx) return this.Phd_default(ctx) end
this.config = { inputs = 3, outputs = 1, noteon_inputs = 4, noteoff_inputs = 3, controlchange_inputs = 4, is_active = true }
return this
