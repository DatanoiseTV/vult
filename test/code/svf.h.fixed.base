
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#ifndef SVF_H
#define SVF_H
#include <stdint.h>
#include <math.h>
#include "vultin.h"
#include "svf.tables.h"

typedef struct Util__ctx_type_0 {
   uint8_t pre;
} Util__ctx_type_0;

typedef Util__ctx_type_0 Util_edge_type;

static_inline void Util__ctx_type_0_init(Util__ctx_type_0 &_output_){
   Util__ctx_type_0 _ctx;
   _ctx.pre = false;
   _output_ = _ctx;
   return ;
}

static_inline void Util_edge_init(Util__ctx_type_0 &_output_){
   Util__ctx_type_0_init(_output_);
   return ;
}

static_inline uint8_t Util_edge(Util__ctx_type_0 &_ctx, uint8_t x){
   uint8_t ret;
   ret = (x && bool_not(_ctx.pre));
   _ctx.pre = x;
   return ret;
}

typedef struct Util__ctx_type_1 {
   fix16_t pre_x;
} Util__ctx_type_1;

typedef Util__ctx_type_1 Util_change_type;

static_inline void Util__ctx_type_1_init(Util__ctx_type_1 &_output_){
   Util__ctx_type_1 _ctx;
   _ctx.pre_x = 0x0 /* 0.000000 */;
   _output_ = _ctx;
   return ;
}

static_inline void Util_change_init(Util__ctx_type_1 &_output_){
   Util__ctx_type_1_init(_output_);
   return ;
}

static_inline uint8_t Util_change(Util__ctx_type_1 &_ctx, fix16_t x){
   uint8_t v;
   v = (_ctx.pre_x != x);
   _ctx.pre_x = x;
   return v;
}

static_inline fix16_t Util_map(fix16_t x, fix16_t x0, fix16_t x1, fix16_t y0, fix16_t y1){
   return (y0 + fix_div(fix_mul((x + (- x0)),(y1 + (- y0))),(x1 + (- x0))));
};

typedef struct Util__ctx_type_3 {
   fix16_t y1;
   fix16_t x1;
} Util__ctx_type_3;

typedef Util__ctx_type_3 Util_dcblock_type;

void Util__ctx_type_3_init(Util__ctx_type_3 &_output_);

static_inline void Util_dcblock_init(Util__ctx_type_3 &_output_){
   Util__ctx_type_3_init(_output_);
   return ;
}

fix16_t Util_dcblock(Util__ctx_type_3 &_ctx, fix16_t x0);

typedef struct Util__ctx_type_4 {
   fix16_t x;
} Util__ctx_type_4;

typedef Util__ctx_type_4 Util_smooth_type;

static_inline void Util__ctx_type_4_init(Util__ctx_type_4 &_output_){
   Util__ctx_type_4 _ctx;
   _ctx.x = 0x0 /* 0.000000 */;
   _output_ = _ctx;
   return ;
}

static_inline void Util_smooth_init(Util__ctx_type_4 &_output_){
   Util__ctx_type_4_init(_output_);
   return ;
}

static_inline fix16_t Util_smooth(Util__ctx_type_4 &_ctx, fix16_t input){
   _ctx.x = (_ctx.x + fix_mul(0x147 /* 0.005000 */,(input + (- _ctx.x))));
   return _ctx.x;
}

typedef struct Util__ctx_type_5 {
   fix16_t x0;
} Util__ctx_type_5;

typedef Util__ctx_type_5 Util_average2_type;

static_inline void Util__ctx_type_5_init(Util__ctx_type_5 &_output_){
   Util__ctx_type_5 _ctx;
   _ctx.x0 = 0x0 /* 0.000000 */;
   _output_ = _ctx;
   return ;
}

static_inline void Util_average2_init(Util__ctx_type_5 &_output_){
   Util__ctx_type_5_init(_output_);
   return ;
}

static_inline fix16_t Util_average2(Util__ctx_type_5 &_ctx, fix16_t x1){
   fix16_t result;
   result = ((_ctx.x0 + x1) >> 1);
   _ctx.x0 = x1;
   return result;
}

static_inline fix16_t Util_cubic_clipper(fix16_t x){
   if(x <= -0xaaaa /* -0.666667 */){
      return -0xaaaa /* -0.666667 */;
   }
   else
   {
      if(x >= 0xaaaa /* 0.666667 */){
         return 0xaaaa /* 0.666667 */;
      }
      else
      {
         return (x + fix_mul(fix_mul(fix_mul(-0x5555 /* -0.333333 */,x),x),x));
      }
   }
};

static_inline fix16_t Util_pitchToRate_1024_raw_c0(int index){
   return Util_pitchToRate_1024_c0[index];
};

static_inline fix16_t Util_pitchToRate_1024_raw_c1(int index){
   return Util_pitchToRate_1024_c1[index];
};

static_inline fix16_t Util_pitchToRate_1024_raw_c2(int index){
   return Util_pitchToRate_1024_c2[index];
};

static_inline fix16_t Util_pitchToRate_1024(fix16_t pitch){
   int index;
   index = int_clip(fix_to_int(fix_mul(0x3e7c /* 0.244094 */,pitch)),0,31);
   return (fix_wrap_array(Util_pitchToRate_1024_c0)[index] + fix_mul(pitch,(fix_wrap_array(Util_pitchToRate_1024_c1)[index] + fix_mul(pitch,fix_wrap_array(Util_pitchToRate_1024_c2)[index]))));
}

static_inline fix16_t Util_pitchToRate_raw_c0(int index){
   return Util_pitchToRate_c0[index];
};

static_inline fix16_t Util_pitchToRate_raw_c1(int index){
   return Util_pitchToRate_c1[index];
};

static_inline fix16_t Util_pitchToRate_raw_c2(int index){
   return Util_pitchToRate_c2[index];
};

static_inline fix16_t Util_pitchToRate(fix16_t pitch){
   int index;
   index = int_clip(fix_to_int(fix_mul(0x3e7c /* 0.244094 */,pitch)),0,31);
   return (fix_wrap_array(Util_pitchToRate_c0)[index] + fix_mul(pitch,(fix_wrap_array(Util_pitchToRate_c1)[index] + fix_mul(pitch,fix_wrap_array(Util_pitchToRate_c2)[index]))));
}

static_inline fix16_t Util_cvToPitch(fix16_t cv){
   return (0x180000 /* 24.000000 */ + fix_mul(0x780000 /* 120.000000 */,cv));
};

static_inline fix16_t Util_cvToRate_1024_raw_c0(int index){
   return Util_cvToRate_1024_c0[index];
};

static_inline fix16_t Util_cvToRate_1024_raw_c1(int index){
   return Util_cvToRate_1024_c1[index];
};

static_inline fix16_t Util_cvToRate_1024_raw_c2(int index){
   return Util_cvToRate_1024_c2[index];
};

static_inline fix16_t Util_cvToRate_1024(fix16_t cv){
   int index;
   index = int_clip(fix_to_int(fix_mul(0x2271c7 /* 34.444445 */,cv)),0,31);
   return (fix_wrap_array(Util_cvToRate_1024_c0)[index] + fix_mul(cv,(fix_wrap_array(Util_cvToRate_1024_c1)[index] + fix_mul(cv,fix_wrap_array(Util_cvToRate_1024_c2)[index]))));
}

static_inline fix16_t Util_cvToRate_raw_c0(int index){
   return Util_cvToRate_c0[index];
};

static_inline fix16_t Util_cvToRate_raw_c1(int index){
   return Util_cvToRate_c1[index];
};

static_inline fix16_t Util_cvToRate_raw_c2(int index){
   return Util_cvToRate_c2[index];
};

static_inline fix16_t Util_cvToRate(fix16_t cv){
   int index;
   index = int_clip(fix_to_int(fix_mul(0x8d1c71 /* 141.111111 */,cv)),0,127);
   return (fix_wrap_array(Util_cvToRate_c0)[index] + fix_mul(cv,(fix_wrap_array(Util_cvToRate_c1)[index] + fix_mul(cv,fix_wrap_array(Util_cvToRate_c2)[index]))));
}

static_inline fix16_t Util_pitchToCv(fix16_t pitch){
   return fix_mul(0x222 /* 0.008333 */,(-0x180000 /* -24.000000 */ + pitch));
};

static_inline fix16_t Util_cvToperiod_raw_c0(int index){
   return Util_cvToperiod_c0[index];
};

static_inline fix16_t Util_cvToperiod_raw_c1(int index){
   return Util_cvToperiod_c1[index];
};

static_inline fix16_t Util_cvToperiod_raw_c2(int index){
   return Util_cvToperiod_c2[index];
};

static_inline fix16_t Util_cvToperiod(fix16_t cv){
   int index;
   index = int_clip(fix_to_int(fix_mul(0x1f0000 /* 31.000000 */,cv)),0,31);
   return (fix_wrap_array(Util_cvToperiod_c0)[index] + fix_mul(cv,(fix_wrap_array(Util_cvToperiod_c1)[index] + fix_mul(cv,fix_wrap_array(Util_cvToperiod_c2)[index]))));
}

static_inline fix16_t Util_cvTokHz_raw_c0(int index){
   return Util_cvTokHz_c0[index];
};

static_inline fix16_t Util_cvTokHz_raw_c1(int index){
   return Util_cvTokHz_c1[index];
};

static_inline fix16_t Util_cvTokHz_raw_c2(int index){
   return Util_cvTokHz_c2[index];
};

static_inline fix16_t Util_cvTokHz(fix16_t cv){
   int index;
   index = int_clip(fix_to_int(fix_mul(0x1f0000 /* 31.000000 */,cv)),0,31);
   return (fix_wrap_array(Util_cvTokHz_c0)[index] + fix_mul(cv,(fix_wrap_array(Util_cvTokHz_c1)[index] + fix_mul(cv,fix_wrap_array(Util_cvTokHz_c2)[index]))));
}

static_inline fix16_t Saturate_soft_tanh_table_raw_c0(int index){
   return Saturate_soft_tanh_table_c0[index];
};

static_inline fix16_t Saturate_soft_tanh_table_raw_c1(int index){
   return Saturate_soft_tanh_table_c1[index];
};

static_inline fix16_t Saturate_soft_tanh_table_raw_c2(int index){
   return Saturate_soft_tanh_table_c2[index];
};

static_inline fix16_t Saturate_soft_tanh_table(fix16_t x){
   int index;
   index = int_clip(fix_to_int(fix_mul(0x50000 /* 5.000000 */,(0x180000 /* 24.000000 */ + x))),0,240);
   return (fix_wrap_array(Saturate_soft_tanh_table_c0)[index] + fix_mul(x,(fix_wrap_array(Saturate_soft_tanh_table_c1)[index] + fix_mul(x,fix_wrap_array(Saturate_soft_tanh_table_c2)[index]))));
}

static_inline fix16_t Saturate_soft_process(fix16_t x){
   return Saturate_soft_tanh_table(x);
};

static_inline void Saturate_soft_noteOn(int note, int velocity, int channel){
}

static_inline void Saturate_soft_noteOff(int note, int channel){
}

static_inline void Saturate_soft_controlChange(int control, int value, int channel){
}

static_inline void Saturate_soft_default(){
}

static_inline fix16_t Svf_calc_g_raw_c0(int index){
   return Svf_calc_g_c0[index];
};

static_inline fix16_t Svf_calc_g_raw_c1(int index){
   return Svf_calc_g_c1[index];
};

static_inline fix16_t Svf_calc_g_raw_c2(int index){
   return Svf_calc_g_c2[index];
};

static_inline fix16_t Svf_calc_g(fix16_t cv){
   int index;
   index = int_clip(fix_to_int(fix_mul(0x8d1c71 /* 141.111111 */,cv)),0,127);
   return (fix_wrap_array(Svf_calc_g_c0)[index] + fix_mul(cv,(fix_wrap_array(Svf_calc_g_c1)[index] + fix_mul(cv,fix_wrap_array(Svf_calc_g_c2)[index]))));
}

typedef struct Svf__ctx_type_4 {
   fix16_t z2;
   fix16_t z1;
   fix16_t inv_den;
   fix16_t g;
   Util__ctx_type_1 _inst28;
   Util__ctx_type_1 _inst27;
   fix16_t R;
} Svf__ctx_type_4;

typedef Svf__ctx_type_4 Svf_process_type;

void Svf__ctx_type_4_init(Svf__ctx_type_4 &_output_);

static_inline void Svf_process_init(Svf__ctx_type_4 &_output_){
   Svf__ctx_type_4_init(_output_);
   return ;
}

fix16_t Svf_process(Svf__ctx_type_4 &_ctx, fix16_t x, fix16_t cv, fix16_t q, int sel);

typedef Svf__ctx_type_4 Svf_noteOn_type;

static_inline void Svf_noteOn_init(Svf__ctx_type_4 &_output_){
   Svf__ctx_type_4_init(_output_);
   return ;
}

static_inline void Svf_noteOn(Svf__ctx_type_4 &_ctx, int note, int velocity, int channel){
}

typedef Svf__ctx_type_4 Svf_noteOff_type;

static_inline void Svf_noteOff_init(Svf__ctx_type_4 &_output_){
   Svf__ctx_type_4_init(_output_);
   return ;
}

static_inline void Svf_noteOff(Svf__ctx_type_4 &_ctx, int note, int channel){
}

typedef Svf__ctx_type_4 Svf_controlChange_type;

static_inline void Svf_controlChange_init(Svf__ctx_type_4 &_output_){
   Svf__ctx_type_4_init(_output_);
   return ;
}

static_inline void Svf_controlChange(Svf__ctx_type_4 &_ctx, int control, int value, int channel){
}

typedef Svf__ctx_type_4 Svf_default_type;

static_inline void Svf_default_init(Svf__ctx_type_4 &_output_){
   Svf__ctx_type_4_init(_output_);
   return ;
}

static_inline void Svf_default(Svf__ctx_type_4 &_ctx){
   _ctx.g = 0x98 /* 0.002330 */;
   _ctx.R = 0x10000 /* 1.000000 */;
   _ctx.inv_den = fix_div(0x10000 /* 1.000000 */,(0x10000 /* 1.000000 */ + fix_mul(_ctx.g,_ctx.g)));
}



#endif // SVF_H
