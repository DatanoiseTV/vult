
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#include "sine.h"

fix16_t Tables_nsine(fix16_t x){
   int index;
   index = int_clip(fix_to_int(fix_mul(0x7f0000 /* 127.000000 */,x)),0,127);
   return fix_add(fix_get(fix_wrap_array(Tables_nsine_c0),index),fix_mul(x,fix_add(fix_get(fix_wrap_array(Tables_nsine_c1),index),fix_mul(fix_get(fix_wrap_array(Tables_nsine_c2),index),x))));
}

void Util__ctx_type_0_init(Util__ctx_type_0 &_output_){
   Util__ctx_type_0 _ctx;
   _ctx.pre = 0;
   _output_ = _ctx;
   return ;
}

void Util_edge_init(Util__ctx_type_0 &_output_){
   Util__ctx_type_0_init(_output_);
   return ;
}

uint8_t Util_edge(Util__ctx_type_0 &_ctx, uint8_t x){
   uint8_t ret;
   ret = (x && bool_not(_ctx.pre));
   _ctx.pre = x;
   return ret;
}

void Util__ctx_type_1_init(Util__ctx_type_1 &_output_){
   Util__ctx_type_1 _ctx;
   _ctx.pre_x = 0x0 /* 0.000000 */;
   _output_ = _ctx;
   return ;
}

void Util_change_init(Util__ctx_type_1 &_output_){
   Util__ctx_type_1_init(_output_);
   return ;
}

uint8_t Util_change(Util__ctx_type_1 &_ctx, fix16_t x){
   uint8_t v;
   v = (_ctx.pre_x != x);
   _ctx.pre_x = x;
   return v;
}

fix16_t Util_map(fix16_t x, fix16_t x0, fix16_t x1, fix16_t y0, fix16_t y1){
   return fix_add(fix_div(fix_mul(fix_add(x,(- x0)),fix_add(y1,(- y0))),fix_add(x1,(- x0))),y0);
}

void Util__ctx_type_3_init(Util__ctx_type_3 &_output_){
   Util__ctx_type_3 _ctx;
   _ctx.y1 = 0x0 /* 0.000000 */;
   _ctx.x1 = 0x0 /* 0.000000 */;
   _output_ = _ctx;
   return ;
}

void Util_dcblock_init(Util__ctx_type_3 &_output_){
   Util__ctx_type_3_init(_output_);
   return ;
}

fix16_t Util_dcblock(Util__ctx_type_3 &_ctx, fix16_t x0){
   fix16_t y0;
   y0 = fix_add(fix_add(x0,(- _ctx.x1)),fix_mul(_ctx.y1,0xfeb8 /* 0.995000 */));
   _ctx.x1 = x0;
   _ctx.y1 = y0;
   return y0;
}

void Util__ctx_type_4_init(Util__ctx_type_4 &_output_){
   Util__ctx_type_4 _ctx;
   _ctx.x = 0x0 /* 0.000000 */;
   _output_ = _ctx;
   return ;
}

void Util_smooth_init(Util__ctx_type_4 &_output_){
   Util__ctx_type_4_init(_output_);
   return ;
}

fix16_t Util_smooth(Util__ctx_type_4 &_ctx, fix16_t input){
   _ctx.x = fix_add(_ctx.x,fix_mul(fix_add(input,(- _ctx.x)),0x147 /* 0.005000 */));
   return _ctx.x;
}

void Util__ctx_type_5_init(Util__ctx_type_5 &_output_){
   Util__ctx_type_5 _ctx;
   _ctx.x0 = 0x0 /* 0.000000 */;
   _output_ = _ctx;
   return ;
}

void Util_average2_init(Util__ctx_type_5 &_output_){
   Util__ctx_type_5_init(_output_);
   return ;
}

fix16_t Util_average2(Util__ctx_type_5 &_ctx, fix16_t x1){
   fix16_t result;
   result = fix_mul(fix_add(_ctx.x0,x1),0x8000 /* 0.500000 */);
   _ctx.x0 = x1;
   return result;
}

fix16_t Util_pitchToRate(fix16_t pitch){
   int index;
   index = int_clip(fix_to_int(fix_mul(0x3e7c /* 0.244094 */,pitch)),0,31);
   return fix_add(fix_get(fix_wrap_array(Util_pitchToRate_c0),index),fix_mul(pitch,fix_add(fix_get(fix_wrap_array(Util_pitchToRate_c1),index),fix_mul(fix_get(fix_wrap_array(Util_pitchToRate_c2),index),pitch))));
}

fix16_t Util_cvToPitch(fix16_t cv){
   return fix_add(fix_mul(cv,0x780000 /* 120.000000 */),0x180000 /* 24.000000 */);
}

fix16_t Util_cvToRate(fix16_t cv){
   int index;
   index = int_clip(fix_to_int(fix_mul(0x2271c7 /* 34.444444 */,cv)),0,31);
   return fix_add(fix_get(fix_wrap_array(Util_cvToRate_c0),index),fix_mul(cv,fix_add(fix_get(fix_wrap_array(Util_cvToRate_c1),index),fix_mul(fix_get(fix_wrap_array(Util_cvToRate_c2),index),cv))));
}

fix16_t Util_pitchToCv(fix16_t pitch){
   return fix_mul(0x222 /* 0.008333 */,fix_add((-0x180000 /* -24.000000 */),pitch));
}

fix16_t Util_cvToRate_unit(fix16_t cv){
   int index;
   index = int_clip(fix_to_int(fix_mul(0x2271c7 /* 34.444444 */,cv)),0,31);
   return fix_add(fix_get(fix_wrap_array(Util_cvToRate_unit_c0),index),fix_mul(cv,fix_add(fix_get(fix_wrap_array(Util_cvToRate_unit_c1),index),fix_mul(fix_get(fix_wrap_array(Util_cvToRate_unit_c2),index),cv))));
}

void Saw__ctx_type_0_init(Saw__ctx_type_0 &_output_){
   Saw__ctx_type_0 _ctx;
   _ctx.rate = 0x0 /* 0.000000 */;
   _ctx.phase = 0x0 /* 0.000000 */;
   Util__ctx_type_0_init(_ctx._inst16);
   Util__ctx_type_1_init(_ctx._inst14);
   Saw_default(_ctx);
   _output_ = _ctx;
   return ;
}

void Saw_process_init(Saw__ctx_type_0 &_output_){
   Saw__ctx_type_0_init(_output_);
   return ;
}

fix16_t Saw_process(Saw__ctx_type_0 &_ctx, fix16_t cv, fix16_t reset){
   uint8_t _cond_21;
   _cond_21 = Util_change(_ctx._inst14,cv);
   if(_cond_21){
      _ctx.rate = Util_cvToRate(cv);
   }
   uint8_t _cond_22;
   _cond_22 = Util_edge(_ctx._inst16,(reset > 0x8000 /* 0.500000 */));
   if(_cond_22){ _ctx.phase = 0x0 /* 0.000000 */; }
   else
   { _ctx.phase = fix_add(_ctx.phase,_ctx.rate); }
   uint8_t _cond_23;
   _cond_23 = (_ctx.phase > 0x4000000 /* 1024.000000 */);
   if(_cond_23){ _ctx.phase = fix_add(_ctx.phase,(-0x4000000 /* -1024.000000 */)); }
   else
   { _ctx.phase = _ctx.phase; }
   return fix_mul(_ctx.phase,0x40 /* 0.000977 */);
}

void Saw_noteOn_init(Saw__ctx_type_0 &_output_){
   Saw__ctx_type_0_init(_output_);
   return ;
}

void Saw_noteOn(Saw__ctx_type_0 &_ctx, int note, int velocity, int channel){
}

void Saw_noteOff_init(Saw__ctx_type_0 &_output_){
   Saw__ctx_type_0_init(_output_);
   return ;
}

void Saw_noteOff(Saw__ctx_type_0 &_ctx, int note, int channel){
}

void Saw_controlChange_init(Saw__ctx_type_0 &_output_){
   Saw__ctx_type_0_init(_output_);
   return ;
}

void Saw_controlChange(Saw__ctx_type_0 &_ctx, int control, int value, int channel){
}

void Saw_default_init(Saw__ctx_type_0 &_output_){
   Saw__ctx_type_0_init(_output_);
   return ;
}

void Saw_default(Saw__ctx_type_0 &_ctx){
   _ctx.rate = 0xc265 /* 0.759367 */;
}

void Sine__ctx_type_0_init(Sine__ctx_type_0 &_output_){
   Sine__ctx_type_0 _ctx;
   _ctx.trig = 0;
   Saw__ctx_type_0_init(_ctx.p);
   Util__ctx_type_0_init(_ctx._inst25);
   _output_ = _ctx;
   return ;
}

void Sine_process_init(Sine__ctx_type_0 &_output_){
   Sine__ctx_type_0_init(_output_);
   return ;
}

fix16_t Sine_process(Sine__ctx_type_0 &_ctx, fix16_t cv, fix16_t reset){
   uint8_t _cond_32;
   _cond_32 = Util_edge(_ctx._inst25,(reset > 0x8000 /* 0.500000 */));
   if(_cond_32){
      _ctx.trig = 1;
   }
   fix16_t phase;
   phase = Saw_process(_ctx.p,cv,0x0 /* 0.000000 */);
   uint8_t _cond_33;
   _cond_33 = ((phase < 0x0 /* 0.000000 */) && _ctx.trig);
   if(_cond_33){
      _ctx.trig = 0;
      Saw_process(_ctx.p,cv,0x0 /* 0.000000 */);
   }
   return Tables_nsine(phase);
}

void Sine_noteOn_init(Sine__ctx_type_0 &_output_){
   Sine__ctx_type_0_init(_output_);
   return ;
}

void Sine_noteOn(Sine__ctx_type_0 &_ctx, int note, int velocity, int channel){
}

void Sine_noteOff_init(Sine__ctx_type_0 &_output_){
   Sine__ctx_type_0_init(_output_);
   return ;
}

void Sine_noteOff(Sine__ctx_type_0 &_ctx, int note, int channel){
}

void Sine_controlChange_init(Sine__ctx_type_0 &_output_){
   Sine__ctx_type_0_init(_output_);
   return ;
}

void Sine_controlChange(Sine__ctx_type_0 &_ctx, int control, int value, int channel){
}

void Sine_default_init(Sine__ctx_type_0 &_output_){
   Sine__ctx_type_0_init(_output_);
   return ;
}

void Sine_default(Sine__ctx_type_0 &_ctx){
}


