
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#include "sff_ff.h"

void Sff_ff__ctx_type_0_init(Sff_ff__ctx_type_0 &_output_){
   Sff_ff__ctx_type_0 _ctx;
   _ctx.process_ret_1 = 0x0 /* 0.000000 */;
   _ctx.process_ret_0 = 0x0 /* 0.000000 */;
   _output_ = _ctx;
   return ;
}



extern "C" {

EXPORT void *sff_ff__constructor()
{
   Sff_ff_process_type *data = (Sff_ff_process_type *)malloc(sizeof(Sff_ff_process_type));
   Sff_ff_process_init(*data);
   Sff_ff_default(*data);
   return (void *)data;
}

EXPORT void sff_ff__destructor(void *object)
{
   Sff_ff_process_type *data = (Sff_ff_process_type *)object;
   free(data);
}

EXPORT void sff_ff__process(void *object, double in_0, double in_1, double &out_0, double &out_1)
{
   Sff_ff_process_type *data = (Sff_ff_process_type *)object;
   _tuple___real_real__ ret;  Sff_ff_process(*data,float_to_fix(in_0),float_to_fix(in_1),ret); 
out_0 = fix_to_float(ret.field_0); 
out_1 = fix_to_float(ret.field_1); 

}


EXPORT void sff_ff__noteOn(void *object, int note,int velocity,int channel){
   Sff_ff_process_type *data = (Sff_ff_process_type *)object;
   if(vel) Sff_ff_noteOn(*data,(int)note,(int)velocity,(int)channel);
   else Sff_ff_noteOff(*data,(int)note,(int)channel);
}



EXPORT void sff_ff__noteOff(void *object, int note,int channel) {
   Sff_ff_process_type *data = (Sff_ff_process_type *)object;
   Sff_ff_noteOff(*data,(int)note,(int)channel);
}



EXPORT void sff_ff__controlChange(void *object, int control,int value,int channel) {
   Sff_ff_process_type *data = (Sff_ff_process_type *)object;
   Sff_ff_controlChange(*data,(int)control,(int)value,(int)channel);
}


} // extern "C"
