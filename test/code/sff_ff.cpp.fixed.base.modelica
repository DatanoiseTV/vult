
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#include "sff_ff.h"

void Sff_ff_process(fix16_t a, fix16_t b, _tuple___real_real__ &_output_){
   _tuple___real_real__ _tuple_5;
   {
      _tuple_5.field_0 = (a + b);
      _tuple_5.field_1 = (a + (- b));
   }
   _output_ = _tuple_5;
   return ;
}

void Sff_ff_noteOn(int note, int velocity, int channel){
}

void Sff_ff_noteOff(int note, int channel){
}

void Sff_ff_controlChange(int control, int value, int channel){
}

void Sff_ff_default(){
}



extern "C" {

EXPORT void *sff_ff__constructor()
{
   float *data = (float *)malloc(sizeof(float));
   
   
   return (void *)data;
}

EXPORT void sff_ff__destructor(void *object)
{
   float *data = (float *)object;
   free(data);
}

EXPORT void sff_ff__process(void *object, double in_0, double in_1, double &out_0, double &out_1)
{
   float *data = (float *)object;
   _tuple___real_real__ ret;  Sff_ff_process(float_to_fix(in_0),float_to_fix(in_1),ret); 
out_0 = fix_to_float(ret.field_0); 
out_1 = fix_to_float(ret.field_1); 

}


EXPORT void sff_ff__noteOn(void *object, int note,int velocity,int channel){
   float *data = (float *)object;
   if(vel) Sff_ff_noteOn((int)note,(int)velocity,(int)channel);
   else Sff_ff_noteOff((int)note,(int)channel);
}



EXPORT void sff_ff__noteOff(void *object, int note,int channel) {
   float *data = (float *)object;
   Sff_ff_noteOff((int)note,(int)channel);
}



EXPORT void sff_ff__controlChange(void *object, int control,int value,int channel) {
   float *data = (float *)object;
   Sff_ff_controlChange((int)control,(int)value,(int)channel);
}


} // extern "C"
