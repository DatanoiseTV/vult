
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#include "sf_f.h"

float Sf_f_process(float input){
   return (input * input);
}

void Sf_f_noteOn(int note, int velocity, int channel){
}

void Sf_f_noteOff(int note, int channel){
}

void Sf_f_controlChange(int control, int value, int channel){
}

void Sf_f_default(){
}



extern "C" {

EXPORT void *sf_f__constructor()
{
   float *data = (float *)malloc(sizeof(float));
   
   
   return (void *)data;
}

EXPORT void sf_f__destructor(void *object)
{
   float *data = (float *)object;
   free(data);
}

EXPORT double sf_f__process(void *object, double in_0)
{
   float *data = (float *)object;
   float ret =  Sf_f_process((float) in_0);
return (float) ret;
}


EXPORT void sf_f__noteOn(void *object, int note, int vel, int channel){
   float *data = (float *)object;
   if(vel) Sf_f_noteOn((int)note,(int)vel,(int)channel);
   else Sf_f_noteOff((int)note,(int)channel);
}



EXPORT void sf_f__noteOff(void *object, int note, int channel) {
   float *data = (float *)object;
   Sf_f_noteOff((int)note,(int)channel);
}



EXPORT void sf_f__controlChange(void *object, int control, int value, int channel) {
   float *data = (float *)object;
   Sf_f_controlChange((int)control,(int)value,(int)channel);
}


} // extern "C"
