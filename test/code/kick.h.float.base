
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#ifndef KICK_H
#define KICK_H
#include <stdint.h>
#include <math.h>
#include "vultin.h"

typedef struct _tuple___real_real__ {
   float field_0;
   float field_1;
} _tuple___real_real__;

typedef struct Noise__ctx_type_0 {
   float w1;
} Noise__ctx_type_0;

typedef Noise__ctx_type_0 Noise_pinker_type;

void Noise__ctx_type_0_init(Noise__ctx_type_0 &_output_);

void Noise_pinker_init(Noise__ctx_type_0 &_output_);

float Noise_pinker(Noise__ctx_type_0 &_ctx, float x);

typedef struct Noise__ctx_type_1 {
   int x2;
   int x1;
   Noise__ctx_type_0 _inst2;
} Noise__ctx_type_1;

typedef Noise__ctx_type_1 Noise_process_type;

void Noise__ctx_type_1_init(Noise__ctx_type_1 &_output_);

void Noise_process_init(Noise__ctx_type_1 &_output_);

float Noise_process(Noise__ctx_type_1 &_ctx, float color);

typedef Noise__ctx_type_1 Noise_noteOn_type;

void Noise_noteOn_init(Noise__ctx_type_1 &_output_);

void Noise_noteOn(Noise__ctx_type_1 &_ctx, int note, int velocity, int channel);

typedef Noise__ctx_type_1 Noise_noteOff_type;

void Noise_noteOff_init(Noise__ctx_type_1 &_output_);

void Noise_noteOff(Noise__ctx_type_1 &_ctx, int note, int channel);

typedef Noise__ctx_type_1 Noise_controlChange_type;

void Noise_controlChange_init(Noise__ctx_type_1 &_output_);

void Noise_controlChange(Noise__ctx_type_1 &_ctx, int control, int value, int channel);

typedef Noise__ctx_type_1 Noise_default_type;

void Noise_default_init(Noise__ctx_type_1 &_output_);

void Noise_default(Noise__ctx_type_1 &_ctx);

typedef struct Util__ctx_type_0 {
   uint8_t pre;
} Util__ctx_type_0;

typedef Util__ctx_type_0 Util_edge_type;

void Util__ctx_type_0_init(Util__ctx_type_0 &_output_);

void Util_edge_init(Util__ctx_type_0 &_output_);

uint8_t Util_edge(Util__ctx_type_0 &_ctx, uint8_t x);

typedef struct Util__ctx_type_1 {
   float pre_x;
} Util__ctx_type_1;

typedef Util__ctx_type_1 Util_change_type;

void Util__ctx_type_1_init(Util__ctx_type_1 &_output_);

void Util_change_init(Util__ctx_type_1 &_output_);

uint8_t Util_change(Util__ctx_type_1 &_ctx, float x);

float Util_map(float x, float x0, float x1, float y0, float y1);

typedef struct Util__ctx_type_3 {
   float y1;
   float x1;
} Util__ctx_type_3;

typedef Util__ctx_type_3 Util_dcblock_type;

void Util__ctx_type_3_init(Util__ctx_type_3 &_output_);

void Util_dcblock_init(Util__ctx_type_3 &_output_);

float Util_dcblock(Util__ctx_type_3 &_ctx, float x0);

typedef struct Util__ctx_type_4 {
   float x;
} Util__ctx_type_4;

typedef Util__ctx_type_4 Util_smooth_type;

void Util__ctx_type_4_init(Util__ctx_type_4 &_output_);

void Util_smooth_init(Util__ctx_type_4 &_output_);

float Util_smooth(Util__ctx_type_4 &_ctx, float input);

typedef struct Util__ctx_type_5 {
   float x0;
} Util__ctx_type_5;

typedef Util__ctx_type_5 Util_average2_type;

void Util__ctx_type_5_init(Util__ctx_type_5 &_output_);

void Util_average2_init(Util__ctx_type_5 &_output_);

float Util_average2(Util__ctx_type_5 &_ctx, float x1);

float Util_cubic_clipper(float x);

static const float Util_pitchToRate_1024_c0[32] = {0.1898417f,0.1913259f,0.1986886f,0.2194246f,0.2656772f,0.3564378f,0.5206507f,0.8015597f,1.2627581f,1.9965621f,3.135544f,4.8683456f,7.4612795f,11.2877251f,16.8680071f,24.9233293f,36.4485185f,52.8098903f,75.8766039f,108.1965793f,153.2316185f,215.6710565f,301.8494285f,420.3017178f,582.500346f,803.8319419f,1104.890093f,1513.1840318f,2065.3942521f,2810.3465753f,3812.9290693f,5159.2451728f};
static const float Util_pitchToRate_1024_c1[32] = {0.0109134f,0.0101758f,0.0083338f,0.004867f,-0.0009394f,-0.0100609f,-0.0238203f,-0.0440021f,-0.0730021f,-0.1140249f,-0.1713405f,-0.2506214f,-0.3593814f,-0.5075483f,-0.7082084f,-0.9785757f,-1.3412496f,-1.8258479f,-2.4711225f,-3.3277005f,-4.4616308f,-5.9589702f,-7.9317091f,-10.5254219f,-13.9291388f,-18.3880749f,-24.2200334f,-31.8365325f,-41.7699993f,-54.7087564f,-71.5420103f,-93.4176738f};
static const float Util_pitchToRate_1024_c2[32] = {0.0003556f,0.0004472f,0.0005624f,0.0007073f,0.0008895f,0.0011187f,0.0014069f,0.0017694f,0.0022253f,0.0027986f,0.0035197f,0.0044265f,0.005567f,0.0070013f,0.0088052f,0.0110738f,0.013927f,0.0175152f,0.022028f,0.0277035f,0.0348413f,0.043818f,0.0551077f,0.0693061f,0.0871628f,0.1096201f,0.1378636f,0.173384f,0.2180562f,0.2742381f,0.3448952f,0.4337571f};
float Util_pitchToRate_1024_raw_c0(int index);

float Util_pitchToRate_1024_raw_c1(int index);

float Util_pitchToRate_1024_raw_c2(int index);

float Util_pitchToRate_1024(float pitch);

static const float Util_pitchToRate_c0[32] = {0.0001854f,0.0001869f,0.0001941f,0.0002143f,0.0002595f,0.0003481f,0.0005085f,0.0007828f,0.0012332f,0.0019498f,0.0030621f,0.0047543f,0.0072865f,0.0110232f,0.0164727f,0.0243392f,0.0355943f,0.0515722f,0.0740983f,0.1056608f,0.1496403f,0.2106163f,0.2947749f,0.4104509f,0.568848f,0.7849922f,1.0789943f,1.4777188f,2.0169866f,2.7444791f,3.7235636f,5.0383254f};
static const float Util_pitchToRate_c1[32] = {1.07e-05f,1e-05f,8.2e-06f,4.8e-06f,-9e-07f,-9.8e-06f,-2.32e-05f,-4.29e-05f,-7.12e-05f,-0.0001113f,-0.0001673f,-0.0002447f,-0.0003509f,-0.0004956f,-0.0006916f,-0.0009556f,-0.0013098f,-0.001783f,-0.0024132f,-0.0032497f,-0.004357f,-0.0058193f,-0.0077458f,-0.0102787f,-0.0136026f,-0.0179571f,-0.0236523f,-0.0310903f,-0.040791f,-0.0534265f,-0.0698652f,-0.0912281f};
static const float Util_pitchToRate_c2[32] = {4e-07f,5e-07f,6e-07f,7e-07f,9e-07f,1.1e-06f,1.4e-06f,1.8e-06f,2.2e-06f,2.8e-06f,3.5e-06f,4.4e-06f,5.5e-06f,6.9e-06f,8.6e-06f,1.09e-05f,1.37e-05f,1.72e-05f,2.16e-05f,2.71e-05f,3.41e-05f,4.28e-05f,5.39e-05f,6.77e-05f,8.52e-05f,0.0001071f,0.0001347f,0.0001694f,0.000213f,0.0002679f,0.0003369f,0.0004236f};
float Util_pitchToRate_raw_c0(int index);

float Util_pitchToRate_raw_c1(int index);

float Util_pitchToRate_raw_c2(int index);

float Util_pitchToRate(float pitch);

float Util_cvToPitch(float cv);

static const float Util_cvToRate_1024_c0[32] = {0.7593668f,0.7628769f,0.7797366f,0.8256516f,0.9246484f,1.1123985f,1.4406875f,1.9833925f,2.8444342f,4.1683106f,6.1539936f,9.073195f,13.2942978f,19.3136143f,27.7961018f,39.6282634f,55.9867165f,78.4268778f,108.9974326f,150.3878036f,206.1177981f,280.7810906f,380.3573327f,512.6116485f,687.6052678f,918.3473603f,1221.6260803f,1619.0668426f,2138.4784521f,2815.5635571f,3696.0898222f,4838.643251f};
static const float Util_cvToRate_1024_c1[32] = {5.2455831f,4.9989426f,4.4030893f,3.3191161f,1.5644968f,-1.0992562f,-4.9822262f,-10.4858642f,-18.1279556f,-28.574102f,-42.6773652f,-61.5281299f,-86.516746f,-119.4121434f,-162.4603915f,-218.5081483f,-291.1571467f,-384.9573613f,-505.6483473f,-660.4605419f,-858.49116f,-1111.1728348f,-1432.8575168f,-1841.543534f,-2359.7803917f,-3015.7941424f,-3844.8863585f,-4891.1723528f,-6209.7398756f,-7869.328765f,-9955.6558052f,-12575.5383972f};
static const float Util_cvToRate_1024_c2[32] = {20.1255919f,24.4575724f,29.7220002f,36.1195823f,43.8942271f,53.3423435f,64.8241421f,78.7773676f,95.733988f,116.3404762f,141.3824565f,171.814657f,208.7973083f,253.7403777f,308.3573241f,374.730424f,455.3901585f,553.4116878f,672.5320926f,817.29285f,993.2129783f,1206.9994498f,1466.8028948f,1782.5283455f,2166.212866f,2632.4844665f,3199.1197981f,3887.7218889f,4724.5437618f,5741.4893336f,6977.329755f,8479.1815645f};
float Util_cvToRate_1024_raw_c0(int index);

float Util_cvToRate_1024_raw_c1(int index);

float Util_cvToRate_1024_raw_c2(int index);

float Util_cvToRate_1024(float cv);

static const float Util_cvToRate_c0[128] = {0.0007416f,0.0007417f,0.0007419f,0.0007423f,0.0007431f,0.0007445f,0.0007466f,0.0007495f,0.0007536f,0.000759f,0.000766f,0.0007749f,0.000786f,0.0007997f,0.0008163f,0.0008364f,0.0008604f,0.0008888f,0.0009222f,0.0009614f,0.0010069f,0.0010596f,0.0011203f,0.00119f,0.0012697f,0.0013604f,0.0014635f,0.0015802f,0.001712f,0.0018604f,0.0020271f,0.0022141f,0.0024232f,0.0026568f,0.0029171f,0.0032067f,0.0035283f,0.0038851f,0.0042802f,0.0047172f,0.0051998f,0.0057321f,0.0063187f,0.0069642f,0.0076738f,0.0084532f,0.0093082f,0.0102454f,0.0112717f,0.0123946f,0.0136222f,0.0149632f,0.0164269f,0.0180234f,0.0197635f,0.0216588f,0.0237217f,0.0259657f,0.0284052f,0.0310556f,0.0339336f,0.0370567f,0.0404443f,0.0441167f,0.0480959f,0.0524055f,0.0570705f,0.0621181f,0.0675771f,0.0734786f,0.0798558f,0.0867441f,0.0941815f,0.1022089f,0.1108697f,0.1202104f,0.1302809f,0.1411344f,0.1528279f,0.1654223f,0.1789825f,0.1935781f,0.2092834f,0.2261777f,0.2443458f,0.2638781f,0.2848713f,0.3074285f,0.3316599f,0.357683f,0.3856233f,0.4156144f,0.4477993f,0.4823303f,0.5193697f,0.5590908f,0.6016783f,0.6473293f,0.6962535f,0.7486748f,0.8048318f,0.8649786f,0.929386f,0.9983426f,1.0721558f,1.1511531f,1.2356831f,1.3261173f,1.4228512f,1.5263058f,1.6369296f,1.7551997f,1.8816241f,2.0167435f,2.1611333f,2.3154058f,2.4802125f,2.6562464f,2.8442451f,3.0449928f,3.2593239f,3.4881257f,3.7323419f,3.9929758f,4.2710944f,4.5678321f,4.8843948f,5.2220646f};
static const float Util_cvToRate_c1[128] = {0.0051392f,0.0051263f,0.0050994f,0.0050569f,0.0049975f,0.0049196f,0.0048214f,0.0047011f,0.0045567f,0.0043863f,0.0041874f,0.0039577f,0.0036947f,0.0033955f,0.0030572f,0.0026766f,0.0022504f,0.001775f,0.0012464f,0.0006606f,1.32e-05f,-0.0007005f,-0.0014856f,-0.0023473f,-0.0032914f,-0.0043239f,-0.0054514f,-0.0066807f,-0.0080191f,-0.0094747f,-0.0110556f,-0.0127708f,-0.0146297f,-0.0166425f,-0.0188198f,-0.0211731f,-0.0237146f,-0.0264571f,-0.0294143f,-0.032601f,-0.0360326f,-0.0397257f,-0.0436977f,-0.0479675f,-0.0525547f,-0.0574805f,-0.0627673f,-0.0684387f,-0.0745201f,-0.0810382f,-0.0880216f,-0.0955003f,-0.1035065f,-0.1120742f,-0.1212396f,-0.1310409f,-0.1415188f,-0.1527165f,-0.1646796f,-0.1774569f,-0.1910996f,-0.2056624f,-0.2212032f,-0.2377833f,-0.2554678f,-0.2743257f,-0.29443f,-0.3158582f,-0.3386924f,-0.3630195f,-0.3889319f,-0.416527f,-0.4459084f,-0.4771857f,-0.510475f,-0.5458991f,-0.5835884f,-0.6236806f,-0.6663219f,-0.7116669f,-0.7598792f,-0.8111321f,-0.8656092f,-0.9235045f,-0.9850238f,-1.0503845f,-1.1198169f,-1.1935646f,-1.2718857f,-1.3550528f,-1.4433547f,-1.5370969f,-1.6366025f,-1.7422134f,-1.8542912f,-1.9732184f,-2.0993997f,-2.233263f,-2.3752609f,-2.5258721f,-2.6856026f,-2.8549877f,-3.0345935f,-3.2250182f,-3.4268945f,-3.6408914f,-3.867716f,-4.1081157f,-4.3628809f,-4.6328468f,-4.9188962f,-5.2219624f,-5.5430316f,-5.883146f,-6.2434073f,-6.6249794f,-7.0290924f,-7.4570461f,-7.9102138f,-8.3900467f,-8.898078f,-9.4359272f,-10.0053059f,-10.6080216f,-11.2459841f,-11.9212107f,-12.6358324f,-13.3921f};
static const float Util_cvToRate_c2[128] = {0.0182549f,0.0191666f,0.0201238f,0.0211289f,0.0221841f,0.0232921f,0.0244554f,0.0256768f,0.0269592f,0.0283057f,0.0297194f,0.0312037f,0.0327621f,0.0343984f,0.0361164f,0.0379202f,0.0398141f,0.0418025f,0.0438903f,0.0460824f,0.0483839f,0.0508004f,0.0533376f,0.0560015f,0.0587984f,0.061735f,0.0648183f,0.0680556f,0.0714546f,0.0750233f,0.0787703f,0.0827044f,0.086835f,0.0911719f,0.0957254f,0.1005063f,0.105526f,0.1107964f,0.11633f,0.12214f,0.1282402f,0.134645f,0.1413697f,0.1484303f,0.1558435f,0.163627f,0.1717992f,0.1803795f,0.1893884f,0.1988473f,0.2087785f,0.2192058f,0.2301538f,0.2416486f,0.2537175f,0.2663892f,0.2796938f,0.2936628f,0.3083295f,0.3237288f,0.3398971f,0.356873f,0.3746966f,0.3934105f,0.413059f,0.4336889f,0.4553491f,0.4780911f,0.5019689f,0.5270393f,0.5533618f,0.5809989f,0.6100164f,0.6404831f,0.6724714f,0.7060574f,0.7413208f,0.7783454f,0.8172191f,0.8580344f,0.9008881f,0.9458821f,0.9931234f,1.042724f,1.0948019f,1.1494808f,1.2068905f,1.2671676f,1.3304551f,1.3969035f,1.4666705f,1.539922f,1.616832f,1.6975832f,1.7823675f,1.8713862f,1.9648508f,2.0629835f,2.1660173f,2.2741971f,2.3877798f,2.5070353f,2.6322469f,2.763712f,2.9017431f,3.046668f,3.198831f,3.3585937f,3.5263356f,3.7024552f,3.8873709f,4.0815221f,4.28537f,4.4993989f,4.7241173f,4.960059f,5.2077846f,5.4678826f,5.740971f,6.0276986f,6.3287465f,6.6448299f,6.9766999f,7.3251448f,7.6909924f,8.075112f,8.4784161f,8.9018628f};
float Util_cvToRate_raw_c0(int index);

float Util_cvToRate_raw_c1(int index);

float Util_cvToRate_raw_c2(int index);

float Util_cvToRate(float cv);

float Util_pitchToCv(float pitch);

static const float Util_cvToperiod_c0[32] = {674.2460348f,671.5538378f,662.7617819f,646.759522f,623.7994278f,594.871802f,561.2982769f,524.4769422f,485.7313693f,446.2293824f,406.9474404f,368.6637744f,331.9686831f,297.2841558f,264.8876665f,234.9368568f,207.4931244f,182.5430159f,160.0169068f,139.8048318f,121.7695566f,105.757117f,91.6051156f,79.1490884f,68.227249f,58.6838946f,50.3717336f,43.153355f,36.902033f,31.5020248f,26.8484943f,22.8471657f};
static const float Util_cvToperiod_c1[32] = {-4656.6563108f,-4481.960579f,-4198.6861325f,-3855.7515427f,-3487.1394548f,-3115.8588213f,-2756.9303187f,-2419.6251411f,-2109.1347532f,-1827.8083337f,-1576.062963f,-1353.0470918f,-1157.1188644f,-986.1862501f,-837.9446649f,-710.0391128f,-600.1712335f,-506.1665656f,-426.0134627f,-357.8821512f,-300.1301898f,-251.2989043f,-210.1041049f,-175.4234501f,-146.2821135f,-121.837895f,-101.3665365f,-84.2477263f,-69.9520817f,-58.0292593f,-48.0972479f,-39.8328333f};
static const float Util_cvToperiod_c2[32] = {14548.8231621f,11715.3695219f,9433.7446751f,7596.4772967f,6117.0266216f,4925.7061172f,3966.4010399f,3193.9252637f,2571.8928791f,2071.0043083f,1667.666208f,1342.8801524f,1081.3477513f,870.7500494f,701.1672681f,564.6115532f,454.6507239f,366.1052976f,294.8045211f,237.3899156f,191.157082f,153.9283162f,123.9500325f,99.8101645f,80.3716525f,64.7188847f,52.114569f,41.9650048f,33.7921173f,27.2109391f,21.9114772f,17.6441111f};
float Util_cvToperiod_raw_c0(int index);

float Util_cvToperiod_raw_c1(int index);

float Util_cvToperiod_raw_c2(int index);

float Util_cvToperiod(float cv);

static const float Util_cvTokHz_c0[32] = {0.0327032f,0.0329158f,0.0339579f,0.0368567f,0.0432422f,0.055616f,0.0777238f,0.115069f,0.1756143f,0.2707394f,0.4165374f,0.6355669f,0.9592072f,1.4308178f,2.1099596f,3.078021f,4.4456974f,6.3629088f,9.0319219f,12.7246767f,17.805619f,24.7617347f,34.2419904f,47.1090422f,64.5069279f,87.9495574f,119.436234f,161.6022735f,217.9151479f,292.9296186f,392.6192398f,524.8066449f};
static const float Util_cvTokHz_c1[32] = {0.2257192f,0.2122933f,0.1791694f,0.117605f,0.0157802f,-0.142178f,-0.3774662f,-0.7182503f,-1.2017969f,-1.8772284f,-2.8090773f,-4.0818673f,-5.8060081f,-8.1253731f,-11.2270275f,-15.3537053f,-20.8197945f,-28.0317982f,-37.5145028f,-49.9444141f,-66.1924493f,-87.3784044f,-114.9403964f,-150.7233371f,-197.0915838f,-257.0722838f,-334.5376738f,-434.4367882f,-563.0898166f,-728.5618575f,-941.1372579f,-1213.9213282f};
static const float Util_cvTokHz_c2[32] = {0.8763378f,1.088287f,1.3514976f,1.6783679f,2.0842943f,2.5883971f,3.2144212f,3.991854f,4.9573151f,6.1562805f,7.645225f,9.4942823f,11.7905487f,14.642185f,18.1835118f,22.5813362f,28.0428087f,34.8251811f,43.2479231f,53.7077712f,66.6974152f,82.8287061f,102.8614758f,127.7393272f,158.6340814f,197.0009732f,244.6471976f,303.8170335f,377.2975565f,468.549918f,581.872376f,722.6027558f};
float Util_cvTokHz_raw_c0(int index);

float Util_cvTokHz_raw_c1(int index);

float Util_cvTokHz_raw_c2(int index);

float Util_cvTokHz(float cv);

typedef struct Tricore__ctx_type_0 {
   uint8_t reset_state;
   float reset_phase;
   float rate;
   float phase;
   uint8_t direction;
   Util__ctx_type_0 _inst30;
   Util__ctx_type_0 _inst29;
   Util__ctx_type_1 _inst27;
} Tricore__ctx_type_0;

typedef Tricore__ctx_type_0 Tricore_process_type;

void Tricore__ctx_type_0_init(Tricore__ctx_type_0 &_output_);

void Tricore_process_init(Tricore__ctx_type_0 &_output_);

float Tricore_process(Tricore__ctx_type_0 &_ctx, float cv, float reset, float disable);

typedef Tricore__ctx_type_0 Tricore_noteOn_type;

void Tricore_noteOn_init(Tricore__ctx_type_0 &_output_);

void Tricore_noteOn(Tricore__ctx_type_0 &_ctx, int note, int velocity, int channel);

typedef Tricore__ctx_type_0 Tricore_noteOff_type;

void Tricore_noteOff_init(Tricore__ctx_type_0 &_output_);

void Tricore_noteOff(Tricore__ctx_type_0 &_ctx, int note, int channel);

typedef Tricore__ctx_type_0 Tricore_controlChange_type;

void Tricore_controlChange_init(Tricore__ctx_type_0 &_output_);

void Tricore_controlChange(Tricore__ctx_type_0 &_ctx, int control, int value, int channel);

typedef Tricore__ctx_type_0 Tricore_default_type;

void Tricore_default_init(Tricore__ctx_type_0 &_output_);

void Tricore_default(Tricore__ctx_type_0 &_ctx);

typedef struct Swept__ctx_type_0 {
   float out;
   Util__ctx_type_0 _inst43;
} Swept__ctx_type_0;

typedef Swept__ctx_type_0 Swept_process_type;

void Swept__ctx_type_0_init(Swept__ctx_type_0 &_output_);

void Swept_process_init(Swept__ctx_type_0 &_output_);

float Swept_process(Swept__ctx_type_0 &_ctx, float gate, float start, float end, float rate);

typedef Swept__ctx_type_0 Swept_noteOn_type;

void Swept_noteOn_init(Swept__ctx_type_0 &_output_);

void Swept_noteOn(Swept__ctx_type_0 &_ctx, int note, int velocity, int channel);

typedef Swept__ctx_type_0 Swept_noteOff_type;

void Swept_noteOff_init(Swept__ctx_type_0 &_output_);

void Swept_noteOff(Swept__ctx_type_0 &_ctx, int note, int channel);

typedef Swept__ctx_type_0 Swept_controlChange_type;

void Swept_controlChange_init(Swept__ctx_type_0 &_output_);

void Swept_controlChange(Swept__ctx_type_0 &_ctx, int control, int value, int channel);

typedef Swept__ctx_type_0 Swept_default_type;

void Swept_default_init(Swept__ctx_type_0 &_output_);

void Swept_default(Swept__ctx_type_0 &_ctx);

static const float Saturate_tanh_table_c0[241] = {-0.9999999f,-1.f,-0.9999999f,-0.9999999f,-1.f,-1.f,-1.f,-1.f,-1.f,-0.9999999f,-1.f,-0.9999999f,-1.f,-1.f,-1.f,-1.f,-0.9999999f,-0.9999999f,-1.f,-1.f,-1.f,-0.9999999f,-1.f,-0.9999999f,-0.9999999f,-0.9999999f,-1.f,-1.f,-0.9999999f,-0.9999999f,-0.9999999f,-0.9999999f,-1.f,-1.f,-0.9999999f,-1.f,-0.9999999f,-0.9999999f,-0.9999999f,-0.9999999f,-0.9999999f,-0.9999999f,-0.9999999f,-0.9999999f,-0.9999999f,-0.9999999f,-0.9999999f,-0.9999999f,-0.9999999f,-0.9999999f,-0.9999999f,-0.9999999f,-0.9999999f,-0.9999999f,-0.9999999f,-0.9999999f,-0.9999999f,-0.9999999f,-0.9999999f,-0.9999999f,-0.9999999f,-0.9999999f,-0.9999999f,-0.9999999f,-0.9999998f,-0.9999998f,-0.9999997f,-0.9999996f,-0.9999995f,-0.9999993f,-0.999999f,-0.9999985f,-0.9999979f,-0.9999971f,-0.9999958f,-0.999994f,-0.9999915f,-0.9999879f,-0.9999828f,-0.9999755f,-0.9999652f,-0.9999506f,-0.99993f,-0.9999008f,-0.9998596f,-0.9998016f,-0.99972f,-0.9996054f,-0.9994448f,-0.9992201f,-0.9989064f,-0.9984693f,-0.9978619f,-0.9970196f,-0.9958548f,-0.9942488f,-0.9920414f,-0.9890177f,-0.9848912f,-0.979283f,-0.971696f,-0.9614848f,-0.9478218f,-0.9296621f,-0.9057134f,-0.8744205f,-0.8339839f,-0.7824421f,-0.7178658f,-0.6387281f,-0.5445268f,-0.4367078f,-0.3198224f,-0.2025515f,-0.0977039f,-0.0197582f,0.0211021f,0.0266707f,0.0132848f,0.0017885f,-0.f,-0.0017884f,-0.0132847f,-0.0266706f,-0.021102f,0.0197583f,0.097704f,0.2025516f,0.3198225f,0.4367079f,0.5445269f,0.6387282f,0.7178659f,0.7824422f,0.833984f,0.8744206f,0.9057135f,0.9296622f,0.9478219f,0.9614849f,0.9716961f,0.9792831f,0.9848913f,0.9890178f,0.9920415f,0.9942489f,0.9958549f,0.9970197f,0.997862f,0.9984694f,0.9989065f,0.9992202f,0.9994449f,0.9996055f,0.9997201f,0.9998017f,0.9998597f,0.9999009f,0.9999301f,0.9999507f,0.9999653f,0.9999756f,0.9999829f,0.999988f,0.9999916f,0.9999941f,0.9999959f,0.9999972f,0.999998f,0.9999986f,0.9999991f,0.9999994f,0.9999996f,0.9999997f,0.9999998f,0.9999999f,0.9999999f,1.f,1.f,1.f,1.f,1.f,1.f,1.f,1.f,1.f,1.f,1.f,1.f,1.f,1.f,1.f,1.f,1.f,1.f,1.f,1.f,1.f,1.f,1.f,1.f,1.f,1.f,1.f,1.f,1.0000001f,1.f,1.f,1.0000001f,1.f,1.f,1.f,1.0000001f,1.0000001f,1.0000001f,1.0000001f,1.f,1.0000001f,1.f,1.f,1.0000001f,1.0000001f,1.0000001f,1.f,1.0000001f,1.0000001f,1.0000001f,1.0000001f,1.f,1.f,1.f,1.0000001f,1.0000001f,1.f,1.0000001f,1.0000001f,1.f,1.0000001f,1.0000001f,1.0000001f,1.0000001f};
static const float Saturate_tanh_table_c1[241] = {-0.f,-0.f,-0.f,-0.f,-0.f,-0.f,-0.f,-0.f,-0.f,-0.f,-0.f,-0.f,-0.f,-0.f,-0.f,-0.f,-0.f,-0.f,-0.f,-0.f,-0.f,-0.f,-0.f,-0.f,1e-07f,-0.f,-0.f,1e-07f,1e-07f,1e-07f,1e-07f,1e-07f,1e-07f,1e-07f,1e-07f,1e-07f,1e-07f,1e-07f,1e-07f,1e-07f,1e-07f,1e-07f,1e-07f,1e-07f,1e-07f,1e-07f,1e-07f,1e-07f,1e-07f,1e-07f,1e-07f,1e-07f,1e-07f,1e-07f,1e-07f,1e-07f,1e-07f,1e-07f,1e-07f,1e-07f,1e-07f,1e-07f,1e-07f,1e-07f,1e-07f,1e-07f,1e-07f,1e-07f,1e-07f,2e-07f,2e-07f,3e-07f,5e-07f,6e-07f,9e-07f,1.3e-06f,1.9e-06f,2.7e-06f,3.9e-06f,5.7e-06f,8.2e-06f,1.19e-05f,1.73e-05f,2.51e-05f,3.65e-05f,5.29e-05f,7.67e-05f,0.000111f,0.0001607f,0.0002324f,0.0003358f,0.0004847f,0.0006989f,0.0010067f,0.0014485f,0.0020815f,0.0029872f,0.0042806f,0.0061243f,0.0087467f,0.0124675f,0.0177325f,0.0251587f,0.0355936f,0.0501902f,0.0704952f,0.0985456f,0.1369519f,0.1889258f,0.258165f,0.3484412f,0.46265f,0.6010234f,0.7583267f,0.9204895f,1.0626907f,1.1532138f,1.1678153f,1.1121236f,1.0333692f,0.9967074f,1.0333692f,1.1121236f,1.1678153f,1.1532138f,1.0626907f,0.9204895f,0.7583267f,0.6010234f,0.46265f,0.3484412f,0.258165f,0.1889258f,0.1369519f,0.0985456f,0.0704952f,0.0501902f,0.0355936f,0.0251587f,0.0177325f,0.0124675f,0.0087467f,0.0061243f,0.0042806f,0.0029872f,0.0020815f,0.0014485f,0.0010067f,0.0006989f,0.0004847f,0.0003358f,0.0002324f,0.0001607f,0.000111f,7.67e-05f,5.29e-05f,3.65e-05f,2.51e-05f,1.73e-05f,1.19e-05f,8.2e-06f,5.7e-06f,3.9e-06f,2.7e-06f,1.9e-06f,1.3e-06f,9e-07f,6e-07f,5e-07f,3e-07f,2e-07f,2e-07f,1e-07f,1e-07f,1e-07f,1e-07f,1e-07f,1e-07f,1e-07f,1e-07f,1e-07f,1e-07f,1e-07f,1e-07f,1e-07f,1e-07f,1e-07f,1e-07f,1e-07f,1e-07f,1e-07f,1e-07f,1e-07f,1e-07f,1e-07f,1e-07f,1e-07f,1e-07f,1e-07f,1e-07f,1e-07f,1e-07f,1e-07f,1e-07f,1e-07f,1e-07f,1e-07f,1e-07f,1e-07f,1e-07f,1e-07f,1e-07f,1e-07f,1e-07f,-0.f,-0.f,1e-07f,-0.f,-0.f,-0.f,-0.f,-0.f,-0.f,-0.f,-0.f,-0.f,-0.f,-0.f,-0.f,-0.f,-0.f,-0.f,-0.f,-0.f,-0.f,-0.f,-0.f,-0.f,-0.f,-0.f,-0.f};
static const float Saturate_tanh_table_c2[241] = {0.f,0.f,0.f,0.f,0.f,0.f,0.f,0.f,0.f,0.f,0.f,0.f,0.f,0.f,0.f,0.f,0.f,0.f,0.f,0.f,0.f,0.f,0.f,0.f,1e-07f,0.f,0.f,1e-07f,1e-07f,1e-07f,-0.f,1e-07f,-0.f,1e-07f,1e-07f,-0.f,1e-07f,1e-07f,1e-07f,1e-07f,1e-07f,1e-07f,1e-07f,1e-07f,1e-07f,1e-07f,1e-07f,1e-07f,1e-07f,1e-07f,1e-07f,1e-07f,1e-07f,1e-07f,1e-07f,1e-07f,1e-07f,1e-07f,1e-07f,1e-07f,1e-07f,1e-07f,1e-07f,1e-07f,1e-07f,1e-07f,1e-07f,1e-07f,1e-07f,1e-07f,1e-07f,1e-07f,1e-07f,1e-07f,1e-07f,1e-07f,1e-07f,2e-07f,3e-07f,4e-07f,5e-07f,8e-07f,1.1e-06f,1.6e-06f,2.4e-06f,3.6e-06f,5.3e-06f,7.9e-06f,1.17e-05f,1.75e-05f,2.6e-05f,3.86e-05f,5.75e-05f,8.57e-05f,0.0001276f,0.0001899f,0.0002828f,0.0004211f,0.0006271f,0.0009336f,0.0013898f,0.0020685f,0.0030776f,0.0045766f,0.0068007f,0.0100946f,0.0149591f,0.0221137f,0.0325713f,0.047716f,0.0693446f,0.0995888f,0.1405415f,0.1932917f,0.2559939f,0.3208506f,0.3709848f,0.3804716f,0.3226146f,0.1878104f,-0.f,-0.1878103f,-0.3226145f,-0.3804715f,-0.3709847f,-0.3208505f,-0.2559938f,-0.1932916f,-0.1405414f,-0.0995887f,-0.0693445f,-0.0477159f,-0.0325712f,-0.0221136f,-0.014959f,-0.0100945f,-0.0068006f,-0.0045765f,-0.0030775f,-0.0020684f,-0.0013897f,-0.0009335f,-0.000627f,-0.000421f,-0.0002827f,-0.0001898f,-0.0001275f,-8.56e-05f,-5.74e-05f,-3.85e-05f,-2.59e-05f,-1.74e-05f,-1.16e-05f,-7.8e-06f,-5.2e-06f,-3.5e-06f,-2.3e-06f,-1.5e-06f,-1e-06f,-7e-07f,-4e-07f,-3e-07f,-2e-07f,-1e-07f,-0.f,-0.f,-0.f,-0.f,-0.f,-0.f,-0.f,-0.f,-0.f,-0.f,-0.f,-0.f,-0.f,-0.f,-0.f,-0.f,-0.f,-0.f,-0.f,-0.f,-0.f,-0.f,-0.f,-0.f,-0.f,-0.f,-0.f,-0.f,-0.f,-0.f,-0.f,-0.f,-0.f,-0.f,-0.f,-0.f,-0.f,-0.f,-0.f,-0.f,-0.f,-0.f,-0.f,-0.f,-0.f,-0.f,-0.f,-0.f,-0.f,-0.f,-0.f,-0.f,-0.f,-0.f,-0.f,-0.f,-0.f,-0.f,-0.f,-0.f,-0.f,-0.f,-0.f,-0.f,-0.f,-0.f,-0.f,-0.f,-0.f,-0.f,-0.f,-0.f,-0.f,-0.f,-0.f,-0.f,-0.f};
float Saturate_tanh_table_raw_c0(int index);

float Saturate_tanh_table_raw_c1(int index);

float Saturate_tanh_table_raw_c2(int index);

float Saturate_tanh_table(float x);

float Saturate_process(float x);

void Saturate_noteOn(int note, int velocity, int channel);

void Saturate_noteOff(int note, int channel);

void Saturate_controlChange(int control, int value, int channel);

void Saturate_default();

typedef struct Ahr__ctx_type_0 {
   float target;
   int state;
   float rate;
   float out;
   float hold_phase;
   float do_ret_1;
   float do_ret_0;
   Util__ctx_type_0 _inst58;
   Util__ctx_type_0 _inst56;
} Ahr__ctx_type_0;

typedef Ahr__ctx_type_0 Ahr_do_type;

void Ahr__ctx_type_0_init(Ahr__ctx_type_0 &_output_);

void Ahr_do_init(Ahr__ctx_type_0 &_output_);

void Ahr_do(Ahr__ctx_type_0 &_ctx, float gate, float a, float h, float r);

typedef Ahr__ctx_type_0 Ahr_do_ret_0_type;

void Ahr_do_ret_0_init(Ahr__ctx_type_0 &_output_);

float Ahr_do_ret_0(Ahr__ctx_type_0 &_ctx);

typedef Ahr__ctx_type_0 Ahr_do_ret_1_type;

void Ahr_do_ret_1_init(Ahr__ctx_type_0 &_output_);

float Ahr_do_ret_1(Ahr__ctx_type_0 &_ctx);

typedef struct Ahr__ctx_type_1 {
   float process_ret_1;
   float process_ret_0;
   float knob3;
   float knob2;
   float knob1;
   Ahr__ctx_type_0 _inst67;
} Ahr__ctx_type_1;

typedef Ahr__ctx_type_1 Ahr_process_type;

void Ahr__ctx_type_1_init(Ahr__ctx_type_1 &_output_);

void Ahr_process_init(Ahr__ctx_type_1 &_output_);

void Ahr_process(Ahr__ctx_type_1 &_ctx, float gate);

typedef Ahr__ctx_type_1 Ahr_process_ret_0_type;

void Ahr_process_ret_0_init(Ahr__ctx_type_1 &_output_);

float Ahr_process_ret_0(Ahr__ctx_type_1 &_ctx);

typedef Ahr__ctx_type_1 Ahr_process_ret_1_type;

void Ahr_process_ret_1_init(Ahr__ctx_type_1 &_output_);

float Ahr_process_ret_1(Ahr__ctx_type_1 &_ctx);

typedef Ahr__ctx_type_1 Ahr_noteOn_type;

void Ahr_noteOn_init(Ahr__ctx_type_1 &_output_);

void Ahr_noteOn(Ahr__ctx_type_1 &_ctx, int note, int velocity, int channel);

typedef Ahr__ctx_type_1 Ahr_noteOff_type;

void Ahr_noteOff_init(Ahr__ctx_type_1 &_output_);

void Ahr_noteOff(Ahr__ctx_type_1 &_ctx, int note, int channel);

typedef Ahr__ctx_type_1 Ahr_controlChange_type;

void Ahr_controlChange_init(Ahr__ctx_type_1 &_output_);

void Ahr_controlChange(Ahr__ctx_type_1 &_ctx, int control, int value, int channel);

typedef Ahr__ctx_type_1 Ahr_default_type;

void Ahr_default_init(Ahr__ctx_type_1 &_output_);

void Ahr_default(Ahr__ctx_type_1 &_ctx);

typedef struct Kick__ctx_type_0 {
   Noise__ctx_type_1 _inst80;
   Ahr__ctx_type_0 _inst79;
   Tricore__ctx_type_0 _inst78;
   Swept__ctx_type_0 _inst77;
   Ahr__ctx_type_0 _inst76;
} Kick__ctx_type_0;

typedef Kick__ctx_type_0 Kick_do_type;

void Kick__ctx_type_0_init(Kick__ctx_type_0 &_output_);

void Kick_do_init(Kick__ctx_type_0 &_output_);

float Kick_do(Kick__ctx_type_0 &_ctx, float gate, float odecay, float pitch, float swept, float noise);

typedef struct Kick__ctx_type_1 {
   float swept;
   float pitch;
   float odecay;
   float noise;
   Kick__ctx_type_0 _inst82;
} Kick__ctx_type_1;

typedef Kick__ctx_type_1 Kick_process_type;

void Kick__ctx_type_1_init(Kick__ctx_type_1 &_output_);

void Kick_process_init(Kick__ctx_type_1 &_output_);

float Kick_process(Kick__ctx_type_1 &_ctx, float gate);

typedef Kick__ctx_type_1 Kick_noteOn_type;

void Kick_noteOn_init(Kick__ctx_type_1 &_output_);

void Kick_noteOn(Kick__ctx_type_1 &_ctx, int note, int velocity, int channel);

typedef Kick__ctx_type_1 Kick_noteOff_type;

void Kick_noteOff_init(Kick__ctx_type_1 &_output_);

void Kick_noteOff(Kick__ctx_type_1 &_ctx, int note, int channel);

typedef Kick__ctx_type_1 Kick_controlChange_type;

void Kick_controlChange_init(Kick__ctx_type_1 &_output_);

void Kick_controlChange(Kick__ctx_type_1 &_ctx, int control, int value, int channel);

typedef Kick__ctx_type_1 Kick_default_type;

void Kick_default_init(Kick__ctx_type_1 &_output_);

void Kick_default(Kick__ctx_type_1 &_ctx);



#endif // KICK_H
