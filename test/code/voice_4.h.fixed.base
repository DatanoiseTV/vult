
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#ifndef VOICE_4_H
#define VOICE_4_H
#include <stdint.h>
#include <math.h>
#include "vultin.h"
#include "voice_4.tables.h"

typedef struct Util__ctx_type_0 {
   uint8_t pre;
} Util__ctx_type_0;

typedef Util__ctx_type_0 Util_edge_type;

static_inline void Util__ctx_type_0_init(Util__ctx_type_0 &_output_){
   Util__ctx_type_0 _ctx;
   _ctx.pre = false;
   _output_ = _ctx;
   return ;
}

static_inline void Util_edge_init(Util__ctx_type_0 &_output_){
   Util__ctx_type_0_init(_output_);
   return ;
}

static_inline uint8_t Util_edge(Util__ctx_type_0 &_ctx, uint8_t x){
   uint8_t ret;
   ret = (x && bool_not(_ctx.pre));
   _ctx.pre = x;
   return ret;
}

typedef struct Util__ctx_type_1 {
   fix16_t pre_x;
} Util__ctx_type_1;

typedef Util__ctx_type_1 Util_change_type;

static_inline void Util__ctx_type_1_init(Util__ctx_type_1 &_output_){
   Util__ctx_type_1 _ctx;
   _ctx.pre_x = 0x0 /* 0.000000 */;
   _output_ = _ctx;
   return ;
}

static_inline void Util_change_init(Util__ctx_type_1 &_output_){
   Util__ctx_type_1_init(_output_);
   return ;
}

static_inline uint8_t Util_change(Util__ctx_type_1 &_ctx, fix16_t x){
   uint8_t v;
   v = (_ctx.pre_x != x);
   _ctx.pre_x = x;
   return v;
}

static_inline fix16_t Util_map(fix16_t x, fix16_t x0, fix16_t x1, fix16_t y0, fix16_t y1){
   return (y0 + fix_div(fix_mul((x + (- x0)),(y1 + (- y0))),(x1 + (- x0))));
};

typedef struct Util__ctx_type_3 {
   fix16_t y1;
   fix16_t x1;
} Util__ctx_type_3;

typedef Util__ctx_type_3 Util_dcblock_type;

void Util__ctx_type_3_init(Util__ctx_type_3 &_output_);

static_inline void Util_dcblock_init(Util__ctx_type_3 &_output_){
   Util__ctx_type_3_init(_output_);
   return ;
}

fix16_t Util_dcblock(Util__ctx_type_3 &_ctx, fix16_t x0);

typedef struct Util__ctx_type_4 {
   fix16_t x;
} Util__ctx_type_4;

typedef Util__ctx_type_4 Util_smooth_type;

static_inline void Util__ctx_type_4_init(Util__ctx_type_4 &_output_){
   Util__ctx_type_4 _ctx;
   _ctx.x = 0x0 /* 0.000000 */;
   _output_ = _ctx;
   return ;
}

static_inline void Util_smooth_init(Util__ctx_type_4 &_output_){
   Util__ctx_type_4_init(_output_);
   return ;
}

static_inline fix16_t Util_smooth(Util__ctx_type_4 &_ctx, fix16_t input){
   _ctx.x = (_ctx.x + fix_mul(0x147 /* 0.005000 */,(input + (- _ctx.x))));
   return _ctx.x;
}

typedef struct Util__ctx_type_5 {
   fix16_t x0;
} Util__ctx_type_5;

typedef Util__ctx_type_5 Util_average2_type;

static_inline void Util__ctx_type_5_init(Util__ctx_type_5 &_output_){
   Util__ctx_type_5 _ctx;
   _ctx.x0 = 0x0 /* 0.000000 */;
   _output_ = _ctx;
   return ;
}

static_inline void Util_average2_init(Util__ctx_type_5 &_output_){
   Util__ctx_type_5_init(_output_);
   return ;
}

static_inline fix16_t Util_average2(Util__ctx_type_5 &_ctx, fix16_t x1){
   fix16_t result;
   result = ((_ctx.x0 + x1) >> 1);
   _ctx.x0 = x1;
   return result;
}

static_inline fix16_t Util_cubic_clipper(fix16_t x){
   if(x <= -0xaaaa /* -0.666667 */){
      return -0xaaaa /* -0.666667 */;
   }
   else
   {
      if(x >= 0xaaaa /* 0.666667 */){
         return 0xaaaa /* 0.666667 */;
      }
      else
      {
         return (x + fix_mul(fix_mul(fix_mul(-0x5555 /* -0.333333 */,x),x),x));
      }
   }
};

static_inline fix16_t Util_pitchToRate_1024_raw_c0(int index){
   return Util_pitchToRate_1024_c0[index];
};

static_inline fix16_t Util_pitchToRate_1024_raw_c1(int index){
   return Util_pitchToRate_1024_c1[index];
};

static_inline fix16_t Util_pitchToRate_1024_raw_c2(int index){
   return Util_pitchToRate_1024_c2[index];
};

static_inline fix16_t Util_pitchToRate_1024(fix16_t pitch){
   int index;
   index = int_clip(fix_to_int(fix_mul(0x3e7c /* 0.244094 */,pitch)),0,31);
   return (fix_wrap_array(Util_pitchToRate_1024_c0)[index] + fix_mul(pitch,(fix_wrap_array(Util_pitchToRate_1024_c1)[index] + fix_mul(pitch,fix_wrap_array(Util_pitchToRate_1024_c2)[index]))));
}

static_inline fix16_t Util_pitchToRate_raw_c0(int index){
   return Util_pitchToRate_c0[index];
};

static_inline fix16_t Util_pitchToRate_raw_c1(int index){
   return Util_pitchToRate_c1[index];
};

static_inline fix16_t Util_pitchToRate_raw_c2(int index){
   return Util_pitchToRate_c2[index];
};

static_inline fix16_t Util_pitchToRate(fix16_t pitch){
   int index;
   index = int_clip(fix_to_int(fix_mul(0x3e7c /* 0.244094 */,pitch)),0,31);
   return (fix_wrap_array(Util_pitchToRate_c0)[index] + fix_mul(pitch,(fix_wrap_array(Util_pitchToRate_c1)[index] + fix_mul(pitch,fix_wrap_array(Util_pitchToRate_c2)[index]))));
}

static_inline fix16_t Util_cvToPitch(fix16_t cv){
   return (0x180000 /* 24.000000 */ + fix_mul(0x780000 /* 120.000000 */,cv));
};

static_inline fix16_t Util_cvToRate_1024_raw_c0(int index){
   return Util_cvToRate_1024_c0[index];
};

static_inline fix16_t Util_cvToRate_1024_raw_c1(int index){
   return Util_cvToRate_1024_c1[index];
};

static_inline fix16_t Util_cvToRate_1024_raw_c2(int index){
   return Util_cvToRate_1024_c2[index];
};

static_inline fix16_t Util_cvToRate_1024(fix16_t cv){
   int index;
   index = int_clip(fix_to_int(fix_mul(0x2271c7 /* 34.444445 */,cv)),0,31);
   return (fix_wrap_array(Util_cvToRate_1024_c0)[index] + fix_mul(cv,(fix_wrap_array(Util_cvToRate_1024_c1)[index] + fix_mul(cv,fix_wrap_array(Util_cvToRate_1024_c2)[index]))));
}

static_inline fix16_t Util_cvToRate_raw_c0(int index){
   return Util_cvToRate_c0[index];
};

static_inline fix16_t Util_cvToRate_raw_c1(int index){
   return Util_cvToRate_c1[index];
};

static_inline fix16_t Util_cvToRate_raw_c2(int index){
   return Util_cvToRate_c2[index];
};

static_inline fix16_t Util_cvToRate(fix16_t cv){
   int index;
   index = int_clip(fix_to_int(fix_mul(0x8d1c71 /* 141.111111 */,cv)),0,127);
   return (fix_wrap_array(Util_cvToRate_c0)[index] + fix_mul(cv,(fix_wrap_array(Util_cvToRate_c1)[index] + fix_mul(cv,fix_wrap_array(Util_cvToRate_c2)[index]))));
}

static_inline fix16_t Util_pitchToCv(fix16_t pitch){
   return fix_mul(0x222 /* 0.008333 */,(-0x180000 /* -24.000000 */ + pitch));
};

static_inline fix16_t Util_cvToperiod_raw_c0(int index){
   return Util_cvToperiod_c0[index];
};

static_inline fix16_t Util_cvToperiod_raw_c1(int index){
   return Util_cvToperiod_c1[index];
};

static_inline fix16_t Util_cvToperiod_raw_c2(int index){
   return Util_cvToperiod_c2[index];
};

static_inline fix16_t Util_cvToperiod(fix16_t cv){
   int index;
   index = int_clip(fix_to_int(fix_mul(0x1f0000 /* 31.000000 */,cv)),0,31);
   return (fix_wrap_array(Util_cvToperiod_c0)[index] + fix_mul(cv,(fix_wrap_array(Util_cvToperiod_c1)[index] + fix_mul(cv,fix_wrap_array(Util_cvToperiod_c2)[index]))));
}

static_inline fix16_t Util_cvTokHz_raw_c0(int index){
   return Util_cvTokHz_c0[index];
};

static_inline fix16_t Util_cvTokHz_raw_c1(int index){
   return Util_cvTokHz_c1[index];
};

static_inline fix16_t Util_cvTokHz_raw_c2(int index){
   return Util_cvTokHz_c2[index];
};

static_inline fix16_t Util_cvTokHz(fix16_t cv){
   int index;
   index = int_clip(fix_to_int(fix_mul(0x1f0000 /* 31.000000 */,cv)),0,31);
   return (fix_wrap_array(Util_cvTokHz_c0)[index] + fix_mul(cv,(fix_wrap_array(Util_cvTokHz_c1)[index] + fix_mul(cv,fix_wrap_array(Util_cvTokHz_c2)[index]))));
}

typedef struct Tricore__ctx_type_0 {
   uint8_t reset_state;
   fix16_t reset_phase;
   fix16_t rate;
   fix16_t phase;
   uint8_t direction;
   Util__ctx_type_0 _inst451;
   Util__ctx_type_0 _inst351;
   Util__ctx_type_1 _inst13b;
} Tricore__ctx_type_0;

typedef Tricore__ctx_type_0 Tricore_process_type;

void Tricore__ctx_type_0_init(Tricore__ctx_type_0 &_output_);

static_inline void Tricore_process_init(Tricore__ctx_type_0 &_output_){
   Tricore__ctx_type_0_init(_output_);
   return ;
}

fix16_t Tricore_process(Tricore__ctx_type_0 &_ctx, fix16_t cv, fix16_t reset, fix16_t disable);

typedef Tricore__ctx_type_0 Tricore_noteOn_type;

static_inline void Tricore_noteOn_init(Tricore__ctx_type_0 &_output_){
   Tricore__ctx_type_0_init(_output_);
   return ;
}

static_inline void Tricore_noteOn(Tricore__ctx_type_0 &_ctx, int note, int velocity, int channel){
}

typedef Tricore__ctx_type_0 Tricore_noteOff_type;

static_inline void Tricore_noteOff_init(Tricore__ctx_type_0 &_output_){
   Tricore__ctx_type_0_init(_output_);
   return ;
}

static_inline void Tricore_noteOff(Tricore__ctx_type_0 &_ctx, int note, int channel){
}

typedef Tricore__ctx_type_0 Tricore_controlChange_type;

static_inline void Tricore_controlChange_init(Tricore__ctx_type_0 &_output_){
   Tricore__ctx_type_0_init(_output_);
   return ;
}

static_inline void Tricore_controlChange(Tricore__ctx_type_0 &_ctx, int control, int value, int channel){
}

typedef Tricore__ctx_type_0 Tricore_default_type;

static_inline void Tricore_default_init(Tricore__ctx_type_0 &_output_){
   Tricore__ctx_type_0_init(_output_);
   return ;
}

static_inline void Tricore_default(Tricore__ctx_type_0 &_ctx){
   _ctx.rate = 0xc265 /* 0.759367 */;
};

static_inline fix16_t Saturate_soft_tanh_table_raw_c0(int index){
   return Saturate_soft_tanh_table_c0[index];
};

static_inline fix16_t Saturate_soft_tanh_table_raw_c1(int index){
   return Saturate_soft_tanh_table_c1[index];
};

static_inline fix16_t Saturate_soft_tanh_table_raw_c2(int index){
   return Saturate_soft_tanh_table_c2[index];
};

static_inline fix16_t Saturate_soft_tanh_table(fix16_t x){
   int index;
   index = int_clip(fix_to_int(fix_mul(0x50000 /* 5.000000 */,(0x180000 /* 24.000000 */ + x))),0,240);
   return (fix_wrap_array(Saturate_soft_tanh_table_c0)[index] + fix_mul(x,(fix_wrap_array(Saturate_soft_tanh_table_c1)[index] + fix_mul(x,fix_wrap_array(Saturate_soft_tanh_table_c2)[index]))));
}

static_inline fix16_t Saturate_soft_process(fix16_t x){
   return Saturate_soft_tanh_table(x);
};

static_inline void Saturate_soft_noteOn(int note, int velocity, int channel){
}

static_inline void Saturate_soft_noteOff(int note, int channel){
}

static_inline void Saturate_soft_controlChange(int control, int value, int channel){
}

static_inline void Saturate_soft_default(){
}

static_inline fix16_t Svf_calc_g_raw_c0(int index){
   return Svf_calc_g_c0[index];
};

static_inline fix16_t Svf_calc_g_raw_c1(int index){
   return Svf_calc_g_c1[index];
};

static_inline fix16_t Svf_calc_g_raw_c2(int index){
   return Svf_calc_g_c2[index];
};

static_inline fix16_t Svf_calc_g(fix16_t cv){
   int index;
   index = int_clip(fix_to_int(fix_mul(0x8d1c71 /* 141.111111 */,cv)),0,127);
   return (fix_wrap_array(Svf_calc_g_c0)[index] + fix_mul(cv,(fix_wrap_array(Svf_calc_g_c1)[index] + fix_mul(cv,fix_wrap_array(Svf_calc_g_c2)[index]))));
}

typedef struct Svf__ctx_type_4 {
   fix16_t z2;
   fix16_t z1;
   fix16_t inv_den;
   fix16_t g;
   Util__ctx_type_1 _inst23b;
   Util__ctx_type_1 _inst13b;
   fix16_t R;
} Svf__ctx_type_4;

typedef Svf__ctx_type_4 Svf_process_type;

void Svf__ctx_type_4_init(Svf__ctx_type_4 &_output_);

static_inline void Svf_process_init(Svf__ctx_type_4 &_output_){
   Svf__ctx_type_4_init(_output_);
   return ;
}

fix16_t Svf_process(Svf__ctx_type_4 &_ctx, fix16_t x, fix16_t cv, fix16_t q, int sel);

typedef Svf__ctx_type_4 Svf_noteOn_type;

static_inline void Svf_noteOn_init(Svf__ctx_type_4 &_output_){
   Svf__ctx_type_4_init(_output_);
   return ;
}

static_inline void Svf_noteOn(Svf__ctx_type_4 &_ctx, int note, int velocity, int channel){
}

typedef Svf__ctx_type_4 Svf_noteOff_type;

static_inline void Svf_noteOff_init(Svf__ctx_type_4 &_output_){
   Svf__ctx_type_4_init(_output_);
   return ;
}

static_inline void Svf_noteOff(Svf__ctx_type_4 &_ctx, int note, int channel){
}

typedef Svf__ctx_type_4 Svf_controlChange_type;

static_inline void Svf_controlChange_init(Svf__ctx_type_4 &_output_){
   Svf__ctx_type_4_init(_output_);
   return ;
}

static_inline void Svf_controlChange(Svf__ctx_type_4 &_ctx, int control, int value, int channel){
}

typedef Svf__ctx_type_4 Svf_default_type;

static_inline void Svf_default_init(Svf__ctx_type_4 &_output_){
   Svf__ctx_type_4_init(_output_);
   return ;
}

static_inline void Svf_default(Svf__ctx_type_4 &_ctx){
   _ctx.g = 0x98 /* 0.002330 */;
   _ctx.R = 0x10000 /* 1.000000 */;
   _ctx.inv_den = fix_div(0x10000 /* 1.000000 */,(0x10000 /* 1.000000 */ + fix_mul(_ctx.g,_ctx.g)));
}

static_inline fix16_t Saturate_tanh_table_raw_c0(int index){
   return Saturate_tanh_table_c0[index];
};

static_inline fix16_t Saturate_tanh_table_raw_c1(int index){
   return Saturate_tanh_table_c1[index];
};

static_inline fix16_t Saturate_tanh_table_raw_c2(int index){
   return Saturate_tanh_table_c2[index];
};

static_inline fix16_t Saturate_tanh_table(fix16_t x){
   int index;
   index = int_clip(fix_to_int(fix_mul(0x50000 /* 5.000000 */,(0x180000 /* 24.000000 */ + x))),0,240);
   return (fix_wrap_array(Saturate_tanh_table_c0)[index] + fix_mul(x,(fix_wrap_array(Saturate_tanh_table_c1)[index] + fix_mul(x,fix_wrap_array(Saturate_tanh_table_c2)[index]))));
}

static_inline fix16_t Saturate_process(fix16_t x){
   return Saturate_tanh_table(x);
};

static_inline void Saturate_noteOn(int note, int velocity, int channel){
}

static_inline void Saturate_noteOff(int note, int channel){
}

static_inline void Saturate_controlChange(int control, int value, int channel){
}

static_inline void Saturate_default(){
}

typedef struct Lfo__ctx_type_0 {
   fix16_t x4;
   fix16_t x3;
   fix16_t x2;
} Lfo__ctx_type_0;

typedef Lfo__ctx_type_0 Lfo_soft_type;

void Lfo__ctx_type_0_init(Lfo__ctx_type_0 &_output_);

static_inline void Lfo_soft_init(Lfo__ctx_type_0 &_output_){
   Lfo__ctx_type_0_init(_output_);
   return ;
}

fix16_t Lfo_soft(Lfo__ctx_type_0 &_ctx, fix16_t x1);

typedef struct Lfo__ctx_type_1 {
   fix16_t rate;
   fix16_t phase;
   Lfo__ctx_type_0 _inst59b;
   Util__ctx_type_0 _inst351;
   Util__ctx_type_1 _inst13b;
} Lfo__ctx_type_1;

typedef Lfo__ctx_type_1 Lfo_process_type;

void Lfo__ctx_type_1_init(Lfo__ctx_type_1 &_output_);

static_inline void Lfo_process_init(Lfo__ctx_type_1 &_output_){
   Lfo__ctx_type_1_init(_output_);
   return ;
}

fix16_t Lfo_process(Lfo__ctx_type_1 &_ctx, fix16_t cv, fix16_t shape, fix16_t reset);

typedef Lfo__ctx_type_1 Lfo_noteOn_type;

static_inline void Lfo_noteOn_init(Lfo__ctx_type_1 &_output_){
   Lfo__ctx_type_1_init(_output_);
   return ;
}

static_inline void Lfo_noteOn(Lfo__ctx_type_1 &_ctx, int note, int velocity, int channel){
}

typedef Lfo__ctx_type_1 Lfo_noteOff_type;

static_inline void Lfo_noteOff_init(Lfo__ctx_type_1 &_output_){
   Lfo__ctx_type_1_init(_output_);
   return ;
}

static_inline void Lfo_noteOff(Lfo__ctx_type_1 &_ctx, int note, int channel){
}

typedef Lfo__ctx_type_1 Lfo_controlChange_type;

static_inline void Lfo_controlChange_init(Lfo__ctx_type_1 &_output_){
   Lfo__ctx_type_1_init(_output_);
   return ;
}

static_inline void Lfo_controlChange(Lfo__ctx_type_1 &_ctx, int control, int value, int channel){
}

typedef Lfo__ctx_type_1 Lfo_default_type;

static_inline void Lfo_default_init(Lfo__ctx_type_1 &_output_){
   Lfo__ctx_type_1_init(_output_);
   return ;
}

static_inline void Lfo_default(Lfo__ctx_type_1 &_ctx){
}

static_inline fix16_t Tables_nsine_raw_c0(int index){
   return Tables_nsine_c0[index];
};

static_inline fix16_t Tables_nsine_raw_c1(int index){
   return Tables_nsine_c1[index];
};

static_inline fix16_t Tables_nsine_raw_c2(int index){
   return Tables_nsine_c2[index];
};

static_inline fix16_t Tables_nsine(fix16_t x){
   int index;
   index = int_clip(fix_to_int(fix_mul(0x7f0000 /* 127.000000 */,x)),0,127);
   return (fix_wrap_array(Tables_nsine_c0)[index] + fix_mul(x,(fix_wrap_array(Tables_nsine_c1)[index] + fix_mul(x,fix_wrap_array(Tables_nsine_c2)[index]))));
}

typedef struct Phase__ctx_type_0 {
   fix16_t rate;
   fix16_t phase;
   Util__ctx_type_0 _inst351;
   Util__ctx_type_1 _inst13b;
} Phase__ctx_type_0;

typedef Phase__ctx_type_0 Phase_process_type;

void Phase__ctx_type_0_init(Phase__ctx_type_0 &_output_);

static_inline void Phase_process_init(Phase__ctx_type_0 &_output_){
   Phase__ctx_type_0_init(_output_);
   return ;
}

fix16_t Phase_process(Phase__ctx_type_0 &_ctx, fix16_t cv, fix16_t reset);

typedef Phase__ctx_type_0 Phase_noteOn_type;

static_inline void Phase_noteOn_init(Phase__ctx_type_0 &_output_){
   Phase__ctx_type_0_init(_output_);
   return ;
}

static_inline void Phase_noteOn(Phase__ctx_type_0 &_ctx, int note, int velocity, int channel){
}

typedef Phase__ctx_type_0 Phase_noteOff_type;

static_inline void Phase_noteOff_init(Phase__ctx_type_0 &_output_){
   Phase__ctx_type_0_init(_output_);
   return ;
}

static_inline void Phase_noteOff(Phase__ctx_type_0 &_ctx, int note, int channel){
}

typedef Phase__ctx_type_0 Phase_controlChange_type;

static_inline void Phase_controlChange_init(Phase__ctx_type_0 &_output_){
   Phase__ctx_type_0_init(_output_);
   return ;
}

static_inline void Phase_controlChange(Phase__ctx_type_0 &_ctx, int control, int value, int channel){
}

typedef Phase__ctx_type_0 Phase_default_type;

static_inline void Phase_default_init(Phase__ctx_type_0 &_output_){
   Phase__ctx_type_0_init(_output_);
   return ;
}

static_inline void Phase_default(Phase__ctx_type_0 &_ctx){
   _ctx.rate = 0xc265 /* 0.759367 */;
};

typedef struct Blit__ctx_type_0 {
   fix16_t scale;
   int m;
   Util__ctx_type_1 _inst13b;
} Blit__ctx_type_0;

typedef Blit__ctx_type_0 Blit_pulse_train_type;

void Blit__ctx_type_0_init(Blit__ctx_type_0 &_output_);

static_inline void Blit_pulse_train_init(Blit__ctx_type_0 &_output_){
   Blit__ctx_type_0_init(_output_);
   return ;
}

fix16_t Blit_pulse_train(Blit__ctx_type_0 &_ctx, fix16_t cv, fix16_t phase);

typedef Blit__ctx_type_0 Blit_pulse_start_type;

static_inline void Blit_pulse_start_init(Blit__ctx_type_0 &_output_){
   Blit__ctx_type_0_init(_output_);
   return ;
}

static_inline void Blit_pulse_start(Blit__ctx_type_0 &_ctx){
   _ctx.m = 1349;
   _ctx.scale = 0x5457df8 /* 1349.492070 */;
}

typedef struct Blit__ctx_type_1 {
   fix16_t state_saw;
   fix16_t state_pulse;
   fix16_t rate;
   fix16_t output;
   Blit__ctx_type_0 _inst846;
   Blit__ctx_type_0 _inst746;
   Phase__ctx_type_0 _inst5cd;
   Util__ctx_type_1 _inst33b;
   Util__ctx_type_3 _inst117d;
} Blit__ctx_type_1;

typedef Blit__ctx_type_1 Blit_osc_blit_type;

void Blit__ctx_type_1_init(Blit__ctx_type_1 &_output_);

static_inline void Blit_osc_blit_init(Blit__ctx_type_1 &_output_){
   Blit__ctx_type_1_init(_output_);
   return ;
}

fix16_t Blit_osc_blit(Blit__ctx_type_1 &_ctx, fix16_t cv, fix16_t pw, fix16_t wave);

typedef Blit__ctx_type_1 Blit_init_type;

static_inline void Blit_init_init(Blit__ctx_type_1 &_output_){
   Blit__ctx_type_1_init(_output_);
   return ;
}

static_inline void Blit_init(Blit__ctx_type_1 &_ctx){
   _ctx.rate = 0x30 /* 0.000742 */;
};

typedef struct Blit__ctx_type_2 {
   Blit__ctx_type_1 _inst14c;
} Blit__ctx_type_2;

typedef Blit__ctx_type_2 Blit_process_type;

static_inline void Blit__ctx_type_2_init(Blit__ctx_type_2 &_output_){
   Blit__ctx_type_2 _ctx;
   Blit__ctx_type_1_init(_ctx._inst14c);
   _output_ = _ctx;
   return ;
}

static_inline void Blit_process_init(Blit__ctx_type_2 &_output_){
   Blit__ctx_type_2_init(_output_);
   return ;
}

static_inline fix16_t Blit_process(Blit__ctx_type_2 &_ctx, fix16_t cv, fix16_t pw, fix16_t wave){
   return Blit_osc_blit(_ctx._inst14c,cv,pw,wave);
};

typedef Blit__ctx_type_2 Blit_noteOn_type;

static_inline void Blit_noteOn_init(Blit__ctx_type_2 &_output_){
   Blit__ctx_type_2_init(_output_);
   return ;
}

static_inline void Blit_noteOn(Blit__ctx_type_2 &_ctx, int note, int velocity, int channel){
}

typedef Blit__ctx_type_2 Blit_noteOff_type;

static_inline void Blit_noteOff_init(Blit__ctx_type_2 &_output_){
   Blit__ctx_type_2_init(_output_);
   return ;
}

static_inline void Blit_noteOff(Blit__ctx_type_2 &_ctx, int note, int channel){
}

typedef Blit__ctx_type_2 Blit_controlChange_type;

static_inline void Blit_controlChange_init(Blit__ctx_type_2 &_output_){
   Blit__ctx_type_2_init(_output_);
   return ;
}

static_inline void Blit_controlChange(Blit__ctx_type_2 &_ctx, int control, int value, int channel){
}

typedef Blit__ctx_type_2 Blit_default_type;

static_inline void Blit_default_init(Blit__ctx_type_2 &_output_){
   Blit__ctx_type_2_init(_output_);
   return ;
}

static_inline void Blit_default(Blit__ctx_type_2 &_ctx){
}

typedef struct Adsr__ctx_type_0 {
   fix16_t target;
   int state;
   fix16_t scale;
   fix16_t rate;
   fix16_t out;
   Util__ctx_type_4 _inst955;
   Util__ctx_type_0 _inst251;
} Adsr__ctx_type_0;

typedef Adsr__ctx_type_0 Adsr_do_type;

void Adsr__ctx_type_0_init(Adsr__ctx_type_0 &_output_);

static_inline void Adsr_do_init(Adsr__ctx_type_0 &_output_){
   Adsr__ctx_type_0_init(_output_);
   return ;
}

fix16_t Adsr_do(Adsr__ctx_type_0 &_ctx, fix16_t gate, fix16_t a, fix16_t d, fix16_t s, fix16_t r);

typedef struct Adsr__ctx_type_1 {
   fix16_t knob4;
   fix16_t knob3;
   fix16_t knob2;
   fix16_t knob1;
   Adsr__ctx_type_0 _inst16;
} Adsr__ctx_type_1;

typedef Adsr__ctx_type_1 Adsr_process_type;

void Adsr__ctx_type_1_init(Adsr__ctx_type_1 &_output_);

static_inline void Adsr_process_init(Adsr__ctx_type_1 &_output_){
   Adsr__ctx_type_1_init(_output_);
   return ;
}

static_inline fix16_t Adsr_process(Adsr__ctx_type_1 &_ctx, fix16_t gate){
   return Adsr_do(_ctx._inst16,gate,_ctx.knob1,_ctx.knob2,_ctx.knob3,_ctx.knob4);
};

typedef Adsr__ctx_type_1 Adsr_noteOn_type;

static_inline void Adsr_noteOn_init(Adsr__ctx_type_1 &_output_){
   Adsr__ctx_type_1_init(_output_);
   return ;
}

static_inline void Adsr_noteOn(Adsr__ctx_type_1 &_ctx, int note, int velocity, int channel){
}

typedef Adsr__ctx_type_1 Adsr_noteOff_type;

static_inline void Adsr_noteOff_init(Adsr__ctx_type_1 &_output_){
   Adsr__ctx_type_1_init(_output_);
   return ;
}

static_inline void Adsr_noteOff(Adsr__ctx_type_1 &_ctx, int note, int channel){
}

typedef Adsr__ctx_type_1 Adsr_controlChange_type;

static_inline void Adsr_controlChange_init(Adsr__ctx_type_1 &_output_){
   Adsr__ctx_type_1_init(_output_);
   return ;
}

void Adsr_controlChange(Adsr__ctx_type_1 &_ctx, int control, int value, int channel);

typedef Adsr__ctx_type_1 Adsr_default_type;

static_inline void Adsr_default_init(Adsr__ctx_type_1 &_output_){
   Adsr__ctx_type_1_init(_output_);
   return ;
}

static_inline void Adsr_default(Adsr__ctx_type_1 &_ctx){
   _ctx.knob1 = 0x0 /* 0.000000 */;
   _ctx.knob2 = 0x8000 /* 0.500000 */;
   _ctx.knob3 = 0x10000 /* 1.000000 */;
   _ctx.knob4 = 0x8000 /* 0.500000 */;
}

typedef struct Voice_4__ctx_type_0 {
   fix16_t sustain;
   fix16_t release;
   fix16_t pw4;
   fix16_t pw3;
   fix16_t pw2;
   fix16_t pw1;
   fix16_t lfo_shape;
   fix16_t lfo_reset;
   fix16_t lfo_rate;
   fix16_t lfo_pw;
   fix16_t lfo_flt;
   fix16_t lfo_cv;
   fix16_t level4;
   fix16_t level3;
   fix16_t level2;
   fix16_t level1;
   int flt_shape;
   fix16_t flt_res;
   fix16_t flt_cut;
   fix16_t decay;
   fix16_t attack;
   Adsr__ctx_type_0 _inst76;
   Svf__ctx_type_4 _inst612;
   Tricore__ctx_type_0 _inst541;
   Blit__ctx_type_2 _inst44f;
   Blit__ctx_type_2 _inst34f;
   Blit__ctx_type_2 _inst24f;
   Lfo__ctx_type_1 _inst15;
} Voice_4__ctx_type_0;

typedef Voice_4__ctx_type_0 Voice_4_process_type;

void Voice_4__ctx_type_0_init(Voice_4__ctx_type_0 &_output_);

static_inline void Voice_4_process_init(Voice_4__ctx_type_0 &_output_){
   Voice_4__ctx_type_0_init(_output_);
   return ;
}

fix16_t Voice_4_process(Voice_4__ctx_type_0 &_ctx, fix16_t cv, fix16_t vel, fix16_t gate);

typedef Voice_4__ctx_type_0 Voice_4_noteOn_type;

static_inline void Voice_4_noteOn_init(Voice_4__ctx_type_0 &_output_){
   Voice_4__ctx_type_0_init(_output_);
   return ;
}

static_inline void Voice_4_noteOn(Voice_4__ctx_type_0 &_ctx, int note, int velocity, int channel){
}

typedef Voice_4__ctx_type_0 Voice_4_noteOff_type;

static_inline void Voice_4_noteOff_init(Voice_4__ctx_type_0 &_output_){
   Voice_4__ctx_type_0_init(_output_);
   return ;
}

static_inline void Voice_4_noteOff(Voice_4__ctx_type_0 &_ctx, int note, int channel){
}

typedef Voice_4__ctx_type_0 Voice_4_controlChange_type;

static_inline void Voice_4_controlChange_init(Voice_4__ctx_type_0 &_output_){
   Voice_4__ctx_type_0_init(_output_);
   return ;
}

void Voice_4_controlChange(Voice_4__ctx_type_0 &_ctx, int control, int value, int channel);

typedef Voice_4__ctx_type_0 Voice_4_default_type;

static_inline void Voice_4_default_init(Voice_4__ctx_type_0 &_output_){
   Voice_4__ctx_type_0_init(_output_);
   return ;
}

static_inline void Voice_4_default(Voice_4__ctx_type_0 &_ctx){
}



#endif // VOICE_4_H
