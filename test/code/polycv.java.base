package vult.com.polycv;

import java.util.Arrays;
import java.util.Random;
import vult.com.external.*;

public class polycv {

static int clip(int x, int minv, int maxv) {
   if(x > maxv)
      return maxv;
   else if(x < minv)
      return minv;
   else return x;
}

static float clip(float x, float minv, float maxv) {
   if(x > maxv)
      return maxv;
   else if(x < minv)
      return minv;
   else return x;
}

int[] makeArray(int size, int init) {
   int a[] = new int[size];
   Arrays.fill(a, init);
   return a;
}

float[] makeArray(int size, float init) {
   float a[] = new float[size];
   Arrays.fill(a, init);
   return a;
}

boolean[] makeArray(int size, boolean init) {
   boolean a[] = new boolean[size];
   Arrays.fill(a, init);
   return a;
}

int int_to_fix16(int a) { return a * 0x00010000; }

int fix16_to_int(int a) { return (a >> 16); }

int fix16_add(int x, int y) { return x + y; }

int fix16_sub(int x, int y) { return x - y; }

int fix16_minus(int x) { return -x; }

float fix16_to_float(int a) { return (float)a / 0x00010000; }
int float_to_fix16(float a) {
   float temp = a * 0x00010000;
   return (int)temp;
}

int fix16_mul(int x, int y) {
   long res = (long)x * (long)y;
   return (int)(res >> 16);
}

int fix16_div(int a, int b) {
   if (b == 0)
      return 0;
   int result = (int)(((long)a << 16) / b);
   return result;
}

static boolean not(boolean x) {
   return !x;
}

static float int_to_float(int x) {
   return (float)x;
}

int float_to_int(float x) {
   return (int)x;
}

float floor(float x) {
   return (float)Math.floor(x);
}

static Random rand = new Random();

float random() {
   return rand.nextFloat();
}

int irandom() {
   return rand.nextInt();
}

float get(float[] a, int i) {
   return a[i];
}

void set(float[] a, int i, float val) {
   a[i] = val;
}

int get(int[] a, int i) {
   return a[i];
}

void set(int[] a, int i, int val) {
   a[i] = val;
}

float[] wrap_array(float x[]) {
   return x;
}

int[] wrap_array(int x[]) {
   return x;
}

float cosh(float x) {
   return (float)Math.cosh(x);
}

float cos(float x) {
   return (float)Math.cos(x);
}

float sin(float x) {
   return (float)Math.sin(x);
}

float sinh(float x) {
   return (float)Math.sinh(x);
}

float tan(float x) {
   return (float)Math.tan(x);
}

float tanh(float x) {
   return (float)Math.tanh(x);
}

float sqrt(float x) {
   return (float)Math.sqrt(x);
}

float pow(float x, float y) {
   return (float)Math.pow(x, y);
}

float exp(float x) {
   return (float)Math.exp(x);
}


private class _tuple___real_real_real_real_real_real_real_real_real_real_real_real__ {
   public float field_0;
   public float field_1;
   public float field_2;
   public float field_3;
   public float field_4;
   public float field_5;
   public float field_6;
   public float field_7;
   public float field_8;
   public float field_9;
   public float field_10;
   public float field_11;
 
   _tuple___real_real_real_real_real_real_real_real_real_real_real_real__(){ this.field_0 = 0.0f;
   this.field_1 = 0.0f;
   this.field_2 = 0.0f;
   this.field_3 = 0.0f;
   this.field_4 = 0.0f;
   this.field_5 = 0.0f;
   this.field_6 = 0.0f;
   this.field_7 = 0.0f;
   this.field_8 = 0.0f;
   this.field_9 = 0.0f;
   this.field_10 = 0.0f;
   this.field_11 = 0.0f;
    } 
   _tuple___real_real_real_real_real_real_real_real_real_real_real_real__(float field_0,float field_1,float field_2,float field_3,float field_4,float field_5,float field_6,float field_7,float field_8,float field_9,float field_10,float field_11){ this.field_0 = field_0;
   this.field_1 = field_1;
   this.field_2 = field_2;
   this.field_3 = field_3;
   this.field_4 = field_4;
   this.field_5 = field_5;
   this.field_6 = field_6;
   this.field_7 = field_7;
   this.field_8 = field_8;
   this.field_9 = field_9;
   this.field_10 = field_10;
   this.field_11 = field_11;
    } }

private class Util__ctx_type_0 {
   public boolean pre;
 
   Util__ctx_type_0(){ this.pre = false;
    } 
   Util__ctx_type_0(boolean pre){ this.pre = pre;
    } }

private class Util__ctx_type_1 {
   public float pre_x;
 
   Util__ctx_type_1(){ this.pre_x = 0.0f;
    } 
   Util__ctx_type_1(float pre_x){ this.pre_x = pre_x;
    } }

private class Util__ctx_type_3 {
   public float y1;
   public float x1;
 
   Util__ctx_type_3(){ this.y1 = 0.0f;
   this.x1 = 0.0f;
    } 
   Util__ctx_type_3(float y1,float x1){ this.y1 = y1;
   this.x1 = x1;
    } }

private class Util__ctx_type_4 {
   public float x;
 
   Util__ctx_type_4(){ this.x = 0.0f;
    } 
   Util__ctx_type_4(float x){ this.x = x;
    } }

private class Util__ctx_type_5 {
   public float x0;
 
   Util__ctx_type_5(){ this.x0 = 0.0f;
    } 
   Util__ctx_type_5(float x0){ this.x0 = x0;
    } }

float Util_pitchToRate_1024_c0[];
         public void set_Util_pitchToRate_1024_c0(java.nio.FloatBuffer buffer){
            Util_pitchToRate_1024_c0 = new float[32];
            buffer.get(Util_pitchToRate_1024_c0);
            }
float Util_pitchToRate_1024_c1[];
         public void set_Util_pitchToRate_1024_c1(java.nio.FloatBuffer buffer){
            Util_pitchToRate_1024_c1 = new float[32];
            buffer.get(Util_pitchToRate_1024_c1);
            }
float Util_pitchToRate_1024_c2[];
         public void set_Util_pitchToRate_1024_c2(java.nio.FloatBuffer buffer){
            Util_pitchToRate_1024_c2 = new float[32];
            buffer.get(Util_pitchToRate_1024_c2);
            }
float Util_pitchToRate_c0[];
         public void set_Util_pitchToRate_c0(java.nio.FloatBuffer buffer){
            Util_pitchToRate_c0 = new float[32];
            buffer.get(Util_pitchToRate_c0);
            }
float Util_pitchToRate_c1[];
         public void set_Util_pitchToRate_c1(java.nio.FloatBuffer buffer){
            Util_pitchToRate_c1 = new float[32];
            buffer.get(Util_pitchToRate_c1);
            }
float Util_pitchToRate_c2[];
         public void set_Util_pitchToRate_c2(java.nio.FloatBuffer buffer){
            Util_pitchToRate_c2 = new float[32];
            buffer.get(Util_pitchToRate_c2);
            }
float Util_cvToRate_1024_c0[];
         public void set_Util_cvToRate_1024_c0(java.nio.FloatBuffer buffer){
            Util_cvToRate_1024_c0 = new float[32];
            buffer.get(Util_cvToRate_1024_c0);
            }
float Util_cvToRate_1024_c1[];
         public void set_Util_cvToRate_1024_c1(java.nio.FloatBuffer buffer){
            Util_cvToRate_1024_c1 = new float[32];
            buffer.get(Util_cvToRate_1024_c1);
            }
float Util_cvToRate_1024_c2[];
         public void set_Util_cvToRate_1024_c2(java.nio.FloatBuffer buffer){
            Util_cvToRate_1024_c2 = new float[32];
            buffer.get(Util_cvToRate_1024_c2);
            }
float Util_cvToRate_c0[];
         public void set_Util_cvToRate_c0(java.nio.FloatBuffer buffer){
            Util_cvToRate_c0 = new float[128];
            buffer.get(Util_cvToRate_c0);
            }
float Util_cvToRate_c1[];
         public void set_Util_cvToRate_c1(java.nio.FloatBuffer buffer){
            Util_cvToRate_c1 = new float[128];
            buffer.get(Util_cvToRate_c1);
            }
float Util_cvToRate_c2[];
         public void set_Util_cvToRate_c2(java.nio.FloatBuffer buffer){
            Util_cvToRate_c2 = new float[128];
            buffer.get(Util_cvToRate_c2);
            }
float Util_cvToperiod_c0[];
         public void set_Util_cvToperiod_c0(java.nio.FloatBuffer buffer){
            Util_cvToperiod_c0 = new float[32];
            buffer.get(Util_cvToperiod_c0);
            }
float Util_cvToperiod_c1[];
         public void set_Util_cvToperiod_c1(java.nio.FloatBuffer buffer){
            Util_cvToperiod_c1 = new float[32];
            buffer.get(Util_cvToperiod_c1);
            }
float Util_cvToperiod_c2[];
         public void set_Util_cvToperiod_c2(java.nio.FloatBuffer buffer){
            Util_cvToperiod_c2 = new float[32];
            buffer.get(Util_cvToperiod_c2);
            }
float Util_cvTokHz_c0[];
         public void set_Util_cvTokHz_c0(java.nio.FloatBuffer buffer){
            Util_cvTokHz_c0 = new float[32];
            buffer.get(Util_cvTokHz_c0);
            }
float Util_cvTokHz_c1[];
         public void set_Util_cvTokHz_c1(java.nio.FloatBuffer buffer){
            Util_cvTokHz_c1 = new float[32];
            buffer.get(Util_cvTokHz_c1);
            }
float Util_cvTokHz_c2[];
         public void set_Util_cvTokHz_c2(java.nio.FloatBuffer buffer){
            Util_cvTokHz_c2 = new float[32];
            buffer.get(Util_cvTokHz_c2);
            }
private class Polycv__ctx_type_2 {
   public int vel[];
   public float polyState_ret_9;
   public float polyState_ret_8;
   public float polyState_ret_7;
   public float polyState_ret_6;
   public float polyState_ret_5;
   public float polyState_ret_4;
   public float polyState_ret_3;
   public float polyState_ret_2;
   public float polyState_ret_11;
   public float polyState_ret_10;
   public float polyState_ret_1;
   public float polyState_ret_0;
   public int notes[];
 
   Polycv__ctx_type_2(){ this.vel = new int[]{0,0,0,0};
   this.polyState_ret_9 = 0.0f;
   this.polyState_ret_8 = 0.0f;
   this.polyState_ret_7 = 0.0f;
   this.polyState_ret_6 = 0.0f;
   this.polyState_ret_5 = 0.0f;
   this.polyState_ret_4 = 0.0f;
   this.polyState_ret_3 = 0.0f;
   this.polyState_ret_2 = 0.0f;
   this.polyState_ret_11 = 0.0f;
   this.polyState_ret_10 = 0.0f;
   this.polyState_ret_1 = 0.0f;
   this.polyState_ret_0 = 0.0f;
   this.notes = new int[]{0,0,0,0};
    } 
   Polycv__ctx_type_2(int vel[],float polyState_ret_9,float polyState_ret_8,float polyState_ret_7,float polyState_ret_6,float polyState_ret_5,float polyState_ret_4,float polyState_ret_3,float polyState_ret_2,float polyState_ret_11,float polyState_ret_10,float polyState_ret_1,float polyState_ret_0,int notes[]){ this.vel = vel;
   this.polyState_ret_9 = polyState_ret_9;
   this.polyState_ret_8 = polyState_ret_8;
   this.polyState_ret_7 = polyState_ret_7;
   this.polyState_ret_6 = polyState_ret_6;
   this.polyState_ret_5 = polyState_ret_5;
   this.polyState_ret_4 = polyState_ret_4;
   this.polyState_ret_3 = polyState_ret_3;
   this.polyState_ret_2 = polyState_ret_2;
   this.polyState_ret_11 = polyState_ret_11;
   this.polyState_ret_10 = polyState_ret_10;
   this.polyState_ret_1 = polyState_ret_1;
   this.polyState_ret_0 = polyState_ret_0;
   this.notes = notes;
    } }

private class Polycv__ctx_type_3 {
   public float process_ret_9;
   public float process_ret_8;
   public float process_ret_7;
   public float process_ret_6;
   public float process_ret_5;
   public float process_ret_4;
   public float process_ret_3;
   public float process_ret_2;
   public float process_ret_11;
   public float process_ret_10;
   public float process_ret_1;
   public float process_ret_0;
   public Polycv__ctx_type_2 poly;
   public int channel_in;
 
   Polycv__ctx_type_3(){ this.process_ret_9 = 0.0f;
   this.process_ret_8 = 0.0f;
   this.process_ret_7 = 0.0f;
   this.process_ret_6 = 0.0f;
   this.process_ret_5 = 0.0f;
   this.process_ret_4 = 0.0f;
   this.process_ret_3 = 0.0f;
   this.process_ret_2 = 0.0f;
   this.process_ret_11 = 0.0f;
   this.process_ret_10 = 0.0f;
   this.process_ret_1 = 0.0f;
   this.process_ret_0 = 0.0f;
   this.poly = new Polycv__ctx_type_2();
   this.channel_in = 0;
    } 
   Polycv__ctx_type_3(float process_ret_9,float process_ret_8,float process_ret_7,float process_ret_6,float process_ret_5,float process_ret_4,float process_ret_3,float process_ret_2,float process_ret_11,float process_ret_10,float process_ret_1,float process_ret_0,Polycv__ctx_type_2 poly,int channel_in){ this.process_ret_9 = process_ret_9;
   this.process_ret_8 = process_ret_8;
   this.process_ret_7 = process_ret_7;
   this.process_ret_6 = process_ret_6;
   this.process_ret_5 = process_ret_5;
   this.process_ret_4 = process_ret_4;
   this.process_ret_3 = process_ret_3;
   this.process_ret_2 = process_ret_2;
   this.process_ret_11 = process_ret_11;
   this.process_ret_10 = process_ret_10;
   this.process_ret_1 = process_ret_1;
   this.process_ret_0 = process_ret_0;
   this.poly = poly;
   this.channel_in = channel_in;
    } }

private Util__ctx_type_0 Util__ctx_type_0_init(){
   Util__ctx_type_0 _ctx = new Util__ctx_type_0(); 
   _ctx.pre = false;
   return _ctx;
}

private Util__ctx_type_0 Util_edge_init(){return Util__ctx_type_0_init();}

private boolean Util_edge(Util__ctx_type_0 _ctx, boolean x){
   boolean ret = (x && not(_ctx.pre)); 
   _ctx.pre = x;
   return ret;
}

private Util__ctx_type_1 Util__ctx_type_1_init(){
   Util__ctx_type_1 _ctx = new Util__ctx_type_1(); 
   _ctx.pre_x = 0.0f;
   return _ctx;
}

private Util__ctx_type_1 Util_change_init(){return Util__ctx_type_1_init();}

private boolean Util_change(Util__ctx_type_1 _ctx, float x){
   boolean v = (_ctx.pre_x != x); 
   _ctx.pre_x = x;
   return v;
}

private float Util_map(float x, float x0, float x1, float y0, float y1){return (y0 + (((x + (- x0)) * (y1 + (- y0))) / (x1 + (- x0))));}

private Util__ctx_type_3 Util__ctx_type_3_init(){
   Util__ctx_type_3 _ctx = new Util__ctx_type_3(); 
   _ctx.y1 = 0.0f;
   _ctx.x1 = 0.0f;
   return _ctx;
}

private Util__ctx_type_3 Util_dcblock_init(){return Util__ctx_type_3_init();}

private float Util_dcblock(Util__ctx_type_3 _ctx, float x0){
   float y0 = (x0 + (- _ctx.x1) + (0.995f * _ctx.y1)); 
   _ctx.x1 = x0;
   _ctx.y1 = y0;
   return y0;
}

private Util__ctx_type_4 Util__ctx_type_4_init(){
   Util__ctx_type_4 _ctx = new Util__ctx_type_4(); 
   _ctx.x = 0.0f;
   return _ctx;
}

private Util__ctx_type_4 Util_smooth_init(){return Util__ctx_type_4_init();}

private float Util_smooth(Util__ctx_type_4 _ctx, float input){
   _ctx.x = (_ctx.x + (0.005f * (input + (- _ctx.x))));
   return _ctx.x;
}

private Util__ctx_type_5 Util__ctx_type_5_init(){
   Util__ctx_type_5 _ctx = new Util__ctx_type_5(); 
   _ctx.x0 = 0.0f;
   return _ctx;
}

private Util__ctx_type_5 Util_average2_init(){return Util__ctx_type_5_init();}

private float Util_average2(Util__ctx_type_5 _ctx, float x1){
   float result = (0.5f * (_ctx.x0 + x1)); 
   _ctx.x0 = x1;
   return result;
}

private float Util_cubic_clipper(float x){if(x <= -0.6666666f){ return -0.6666666f; }
else
{ if(x >= 0.6666667f){ return 0.6666667f; }
else
{ return (x + (-0.3333333f * x * x * x)); } }}

private float Util_pitchToRate_1024_raw_c0(int index){return Util_pitchToRate_1024_c0[index];}

private float Util_pitchToRate_1024_raw_c1(int index){return Util_pitchToRate_1024_c1[index];}

private float Util_pitchToRate_1024_raw_c2(int index){return Util_pitchToRate_1024_c2[index];}

private float Util_pitchToRate_1024(float pitch){
   int index = clip(float_to_int((0.2440945f * pitch)),0,31); 
   return (wrap_array(Util_pitchToRate_1024_c0)[index] + (pitch * (wrap_array(Util_pitchToRate_1024_c1)[index] + (pitch * wrap_array(Util_pitchToRate_1024_c2)[index]))));
}

private float Util_pitchToRate_raw_c0(int index){return Util_pitchToRate_c0[index];}

private float Util_pitchToRate_raw_c1(int index){return Util_pitchToRate_c1[index];}

private float Util_pitchToRate_raw_c2(int index){return Util_pitchToRate_c2[index];}

private float Util_pitchToRate(float pitch){
   int index = clip(float_to_int((0.2440945f * pitch)),0,31); 
   return (wrap_array(Util_pitchToRate_c0)[index] + (pitch * (wrap_array(Util_pitchToRate_c1)[index] + (pitch * wrap_array(Util_pitchToRate_c2)[index]))));
}

private float Util_cvToPitch(float cv){return (24.f + (120.f * cv));}

private float Util_cvToRate_1024_raw_c0(int index){return Util_cvToRate_1024_c0[index];}

private float Util_cvToRate_1024_raw_c1(int index){return Util_cvToRate_1024_c1[index];}

private float Util_cvToRate_1024_raw_c2(int index){return Util_cvToRate_1024_c2[index];}

private float Util_cvToRate_1024(float cv){
   int index = clip(float_to_int((34.4444445f * cv)),0,31); 
   return (wrap_array(Util_cvToRate_1024_c0)[index] + (cv * (wrap_array(Util_cvToRate_1024_c1)[index] + (cv * wrap_array(Util_cvToRate_1024_c2)[index]))));
}

private float Util_cvToRate_raw_c0(int index){return Util_cvToRate_c0[index];}

private float Util_cvToRate_raw_c1(int index){return Util_cvToRate_c1[index];}

private float Util_cvToRate_raw_c2(int index){return Util_cvToRate_c2[index];}

private float Util_cvToRate(float cv){
   int index = clip(float_to_int((141.1111112f * cv)),0,127); 
   return (wrap_array(Util_cvToRate_c0)[index] + (cv * (wrap_array(Util_cvToRate_c1)[index] + (cv * wrap_array(Util_cvToRate_c2)[index]))));
}

private float Util_pitchToCv(float pitch){return (0.0083334f * (-24.f + pitch));}

private float Util_cvToperiod_raw_c0(int index){return Util_cvToperiod_c0[index];}

private float Util_cvToperiod_raw_c1(int index){return Util_cvToperiod_c1[index];}

private float Util_cvToperiod_raw_c2(int index){return Util_cvToperiod_c2[index];}

private float Util_cvToperiod(float cv){
   int index = clip(float_to_int((31.f * cv)),0,31); 
   return (wrap_array(Util_cvToperiod_c0)[index] + (cv * (wrap_array(Util_cvToperiod_c1)[index] + (cv * wrap_array(Util_cvToperiod_c2)[index]))));
}

private float Util_cvTokHz_raw_c0(int index){return Util_cvTokHz_c0[index];}

private float Util_cvTokHz_raw_c1(int index){return Util_cvTokHz_c1[index];}

private float Util_cvTokHz_raw_c2(int index){return Util_cvTokHz_c2[index];}

private float Util_cvTokHz(float cv){
   int index = clip(float_to_int((31.f * cv)),0,31); 
   return (wrap_array(Util_cvTokHz_c0)[index] + (cv * (wrap_array(Util_cvTokHz_c1)[index] + (cv * wrap_array(Util_cvTokHz_c2)[index]))));
}

private float Polycv_velToCV(int vel){return (0.0078741f * int_to_float(vel));}

private float Polycv_velToGate(int vel){
   float _if_1 = 0.0f; 
   if(vel > 0){ _if_1 = (0.0078741f * int_to_float(vel)); }
   else
   { _if_1 = 0.0f; }
   return _if_1;
}

private Polycv__ctx_type_2 Polycv__ctx_type_2_init(){
   Polycv__ctx_type_2 _ctx = new Polycv__ctx_type_2(); 
   _ctx.vel = makeArray(4,0);
   _ctx.polyState_ret_9 = 0.0f;
   _ctx.polyState_ret_8 = 0.0f;
   _ctx.polyState_ret_7 = 0.0f;
   _ctx.polyState_ret_6 = 0.0f;
   _ctx.polyState_ret_5 = 0.0f;
   _ctx.polyState_ret_4 = 0.0f;
   _ctx.polyState_ret_3 = 0.0f;
   _ctx.polyState_ret_2 = 0.0f;
   _ctx.polyState_ret_11 = 0.0f;
   _ctx.polyState_ret_10 = 0.0f;
   _ctx.polyState_ret_1 = 0.0f;
   _ctx.polyState_ret_0 = 0.0f;
   _ctx.notes = makeArray(4,0);
   return _ctx;
}

private Polycv__ctx_type_2 Polycv_poly_noteOn_init(){return Polycv__ctx_type_2_init();}

private void Polycv_poly_noteOn(Polycv__ctx_type_2 _ctx, int note, int velocity){
   int i = 0; 
   boolean found = false; 
   while((i < 4) && not(found)){
      if(get(_ctx.vel,i) == 0){
         set(_ctx.notes,i,note);
         set(_ctx.vel,i,velocity);
         found = true;
      }
      i = (1 + i);
   }
}

private Polycv__ctx_type_2 Polycv_poly_noteOff_init(){return Polycv__ctx_type_2_init();}

private void Polycv_poly_noteOff(Polycv__ctx_type_2 _ctx, int note){
   int i = 0; 
   boolean found = false; 
   while((i < 4) && not(found)){
      if(get(_ctx.notes,i) == note){
         set(_ctx.vel,i,0);
         found = true;
      }
      i = (1 + i);
   }
}

private Polycv__ctx_type_2 Polycv_polyState_init(){return Polycv__ctx_type_2_init();}

private void Polycv_polyState(Polycv__ctx_type_2 _ctx){
   float note1 = Util_pitchToCv(int_to_float(get(_ctx.notes,0))); 
   float note2 = Util_pitchToCv(int_to_float(get(_ctx.notes,1))); 
   float note3 = Util_pitchToCv(int_to_float(get(_ctx.notes,2))); 
   float note4 = Util_pitchToCv(int_to_float(get(_ctx.notes,3))); 
   float vel1 = Polycv_velToCV(get(_ctx.vel,0)); 
   float vel2 = Polycv_velToCV(get(_ctx.vel,1)); 
   float vel3 = Polycv_velToCV(get(_ctx.vel,2)); 
   float vel4 = Polycv_velToCV(get(_ctx.vel,3)); 
   float gate1 = Polycv_velToGate(get(_ctx.vel,0)); 
   float gate2 = Polycv_velToGate(get(_ctx.vel,1)); 
   float gate3 = Polycv_velToGate(get(_ctx.vel,2)); 
   float gate4 = Polycv_velToGate(get(_ctx.vel,3)); 
   _ctx.polyState_ret_0 = note1;
   _ctx.polyState_ret_1 = vel1;
   _ctx.polyState_ret_2 = gate1;
   _ctx.polyState_ret_3 = note2;
   _ctx.polyState_ret_4 = vel2;
   _ctx.polyState_ret_5 = gate2;
   _ctx.polyState_ret_6 = note3;
   _ctx.polyState_ret_7 = vel3;
   _ctx.polyState_ret_8 = gate3;
   _ctx.polyState_ret_9 = note4;
   _ctx.polyState_ret_10 = vel4;
   _ctx.polyState_ret_11 = gate4;
   return ;
}

private Polycv__ctx_type_2 Polycv_polyState_ret_0_init(){return Polycv__ctx_type_2_init();}

private float Polycv_polyState_ret_0(Polycv__ctx_type_2 _ctx){return _ctx.polyState_ret_0;}

private Polycv__ctx_type_2 Polycv_polyState_ret_1_init(){return Polycv__ctx_type_2_init();}

private float Polycv_polyState_ret_1(Polycv__ctx_type_2 _ctx){return _ctx.polyState_ret_1;}

private Polycv__ctx_type_2 Polycv_polyState_ret_2_init(){return Polycv__ctx_type_2_init();}

private float Polycv_polyState_ret_2(Polycv__ctx_type_2 _ctx){return _ctx.polyState_ret_2;}

private Polycv__ctx_type_2 Polycv_polyState_ret_3_init(){return Polycv__ctx_type_2_init();}

private float Polycv_polyState_ret_3(Polycv__ctx_type_2 _ctx){return _ctx.polyState_ret_3;}

private Polycv__ctx_type_2 Polycv_polyState_ret_4_init(){return Polycv__ctx_type_2_init();}

private float Polycv_polyState_ret_4(Polycv__ctx_type_2 _ctx){return _ctx.polyState_ret_4;}

private Polycv__ctx_type_2 Polycv_polyState_ret_5_init(){return Polycv__ctx_type_2_init();}

private float Polycv_polyState_ret_5(Polycv__ctx_type_2 _ctx){return _ctx.polyState_ret_5;}

private Polycv__ctx_type_2 Polycv_polyState_ret_6_init(){return Polycv__ctx_type_2_init();}

private float Polycv_polyState_ret_6(Polycv__ctx_type_2 _ctx){return _ctx.polyState_ret_6;}

private Polycv__ctx_type_2 Polycv_polyState_ret_7_init(){return Polycv__ctx_type_2_init();}

private float Polycv_polyState_ret_7(Polycv__ctx_type_2 _ctx){return _ctx.polyState_ret_7;}

private Polycv__ctx_type_2 Polycv_polyState_ret_8_init(){return Polycv__ctx_type_2_init();}

private float Polycv_polyState_ret_8(Polycv__ctx_type_2 _ctx){return _ctx.polyState_ret_8;}

private Polycv__ctx_type_2 Polycv_polyState_ret_9_init(){return Polycv__ctx_type_2_init();}

private float Polycv_polyState_ret_9(Polycv__ctx_type_2 _ctx){return _ctx.polyState_ret_9;}

private Polycv__ctx_type_2 Polycv_polyState_ret_10_init(){return Polycv__ctx_type_2_init();}

private float Polycv_polyState_ret_10(Polycv__ctx_type_2 _ctx){return _ctx.polyState_ret_10;}

private Polycv__ctx_type_2 Polycv_polyState_ret_11_init(){return Polycv__ctx_type_2_init();}

private float Polycv_polyState_ret_11(Polycv__ctx_type_2 _ctx){return _ctx.polyState_ret_11;}

private Polycv__ctx_type_3 Polycv__ctx_type_3_init(){
   Polycv__ctx_type_3 _ctx = new Polycv__ctx_type_3(); 
   _ctx.process_ret_9 = 0.0f;
   _ctx.process_ret_8 = 0.0f;
   _ctx.process_ret_7 = 0.0f;
   _ctx.process_ret_6 = 0.0f;
   _ctx.process_ret_5 = 0.0f;
   _ctx.process_ret_4 = 0.0f;
   _ctx.process_ret_3 = 0.0f;
   _ctx.process_ret_2 = 0.0f;
   _ctx.process_ret_11 = 0.0f;
   _ctx.process_ret_10 = 0.0f;
   _ctx.process_ret_1 = 0.0f;
   _ctx.process_ret_0 = 0.0f;
   _ctx.poly = Polycv__ctx_type_2_init();
   _ctx.channel_in = 0;
   return _ctx;
}

private Polycv__ctx_type_3 Polycv_process_init(){return Polycv__ctx_type_3_init();}

private void Polycv_process(Polycv__ctx_type_3 _ctx, int c){
   _ctx.channel_in = c;
   Polycv_polyState(_ctx.poly);
   _ctx.process_ret_0 = Polycv_polyState_ret_0(_ctx.poly);
   _ctx.process_ret_1 = Polycv_polyState_ret_1(_ctx.poly);
   _ctx.process_ret_2 = Polycv_polyState_ret_2(_ctx.poly);
   _ctx.process_ret_3 = Polycv_polyState_ret_3(_ctx.poly);
   _ctx.process_ret_4 = Polycv_polyState_ret_4(_ctx.poly);
   _ctx.process_ret_5 = Polycv_polyState_ret_5(_ctx.poly);
   _ctx.process_ret_6 = Polycv_polyState_ret_6(_ctx.poly);
   _ctx.process_ret_7 = Polycv_polyState_ret_7(_ctx.poly);
   _ctx.process_ret_8 = Polycv_polyState_ret_8(_ctx.poly);
   _ctx.process_ret_9 = Polycv_polyState_ret_9(_ctx.poly);
   _ctx.process_ret_10 = Polycv_polyState_ret_10(_ctx.poly);
   _ctx.process_ret_11 = Polycv_polyState_ret_11(_ctx.poly);
   return ;
}

private Polycv__ctx_type_3 Polycv_process_ret_0_init(){return Polycv__ctx_type_3_init();}

private float Polycv_process_ret_0(Polycv__ctx_type_3 _ctx){return _ctx.process_ret_0;}

private Polycv__ctx_type_3 Polycv_process_ret_1_init(){return Polycv__ctx_type_3_init();}

private float Polycv_process_ret_1(Polycv__ctx_type_3 _ctx){return _ctx.process_ret_1;}

private Polycv__ctx_type_3 Polycv_process_ret_2_init(){return Polycv__ctx_type_3_init();}

private float Polycv_process_ret_2(Polycv__ctx_type_3 _ctx){return _ctx.process_ret_2;}

private Polycv__ctx_type_3 Polycv_process_ret_3_init(){return Polycv__ctx_type_3_init();}

private float Polycv_process_ret_3(Polycv__ctx_type_3 _ctx){return _ctx.process_ret_3;}

private Polycv__ctx_type_3 Polycv_process_ret_4_init(){return Polycv__ctx_type_3_init();}

private float Polycv_process_ret_4(Polycv__ctx_type_3 _ctx){return _ctx.process_ret_4;}

private Polycv__ctx_type_3 Polycv_process_ret_5_init(){return Polycv__ctx_type_3_init();}

private float Polycv_process_ret_5(Polycv__ctx_type_3 _ctx){return _ctx.process_ret_5;}

private Polycv__ctx_type_3 Polycv_process_ret_6_init(){return Polycv__ctx_type_3_init();}

private float Polycv_process_ret_6(Polycv__ctx_type_3 _ctx){return _ctx.process_ret_6;}

private Polycv__ctx_type_3 Polycv_process_ret_7_init(){return Polycv__ctx_type_3_init();}

private float Polycv_process_ret_7(Polycv__ctx_type_3 _ctx){return _ctx.process_ret_7;}

private Polycv__ctx_type_3 Polycv_process_ret_8_init(){return Polycv__ctx_type_3_init();}

private float Polycv_process_ret_8(Polycv__ctx_type_3 _ctx){return _ctx.process_ret_8;}

private Polycv__ctx_type_3 Polycv_process_ret_9_init(){return Polycv__ctx_type_3_init();}

private float Polycv_process_ret_9(Polycv__ctx_type_3 _ctx){return _ctx.process_ret_9;}

private Polycv__ctx_type_3 Polycv_process_ret_10_init(){return Polycv__ctx_type_3_init();}

private float Polycv_process_ret_10(Polycv__ctx_type_3 _ctx){return _ctx.process_ret_10;}

private Polycv__ctx_type_3 Polycv_process_ret_11_init(){return Polycv__ctx_type_3_init();}

private float Polycv_process_ret_11(Polycv__ctx_type_3 _ctx){return _ctx.process_ret_11;}

private Polycv__ctx_type_3 Polycv_noteOn_init(){return Polycv__ctx_type_3_init();}

private void Polycv_noteOn(Polycv__ctx_type_3 _ctx, int note, int velocity, int channel){if(_ctx.channel_in == channel){ if(velocity > 0){ Polycv_poly_noteOn(_ctx.poly,note,velocity); }
else
{ Polycv_poly_noteOff(_ctx.poly,note); } }}

private Polycv__ctx_type_3 Polycv_noteOff_init(){return Polycv__ctx_type_3_init();}

private void Polycv_noteOff(Polycv__ctx_type_3 _ctx, int note, int channel){if(_ctx.channel_in == channel){ Polycv_poly_noteOff(_ctx.poly,note); }}

private Polycv__ctx_type_3 Polycv_controlChange_init(){return Polycv__ctx_type_3_init();}

private void Polycv_controlChange(Polycv__ctx_type_3 _ctx, int control, int value, int channel){
}

private Polycv__ctx_type_3 Polycv_default_init(){return Polycv__ctx_type_3_init();}

private void Polycv_default(Polycv__ctx_type_3 _ctx){
}


}