
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#include "sf_f.h"

fix16_t Sf_f_process(fix16_t input){
   return fix_mul(input,input);
}

void Sf_f_noteOn(int note, int velocity, int channel){

}

void Sf_f_noteOff(int note, int channel){

}

void Sf_f_controlChange(int control, int value, int channel){

}

void Sf_f_default(){

}



extern "C" {

static t_class *sf_f_tilde_class;

typedef struct _sf_f_tilde {
   t_pxobject  x_obj;
   float dummy;
   
   float in0_value;
   short in0_connected;
   float data;
} t_sf_f_tilde;

void sf_f_tilde_perform(t_sf_f_tilde *x, t_object *dsp64, double **ins, long numins, double **outs, long numouts, long sampleframes, long flags, void *userparam)
{
   
   double *in_0 = ins[0];
   double *out_0 = outs[0];

   int n = sampleframes;
   while (n--) {
   
   float in_0_value = x->in0_connected? *(in_0++): x->in0_value;
   
   fix16_t ret =  Sf_f_process(float_to_fix(in_0_value));
   *(out_0++) = fix_to_float(ret);
   }
}

void sf_f_tilde_dsp(t_sf_f_tilde *x, t_object *dsp64, short *count, double samplerate, long maxvectorsize, long flags)
{
   
   x->in0_connected = count[0];
   object_method(dsp64, gensym("dsp_add64"), x, sf_f_tilde_perform, 0, NULL);
}

void *sf_f_tilde_new(t_symbol *s, long argc, t_atom *argv)
{
   t_sf_f_tilde *x = (t_sf_f_tilde *)object_alloc(sf_f_tilde_class);

   
   
   dsp_setup((t_pxobject *)x, 1);
   
   outlet_new((t_object *)x, "signal");

   return (void *)x;
}

void sf_f_tilde_delete(t_sf_f_tilde *x){

}


void sf_f_noteOn(t_sf_f_tilde *x, double note, double velocity, double channel){
   if((int)velocity) Sf_f_noteOn((int)note,(int)velocity,(int)channel);
   else Sf_f_noteOff((int)note,(int)channel);
}


void sf_f_noteOff(t_sf_f_tilde *x, double note, double channel) {
   Sf_f_noteOff((int)note,(int)channel);
}


void sf_f_controlChange(t_sf_f_tilde *x, double control, double value, double channel) {
   Sf_f_controlChange((int)control,(int)value,(int)channel);
}


void sf_f_float(t_sf_f_tilde *x, double f){
   int in = proxy_getinlet((t_object *)x);
   
   if(in == 0) x->in0_value = f;
}

void ext_main(void *r) {
   sf_f_tilde_class = class_new("sf_f~",
      (method)sf_f_tilde_new, // constructor function
      (method)sf_f_tilde_delete, // destructor function
      (long)sizeof(t_sf_f_tilde), // size of the object
       0L, A_GIMME, 0); // arguments passed

   class_addmethod(sf_f_tilde_class,(method)sf_f_tilde_dsp, "dsp64", A_CANT, 0);

   class_addmethod(sf_f_tilde_class, (method)sf_f_noteOn,        "noteOn",        A_DEFFLOAT, A_DEFFLOAT, A_DEFFLOAT, 0);
   class_addmethod(sf_f_tilde_class, (method)sf_f_noteOff,       "noteOff",       A_DEFFLOAT, A_DEFFLOAT, 0);
   class_addmethod(sf_f_tilde_class, (method)sf_f_controlChange, "controlChange", A_DEFFLOAT, A_DEFFLOAT, A_DEFFLOAT, 0);
   class_addmethod(sf_f_tilde_class, (method)sf_f_float, "float", A_FLOAT, 0);

   class_dspinit(sf_f_tilde_class);
   class_register(CLASS_BOX, sf_f_tilde_class);
}

} // extern "C"
