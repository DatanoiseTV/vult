#ifndef ADSR_H
#define ADSR_H
#include <stdint.h>
#include <math.h>
#include "vultin.h"

typedef struct Adsr__ctx_type_0 {
   int count;
} Adsr__ctx_type_0;

typedef Adsr__ctx_type_0 Adsr_each_type;

Adsr__ctx_type_0 Adsr__ctx_type_0_init();

Adsr__ctx_type_0 Adsr_each_init();

uint8_t Adsr_each(Adsr__ctx_type_0 &_ctx, int n);

typedef struct Adsr__ctx_type_1 {
   uint8_t pre_x;
} Adsr__ctx_type_1;

typedef Adsr__ctx_type_1 Adsr_bchange_type;

Adsr__ctx_type_1 Adsr__ctx_type_1_init();

Adsr__ctx_type_1 Adsr_bchange_init();

uint8_t Adsr_bchange(Adsr__ctx_type_1 &_ctx, uint8_t x);

typedef struct Adsr__ctx_type_2 {
   int32_t pre_x;
} Adsr__ctx_type_2;

typedef Adsr__ctx_type_2 Adsr_lpfilter_type;

Adsr__ctx_type_2 Adsr__ctx_type_2_init();

Adsr__ctx_type_2 Adsr_lpfilter_init();

int32_t Adsr_lpfilter(Adsr__ctx_type_2 &_ctx, int32_t x);

typedef struct Adsr__ctx_type_3 {
   int32_t value;
   int32_t sustainLevel;
   int state;
   int32_t releaseRate;
   int32_t decayRate;
   int32_t attackRate;
   Adsr__ctx_type_2 _inst2;
   Adsr__ctx_type_1 _inst1;
   Adsr__ctx_type_0 _inst0;
} Adsr__ctx_type_3;

typedef Adsr__ctx_type_3 Adsr_adsr_type;

Adsr__ctx_type_3 Adsr__ctx_type_3_init();

Adsr__ctx_type_3 Adsr_adsr_init();

int32_t Adsr_adsr(Adsr__ctx_type_3 &_ctx, uint8_t gate, int32_t attack, int32_t decay, int32_t sustain, int32_t release);



#endif // ADSR_H
