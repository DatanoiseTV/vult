
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#include "volume.h"

void Volume__ctx_type_0_init(Volume__ctx_type_0 &_output_){
   Volume__ctx_type_0 _ctx;
   _ctx.x = 0.f;
   _output_ = _ctx;
   return ;
}

void Volume_smooth_init(Volume__ctx_type_0 &_output_){
   Volume__ctx_type_0_init(_output_);
   return ;
}

float Volume_smooth(Volume__ctx_type_0 &_ctx, float input){
   _ctx.x = (_ctx.x + ((input + (- _ctx.x)) * 0.005f));
   return _ctx.x;
}

void Volume__ctx_type_1_init(Volume__ctx_type_1 &_output_){
   Volume__ctx_type_1 _ctx;
   _ctx.volume = 0.f;
   Volume__ctx_type_0_init(_ctx._inst2);
   _output_ = _ctx;
   return ;
}

void Volume_process_init(Volume__ctx_type_1 &_output_){
   Volume__ctx_type_1_init(_output_);
   return ;
}

float Volume_process(Volume__ctx_type_1 &_ctx, float input){
   return (input * Volume_smooth(_ctx._inst2,_ctx.volume));
}

void Volume_noteOn_init(Volume__ctx_type_1 &_output_){
   Volume__ctx_type_1_init(_output_);
   return ;
}

void Volume_noteOn(Volume__ctx_type_1 &_ctx, int note, int velocity, int channel){
}

void Volume_noteOff_init(Volume__ctx_type_1 &_output_){
   Volume__ctx_type_1_init(_output_);
   return ;
}

void Volume_noteOff(Volume__ctx_type_1 &_ctx, int note, int channel){
}

void Volume_controlChange_init(Volume__ctx_type_1 &_output_){
   Volume__ctx_type_1_init(_output_);
   return ;
}

void Volume_controlChange(Volume__ctx_type_1 &_ctx, int control, int value, int channel){
   uint8_t _cond_8;
   _cond_8 = (control == 30);
   if(_cond_8){
      _ctx.volume = (int_to_float(value) * 0.00787401574803f);
   }
}

void Volume_default_init(Volume__ctx_type_1 &_output_){
   Volume__ctx_type_1_init(_output_);
   return ;
}

void Volume_default(Volume__ctx_type_1 &_ctx){
   _ctx.volume = 0.f;
}


