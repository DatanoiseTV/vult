
#include "sfi_fi.h"

void Sfi_fi__ctx_type_0_init(Sfi_fi__ctx_type_0 &_output_){
   Sfi_fi__ctx_type_0 _ctx;
   _ctx.process_ret_1 = 0;
   _ctx.process_ret_0 = 0x0 /* 0.000000 */;
   _output_ = _ctx;
   return ;
}

void Sfi_fi_process_init(Sfi_fi__ctx_type_0 &_output_){
   Sfi_fi__ctx_type_0_init(_output_);
   return ;
}

void Sfi_fi_process(Sfi_fi__ctx_type_0 &_ctx, fix16_t a, int b){
   _ctx.process_ret_0 = a;
   _ctx.process_ret_1 = b;
   return ;
}

void Sfi_fi_process_ret_0_init(Sfi_fi__ctx_type_0 &_output_){
   Sfi_fi__ctx_type_0_init(_output_);
   return ;
}

fix16_t Sfi_fi_process_ret_0(Sfi_fi__ctx_type_0 &_ctx){
   return _ctx.process_ret_0;
}

void Sfi_fi_process_ret_1_init(Sfi_fi__ctx_type_0 &_output_){
   Sfi_fi__ctx_type_0_init(_output_);
   return ;
}

int Sfi_fi_process_ret_1(Sfi_fi__ctx_type_0 &_ctx){
   return _ctx.process_ret_1;
}

void Sfi_fi_noteOn_init(Sfi_fi__ctx_type_0 &_output_){
   Sfi_fi__ctx_type_0_init(_output_);
   return ;
}

void Sfi_fi_noteOn(Sfi_fi__ctx_type_0 &_ctx, int note, int velocity, int channel){

}

void Sfi_fi_noteOff_init(Sfi_fi__ctx_type_0 &_output_){
   Sfi_fi__ctx_type_0_init(_output_);
   return ;
}

void Sfi_fi_noteOff(Sfi_fi__ctx_type_0 &_ctx, int note, int channel){

}

void Sfi_fi_controlChange_init(Sfi_fi__ctx_type_0 &_output_){
   Sfi_fi__ctx_type_0_init(_output_);
   return ;
}

void Sfi_fi_controlChange(Sfi_fi__ctx_type_0 &_ctx, int control, int value, int channel){

}

void Sfi_fi_default_init(Sfi_fi__ctx_type_0 &_output_){
   Sfi_fi__ctx_type_0_init(_output_);
   return ;
}

void Sfi_fi_default(Sfi_fi__ctx_type_0 &_ctx){

}



void sfi_fi::update(void)
{


   audio_block_t * block0 = receiveWritable(0); if(!block0) return;
   audio_block_t * block1 = receiveWritable(1); if(!block1) return;

   for(int i = 0; i < AUDIO_BLOCK_SAMPLES; i++) { 

      int in1 = block1->data[i];
      fix16_t in0 = short_to_fix(block0->data[i]);
      _tuple___real_int__ out; 
      out = Sfi_fi_process(data);

   block0->data[i] = fix_to_short(ret.field_0); 
   block1->data[i] = ret.field_1; 

   }


   transmit(block0, 0);
   transmit(block1, 1);

   release(block0);
   release(block1);
}

