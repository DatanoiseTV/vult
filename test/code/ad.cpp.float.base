
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#include "ad.h"

void Util__ctx_type_0_init(Util__ctx_type_0 &_output_){
   Util__ctx_type_0 _ctx;
   _ctx.pre = 0;
   _output_ = _ctx;
   return ;
}

void Util_edge_init(Util__ctx_type_0 &_output_){
   Util__ctx_type_0_init(_output_);
   return ;
}

uint8_t Util_edge(Util__ctx_type_0 &_ctx, uint8_t x){
   uint8_t ret;
   ret = (x && bool_not(_ctx.pre));
   _ctx.pre = x;
   return ret;
}

void Util__ctx_type_1_init(Util__ctx_type_1 &_output_){
   Util__ctx_type_1 _ctx;
   _ctx.pre_x = 0.000000f;
   _output_ = _ctx;
   return ;
}

void Util_change_init(Util__ctx_type_1 &_output_){
   Util__ctx_type_1_init(_output_);
   return ;
}

uint8_t Util_change(Util__ctx_type_1 &_ctx, float x){
   uint8_t v;
   v = (_ctx.pre_x != x);
   _ctx.pre_x = x;
   return v;
}

float Util_map(float x, float x0, float x1, float y0, float y1){
   return ((((x + (- x0)) * (y1 + (- y0))) / (x1 + (- x0))) + y0);
}

void Util__ctx_type_3_init(Util__ctx_type_3 &_output_){
   Util__ctx_type_3 _ctx;
   _ctx.y1 = 0.000000f;
   _ctx.x1 = 0.000000f;
   _output_ = _ctx;
   return ;
}

void Util_dcblock_init(Util__ctx_type_3 &_output_){
   Util__ctx_type_3_init(_output_);
   return ;
}

float Util_dcblock(Util__ctx_type_3 &_ctx, float x0){
   float y0;
   y0 = (x0 + (- _ctx.x1) + (_ctx.y1 * 0.995000f));
   _ctx.x1 = x0;
   _ctx.y1 = y0;
   return y0;
}

void Util__ctx_type_4_init(Util__ctx_type_4 &_output_){
   Util__ctx_type_4 _ctx;
   _ctx.x = 0.000000f;
   _output_ = _ctx;
   return ;
}

void Util_smooth_init(Util__ctx_type_4 &_output_){
   Util__ctx_type_4_init(_output_);
   return ;
}

float Util_smooth(Util__ctx_type_4 &_ctx, float input){
   _ctx.x = (_ctx.x + ((input + (- _ctx.x)) * 0.005000f));
   return _ctx.x;
}

void Util__ctx_type_5_init(Util__ctx_type_5 &_output_){
   Util__ctx_type_5 _ctx;
   _ctx.x0 = 0.000000f;
   _output_ = _ctx;
   return ;
}

void Util_average2_init(Util__ctx_type_5 &_output_){
   Util__ctx_type_5_init(_output_);
   return ;
}

float Util_average2(Util__ctx_type_5 &_ctx, float x1){
   float result;
   result = ((_ctx.x0 + x1) * 0.500000f);
   _ctx.x0 = x1;
   return result;
}

float Util_cubic_clipper(float x){
   uint8_t _cond_21;
   _cond_21 = (x <= (-0.666667f));
   if(_cond_21){
      return (-0.666667f);
   }
   else
   {
      uint8_t _cond_20;
      _cond_20 = (x >= 0.666667f);
      if(_cond_20){
         return 0.666667f;
      }
      else
      {
         return (x + ((-0.333333f) * x * x * x));
      }
   }
}

float Util_pitchToRate_1024(float pitch){
   int index;
   index = int_clip(float_to_int((0.244094f * pitch)),0,31);
   return (float_wrap_array(Util_pitchToRate_1024_c0)[index] + (pitch * (float_wrap_array(Util_pitchToRate_1024_c1)[index] + (float_wrap_array(Util_pitchToRate_1024_c2)[index] * pitch))));
}

float Util_pitchToRate(float pitch){
   int index;
   index = int_clip(float_to_int((0.244094f * pitch)),0,31);
   return (float_wrap_array(Util_pitchToRate_c0)[index] + (pitch * (float_wrap_array(Util_pitchToRate_c1)[index] + (float_wrap_array(Util_pitchToRate_c2)[index] * pitch))));
}

float Util_cvToPitch(float cv){
   return ((cv * 120.000000f) + 24.000000f);
}

float Util_cvToRate_1024(float cv){
   int index;
   index = int_clip(float_to_int((34.444444f * cv)),0,31);
   return (float_wrap_array(Util_cvToRate_1024_c0)[index] + (cv * (float_wrap_array(Util_cvToRate_1024_c1)[index] + (float_wrap_array(Util_cvToRate_1024_c2)[index] * cv))));
}

float Util_cvToRate(float cv){
   int index;
   index = int_clip(float_to_int((141.111111f * cv)),0,127);
   return (float_wrap_array(Util_cvToRate_c0)[index] + (cv * (float_wrap_array(Util_cvToRate_c1)[index] + (float_wrap_array(Util_cvToRate_c2)[index] * cv))));
}

float Util_pitchToCv(float pitch){
   return (0.008333f * ((-24.000000f) + pitch));
}

float Util_cvToperiod(float cv){
   int index;
   index = int_clip(float_to_int((31.000000f * cv)),0,31);
   return (float_wrap_array(Util_cvToperiod_c0)[index] + (cv * (float_wrap_array(Util_cvToperiod_c1)[index] + (float_wrap_array(Util_cvToperiod_c2)[index] * cv))));
}

float Util_cvTokHz(float cv){
   int index;
   index = int_clip(float_to_int((31.000000f * cv)),0,31);
   return (float_wrap_array(Util_cvTokHz_c0)[index] + (cv * (float_wrap_array(Util_cvTokHz_c1)[index] + (float_wrap_array(Util_cvTokHz_c2)[index] * cv))));
}

void Ad__ctx_type_0_init(Ad__ctx_type_0 &_output_){
   Ad__ctx_type_0 _ctx;
   _ctx.target = 0.000000f;
   _ctx.state = 0;
   _ctx.scale = 0.000000f;
   _ctx.rate = 0.000000f;
   _ctx.out = 0.000000f;
   Util__ctx_type_0_init(_ctx._inst24);
   _output_ = _ctx;
   return ;
}

void Ad_do_init(Ad__ctx_type_0 &_output_){
   Ad__ctx_type_0_init(_output_);
   return ;
}

float Ad_do(Ad__ctx_type_0 &_ctx, float gate, float a, float d){
   float a_rate;
   a_rate = (1.000000f / ((100.000000f * a) + 0.010000f));
   float d_rate;
   d_rate = (1.000000f / ((100.000000f * d) + 0.010000f));
   uint8_t bgate;
   bgate = (gate > 0.000000f);
   _ctx.out = (_ctx.out + ((_ctx.target + (- _ctx.out)) * _ctx.rate * 0.004000f));
   uint8_t _cond_37;
   _cond_37 = (_ctx.state == 0);
   if(_cond_37){
      uint8_t _cond_36;
      _cond_36 = Util_edge(_ctx._inst24,bgate);
      if(_cond_36){
         _ctx.state = 1;
         _ctx.scale = (gate * 0.200000f);
      }
      _ctx.rate = d_rate;
      _ctx.target = 0.000000f;
   }
   uint8_t _cond_39;
   _cond_39 = (_ctx.state == 1);
   if(_cond_39){
      uint8_t _cond_38;
      _cond_38 = (bool_not(bgate) || (_ctx.out > 1024.000000f));
      if(_cond_38){
         _ctx.state = 0;
      }
      _ctx.rate = a_rate;
      _ctx.target = 1228.800000f;
   }
   return (float_clip((_ctx.out * 0.000977f),0.000000f,1.000000f) * _ctx.scale);
}

void Ad__ctx_type_1_init(Ad__ctx_type_1 &_output_){
   Ad__ctx_type_1 _ctx;
   _ctx.knob2 = 0.000000f;
   _ctx.knob1 = 0.000000f;
   Ad__ctx_type_0_init(_ctx._inst29);
   _output_ = _ctx;
   return ;
}

void Ad_process_init(Ad__ctx_type_1 &_output_){
   Ad__ctx_type_1_init(_output_);
   return ;
}

float Ad_process(Ad__ctx_type_1 &_ctx, float gate){
   return Ad_do(_ctx._inst29,gate,_ctx.knob1,_ctx.knob2);
}

void Ad_noteOn_init(Ad__ctx_type_1 &_output_){
   Ad__ctx_type_1_init(_output_);
   return ;
}

void Ad_noteOn(Ad__ctx_type_1 &_ctx, int note, int velocity, int channel){
}

void Ad_noteOff_init(Ad__ctx_type_1 &_output_){
   Ad__ctx_type_1_init(_output_);
   return ;
}

void Ad_noteOff(Ad__ctx_type_1 &_ctx, int note, int channel){
}

void Ad_controlChange_init(Ad__ctx_type_1 &_output_){
   Ad__ctx_type_1_init(_output_);
   return ;
}

void Ad_controlChange(Ad__ctx_type_1 &_ctx, int control, int value, int channel){
   uint8_t _cond_40;
   _cond_40 = (control == 1);
   if(_cond_40){
      _ctx.knob1 = (int_to_float(value) * 0.007874f);
   }
   uint8_t _cond_41;
   _cond_41 = (control == 2);
   if(_cond_41){
      _ctx.knob2 = (int_to_float(value) * 0.007874f);
   }
}

void Ad_default_init(Ad__ctx_type_1 &_output_){
   Ad__ctx_type_1_init(_output_);
   return ;
}

void Ad_default(Ad__ctx_type_1 &_ctx){
   _ctx.knob1 = 0.000000f;
   _ctx.knob2 = 0.500000f;
}


