
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#include "ad.h"

void Util__ctx_type_3_init(Util__ctx_type_3 &_output_){
   Util__ctx_type_3 _ctx;
   _ctx.y1 = 0.0f;
   _ctx.x1 = 0.0f;
   _output_ = _ctx;
   return ;
}

float Util_dcblock(Util__ctx_type_3 &_ctx, float x0){
   float y0;
   y0 = (x0 + (- _ctx.x1) + (0.995f * _ctx.y1));
   _ctx.x1 = x0;
   _ctx.y1 = y0;
   return y0;
}

void Ad__ctx_type_0_init(Ad__ctx_type_0 &_output_){
   Ad__ctx_type_0 _ctx;
   _ctx.target = 0.0f;
   _ctx.state = 0;
   _ctx.scale = 0.0f;
   _ctx.rate = 0.0f;
   _ctx.out = 0.0f;
   Util__ctx_type_0_init(_ctx._inst281);
   _output_ = _ctx;
   return ;
}

float Ad_do(Ad__ctx_type_0 &_ctx, float gate, float a, float d){
   float a_rate;
   a_rate = (1.f / (0.01f + (100.f * a)));
   float d_rate;
   d_rate = (1.f / (0.01f + (100.f * d)));
   uint8_t bgate;
   bgate = (gate > 0.0f);
   _ctx.out = (_ctx.out + (0.004f * _ctx.rate * (_ctx.target + (- _ctx.out))));
   if(_ctx.state == 0){
      if(Util_edge(_ctx._inst281,bgate)){
         _ctx.state = 1;
         _ctx.scale = (0.2f * gate);
      }
      _ctx.rate = d_rate;
      _ctx.target = 0.0f;
   }
   if(_ctx.state == 1){
      if(bool_not(bgate) || (_ctx.out > 1024.f)){
         _ctx.state = 0;
      }
      _ctx.rate = a_rate;
      _ctx.target = 1228.8f;
   }
   return (_ctx.scale * float_clip((0.0009766f * _ctx.out),0.0f,1.f));
}

void Ad__ctx_type_1_init(Ad__ctx_type_1 &_output_){
   Ad__ctx_type_1 _ctx;
   _ctx.knob2 = 0.0f;
   _ctx.knob1 = 0.0f;
   Ad__ctx_type_0_init(_ctx._inst115);
   _output_ = _ctx;
   return ;
}


