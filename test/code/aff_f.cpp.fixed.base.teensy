
#include "aff_f.h"

void Aff_f__ctx_type_0_init(Aff_f__ctx_type_0 &_output_){
   Aff_f__ctx_type_0 _ctx;
   _ctx.x = 0;
   _output_ = _ctx;
   return ;
}

void Aff_f_process_init(Aff_f__ctx_type_0 &_output_){
   Aff_f__ctx_type_0_init(_output_);
   return ;
}

fix16_t Aff_f_process(Aff_f__ctx_type_0 &_ctx, fix16_t a, fix16_t b){
   _ctx.x = (_ctx.x + 1);
   return fix_mul(a,b);
}

void Aff_f_noteOn_init(Aff_f__ctx_type_0 &_output_){
   Aff_f__ctx_type_0_init(_output_);
   return ;
}

void Aff_f_noteOn(Aff_f__ctx_type_0 &_ctx, int note, int velocity, int channel){
}

void Aff_f_noteOff_init(Aff_f__ctx_type_0 &_output_){
   Aff_f__ctx_type_0_init(_output_);
   return ;
}

void Aff_f_noteOff(Aff_f__ctx_type_0 &_ctx, int note, int channel){
}

void Aff_f_controlChange_init(Aff_f__ctx_type_0 &_output_){
   Aff_f__ctx_type_0_init(_output_);
   return ;
}

void Aff_f_controlChange(Aff_f__ctx_type_0 &_ctx, int control, int value, int channel){
}

void Aff_f_default_init(Aff_f__ctx_type_0 &_output_){
   Aff_f__ctx_type_0_init(_output_);
   return ;
}

void Aff_f_default(Aff_f__ctx_type_0 &_ctx){
}



void aff_f::update(void)
{
  audio_block_t *block;
  short *bp;

  block = allocate();
  if (block) {
    bp = block->data;
      for(int i = 0;i < AUDIO_BLOCK_SAMPLES;i++) {
        fix16_t v = Aff_f_process(data,0);
        *bp++ = (int16_t)(v / 2);
      }

    transmit(block,0);
    release(block);
  }
}

