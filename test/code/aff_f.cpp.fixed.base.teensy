
#include "aff_f.h"

void Aff_f__ctx_type_0_init(Aff_f__ctx_type_0 &_output_){
   Aff_f__ctx_type_0 _ctx;
   _ctx.x = 0;
   _output_ = _ctx;
   return ;
}

void Aff_f_process_init(Aff_f__ctx_type_0 &_output_){
   Aff_f__ctx_type_0_init(_output_);
   return ;
}

fix16_t Aff_f_process(Aff_f__ctx_type_0 &_ctx, fix16_t a, fix16_t b){
   _ctx.x = (1 + _ctx.x);
   return fix_mul(a,b);
}

void Aff_f_noteOn_init(Aff_f__ctx_type_0 &_output_){
   Aff_f__ctx_type_0_init(_output_);
   return ;
}

void Aff_f_noteOn(Aff_f__ctx_type_0 &_ctx, int note, int velocity, int channel){
}

void Aff_f_noteOff_init(Aff_f__ctx_type_0 &_output_){
   Aff_f__ctx_type_0_init(_output_);
   return ;
}

void Aff_f_noteOff(Aff_f__ctx_type_0 &_ctx, int note, int channel){
}

void Aff_f_controlChange_init(Aff_f__ctx_type_0 &_output_){
   Aff_f__ctx_type_0_init(_output_);
   return ;
}

void Aff_f_controlChange(Aff_f__ctx_type_0 &_ctx, int control, int value, int channel){
}

void Aff_f_default_init(Aff_f__ctx_type_0 &_output_){
   Aff_f__ctx_type_0_init(_output_);
   return ;
}

void Aff_f_default(Aff_f__ctx_type_0 &_ctx){
}



void aff_f::update(void)
{


   audio_block_t * block0 = receiveWritable(0); if(!block0) return;
   audio_block_t * block1 = receiveReadOnly(1); if(!block1) return;

   for(int i = 0; i < AUDIO_BLOCK_SAMPLES; i++) { 

      fix16_t in1 = short_to_fix(block1->data[i]);
      fix16_t in0 = short_to_fix(block0->data[i]);
      fix16_t out;
      out = Aff_f_process(data);
block0->data[i] = fix_to_short(out); 
   }


   transmit(block0, 0);

   release(block0);
   release(block1);
}

