
local this = {}
local ffi = require("ffi")
function this.ternary(cond,then_,else_) if cond then return then_ else return else_ end end
function this.eps()             return 1e-18; end
function this.random()          return math.random(); end
function this.irandom()         return math.floor(math.random() * 4294967296); end
function this.clip(x,low,high)  return (this.ternary(x<low,low,this.ternary(x>high,high,x))); end
function this.real(x)           return x; end
function this.int(x)            local int_part,_ = math.modf(x) return int_part; end
function this.sin(x)            return math.sin(x); end
function this.cos(x)            return math.cos(x); end
function this.abs(x)            return math.abs(x); end
function this.exp(x)            return math.exp(x); end
function this.floor(x)          return math.floor(x); end
function this.tan(x)            return math.tan(x); end
function this.tanh(x)           return math.tanh(x); end
function this.sqrt(x)           return x; end
function this.set(a,i,v)        a[i+1]=v; end
function this.get(a,i)          return a[i+1]; end
function this.makeArray(size,v) local a = {}; for i=1,size do a[i]=v end return a; end
function this.wrap_array(a)     return a; end
function this.Delay__ctx_type_0_init()
   local _ctx = {};
   _ctx.x = 0.000000;
   return _ctx;

end

function this.Delay_smooth_init()
   return this.Delay__ctx_type_0_init();
end

function this.Delay_smooth(_ctx,input)
   _ctx.x = (_ctx.x + ((input + (- _ctx.x)) * 0.005000));
   return _ctx.x;

end

function this.Delay__ctx_type_1_init()
   local _ctx = {};
   _ctx.pre_x = 0.000000;
   return _ctx;

end

function this.Delay_change_init()
   return this.Delay__ctx_type_1_init();
end

function this.Delay_change(_ctx,x)
   local v = (_ctx.pre_x ~= x);
   _ctx.pre_x = x;
   return v;

end

function this.Delay__ctx_type_2_init()
   local _ctx = {};
   _ctx.pre_x = false;
   return _ctx;

end

function this.Delay_edge_init()
   return this.Delay__ctx_type_2_init();
end

function this.Delay_edge(_ctx,x)
   local v = ((_ctx.pre_x ~= x) and (_ctx.pre_x == false));
   _ctx.pre_x = x;
   return v;

end

function this.Delay__ctx_type_3_init()
   local _ctx = {};
   _ctx.count = 0;
   return _ctx;

end

function this.Delay_each_init()
   return this.Delay__ctx_type_3_init();
end

function this.Delay_each(_ctx,n)
   local ret = (_ctx.count == 0);
   _ctx.count = ((_ctx.count + 1) % n);
   return ret;

end

function this.Delay_pitchToRate(d)
   return (0.000185 * this.exp((0.057762 * d)));

end

function this.Delay__ctx_type_5_init()
   local _ctx = {};
   _ctx.rate = 0.000000;
   _ctx.phase = 0.000000;
   _ctx._inst6 = this.Delay__ctx_type_1_init();
   return _ctx;

end

function this.Delay_phasor_init()
   return this.Delay__ctx_type_5_init();
end

function this.Delay_phasor(_ctx,pitch,reset)
   if this.Delay_change(_ctx._inst6,pitch) then
      _ctx.rate = this.Delay_pitchToRate(pitch);

   end
   if reset then
      _ctx.phase = 0.000000;
   else

      _ctx.phase = ((_ctx.phase + _ctx.rate) % 1.000000);
   end
   return _ctx.phase;

end

function this.Delay__ctx_type_6_init()
   local _ctx = {};
   _ctx.phase = 0.000000;
   _ctx._inst9 = this.Delay__ctx_type_2_init();
   return _ctx;

end

function this.Delay_lfo_init()
   return this.Delay__ctx_type_6_init();
end

function this.Delay_lfo(_ctx,f,gate)
   local rate = (0.000227 * f);
   if this.Delay_edge(_ctx._inst9,gate) then
      _ctx.phase = 0.000000;

   end
   _ctx.phase = (_ctx.phase + rate);
   if (_ctx.phase > 1.000000) then
      _ctx.phase = (_ctx.phase + (-1.000000));

   end
   return (this.sin((6.283185 * _ctx.phase)) + (-0.500000));

end

function this.Delay__ctx_type_7_init()
   local _ctx = {};
   _ctx.pre_phase1 = 0.000000;
   _ctx._inst15 = this.Delay__ctx_type_5_init();
   _ctx._inst14 = this.Delay__ctx_type_0_init();
   _ctx._inst13 = this.Delay__ctx_type_5_init();
   return _ctx;

end

function this.Delay_phd_osc_init()
   return this.Delay__ctx_type_7_init();
end

function this.Delay_phd_osc(_ctx,pitch,detune)
   local phase1 = this.Delay_phasor(_ctx._inst13,pitch,false);
   local comp = (1.000000 + (- phase1));
   local reset = ((_ctx.pre_phase1 + (- phase1)) > 0.500000);
   _ctx.pre_phase1 = phase1;
   local phase2 = this.Delay_phasor(_ctx._inst15,(pitch + (this.Delay_smooth(_ctx._inst14,detune) * 32.000000)),reset);
   local sine = this.sin((6.283185 * phase2));
   return (sine * comp);

end

function this.Delay__ctx_type_8_init()
   local _ctx = {};
   _ctx.write_pos = 0;
   _ctx.buffer = this.makeArray(30000,0.000000);
   return _ctx;

end

function this.Delay_delay_init()
   return this.Delay__ctx_type_8_init();
end

function this.Delay_delay(_ctx,x,time,feedback)
   time = this.clip(time,0.000000,1.000000);
   feedback = this.clip(feedback,0.000000,1.000000);
   local index_r = (30000.000000 * time);
   local index_i = this.int(this.floor(index_r));
   local delta = (_ctx.write_pos + (- index_i));
   local read_pos = 0;
   if (delta < 0) then
      read_pos = (30000 + delta);
   else

      read_pos = delta;
   end
   local decimal = (index_r + (- this.real(index_i)));
   local x1 = this.get(_ctx.buffer,read_pos);
   local x2 = this.get(_ctx.buffer,((read_pos + 1) % 30000));
   local ret = (((x2 + (- x1)) * decimal) + x1);
   _ctx.write_pos = ((_ctx.write_pos + 1) % 30000);
   this.set(_ctx.buffer,_ctx.write_pos,this.clip((x + (feedback * ret)),(-1.000000),1.000000));
   return ret;

end

function this.Delay__ctx_type_9_init()
   local _ctx = {};
   _ctx.pre = 0;
   _ctx.notes = this.makeArray(4,0);
   _ctx.count = 0;
   return _ctx;

end

function this.Delay_mono_noteOn_init()
   return this.Delay__ctx_type_9_init();
end

function this.Delay_mono_noteOn(_ctx,n)
   if (_ctx.count < 4) then
      this.set(_ctx.notes,_ctx.count,n);
      _ctx.pre = n;
      local _cond_49 = false;
      _cond_49 = (_ctx.count < 4);
      if _cond_49 then
         _ctx.count = (_ctx.count + 1);

      end

   end
   return _ctx.pre;

end

function this.Delay_mono_noteOff_init()
   return this.Delay__ctx_type_9_init();
end

function this.Delay_mono_noteOff(_ctx,n)
   local found = false;
   local pos = 0;
   local i = 0;
   if (_ctx.count == 0) then
      return _ctx.pre;

   end
   while ((i < 4) and (not found)) do
      local _cond_52 = false;
      _cond_52 = (this.get(_ctx.notes,i) == n);
      if _cond_52 then
         pos = i;
         found = true;

      end
      i = (i + 1);
   end
   if found then
      local k = 0;
      k = (pos + 1);
      while (k < 4) do
         this.set(_ctx.notes,(k + -1),this.get(_ctx.notes,k));
         k = (k + 1);
      end
      local _cond_53 = false;
      _cond_53 = (found and (_ctx.count > 0));
      if _cond_53 then
         _ctx.count = (_ctx.count + -1);
         _ctx.pre = this.get(_ctx.notes,(_ctx.count + -1));

      end

   end
   return _ctx.pre;

end

function this.Delay_mono_isGateOn_init()
   return this.Delay__ctx_type_9_init();
end

function this.Delay_mono_isGateOn(_ctx)
   return (_ctx.count > 0);

end

function this.Delay__ctx_type_10_init()
   local _ctx = {};
   _ctx.volume = 0.000000;
   _ctx.time = 0.000000;
   _ctx.pitch = 0.000000;
   _ctx.notes = this.Delay__ctx_type_9_init();
   _ctx.lfo_rate = 0.000000;
   _ctx.lfo_amt = 0.000000;
   _ctx.feedback = 0.000000;
   _ctx.detune = 0.000000;
   _ctx._inst34 = this.Delay__ctx_type_8_init();
   _ctx._inst33 = this.Delay__ctx_type_0_init();
   _ctx._inst32 = this.Delay__ctx_type_0_init();
   _ctx._inst31 = this.Delay__ctx_type_0_init();
   _ctx._inst30 = this.Delay__ctx_type_7_init();
   _ctx._inst29 = this.Delay__ctx_type_6_init();
   return _ctx;

end

function this.Delay_process_init()
   return this.Delay__ctx_type_10_init();
end

function this.Delay_process(_ctx,input)
   local gate = this.Delay_mono_isGateOn(_ctx.notes);
   local lfo_val = (this.Delay_lfo(_ctx._inst29,_ctx.lfo_rate,gate) * _ctx.lfo_amt);
   local o1 = this.Delay_phd_osc(_ctx._inst30,_ctx.pitch,(_ctx.detune + lfo_val));
   local amp = 0.0;
   local _if_54 = 0.0;
   if gate then
      _if_54 = 1.000000;
   else

      _if_54 = 0.000000;
   end
   amp = this.Delay_smooth(_ctx._inst31,_if_54);
   local osc_out = (o1 * amp);
   local delay_out = this.Delay_delay(_ctx._inst34,osc_out,this.Delay_smooth(_ctx._inst32,_ctx.time),this.Delay_smooth(_ctx._inst33,_ctx.feedback));
   return (_ctx.volume * (osc_out + delay_out) * 0.500000);

end

function this.Delay_noteOn_init()
   return this.Delay__ctx_type_10_init();
end

function this.Delay_noteOn(_ctx,note,velocity,channel)
   _ctx.pitch = this.real(this.Delay_mono_noteOn(_ctx.notes,note));

end

function this.Delay_noteOff_init()
   return this.Delay__ctx_type_10_init();
end

function this.Delay_noteOff(_ctx,note,channel)
   _ctx.pitch = this.real(this.Delay_mono_noteOff(_ctx.notes,note));

end

function this.Delay_controlChange_init()
   return this.Delay__ctx_type_10_init();
end

function this.Delay_controlChange(_ctx,control,value,channel)
   if (control == 30) then
      _ctx.volume = (value * 0.007874);

   end
   if (control == 31) then
      _ctx.detune = (value * 0.007874);

   end
   if (control == 32) then
      _ctx.lfo_rate = (value * 0.007874);

   end
   if (control == 33) then
      _ctx.lfo_amt = (2.000000 * ((value * 0.007874) + (-0.500000)));

   end
   if (control == 34) then
      _ctx.time = (value * 0.007874);

   end
   if (control == 35) then
      _ctx.feedback = (value * 0.007874);

   end

end

function this.Delay_default_init()
   return this.Delay__ctx_type_10_init();
end

function this.Delay_default(_ctx)
   _ctx.volume = 1.000000;
   _ctx.pitch = 45.000000;
   _ctx.detune = 0.800000;
   _ctx.lfo_rate = 0.070000;
   _ctx.lfo_amt = (-0.800000);
   _ctx.time = 0.500000;
   _ctx.feedback = 0.500000;

end


function this.process(ctx,in0) return this.Delay_process(ctx,in0) end
function this.noteOn(ctx,in0,in1,in2) return this.Delay_noteOn(ctx,in0,in1,in2) end
function this.noteOff(ctx,in0,in1) return this.Delay_noteOff(ctx,in0,in1) end
function this.controlChange(ctx,in0,in1,in2) return this.Delay_controlChange(ctx,in0,in1,in2) end
function this.init() return this.Delay_process_init() end
function this.default(ctx) return this.Delay_default(ctx) end
this.config = { inputs = 2, outputs = 1, noteon_inputs = 4, noteoff_inputs = 3, controlchange_inputs = 4, is_active = true }
return this
