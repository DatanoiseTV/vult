
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#include "voice_4.h"

void Util__ctx_type_0_init(Util__ctx_type_0 &_output_){
   Util__ctx_type_0 _ctx;
   _ctx.pre = 0;
   _output_ = _ctx;
   return ;
}

void Util_edge_init(Util__ctx_type_0 &_output_){
   Util__ctx_type_0_init(_output_);
   return ;
}

uint8_t Util_edge(Util__ctx_type_0 &_ctx, uint8_t x){
   uint8_t ret;
   ret = (x && bool_not(_ctx.pre));
   _ctx.pre = x;
   return ret;
}

void Util__ctx_type_1_init(Util__ctx_type_1 &_output_){
   Util__ctx_type_1 _ctx;
   _ctx.pre_x = 0x0 /* 0.000000 */;
   _output_ = _ctx;
   return ;
}

void Util_change_init(Util__ctx_type_1 &_output_){
   Util__ctx_type_1_init(_output_);
   return ;
}

uint8_t Util_change(Util__ctx_type_1 &_ctx, fix16_t x){
   uint8_t v;
   v = (_ctx.pre_x != x);
   _ctx.pre_x = x;
   return v;
}

fix16_t Util_map(fix16_t x, fix16_t x0, fix16_t x1, fix16_t y0, fix16_t y1){
   return fix_add(fix_div(fix_mul(fix_add(x,(- x0)),fix_add(y1,(- y0))),fix_add(x1,(- x0))),y0);
}

void Util__ctx_type_3_init(Util__ctx_type_3 &_output_){
   Util__ctx_type_3 _ctx;
   _ctx.y1 = 0x0 /* 0.000000 */;
   _ctx.x1 = 0x0 /* 0.000000 */;
   _output_ = _ctx;
   return ;
}

void Util_dcblock_init(Util__ctx_type_3 &_output_){
   Util__ctx_type_3_init(_output_);
   return ;
}

fix16_t Util_dcblock(Util__ctx_type_3 &_ctx, fix16_t x0){
   fix16_t y0;
   y0 = fix_add(fix_add(x0,(- _ctx.x1)),fix_mul(_ctx.y1,0xfeb8 /* 0.995000 */));
   _ctx.x1 = x0;
   _ctx.y1 = y0;
   return y0;
}

void Util__ctx_type_4_init(Util__ctx_type_4 &_output_){
   Util__ctx_type_4 _ctx;
   _ctx.x = 0x0 /* 0.000000 */;
   _output_ = _ctx;
   return ;
}

void Util_smooth_init(Util__ctx_type_4 &_output_){
   Util__ctx_type_4_init(_output_);
   return ;
}

fix16_t Util_smooth(Util__ctx_type_4 &_ctx, fix16_t input){
   _ctx.x = fix_add(_ctx.x,fix_mul(fix_add(input,(- _ctx.x)),0x147 /* 0.005000 */));
   return _ctx.x;
}

void Util__ctx_type_5_init(Util__ctx_type_5 &_output_){
   Util__ctx_type_5 _ctx;
   _ctx.x0 = 0x0 /* 0.000000 */;
   _output_ = _ctx;
   return ;
}

void Util_average2_init(Util__ctx_type_5 &_output_){
   Util__ctx_type_5_init(_output_);
   return ;
}

fix16_t Util_average2(Util__ctx_type_5 &_ctx, fix16_t x1){
   fix16_t result;
   result = fix_mul(fix_add(_ctx.x0,x1),0x8000 /* 0.500000 */);
   _ctx.x0 = x1;
   return result;
}

fix16_t Util_cubic_clipper(fix16_t x){
   uint8_t _cond_21;
   _cond_21 = (x <= (-0xaaaa /* -0.666667 */));
   if(_cond_21){
      return (-0xaaaa /* -0.666667 */);
   }
   else
   {
      uint8_t _cond_20;
      _cond_20 = (x >= 0xaaaa /* 0.666667 */);
      if(_cond_20){
         return 0xaaaa /* 0.666667 */;
      }
      else
      {
         return fix_add(x,fix_mul(fix_mul(fix_mul((-0x5555 /* -0.333333 */),x),x),x));
      }
   }
}

fix16_t Util_pitchToRate_1024(fix16_t pitch){
   int index;
   index = int_clip(fix_to_int(fix_mul(0x3e7c /* 0.244094 */,pitch)),0,31);
   return fix_add(fix_get(fix_wrap_array(Util_pitchToRate_1024_c0),index),fix_mul(pitch,fix_add(fix_get(fix_wrap_array(Util_pitchToRate_1024_c1),index),fix_mul(fix_get(fix_wrap_array(Util_pitchToRate_1024_c2),index),pitch))));
}

fix16_t Util_pitchToRate(fix16_t pitch){
   int index;
   index = int_clip(fix_to_int(fix_mul(0x3e7c /* 0.244094 */,pitch)),0,31);
   return fix_add(fix_get(fix_wrap_array(Util_pitchToRate_c0),index),fix_mul(pitch,fix_add(fix_get(fix_wrap_array(Util_pitchToRate_c1),index),fix_mul(fix_get(fix_wrap_array(Util_pitchToRate_c2),index),pitch))));
}

fix16_t Util_cvToPitch(fix16_t cv){
   return fix_add(fix_mul(cv,0x780000 /* 120.000000 */),0x180000 /* 24.000000 */);
}

fix16_t Util_cvToRate_1024(fix16_t cv){
   int index;
   index = int_clip(fix_to_int(fix_mul(0x2271c7 /* 34.444444 */,cv)),0,31);
   return fix_add(fix_get(fix_wrap_array(Util_cvToRate_1024_c0),index),fix_mul(cv,fix_add(fix_get(fix_wrap_array(Util_cvToRate_1024_c1),index),fix_mul(fix_get(fix_wrap_array(Util_cvToRate_1024_c2),index),cv))));
}

fix16_t Util_cvToRate(fix16_t cv){
   int index;
   index = int_clip(fix_to_int(fix_mul(0x2271c7 /* 34.444444 */,cv)),0,31);
   return fix_add(fix_get(fix_wrap_array(Util_cvToRate_c0),index),fix_mul(cv,fix_add(fix_get(fix_wrap_array(Util_cvToRate_c1),index),fix_mul(fix_get(fix_wrap_array(Util_cvToRate_c2),index),cv))));
}

fix16_t Util_pitchToCv(fix16_t pitch){
   return fix_mul(0x222 /* 0.008333 */,fix_add((-0x180000 /* -24.000000 */),pitch));
}

fix16_t Util_cvToperiod(fix16_t cv){
   int index;
   index = int_clip(fix_to_int(fix_mul(0x1f0000 /* 31.000000 */,cv)),0,31);
   return fix_add(fix_get(fix_wrap_array(Util_cvToperiod_c0),index),fix_mul(cv,fix_add(fix_get(fix_wrap_array(Util_cvToperiod_c1),index),fix_mul(fix_get(fix_wrap_array(Util_cvToperiod_c2),index),cv))));
}

fix16_t Util_cvTokHz(fix16_t cv){
   int index;
   index = int_clip(fix_to_int(fix_mul(0x1f0000 /* 31.000000 */,cv)),0,31);
   return fix_add(fix_get(fix_wrap_array(Util_cvTokHz_c0),index),fix_mul(cv,fix_add(fix_get(fix_wrap_array(Util_cvTokHz_c1),index),fix_mul(fix_get(fix_wrap_array(Util_cvTokHz_c2),index),cv))));
}

void Tricore__ctx_type_0_init(Tricore__ctx_type_0 &_output_){
   Tricore__ctx_type_0 _ctx;
   _ctx.reset_state = 0;
   _ctx.reset_phase = 0x0 /* 0.000000 */;
   _ctx.rate = 0x0 /* 0.000000 */;
   _ctx.phase = 0x0 /* 0.000000 */;
   _ctx.direction = 0;
   Util__ctx_type_0_init(_ctx._inst26);
   Util__ctx_type_0_init(_ctx._inst25);
   Util__ctx_type_1_init(_ctx._inst23);
   Tricore_default(_ctx);
   _output_ = _ctx;
   return ;
}

void Tricore_process_init(Tricore__ctx_type_0 &_output_){
   Tricore__ctx_type_0_init(_output_);
   return ;
}

fix16_t Tricore_process(Tricore__ctx_type_0 &_ctx, fix16_t cv, fix16_t reset, fix16_t disable){
   fix16_t out;
   out = 0x0 /* 0.000000 */;
   uint8_t _cond_38;
   _cond_38 = Util_change(_ctx._inst23,cv);
   if(_cond_38){
      _ctx.rate = fix_mul(0x40000 /* 4.000000 */,Util_cvToRate_1024(cv));
   }
   fix16_t new_phase;
   fix16_t _if_39;
   if(_ctx.direction){ _if_39 = _ctx.rate; }
   else
   { _if_39 = (- _ctx.rate); }
   new_phase = fix_add(_ctx.phase,_if_39);
   uint8_t bdisable;
   bdisable = (disable > 0x8000 /* 0.500000 */);
   uint8_t _cond_40;
   _cond_40 = (Util_edge(_ctx._inst25,(reset > 0x0 /* 0.000000 */)) || Util_edge(_ctx._inst26,bdisable));
   if(_cond_40){
      _ctx.reset_phase = _ctx.phase;
      _ctx.reset_state = 1;
      new_phase = 0x0 /* 0.000000 */;
   }
   uint8_t _cond_42;
   _cond_42 = (new_phase > 0x4000000 /* 1024.000000 */);
   if(_cond_42){
      new_phase = fix_add(0x4000000 /* 1024.000000 */,(- fix_add(new_phase,(-0x4000000 /* -1024.000000 */))));
      _ctx.direction = 0;
   }
   else
   {
      uint8_t _cond_41;
      _cond_41 = (new_phase < (-0x4000000 /* -1024.000000 */));
      if(_cond_41){
         _ctx.direction = 1;
      }
   }
   if(bdisable){ _ctx.phase = 0x0 /* 0.000000 */; }
   else
   { _ctx.phase = new_phase; }
   if(_ctx.reset_state){
      uint8_t _cond_44;
      _cond_44 = ((fix_abs(_ctx.reset_phase) > 0xa0000 /* 10.000000 */) || bdisable);
      if(_cond_44){
         fix16_t reset_speed;
         if(bdisable){ reset_speed = 0x28f /* 0.010000 */; }
         else
         { reset_speed = 0x8000 /* 0.500000 */; }
         _ctx.reset_phase = fix_add(_ctx.reset_phase,(- fix_mul(_ctx.reset_phase,reset_speed)));
      }
      else
      {
         uint8_t _cond_43;
         _cond_43 = (_ctx.reset_phase > 0xa0000 /* 10.000000 */);
         if(bool_not(_cond_43)){ _ctx.reset_phase = 0x0 /* 0.000000 */; }
         _ctx.reset_state = 0;
         _ctx.direction = 1;
      }
      out = _ctx.reset_phase;
   }
   out = fix_add(out,_ctx.phase);
   return fix_mul(out,0x40 /* 0.000977 */);
}

void Tricore_noteOn_init(Tricore__ctx_type_0 &_output_){
   Tricore__ctx_type_0_init(_output_);
   return ;
}

void Tricore_noteOn(Tricore__ctx_type_0 &_ctx, int note, int velocity, int channel){
}

void Tricore_noteOff_init(Tricore__ctx_type_0 &_output_){
   Tricore__ctx_type_0_init(_output_);
   return ;
}

void Tricore_noteOff(Tricore__ctx_type_0 &_ctx, int note, int channel){
}

void Tricore_controlChange_init(Tricore__ctx_type_0 &_output_){
   Tricore__ctx_type_0_init(_output_);
   return ;
}

void Tricore_controlChange(Tricore__ctx_type_0 &_ctx, int control, int value, int channel){
}

void Tricore_default_init(Tricore__ctx_type_0 &_output_){
   Tricore__ctx_type_0_init(_output_);
   return ;
}

void Tricore_default(Tricore__ctx_type_0 &_ctx){
   _ctx.rate = 0xc265 /* 0.759367 */;
}

fix16_t Saturate_soft_table(fix16_t x){
   int index;
   index = int_clip(fix_to_int(fix_mul(0x18000 /* 1.500000 */,x)),0,9);
   return fix_add(fix_get(fix_wrap_array(Saturate_soft_table_c0),index),fix_mul(x,fix_add(fix_get(fix_wrap_array(Saturate_soft_table_c1),index),fix_mul(fix_get(fix_wrap_array(Saturate_soft_table_c2),index),x))));
}

fix16_t Saturate_soft_process(fix16_t x){
   uint8_t _cond_54;
   _cond_54 = (x == 0x0 /* 0.000000 */);
   if(_cond_54){
      return 0x0 /* 0.000000 */;
   }
   fix16_t fixed;
   uint8_t sign;
   uint8_t _cond_56;
   _cond_56 = (x > 0x0 /* 0.000000 */);
   if(_cond_56){
      fixed = x;
      sign = 0;
   }
   else
   {
      fixed = (- x);
      sign = 1;
   }
   fix16_t out;
   out = 0x0 /* 0.000000 */;
   uint8_t _cond_55;
   _cond_55 = (fixed > 0x60000 /* 6.000000 */);
   if(_cond_55){
      out = 0x10000 /* 1.000000 */;
   }
   else
   {
      out = Saturate_soft_table(fixed);
   }
   if(sign){ out = (- out); }
   return out;
}

void Saturate_soft_noteOn(int note, int velocity, int channel){
}

void Saturate_soft_noteOff(int note, int channel){
}

void Saturate_soft_controlChange(int control, int value, int channel){
}

void Saturate_soft_default(){
}

fix16_t Svf_calc_g(fix16_t cv){
   int index;
   index = int_clip(fix_to_int(fix_mul(0x8d1c71 /* 141.111111 */,cv)),0,127);
   return fix_add(fix_get(fix_wrap_array(Svf_calc_g_c0),index),fix_mul(cv,fix_add(fix_get(fix_wrap_array(Svf_calc_g_c1),index),fix_mul(fix_get(fix_wrap_array(Svf_calc_g_c2),index),cv))));
}

void Svf__ctx_type_1_init(Svf__ctx_type_1 &_output_){
   Svf__ctx_type_1 _ctx;
   _ctx.z2 = 0x0 /* 0.000000 */;
   _ctx.z1 = 0x0 /* 0.000000 */;
   _ctx.inv_den = 0x0 /* 0.000000 */;
   _ctx.g = 0x0 /* 0.000000 */;
   Util__ctx_type_1_init(_ctx._inst62);
   Util__ctx_type_1_init(_ctx._inst61);
   _ctx.R = 0x0 /* 0.000000 */;
   Svf_default(_ctx);
   _output_ = _ctx;
   return ;
}

void Svf_process_init(Svf__ctx_type_1 &_output_){
   Svf__ctx_type_1_init(_output_);
   return ;
}

fix16_t Svf_process(Svf__ctx_type_1 &_ctx, fix16_t x, fix16_t cv, fix16_t q, int sel){
   q = fix_add(q,0x8000 /* 0.500000 */);
   uint8_t _cond_68;
   _cond_68 = (Util_change(_ctx._inst61,cv) || Util_change(_ctx._inst62,q));
   if(_cond_68){
      _ctx.g = Svf_calc_g(cv);
      _ctx.R = fix_div(0x10000 /* 1.000000 */,fix_mul(0x20000 /* 2.000000 */,fix_add(q,0x0 /* 0.000000 */)));
      _ctx.inv_den = fix_div(0x10000 /* 1.000000 */,fix_add(fix_add(0x10000 /* 1.000000 */,fix_mul(fix_mul(0x20000 /* 2.000000 */,_ctx.R),_ctx.g)),fix_mul(_ctx.g,_ctx.g)));
   }
   fix16_t high;
   high = fix_mul(fix_add(fix_add(x,(- fix_mul(fix_add(fix_mul(0x20000 /* 2.000000 */,_ctx.R),_ctx.g),_ctx.z1))),(- _ctx.z2)),_ctx.inv_den);
   fix16_t band;
   band = fix_add(fix_mul(_ctx.g,high),_ctx.z1);
   fix16_t low;
   low = fix_add(fix_mul(_ctx.g,band),_ctx.z2);
   fix16_t notch;
   notch = fix_add(low,high);
   _ctx.z1 = fix_add(fix_mul(_ctx.g,high),band);
   _ctx.z2 = fix_add(fix_mul(_ctx.g,band),low);
   fix16_t output;
   uint8_t _cond_69;
   _cond_69 = (sel == 0);
   if(_cond_69){ output = low; }
   else
   {
      uint8_t _cond_70;
      _cond_70 = (sel == 1);
      if(_cond_70){ output = high; }
      else
      {
         uint8_t _cond_71;
         _cond_71 = (sel == 2);
         if(_cond_71){ output = band; }
         else
         { output = notch; }
      }
   }
   return Saturate_soft_process(output);
}

void Svf_noteOn_init(Svf__ctx_type_1 &_output_){
   Svf__ctx_type_1_init(_output_);
   return ;
}

void Svf_noteOn(Svf__ctx_type_1 &_ctx, int note, int velocity, int channel){
}

void Svf_noteOff_init(Svf__ctx_type_1 &_output_){
   Svf__ctx_type_1_init(_output_);
   return ;
}

void Svf_noteOff(Svf__ctx_type_1 &_ctx, int note, int channel){
}

void Svf_controlChange_init(Svf__ctx_type_1 &_output_){
   Svf__ctx_type_1_init(_output_);
   return ;
}

void Svf_controlChange(Svf__ctx_type_1 &_ctx, int control, int value, int channel){
}

void Svf_default_init(Svf__ctx_type_1 &_output_){
   Svf__ctx_type_1_init(_output_);
   return ;
}

void Svf_default(Svf__ctx_type_1 &_ctx){
   _ctx.g = 0x98 /* 0.002330 */;
   _ctx.R = 0x10000 /* 1.000000 */;
   _ctx.inv_den = fix_div(0x10000 /* 1.000000 */,fix_add(0x10000 /* 1.000000 */,fix_mul(_ctx.g,_ctx.g)));
}

fix16_t Saturate_table(fix16_t x){
   int index;
   index = int_clip(fix_to_int(fix_add(x,0xc0000 /* 12.000000 */)),0,24);
   return fix_add(fix_get(fix_wrap_array(Saturate_table_c0),index),fix_mul(x,fix_add(fix_get(fix_wrap_array(Saturate_table_c1),index),fix_mul(fix_get(fix_wrap_array(Saturate_table_c2),index),x))));
}

fix16_t Saturate_process(fix16_t x){
   return Saturate_table(x);
}

void Saturate_noteOn(int note, int velocity, int channel){
}

void Saturate_noteOff(int note, int channel){
}

void Saturate_controlChange(int control, int value, int channel){
}

void Saturate_default(){
}

void Lfo__ctx_type_0_init(Lfo__ctx_type_0 &_output_){
   Lfo__ctx_type_0 _ctx;
   _ctx.x4 = 0x0 /* 0.000000 */;
   _ctx.x3 = 0x0 /* 0.000000 */;
   _ctx.x2 = 0x0 /* 0.000000 */;
   _output_ = _ctx;
   return ;
}

void Lfo_soft_init(Lfo__ctx_type_0 &_output_){
   Lfo__ctx_type_0_init(_output_);
   return ;
}

fix16_t Lfo_soft(Lfo__ctx_type_0 &_ctx, fix16_t x1){
   fix16_t o;
   o = fix_mul(fix_add(fix_add(fix_add(x1,_ctx.x2),_ctx.x3),_ctx.x4),0x4000 /* 0.250000 */);
   fix16_t _tmp_89_0;
   _tmp_89_0 = x1;
   fix16_t _tmp_89_1;
   _tmp_89_1 = _ctx.x2;
   fix16_t _tmp_89_2;
   _tmp_89_2 = _ctx.x3;
   _ctx.x2 = _tmp_89_0;
   _ctx.x3 = _tmp_89_1;
   _ctx.x4 = _tmp_89_2;
   return o;
}

void Lfo__ctx_type_1_init(Lfo__ctx_type_1 &_output_){
   Lfo__ctx_type_1 _ctx;
   _ctx.rate = 0x0 /* 0.000000 */;
   _ctx.phase = 0x0 /* 0.000000 */;
   Lfo__ctx_type_0_init(_ctx._inst84);
   Util__ctx_type_0_init(_ctx._inst82);
   Util__ctx_type_1_init(_ctx._inst80);
   _output_ = _ctx;
   return ;
}

void Lfo_process_init(Lfo__ctx_type_1 &_output_){
   Lfo__ctx_type_1_init(_output_);
   return ;
}

fix16_t Lfo_process(Lfo__ctx_type_1 &_ctx, fix16_t cv, fix16_t shape, fix16_t reset){
   uint8_t _cond_90;
   _cond_90 = Util_change(_ctx._inst80,cv);
   if(_cond_90){
      _ctx.rate = Util_cvToRate(fix_add(cv,(-0x4ccc /* -0.300000 */)));
   }
   _ctx.phase = (fix_add(_ctx.phase,_ctx.rate) % 0x20000 /* 2.000000 */);
   uint8_t breset;
   breset = (reset > 0x0 /* 0.000000 */);
   uint8_t _cond_91;
   _cond_91 = Util_edge(_ctx._inst82,breset);
   if(_cond_91){
      _ctx.phase = 0x0 /* 0.000000 */;
   }
   fix16_t tmp;
   tmp = fix_add(_ctx.phase,(-0x10000 /* -1.000000 */));
   fix16_t o;
   uint8_t _cond_92;
   _cond_92 = (shape < 0x10000 /* 1.000000 */);
   if(_cond_92){ o = tmp; }
   else
   {
      uint8_t _cond_93;
      _cond_93 = (shape < 0x20000 /* 2.000000 */);
      if(_cond_93){ o = fix_add(fix_mul(fix_abs(tmp),0x20000 /* 2.000000 */),(-0x10000 /* -1.000000 */)); }
      else
      {
         uint8_t _cond_94;
         _cond_94 = (tmp > 0x0 /* 0.000000 */);
         if(_cond_94){ o = 0x10000 /* 1.000000 */; }
         else
         { o = 0x0 /* 0.000000 */; }
      }
   }
   return Lfo_soft(_ctx._inst84,o);
}

void Lfo_noteOn_init(Lfo__ctx_type_1 &_output_){
   Lfo__ctx_type_1_init(_output_);
   return ;
}

void Lfo_noteOn(Lfo__ctx_type_1 &_ctx, int note, int velocity, int channel){
}

void Lfo_noteOff_init(Lfo__ctx_type_1 &_output_){
   Lfo__ctx_type_1_init(_output_);
   return ;
}

void Lfo_noteOff(Lfo__ctx_type_1 &_ctx, int note, int channel){
}

void Lfo_controlChange_init(Lfo__ctx_type_1 &_output_){
   Lfo__ctx_type_1_init(_output_);
   return ;
}

void Lfo_controlChange(Lfo__ctx_type_1 &_ctx, int control, int value, int channel){
}

void Lfo_default_init(Lfo__ctx_type_1 &_output_){
   Lfo__ctx_type_1_init(_output_);
   return ;
}

void Lfo_default(Lfo__ctx_type_1 &_ctx){
}

fix16_t Tables_nsine(fix16_t x){
   int index;
   index = int_clip(fix_to_int(fix_mul(0x7f0000 /* 127.000000 */,x)),0,127);
   return fix_add(fix_get(fix_wrap_array(Tables_nsine_c0),index),fix_mul(x,fix_add(fix_get(fix_wrap_array(Tables_nsine_c1),index),fix_mul(fix_get(fix_wrap_array(Tables_nsine_c2),index),x))));
}

void Phase__ctx_type_0_init(Phase__ctx_type_0 &_output_){
   Phase__ctx_type_0 _ctx;
   _ctx.rate = 0x0 /* 0.000000 */;
   _ctx.phase = 0x0 /* 0.000000 */;
   Util__ctx_type_0_init(_ctx._inst99);
   Util__ctx_type_1_init(_ctx._inst97);
   Phase_default(_ctx);
   _output_ = _ctx;
   return ;
}

void Phase_process_init(Phase__ctx_type_0 &_output_){
   Phase__ctx_type_0_init(_output_);
   return ;
}

fix16_t Phase_process(Phase__ctx_type_0 &_ctx, fix16_t cv, fix16_t reset){
   uint8_t _cond_104;
   _cond_104 = Util_change(_ctx._inst97,cv);
   if(_cond_104){
      _ctx.rate = Util_cvToRate_1024(cv);
   }
   uint8_t _cond_105;
   _cond_105 = Util_edge(_ctx._inst99,(reset > 0x8000 /* 0.500000 */));
   if(_cond_105){ _ctx.phase = 0x0 /* 0.000000 */; }
   else
   { _ctx.phase = fix_add(_ctx.phase,_ctx.rate); }
   uint8_t _cond_106;
   _cond_106 = (_ctx.phase > 0x4000000 /* 1024.000000 */);
   if(_cond_106){ _ctx.phase = fix_add(_ctx.phase,(-0x4000000 /* -1024.000000 */)); }
   return fix_mul(_ctx.phase,0x40 /* 0.000977 */);
}

void Phase_noteOn_init(Phase__ctx_type_0 &_output_){
   Phase__ctx_type_0_init(_output_);
   return ;
}

void Phase_noteOn(Phase__ctx_type_0 &_ctx, int note, int velocity, int channel){
}

void Phase_noteOff_init(Phase__ctx_type_0 &_output_){
   Phase__ctx_type_0_init(_output_);
   return ;
}

void Phase_noteOff(Phase__ctx_type_0 &_ctx, int note, int channel){
}

void Phase_controlChange_init(Phase__ctx_type_0 &_output_){
   Phase__ctx_type_0_init(_output_);
   return ;
}

void Phase_controlChange(Phase__ctx_type_0 &_ctx, int control, int value, int channel){
}

void Phase_default_init(Phase__ctx_type_0 &_output_){
   Phase__ctx_type_0_init(_output_);
   return ;
}

void Phase_default(Phase__ctx_type_0 &_ctx){
   _ctx.rate = 0xc265 /* 0.759367 */;
}

void Blit__ctx_type_0_init(Blit__ctx_type_0 &_output_){
   Blit__ctx_type_0 _ctx;
   _ctx.scale = 0x0 /* 0.000000 */;
   _ctx.m = 0;
   Util__ctx_type_1_init(_ctx._inst108);
   Blit_pulse_start(_ctx);
   _output_ = _ctx;
   return ;
}

void Blit_pulse_train_init(Blit__ctx_type_0 &_output_){
   Blit__ctx_type_0_init(_output_);
   return ;
}

fix16_t Blit_pulse_train(Blit__ctx_type_0 &_ctx, fix16_t cv, fix16_t phase){
   uint8_t _cond_132;
   _cond_132 = Util_change(_ctx._inst108,cv);
   if(_cond_132){
      _ctx.m = ((2 * fix_to_int(Util_cvToperiod(cv))) + 1);
      _ctx.scale = fix_mul(0x20000 /* 2.000000 */,Util_cvToperiod(cv));
   }
   fix16_t pi_phase;
   pi_phase = fix_mul(phase,0x8000 /* 0.500000 */);
   fix16_t denominator;
   denominator = Tables_nsine(pi_phase);
   fix16_t out;
   out = 0x0 /* 0.000000 */;
   uint8_t _cond_133;
   _cond_133 = (denominator <= 0x0 /* 0.000000 */);
   if(_cond_133){
      out = 0x10000 /* 1.000000 */;
   }
   else
   {
      fix16_t m_phase;
      m_phase = (fix_mul(int_to_fix(_ctx.m),pi_phase) % 0x10000 /* 1.000000 */);
      fix16_t numerator;
      numerator = Tables_nsine(m_phase);
      out = fix_div(numerator,fix_mul(_ctx.scale,denominator));
   }
   return out;
}

void Blit_pulse_start_init(Blit__ctx_type_0 &_output_){
   Blit__ctx_type_0_init(_output_);
   return ;
}

void Blit_pulse_start(Blit__ctx_type_0 &_ctx){
   _ctx.m = 1349;
   _ctx.scale = 0x5457df8 /* 1349.492070 */;
}

void Blit__ctx_type_1_init(Blit__ctx_type_1 &_output_){
   Blit__ctx_type_1 _ctx;
   _ctx.state_saw = 0x0 /* 0.000000 */;
   _ctx.state_pulse = 0x0 /* 0.000000 */;
   _ctx.rate = 0x0 /* 0.000000 */;
   _ctx.output = 0x0 /* 0.000000 */;
   Util__ctx_type_3_init(_ctx._inst124);
   Blit__ctx_type_0_init(_ctx._inst121);
   Blit__ctx_type_0_init(_ctx._inst120);
   Phase__ctx_type_0_init(_ctx._inst118);
   Util__ctx_type_1_init(_ctx._inst116);
   Blit_init(_ctx);
   _output_ = _ctx;
   return ;
}

void Blit_osc_blit_init(Blit__ctx_type_1 &_output_){
   Blit__ctx_type_1_init(_output_);
   return ;
}

fix16_t Blit_osc_blit(Blit__ctx_type_1 &_ctx, fix16_t cv, fix16_t pw, fix16_t wave){
   fix16_t fixed_cv;
   fixed_cv = 0x0 /* 0.000000 */;
   uint8_t _cond_134;
   _cond_134 = (wave < 0x10000 /* 1.000000 */);
   if(_cond_134){
      fixed_cv = cv;
   }
   else
   {
      fixed_cv = fix_add(cv,(-0x1999 /* -0.100000 */));
   }
   uint8_t _cond_135;
   _cond_135 = Util_change(_ctx._inst116,fixed_cv);
   if(_cond_135){
      _ctx.rate = Util_cvToRate(fixed_cv);
   }
   fix16_t phase;
   phase = Phase_process(_ctx._inst118,fixed_cv,0x0 /* 0.000000 */);
   fix16_t shift05;
   shift05 = fix_add(0x8000 /* 0.500000 */,fix_mul(pw,0x7d70 /* 0.490000 */));
   fix16_t shift;
   shift = fix_add(phase,shift05);
   uint8_t _cond_136;
   _cond_136 = (shift > 0x10000 /* 1.000000 */);
   if(_cond_136){
      shift = fix_add(shift,(-0x10000 /* -1.000000 */));
   }
   fix16_t pulse1;
   pulse1 = Blit_pulse_train(_ctx._inst120,fixed_cv,phase);
   fix16_t pulse2;
   pulse2 = Blit_pulse_train(_ctx._inst121,fixed_cv,shift);
   _ctx.state_pulse = fix_add(fix_add(fix_mul(_ctx.state_pulse,0xffdf /* 0.999500 */),pulse1),(- pulse2));
   _ctx.state_saw = fix_add(fix_mul(_ctx.state_saw,0xffdf /* 0.999500 */),fix_mul(fix_div(fix_add(fix_add(pulse1,pulse2),fix_mul((-0x20000 /* -2.000000 */),_ctx.rate)),shift05),0x8000 /* 0.500000 */));
   uint8_t _cond_137;
   _cond_137 = (wave < 0x10000 /* 1.000000 */);
   if(_cond_137){
      _ctx.output = _ctx.state_pulse;
   }
   else
   {
      _ctx.output = fix_mul(0x20000 /* 2.000000 */,_ctx.state_saw);
   }
   _ctx.output = Util_dcblock(_ctx._inst124,_ctx.output);
   return _ctx.output;
}

void Blit_init_init(Blit__ctx_type_1 &_output_){
   Blit__ctx_type_1_init(_output_);
   return ;
}

void Blit_init(Blit__ctx_type_1 &_ctx){
   _ctx.rate = 0x30 /* 0.000742 */;
}

void Blit__ctx_type_2_init(Blit__ctx_type_2 &_output_){
   Blit__ctx_type_2 _ctx;
   Blit__ctx_type_1_init(_ctx._inst127);
   _output_ = _ctx;
   return ;
}

void Blit_process_init(Blit__ctx_type_2 &_output_){
   Blit__ctx_type_2_init(_output_);
   return ;
}

fix16_t Blit_process(Blit__ctx_type_2 &_ctx, fix16_t cv, fix16_t pw, fix16_t wave){
   return Blit_osc_blit(_ctx._inst127,cv,pw,wave);
}

void Blit_noteOn_init(Blit__ctx_type_2 &_output_){
   Blit__ctx_type_2_init(_output_);
   return ;
}

void Blit_noteOn(Blit__ctx_type_2 &_ctx, int note, int velocity, int channel){
}

void Blit_noteOff_init(Blit__ctx_type_2 &_output_){
   Blit__ctx_type_2_init(_output_);
   return ;
}

void Blit_noteOff(Blit__ctx_type_2 &_ctx, int note, int channel){
}

void Blit_controlChange_init(Blit__ctx_type_2 &_output_){
   Blit__ctx_type_2_init(_output_);
   return ;
}

void Blit_controlChange(Blit__ctx_type_2 &_ctx, int control, int value, int channel){
}

void Blit_default_init(Blit__ctx_type_2 &_output_){
   Blit__ctx_type_2_init(_output_);
   return ;
}

void Blit_default(Blit__ctx_type_2 &_ctx){
}

void Adsr__ctx_type_0_init(Adsr__ctx_type_0 &_output_){
   Adsr__ctx_type_0 _ctx;
   _ctx.target = 0x0 /* 0.000000 */;
   _ctx.state = 0;
   _ctx.scale = 0x0 /* 0.000000 */;
   _ctx.rate = 0x0 /* 0.000000 */;
   _ctx.out = 0x0 /* 0.000000 */;
   Util__ctx_type_4_init(_ctx._inst147);
   Util__ctx_type_0_init(_ctx._inst140);
   _output_ = _ctx;
   return ;
}

void Adsr_do_init(Adsr__ctx_type_0 &_output_){
   Adsr__ctx_type_0_init(_output_);
   return ;
}

fix16_t Adsr_do(Adsr__ctx_type_0 &_ctx, fix16_t gate, fix16_t a, fix16_t d, fix16_t s, fix16_t r){
   fix16_t a_rate;
   a_rate = fix_div(0x10000 /* 1.000000 */,fix_add(fix_mul(0x640000 /* 100.000000 */,a),0x28f /* 0.010000 */));
   fix16_t d_rate;
   d_rate = fix_div(0x10000 /* 1.000000 */,fix_add(fix_mul(0x640000 /* 100.000000 */,d),0x28f /* 0.010000 */));
   fix16_t r_rate;
   r_rate = fix_div(0x10000 /* 1.000000 */,fix_add(fix_mul(0x640000 /* 100.000000 */,r),0x28f /* 0.010000 */));
   _ctx.out = fix_add(_ctx.out,fix_mul(fix_mul(fix_add(_ctx.target,(- _ctx.out)),_ctx.rate),0x106 /* 0.004000 */));
   uint8_t bgate;
   bgate = (gate > 0x0 /* 0.000000 */);
   uint8_t _cond_159;
   _cond_159 = (_ctx.state == 0);
   if(_cond_159){
      uint8_t _cond_158;
      _cond_158 = Util_edge(_ctx._inst140,bgate);
      if(_cond_158){
         _ctx.state = 1;
         _ctx.scale = fix_mul(gate,0x3333 /* 0.200000 */);
      }
      _ctx.rate = r_rate;
      _ctx.target = 0x0 /* 0.000000 */;
   }
   uint8_t _cond_162;
   _cond_162 = (_ctx.state == 1);
   if(_cond_162){
      uint8_t _cond_160;
      _cond_160 = bool_not(bgate);
      if(_cond_160){
         _ctx.state = 0;
      }
      uint8_t _cond_161;
      _cond_161 = (_ctx.out > 0x4000000 /* 1024.000000 */);
      if(_cond_161){
         _ctx.state = 2;
      }
      _ctx.rate = a_rate;
      _ctx.target = 0x4cccccc /* 1228.800000 */;
   }
   uint8_t _cond_164;
   _cond_164 = (_ctx.state == 2);
   if(_cond_164){
      uint8_t _cond_163;
      _cond_163 = bool_not(bgate);
      if(_cond_163){
         _ctx.state = 0;
      }
      _ctx.rate = d_rate;
      _ctx.target = fix_mul(s,0x4000000 /* 1024.000000 */);
   }
   return fix_mul(Util_smooth(_ctx._inst147,_ctx.scale),fix_clip(fix_mul(_ctx.out,0x40 /* 0.000977 */),0x0 /* 0.000000 */,0x10000 /* 1.000000 */));
}

void Adsr__ctx_type_1_init(Adsr__ctx_type_1 &_output_){
   Adsr__ctx_type_1 _ctx;
   _ctx.knob4 = 0x0 /* 0.000000 */;
   _ctx.knob3 = 0x0 /* 0.000000 */;
   _ctx.knob2 = 0x0 /* 0.000000 */;
   _ctx.knob1 = 0x0 /* 0.000000 */;
   Adsr__ctx_type_0_init(_ctx._inst149);
   _output_ = _ctx;
   return ;
}

void Adsr_process_init(Adsr__ctx_type_1 &_output_){
   Adsr__ctx_type_1_init(_output_);
   return ;
}

fix16_t Adsr_process(Adsr__ctx_type_1 &_ctx, fix16_t gate){
   return Adsr_do(_ctx._inst149,gate,_ctx.knob1,_ctx.knob2,_ctx.knob3,_ctx.knob4);
}

void Adsr_noteOn_init(Adsr__ctx_type_1 &_output_){
   Adsr__ctx_type_1_init(_output_);
   return ;
}

void Adsr_noteOn(Adsr__ctx_type_1 &_ctx, int note, int velocity, int channel){
}

void Adsr_noteOff_init(Adsr__ctx_type_1 &_output_){
   Adsr__ctx_type_1_init(_output_);
   return ;
}

void Adsr_noteOff(Adsr__ctx_type_1 &_ctx, int note, int channel){
}

void Adsr_controlChange_init(Adsr__ctx_type_1 &_output_){
   Adsr__ctx_type_1_init(_output_);
   return ;
}

void Adsr_controlChange(Adsr__ctx_type_1 &_ctx, int control, int value, int channel){
   uint8_t _cond_165;
   _cond_165 = (control == 1);
   if(_cond_165){
      _ctx.knob1 = fix_mul(int_to_fix(value),0x204 /* 0.007874 */);
   }
   uint8_t _cond_166;
   _cond_166 = (control == 2);
   if(_cond_166){
      _ctx.knob2 = fix_mul(int_to_fix(value),0x204 /* 0.007874 */);
   }
   uint8_t _cond_167;
   _cond_167 = (control == 3);
   if(_cond_167){
      _ctx.knob3 = fix_mul(int_to_fix(value),0x204 /* 0.007874 */);
   }
   uint8_t _cond_168;
   _cond_168 = (control == 4);
   if(_cond_168){
      _ctx.knob4 = fix_mul(int_to_fix(value),0x204 /* 0.007874 */);
   }
}

void Adsr_default_init(Adsr__ctx_type_1 &_output_){
   Adsr__ctx_type_1_init(_output_);
   return ;
}

void Adsr_default(Adsr__ctx_type_1 &_ctx){
   _ctx.knob1 = 0x0 /* 0.000000 */;
   _ctx.knob2 = 0x8000 /* 0.500000 */;
   _ctx.knob3 = 0x10000 /* 1.000000 */;
   _ctx.knob4 = 0x8000 /* 0.500000 */;
}

void Voice_4__ctx_type_0_init(Voice_4__ctx_type_0 &_output_){
   Voice_4__ctx_type_0 _ctx;
   _ctx.sustain = 0x0 /* 0.000000 */;
   _ctx.release = 0x0 /* 0.000000 */;
   _ctx.pw4 = 0x0 /* 0.000000 */;
   _ctx.pw3 = 0x0 /* 0.000000 */;
   _ctx.pw2 = 0x0 /* 0.000000 */;
   _ctx.pw1 = 0x0 /* 0.000000 */;
   _ctx.lfo_shape = 0x0 /* 0.000000 */;
   _ctx.lfo_reset = 0x0 /* 0.000000 */;
   _ctx.lfo_rate = 0x0 /* 0.000000 */;
   _ctx.lfo_pw = 0x0 /* 0.000000 */;
   _ctx.lfo_flt = 0x0 /* 0.000000 */;
   _ctx.lfo_cv = 0x0 /* 0.000000 */;
   _ctx.level4 = 0x0 /* 0.000000 */;
   _ctx.level3 = 0x0 /* 0.000000 */;
   _ctx.level2 = 0x0 /* 0.000000 */;
   _ctx.level1 = 0x0 /* 0.000000 */;
   _ctx.flt_shape = 0;
   _ctx.flt_res = 0x0 /* 0.000000 */;
   _ctx.flt_cut = 0x0 /* 0.000000 */;
   _ctx.decay = 0x0 /* 0.000000 */;
   _ctx.attack = 0x0 /* 0.000000 */;
   Adsr__ctx_type_0_init(_ctx._inst176);
   Svf__ctx_type_1_init(_ctx._inst175);
   Tricore__ctx_type_0_init(_ctx._inst174);
   Blit__ctx_type_2_init(_ctx._inst173);
   Blit__ctx_type_2_init(_ctx._inst172);
   Blit__ctx_type_2_init(_ctx._inst171);
   Lfo__ctx_type_1_init(_ctx._inst170);
   _output_ = _ctx;
   return ;
}

void Voice_4_process_init(Voice_4__ctx_type_0 &_output_){
   Voice_4__ctx_type_0_init(_output_);
   return ;
}

fix16_t Voice_4_process(Voice_4__ctx_type_0 &_ctx, fix16_t cv, fix16_t vel, fix16_t gate){
   fix16_t lfo;
   lfo = Lfo_process(_ctx._inst170,_ctx.lfo_rate,_ctx.lfo_shape,fix_mul(gate,_ctx.lfo_reset));
   fix16_t mod_pw;
   mod_pw = fix_mul(_ctx.lfo_pw,lfo);
   fix16_t mod_cv;
   mod_cv = fix_mul(_ctx.lfo_cv,lfo);
   fix16_t mod_flt;
   mod_flt = fix_mul(_ctx.lfo_flt,lfo);
   fix16_t o1;
   o1 = Blit_process(_ctx._inst171,fix_add(fix_add(cv,0x6 /* 0.000100 */),mod_cv),fix_add(_ctx.pw1,mod_pw),0x0 /* 0.000000 */);
   fix16_t o2;
   o2 = Blit_process(_ctx._inst172,fix_add(fix_add(cv,0xd /* 0.000200 */),mod_cv),fix_add(_ctx.pw2,mod_pw),0x10000 /* 1.000000 */);
   fix16_t o3;
   o3 = Blit_process(_ctx._inst173,fix_add(fix_add(cv,_ctx.pw3),mod_cv),fix_add(_ctx.pw1,mod_pw),0x0 /* 0.000000 */);
   fix16_t sub;
   sub = Saturate_process(fix_mul(fix_add(fix_mul(0x50000 /* 5.000000 */,_ctx.pw4),0x20000 /* 2.000000 */),Tricore_process(_ctx._inst174,fix_add(cv,mod_cv),0x0 /* 0.000000 */,0x10000 /* 1.000000 */)));
   fix16_t o;
   o = fix_add(fix_add(fix_add(fix_mul(_ctx.level1,o1),fix_mul(_ctx.level2,o2)),fix_mul(_ctx.level3,o3)),fix_mul(_ctx.level4,sub));
   fix16_t f;
   f = Svf_process(_ctx._inst175,o,fix_add(_ctx.flt_cut,mod_flt),_ctx.flt_res,_ctx.flt_shape);
   fix16_t env;
   env = Adsr_do(_ctx._inst176,gate,_ctx.attack,_ctx.decay,_ctx.sustain,_ctx.release);
   return fix_mul(env,f);
}

void Voice_4_noteOn_init(Voice_4__ctx_type_0 &_output_){
   Voice_4__ctx_type_0_init(_output_);
   return ;
}

void Voice_4_noteOn(Voice_4__ctx_type_0 &_ctx, int note, int velocity, int channel){
}

void Voice_4_noteOff_init(Voice_4__ctx_type_0 &_output_){
   Voice_4__ctx_type_0_init(_output_);
   return ;
}

void Voice_4_noteOff(Voice_4__ctx_type_0 &_ctx, int note, int channel){
}

void Voice_4_controlChange_init(Voice_4__ctx_type_0 &_output_){
   Voice_4__ctx_type_0_init(_output_);
   return ;
}

void Voice_4_controlChange(Voice_4__ctx_type_0 &_ctx, int control, int value, int channel){
   uint8_t _cond_202;
   _cond_202 = (control == 30);
   if(_cond_202){
      _ctx.level1 = fix_mul(int_to_fix(value),0x204 /* 0.007874 */);
   }
   uint8_t _cond_203;
   _cond_203 = (control == 31);
   if(_cond_203){
      _ctx.level2 = fix_mul(int_to_fix(value),0x204 /* 0.007874 */);
   }
   uint8_t _cond_204;
   _cond_204 = (control == 32);
   if(_cond_204){
      _ctx.level3 = fix_mul(int_to_fix(value),0x204 /* 0.007874 */);
   }
   uint8_t _cond_205;
   _cond_205 = (control == 33);
   if(_cond_205){
      _ctx.level4 = fix_mul(int_to_fix(value),0x204 /* 0.007874 */);
   }
   uint8_t _cond_206;
   _cond_206 = (control == 34);
   if(_cond_206){
      _ctx.pw1 = fix_mul(int_to_fix(value),0x204 /* 0.007874 */);
   }
   uint8_t _cond_207;
   _cond_207 = (control == 35);
   if(_cond_207){
      _ctx.pw2 = fix_mul(int_to_fix(value),0x204 /* 0.007874 */);
   }
   uint8_t _cond_208;
   _cond_208 = (control == 36);
   if(_cond_208){
      _ctx.pw3 = fix_mul(0x33 /* 0.000787 */,int_to_fix(value));
   }
   uint8_t _cond_209;
   _cond_209 = (control == 37);
   if(_cond_209){
      _ctx.pw4 = fix_mul(int_to_fix(value),0x204 /* 0.007874 */);
   }
   uint8_t _cond_210;
   _cond_210 = (control == 38);
   if(_cond_210){
      _ctx.lfo_rate = Util_map(int_to_fix(value),0x0 /* 0.000000 */,0x7f0000 /* 127.000000 */,(-0x6666 /* -0.400000 */),0x1999 /* 0.100000 */);
   }
   uint8_t _cond_211;
   _cond_211 = (control == 39);
   if(_cond_211){
      _ctx.lfo_shape = fix_mul(0x60c /* 0.023622 */,int_to_fix(value));
   }
   uint8_t _cond_212;
   _cond_212 = (control == 40);
   if(_cond_212){
      _ctx.lfo_pw = Util_map(int_to_fix(value),0x0 /* 0.000000 */,0x7f0000 /* 127.000000 */,(-0x10000 /* -1.000000 */),0x10000 /* 1.000000 */);
   }
   uint8_t _cond_213;
   _cond_213 = (control == 41);
   if(_cond_213){
      _ctx.lfo_cv = Util_map(int_to_fix(value),0x0 /* 0.000000 */,0x7f0000 /* 127.000000 */,(-0x1999 /* -0.100000 */),0x1999 /* 0.100000 */);
   }
   uint8_t _cond_214;
   _cond_214 = (control == 42);
   if(_cond_214){
      _ctx.lfo_flt = Util_map(int_to_fix(value),0x0 /* 0.000000 */,0x7f0000 /* 127.000000 */,(-0x4ccc /* -0.300000 */),0x4ccc /* 0.300000 */);
   }
   uint8_t _cond_216;
   _cond_216 = (control == 43);
   if(_cond_216){
      uint8_t _cond_215;
      _cond_215 = (value > 0);
      if(_cond_215){ _ctx.lfo_reset = 0x10000 /* 1.000000 */; }
      else
      { _ctx.lfo_reset = 0x0 /* 0.000000 */; }
   }
   uint8_t _cond_217;
   _cond_217 = (control == 44);
   if(_cond_217){
      _ctx.flt_cut = Util_map(int_to_fix(value),0x0 /* 0.000000 */,0x7f0000 /* 127.000000 */,(-0x3333 /* -0.200000 */),0x8000 /* 0.500000 */);
   }
   uint8_t _cond_218;
   _cond_218 = (control == 45);
   if(_cond_218){
      _ctx.flt_res = fix_mul(int_to_fix(value),0x204 /* 0.007874 */);
   }
   uint8_t _cond_219;
   _cond_219 = (control == 46);
   if(_cond_219){
      _ctx.flt_shape = ((value * 4) / 127);
   }
   uint8_t _cond_220;
   _cond_220 = (control == 47);
   if(_cond_220){
      _ctx.attack = fix_mul(int_to_fix(value),0x204 /* 0.007874 */);
   }
   uint8_t _cond_221;
   _cond_221 = (control == 48);
   if(_cond_221){
      _ctx.decay = fix_mul(int_to_fix(value),0x204 /* 0.007874 */);
   }
   uint8_t _cond_222;
   _cond_222 = (control == 49);
   if(_cond_222){
      _ctx.sustain = fix_mul(int_to_fix(value),0x204 /* 0.007874 */);
   }
   uint8_t _cond_223;
   _cond_223 = (control == 50);
   if(_cond_223){
      _ctx.release = fix_mul(int_to_fix(value),0x204 /* 0.007874 */);
   }
}

void Voice_4_default_init(Voice_4__ctx_type_0 &_output_){
   Voice_4__ctx_type_0_init(_output_);
   return ;
}

void Voice_4_default(Voice_4__ctx_type_0 &_ctx){
}


