
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#include "voice_4.h"

void Util__ctx_type_0_init(Util__ctx_type_0 &_output_){
   Util__ctx_type_0 _ctx;
   _ctx.pre = false;
   _output_ = _ctx;
   return ;
}

void Util_edge_init(Util__ctx_type_0 &_output_){
   Util__ctx_type_0_init(_output_);
   return ;
}

uint8_t Util_edge(Util__ctx_type_0 &_ctx, uint8_t x){
   uint8_t ret;
   ret = (x && bool_not(_ctx.pre));
   _ctx.pre = x;
   return ret;
}

void Util__ctx_type_1_init(Util__ctx_type_1 &_output_){
   Util__ctx_type_1 _ctx;
   _ctx.pre_x = 0x0 /* 0.000000 */;
   _output_ = _ctx;
   return ;
}

void Util_change_init(Util__ctx_type_1 &_output_){
   Util__ctx_type_1_init(_output_);
   return ;
}

uint8_t Util_change(Util__ctx_type_1 &_ctx, fix16_t x){
   uint8_t v;
   v = (_ctx.pre_x != x);
   _ctx.pre_x = x;
   return v;
}

fix16_t Util_map(fix16_t x, fix16_t x0, fix16_t x1, fix16_t y0, fix16_t y1){
   return (y0 + fix_div(fix_mul((x + (- x0)),(y1 + (- y0))),(x1 + (- x0))));
}

void Util__ctx_type_3_init(Util__ctx_type_3 &_output_){
   Util__ctx_type_3 _ctx;
   _ctx.y1 = 0x0 /* 0.000000 */;
   _ctx.x1 = 0x0 /* 0.000000 */;
   _output_ = _ctx;
   return ;
}

void Util_dcblock_init(Util__ctx_type_3 &_output_){
   Util__ctx_type_3_init(_output_);
   return ;
}

fix16_t Util_dcblock(Util__ctx_type_3 &_ctx, fix16_t x0){
   fix16_t y0;
   y0 = (x0 + (- _ctx.x1) + fix_mul(0xfeb8 /* 0.995000 */,_ctx.y1));
   _ctx.x1 = x0;
   _ctx.y1 = y0;
   return y0;
}

void Util__ctx_type_4_init(Util__ctx_type_4 &_output_){
   Util__ctx_type_4 _ctx;
   _ctx.x = 0x0 /* 0.000000 */;
   _output_ = _ctx;
   return ;
}

void Util_smooth_init(Util__ctx_type_4 &_output_){
   Util__ctx_type_4_init(_output_);
   return ;
}

fix16_t Util_smooth(Util__ctx_type_4 &_ctx, fix16_t input){
   _ctx.x = (_ctx.x + fix_mul(0x147 /* 0.005000 */,(input + (- _ctx.x))));
   return _ctx.x;
}

void Util__ctx_type_5_init(Util__ctx_type_5 &_output_){
   Util__ctx_type_5 _ctx;
   _ctx.x0 = 0x0 /* 0.000000 */;
   _output_ = _ctx;
   return ;
}

void Util_average2_init(Util__ctx_type_5 &_output_){
   Util__ctx_type_5_init(_output_);
   return ;
}

fix16_t Util_average2(Util__ctx_type_5 &_ctx, fix16_t x1){
   fix16_t result;
   result = ((_ctx.x0 + x1) >> 1);
   _ctx.x0 = x1;
   return result;
}

fix16_t Util_cubic_clipper(fix16_t x){
   if(x <= -0xaaaa /* -0.666667 */){
      return -0xaaaa /* -0.666667 */;
   }
   else
   {
      if(x >= 0xaaaa /* 0.666667 */){
         return 0xaaaa /* 0.666667 */;
      }
      else
      {
         return (x + fix_mul(fix_mul(fix_mul(-0x5555 /* -0.333333 */,x),x),x));
      }
   }
}

fix16_t Util_pitchToRate_1024_raw_c0(int index){
   return Util_pitchToRate_1024_c0[index];
}

fix16_t Util_pitchToRate_1024_raw_c1(int index){
   return Util_pitchToRate_1024_c1[index];
}

fix16_t Util_pitchToRate_1024_raw_c2(int index){
   return Util_pitchToRate_1024_c2[index];
}

fix16_t Util_pitchToRate_1024(fix16_t pitch){
   int index;
   index = int_clip(fix_to_int(fix_mul(0x3e7c /* 0.244094 */,pitch)),0,31);
   return (fix_wrap_array(Util_pitchToRate_1024_c0)[index] + fix_mul(pitch,(fix_wrap_array(Util_pitchToRate_1024_c1)[index] + fix_mul(pitch,fix_wrap_array(Util_pitchToRate_1024_c2)[index]))));
}

fix16_t Util_pitchToRate_raw_c0(int index){
   return Util_pitchToRate_c0[index];
}

fix16_t Util_pitchToRate_raw_c1(int index){
   return Util_pitchToRate_c1[index];
}

fix16_t Util_pitchToRate_raw_c2(int index){
   return Util_pitchToRate_c2[index];
}

fix16_t Util_pitchToRate(fix16_t pitch){
   int index;
   index = int_clip(fix_to_int(fix_mul(0x3e7c /* 0.244094 */,pitch)),0,31);
   return (fix_wrap_array(Util_pitchToRate_c0)[index] + fix_mul(pitch,(fix_wrap_array(Util_pitchToRate_c1)[index] + fix_mul(pitch,fix_wrap_array(Util_pitchToRate_c2)[index]))));
}

fix16_t Util_cvToPitch(fix16_t cv){
   return (0x180000 /* 24.000000 */ + fix_mul(0x780000 /* 120.000000 */,cv));
}

fix16_t Util_cvToRate_1024_raw_c0(int index){
   return Util_cvToRate_1024_c0[index];
}

fix16_t Util_cvToRate_1024_raw_c1(int index){
   return Util_cvToRate_1024_c1[index];
}

fix16_t Util_cvToRate_1024_raw_c2(int index){
   return Util_cvToRate_1024_c2[index];
}

fix16_t Util_cvToRate_1024(fix16_t cv){
   int index;
   index = int_clip(fix_to_int(fix_mul(0x2271c7 /* 34.444445 */,cv)),0,31);
   return (fix_wrap_array(Util_cvToRate_1024_c0)[index] + fix_mul(cv,(fix_wrap_array(Util_cvToRate_1024_c1)[index] + fix_mul(cv,fix_wrap_array(Util_cvToRate_1024_c2)[index]))));
}

fix16_t Util_cvToRate_raw_c0(int index){
   return Util_cvToRate_c0[index];
}

fix16_t Util_cvToRate_raw_c1(int index){
   return Util_cvToRate_c1[index];
}

fix16_t Util_cvToRate_raw_c2(int index){
   return Util_cvToRate_c2[index];
}

fix16_t Util_cvToRate(fix16_t cv){
   int index;
   index = int_clip(fix_to_int(fix_mul(0x8d1c71 /* 141.111111 */,cv)),0,127);
   return (fix_wrap_array(Util_cvToRate_c0)[index] + fix_mul(cv,(fix_wrap_array(Util_cvToRate_c1)[index] + fix_mul(cv,fix_wrap_array(Util_cvToRate_c2)[index]))));
}

fix16_t Util_pitchToCv(fix16_t pitch){
   return fix_mul(0x222 /* 0.008333 */,(-0x180000 /* -24.000000 */ + pitch));
}

fix16_t Util_cvToperiod_raw_c0(int index){
   return Util_cvToperiod_c0[index];
}

fix16_t Util_cvToperiod_raw_c1(int index){
   return Util_cvToperiod_c1[index];
}

fix16_t Util_cvToperiod_raw_c2(int index){
   return Util_cvToperiod_c2[index];
}

fix16_t Util_cvToperiod(fix16_t cv){
   int index;
   index = int_clip(fix_to_int(fix_mul(0x1f0000 /* 31.000000 */,cv)),0,31);
   return (fix_wrap_array(Util_cvToperiod_c0)[index] + fix_mul(cv,(fix_wrap_array(Util_cvToperiod_c1)[index] + fix_mul(cv,fix_wrap_array(Util_cvToperiod_c2)[index]))));
}

fix16_t Util_cvTokHz_raw_c0(int index){
   return Util_cvTokHz_c0[index];
}

fix16_t Util_cvTokHz_raw_c1(int index){
   return Util_cvTokHz_c1[index];
}

fix16_t Util_cvTokHz_raw_c2(int index){
   return Util_cvTokHz_c2[index];
}

fix16_t Util_cvTokHz(fix16_t cv){
   int index;
   index = int_clip(fix_to_int(fix_mul(0x1f0000 /* 31.000000 */,cv)),0,31);
   return (fix_wrap_array(Util_cvTokHz_c0)[index] + fix_mul(cv,(fix_wrap_array(Util_cvTokHz_c1)[index] + fix_mul(cv,fix_wrap_array(Util_cvTokHz_c2)[index]))));
}

void Tricore__ctx_type_0_init(Tricore__ctx_type_0 &_output_){
   Tricore__ctx_type_0 _ctx;
   _ctx.reset_state = false;
   _ctx.reset_phase = 0x0 /* 0.000000 */;
   _ctx.rate = 0x0 /* 0.000000 */;
   _ctx.phase = 0x0 /* 0.000000 */;
   _ctx.direction = false;
   Util__ctx_type_0_init(_ctx._inst23);
   Util__ctx_type_0_init(_ctx._inst22);
   Util__ctx_type_1_init(_ctx._inst20);
   Tricore_default(_ctx);
   _output_ = _ctx;
   return ;
}

void Tricore_process_init(Tricore__ctx_type_0 &_output_){
   Tricore__ctx_type_0_init(_output_);
   return ;
}

fix16_t Tricore_process(Tricore__ctx_type_0 &_ctx, fix16_t cv, fix16_t reset, fix16_t disable){
   fix16_t out;
   out = 0x0 /* 0.000000 */;
   if(Util_change(_ctx._inst20,cv)){
      _ctx.rate = (Util_cvToRate_1024(cv) << 2);
   }
   fix16_t new_phase;
   fix16_t _if_158;
   if(_ctx.direction){
      _if_158 = _ctx.rate;
   }
   else
   {
      _if_158 = (- _ctx.rate);
   }
   new_phase = (_ctx.phase + _if_158);
   uint8_t bdisable;
   bdisable = (disable > 0x8000 /* 0.500000 */);
   if(Util_edge(_ctx._inst22,(reset > 0x0 /* 0.000000 */)) || Util_edge(_ctx._inst23,bdisable)){
      _ctx.reset_phase = _ctx.phase;
      _ctx.reset_state = true;
      new_phase = 0x0 /* 0.000000 */;
   }
   if(new_phase > 0x4000000 /* 1024.000000 */){
      new_phase = (0x4000000 /* 1024.000000 */ + (- (-0x4000000 /* -1024.000000 */ + new_phase)));
      _ctx.direction = false;
   }
   else
   {
      if(new_phase < -0x4000000 /* -1024.000000 */){
         _ctx.direction = true;
      }
   }
   if(bdisable){
      _ctx.phase = 0x0 /* 0.000000 */;
   }
   else
   {
      _ctx.phase = new_phase;
   }
   if(_ctx.reset_state){
      if((fix_abs(_ctx.reset_phase) > 0xa0000 /* 10.000000 */) || bdisable){
         fix16_t reset_speed;
         if(bdisable){
            reset_speed = 0x28f /* 0.010000 */;
         }
         else
         {
            reset_speed = 0x8000 /* 0.500000 */;
         }
         _ctx.reset_phase = (_ctx.reset_phase + (- fix_mul(_ctx.reset_phase,reset_speed)));
      }
      else
      {
         uint8_t _cond_162;
         _cond_162 = (_ctx.reset_phase > 0xa0000 /* 10.000000 */);
         if(bool_not(_cond_162)){
            _ctx.reset_phase = 0x0 /* 0.000000 */;
         }
         _ctx.reset_state = false;
         _ctx.direction = true;
      }
      out = _ctx.reset_phase;
   }
   out = (_ctx.phase + out);
   return (out >> 10);
}

void Tricore_noteOn_init(Tricore__ctx_type_0 &_output_){
   Tricore__ctx_type_0_init(_output_);
   return ;
}

void Tricore_noteOn(Tricore__ctx_type_0 &_ctx, int note, int velocity, int channel){
}

void Tricore_noteOff_init(Tricore__ctx_type_0 &_output_){
   Tricore__ctx_type_0_init(_output_);
   return ;
}

void Tricore_noteOff(Tricore__ctx_type_0 &_ctx, int note, int channel){
}

void Tricore_controlChange_init(Tricore__ctx_type_0 &_output_){
   Tricore__ctx_type_0_init(_output_);
   return ;
}

void Tricore_controlChange(Tricore__ctx_type_0 &_ctx, int control, int value, int channel){
}

void Tricore_default_init(Tricore__ctx_type_0 &_output_){
   Tricore__ctx_type_0_init(_output_);
   return ;
}

void Tricore_default(Tricore__ctx_type_0 &_ctx){
   _ctx.rate = 0xc265 /* 0.759367 */;
}

fix16_t Saturate_soft_tanh_table_raw_c0(int index){
   return Saturate_soft_tanh_table_c0[index];
}

fix16_t Saturate_soft_tanh_table_raw_c1(int index){
   return Saturate_soft_tanh_table_c1[index];
}

fix16_t Saturate_soft_tanh_table_raw_c2(int index){
   return Saturate_soft_tanh_table_c2[index];
}

fix16_t Saturate_soft_tanh_table(fix16_t x){
   int index;
   index = int_clip(fix_to_int(fix_mul(0x50000 /* 5.000000 */,(0x180000 /* 24.000000 */ + x))),0,240);
   return (fix_wrap_array(Saturate_soft_tanh_table_c0)[index] + fix_mul(x,(fix_wrap_array(Saturate_soft_tanh_table_c1)[index] + fix_mul(x,fix_wrap_array(Saturate_soft_tanh_table_c2)[index]))));
}

fix16_t Saturate_soft_process(fix16_t x){
   return Saturate_soft_tanh_table(x);
}

void Saturate_soft_noteOn(int note, int velocity, int channel){
}

void Saturate_soft_noteOff(int note, int channel){
}

void Saturate_soft_controlChange(int control, int value, int channel){
}

void Saturate_soft_default(){
}

fix16_t Svf_calc_g_raw_c0(int index){
   return Svf_calc_g_c0[index];
}

fix16_t Svf_calc_g_raw_c1(int index){
   return Svf_calc_g_c1[index];
}

fix16_t Svf_calc_g_raw_c2(int index){
   return Svf_calc_g_c2[index];
}

fix16_t Svf_calc_g(fix16_t cv){
   int index;
   index = int_clip(fix_to_int(fix_mul(0x8d1c71 /* 141.111111 */,cv)),0,127);
   return (fix_wrap_array(Svf_calc_g_c0)[index] + fix_mul(cv,(fix_wrap_array(Svf_calc_g_c1)[index] + fix_mul(cv,fix_wrap_array(Svf_calc_g_c2)[index]))));
}

void Svf__ctx_type_4_init(Svf__ctx_type_4 &_output_){
   Svf__ctx_type_4 _ctx;
   _ctx.z2 = 0x0 /* 0.000000 */;
   _ctx.z1 = 0x0 /* 0.000000 */;
   _ctx.inv_den = 0x0 /* 0.000000 */;
   _ctx.g = 0x0 /* 0.000000 */;
   Util__ctx_type_1_init(_ctx._inst44);
   Util__ctx_type_1_init(_ctx._inst43);
   _ctx.R = 0x0 /* 0.000000 */;
   Svf_default(_ctx);
   _output_ = _ctx;
   return ;
}

void Svf_process_init(Svf__ctx_type_4 &_output_){
   Svf__ctx_type_4_init(_output_);
   return ;
}

fix16_t Svf_process(Svf__ctx_type_4 &_ctx, fix16_t x, fix16_t cv, fix16_t q, int sel){
   q = (0x8000 /* 0.500000 */ + q);
   if(Util_change(_ctx._inst43,cv) || Util_change(_ctx._inst44,q)){
      _ctx.g = Svf_calc_g(cv);
      _ctx.R = fix_div(0x10000 /* 1.000000 */,((0x0 /* 0.000000 */ + q) << 1));
      _ctx.inv_den = fix_div(0x10000 /* 1.000000 */,(0x10000 /* 1.000000 */ + fix_mul(_ctx.g,_ctx.g) + (fix_mul(_ctx.R,_ctx.g) << 1)));
   }
   fix16_t high;
   high = fix_mul(_ctx.inv_den,(x + (- _ctx.z2) + (- fix_mul(_ctx.z1,(_ctx.g + (_ctx.R << 1))))));
   fix16_t band;
   band = (_ctx.z1 + fix_mul(_ctx.g,high));
   fix16_t low;
   low = (_ctx.z2 + fix_mul(_ctx.g,band));
   fix16_t notch;
   notch = (high + low);
   _ctx.z1 = (band + fix_mul(_ctx.g,high));
   _ctx.z2 = (low + fix_mul(_ctx.g,band));
   fix16_t output;
   switch(sel) {
      case 0:
         output = low;
      break;
      case 1:
         output = high;
      break;
      case 2:
         output = band;
      break;
    default: 
      output = notch;
   }
   return Saturate_soft_process(output);
}

void Svf_noteOn_init(Svf__ctx_type_4 &_output_){
   Svf__ctx_type_4_init(_output_);
   return ;
}

void Svf_noteOn(Svf__ctx_type_4 &_ctx, int note, int velocity, int channel){
}

void Svf_noteOff_init(Svf__ctx_type_4 &_output_){
   Svf__ctx_type_4_init(_output_);
   return ;
}

void Svf_noteOff(Svf__ctx_type_4 &_ctx, int note, int channel){
}

void Svf_controlChange_init(Svf__ctx_type_4 &_output_){
   Svf__ctx_type_4_init(_output_);
   return ;
}

void Svf_controlChange(Svf__ctx_type_4 &_ctx, int control, int value, int channel){
}

void Svf_default_init(Svf__ctx_type_4 &_output_){
   Svf__ctx_type_4_init(_output_);
   return ;
}

void Svf_default(Svf__ctx_type_4 &_ctx){
   _ctx.g = 0x98 /* 0.002330 */;
   _ctx.R = 0x10000 /* 1.000000 */;
   _ctx.inv_den = fix_div(0x10000 /* 1.000000 */,(0x10000 /* 1.000000 */ + fix_mul(_ctx.g,_ctx.g)));
}

fix16_t Saturate_tanh_table_raw_c0(int index){
   return Saturate_tanh_table_c0[index];
}

fix16_t Saturate_tanh_table_raw_c1(int index){
   return Saturate_tanh_table_c1[index];
}

fix16_t Saturate_tanh_table_raw_c2(int index){
   return Saturate_tanh_table_c2[index];
}

fix16_t Saturate_tanh_table(fix16_t x){
   int index;
   index = int_clip(fix_to_int(fix_mul(0x50000 /* 5.000000 */,(0x180000 /* 24.000000 */ + x))),0,240);
   return (fix_wrap_array(Saturate_tanh_table_c0)[index] + fix_mul(x,(fix_wrap_array(Saturate_tanh_table_c1)[index] + fix_mul(x,fix_wrap_array(Saturate_tanh_table_c2)[index]))));
}

fix16_t Saturate_process(fix16_t x){
   return Saturate_tanh_table(x);
}

void Saturate_noteOn(int note, int velocity, int channel){
}

void Saturate_noteOff(int note, int channel){
}

void Saturate_controlChange(int control, int value, int channel){
}

void Saturate_default(){
}

void Lfo__ctx_type_0_init(Lfo__ctx_type_0 &_output_){
   Lfo__ctx_type_0 _ctx;
   _ctx.x4 = 0x0 /* 0.000000 */;
   _ctx.x3 = 0x0 /* 0.000000 */;
   _ctx.x2 = 0x0 /* 0.000000 */;
   _output_ = _ctx;
   return ;
}

void Lfo_soft_init(Lfo__ctx_type_0 &_output_){
   Lfo__ctx_type_0_init(_output_);
   return ;
}

fix16_t Lfo_soft(Lfo__ctx_type_0 &_ctx, fix16_t x1){
   fix16_t o;
   o = ((_ctx.x2 + _ctx.x3 + _ctx.x4 + x1) >> 2);
   fix16_t _tmp_166_0;
   _tmp_166_0 = x1;
   fix16_t _tmp_166_1;
   _tmp_166_1 = _ctx.x2;
   fix16_t _tmp_166_2;
   _tmp_166_2 = _ctx.x3;
   _ctx.x2 = _tmp_166_0;
   _ctx.x3 = _tmp_166_1;
   _ctx.x4 = _tmp_166_2;
   return o;
}

void Lfo__ctx_type_1_init(Lfo__ctx_type_1 &_output_){
   Lfo__ctx_type_1 _ctx;
   _ctx.rate = 0x0 /* 0.000000 */;
   _ctx.phase = 0x0 /* 0.000000 */;
   Lfo__ctx_type_0_init(_ctx._inst62);
   Util__ctx_type_0_init(_ctx._inst60);
   Util__ctx_type_1_init(_ctx._inst58);
   _output_ = _ctx;
   return ;
}

void Lfo_process_init(Lfo__ctx_type_1 &_output_){
   Lfo__ctx_type_1_init(_output_);
   return ;
}

fix16_t Lfo_process(Lfo__ctx_type_1 &_ctx, fix16_t cv, fix16_t shape, fix16_t reset){
   if(Util_change(_ctx._inst58,cv)){
      _ctx.rate = Util_cvToRate((-0x4ccc /* -0.300000 */ + cv));
   }
   _ctx.phase = (_ctx.phase + _ctx.rate);
   if(_ctx.phase > 0x20000 /* 2.000000 */){
      _ctx.phase = (-0x20000 /* -2.000000 */ + _ctx.phase);
   }
   uint8_t breset;
   breset = (reset > 0x0 /* 0.000000 */);
   if(Util_edge(_ctx._inst60,breset)){
      _ctx.phase = 0x0 /* 0.000000 */;
   }
   fix16_t tmp;
   tmp = (-0x10000 /* -1.000000 */ + _ctx.phase);
   fix16_t o;
   if(shape < 0x10000 /* 1.000000 */){
      o = tmp;
   }
   else
   {
      if(shape < 0x20000 /* 2.000000 */){
         o = (-0x10000 /* -1.000000 */ + (fix_abs(tmp) << 1));
      }
      else
      {
         if(tmp > 0x0 /* 0.000000 */){
            o = 0x10000 /* 1.000000 */;
         }
         else
         {
            o = 0x0 /* 0.000000 */;
         }
      }
   }
   return Lfo_soft(_ctx._inst62,o);
}

void Lfo_noteOn_init(Lfo__ctx_type_1 &_output_){
   Lfo__ctx_type_1_init(_output_);
   return ;
}

void Lfo_noteOn(Lfo__ctx_type_1 &_ctx, int note, int velocity, int channel){
}

void Lfo_noteOff_init(Lfo__ctx_type_1 &_output_){
   Lfo__ctx_type_1_init(_output_);
   return ;
}

void Lfo_noteOff(Lfo__ctx_type_1 &_ctx, int note, int channel){
}

void Lfo_controlChange_init(Lfo__ctx_type_1 &_output_){
   Lfo__ctx_type_1_init(_output_);
   return ;
}

void Lfo_controlChange(Lfo__ctx_type_1 &_ctx, int control, int value, int channel){
}

void Lfo_default_init(Lfo__ctx_type_1 &_output_){
   Lfo__ctx_type_1_init(_output_);
   return ;
}

void Lfo_default(Lfo__ctx_type_1 &_ctx){
}

fix16_t Tables_nsine_raw_c0(int index){
   return Tables_nsine_c0[index];
}

fix16_t Tables_nsine_raw_c1(int index){
   return Tables_nsine_c1[index];
}

fix16_t Tables_nsine_raw_c2(int index){
   return Tables_nsine_c2[index];
}

fix16_t Tables_nsine(fix16_t x){
   int index;
   index = int_clip(fix_to_int(fix_mul(0x7f0000 /* 127.000000 */,x)),0,127);
   return (fix_wrap_array(Tables_nsine_c0)[index] + fix_mul(x,(fix_wrap_array(Tables_nsine_c1)[index] + fix_mul(x,fix_wrap_array(Tables_nsine_c2)[index]))));
}

void Phase__ctx_type_0_init(Phase__ctx_type_0 &_output_){
   Phase__ctx_type_0 _ctx;
   _ctx.rate = 0x0 /* 0.000000 */;
   _ctx.phase = 0x0 /* 0.000000 */;
   Util__ctx_type_0_init(_ctx._inst71);
   Util__ctx_type_1_init(_ctx._inst69);
   Phase_default(_ctx);
   _output_ = _ctx;
   return ;
}

void Phase_process_init(Phase__ctx_type_0 &_output_){
   Phase__ctx_type_0_init(_output_);
   return ;
}

fix16_t Phase_process(Phase__ctx_type_0 &_ctx, fix16_t cv, fix16_t reset){
   if(Util_change(_ctx._inst69,cv)){
      _ctx.rate = Util_cvToRate_1024(cv);
   }
   if(Util_edge(_ctx._inst71,(reset > 0x8000 /* 0.500000 */))){
      _ctx.phase = 0x0 /* 0.000000 */;
   }
   else
   {
      _ctx.phase = (_ctx.phase + _ctx.rate);
   }
   if(_ctx.phase > 0x4000000 /* 1024.000000 */){
      _ctx.phase = (-0x4000000 /* -1024.000000 */ + _ctx.phase);
   }
   return (_ctx.phase >> 10);
}

void Phase_noteOn_init(Phase__ctx_type_0 &_output_){
   Phase__ctx_type_0_init(_output_);
   return ;
}

void Phase_noteOn(Phase__ctx_type_0 &_ctx, int note, int velocity, int channel){
}

void Phase_noteOff_init(Phase__ctx_type_0 &_output_){
   Phase__ctx_type_0_init(_output_);
   return ;
}

void Phase_noteOff(Phase__ctx_type_0 &_ctx, int note, int channel){
}

void Phase_controlChange_init(Phase__ctx_type_0 &_output_){
   Phase__ctx_type_0_init(_output_);
   return ;
}

void Phase_controlChange(Phase__ctx_type_0 &_ctx, int control, int value, int channel){
}

void Phase_default_init(Phase__ctx_type_0 &_output_){
   Phase__ctx_type_0_init(_output_);
   return ;
}

void Phase_default(Phase__ctx_type_0 &_ctx){
   _ctx.rate = 0xc265 /* 0.759367 */;
}

void Blit__ctx_type_0_init(Blit__ctx_type_0 &_output_){
   Blit__ctx_type_0 _ctx;
   _ctx.scale = 0x0 /* 0.000000 */;
   _ctx.m = 0;
   Util__ctx_type_1_init(_ctx._inst77);
   Blit_pulse_start(_ctx);
   _output_ = _ctx;
   return ;
}

void Blit_pulse_train_init(Blit__ctx_type_0 &_output_){
   Blit__ctx_type_0_init(_output_);
   return ;
}

fix16_t Blit_pulse_train(Blit__ctx_type_0 &_ctx, fix16_t cv, fix16_t phase){
   if(Util_change(_ctx._inst77,cv)){
      _ctx.m = (1 + (fix_to_int(Util_cvToperiod(cv)) << 1));
      _ctx.scale = (Util_cvToperiod(cv) << 1);
   }
   fix16_t pi_phase;
   pi_phase = (phase >> 1);
   fix16_t denominator;
   denominator = Tables_nsine(pi_phase);
   fix16_t out;
   out = 0x0 /* 0.000000 */;
   if(denominator <= 0x0 /* 0.000000 */){
      out = 0x10000 /* 1.000000 */;
   }
   else
   {
      fix16_t m_phase;
      m_phase = (fix_mul(pi_phase,int_to_fix(_ctx.m)) % 0x10000 /* 1.000000 */);
      fix16_t numerator;
      numerator = Tables_nsine(m_phase);
      out = fix_div(numerator,fix_mul(_ctx.scale,denominator));
   }
   return out;
}

void Blit_pulse_start_init(Blit__ctx_type_0 &_output_){
   Blit__ctx_type_0_init(_output_);
   return ;
}

void Blit_pulse_start(Blit__ctx_type_0 &_ctx){
   _ctx.m = 1349;
   _ctx.scale = 0x5457df8 /* 1349.492070 */;
}

void Blit__ctx_type_1_init(Blit__ctx_type_1 &_output_){
   Blit__ctx_type_1 _ctx;
   _ctx.state_saw = 0x0 /* 0.000000 */;
   _ctx.state_pulse = 0x0 /* 0.000000 */;
   _ctx.rate = 0x0 /* 0.000000 */;
   _ctx.output = 0x0 /* 0.000000 */;
   Util__ctx_type_3_init(_ctx._inst93);
   Blit__ctx_type_0_init(_ctx._inst90);
   Blit__ctx_type_0_init(_ctx._inst89);
   Phase__ctx_type_0_init(_ctx._inst87);
   Util__ctx_type_1_init(_ctx._inst85);
   Blit_init(_ctx);
   _output_ = _ctx;
   return ;
}

void Blit_osc_blit_init(Blit__ctx_type_1 &_output_){
   Blit__ctx_type_1_init(_output_);
   return ;
}

fix16_t Blit_osc_blit(Blit__ctx_type_1 &_ctx, fix16_t cv, fix16_t pw, fix16_t wave){
   fix16_t fixed_cv;
   fixed_cv = 0x0 /* 0.000000 */;
   if(wave < 0x10000 /* 1.000000 */){
      fixed_cv = cv;
   }
   else
   {
      fixed_cv = (-0x1999 /* -0.100000 */ + cv);
   }
   if(Util_change(_ctx._inst85,fixed_cv)){
      _ctx.rate = Util_cvToRate(fixed_cv);
   }
   fix16_t phase;
   phase = Phase_process(_ctx._inst87,fixed_cv,0x0 /* 0.000000 */);
   fix16_t shift05;
   shift05 = (0x8000 /* 0.500000 */ + fix_mul(0x7d70 /* 0.490000 */,pw));
   fix16_t shift;
   shift = (phase + shift05);
   if(shift > 0x10000 /* 1.000000 */){
      shift = (-0x10000 /* -1.000000 */ + shift);
   }
   fix16_t pulse1;
   pulse1 = Blit_pulse_train(_ctx._inst89,fixed_cv,phase);
   fix16_t pulse2;
   pulse2 = Blit_pulse_train(_ctx._inst90,fixed_cv,shift);
   _ctx.state_pulse = (pulse1 + (- pulse2) + fix_mul(0xffdf /* 0.999500 */,_ctx.state_pulse));
   _ctx.state_saw = (fix_mul(0xffdf /* 0.999500 */,_ctx.state_saw) + (fix_div((pulse1 + pulse2 + (- (_ctx.rate << 1))),shift05) >> 1));
   if(wave < 0x10000 /* 1.000000 */){
      _ctx.output = _ctx.state_pulse;
   }
   else
   {
      _ctx.output = (_ctx.state_saw << 1);
   }
   _ctx.output = Util_dcblock(_ctx._inst93,_ctx.output);
   return _ctx.output;
}

void Blit_init_init(Blit__ctx_type_1 &_output_){
   Blit__ctx_type_1_init(_output_);
   return ;
}

void Blit_init(Blit__ctx_type_1 &_ctx){
   _ctx.rate = 0x30 /* 0.000742 */;
}

void Blit__ctx_type_2_init(Blit__ctx_type_2 &_output_){
   Blit__ctx_type_2 _ctx;
   Blit__ctx_type_1_init(_ctx._inst96);
   _output_ = _ctx;
   return ;
}

void Blit_process_init(Blit__ctx_type_2 &_output_){
   Blit__ctx_type_2_init(_output_);
   return ;
}

fix16_t Blit_process(Blit__ctx_type_2 &_ctx, fix16_t cv, fix16_t pw, fix16_t wave){
   return Blit_osc_blit(_ctx._inst96,cv,pw,wave);
}

void Blit_noteOn_init(Blit__ctx_type_2 &_output_){
   Blit__ctx_type_2_init(_output_);
   return ;
}

void Blit_noteOn(Blit__ctx_type_2 &_ctx, int note, int velocity, int channel){
}

void Blit_noteOff_init(Blit__ctx_type_2 &_output_){
   Blit__ctx_type_2_init(_output_);
   return ;
}

void Blit_noteOff(Blit__ctx_type_2 &_ctx, int note, int channel){
}

void Blit_controlChange_init(Blit__ctx_type_2 &_output_){
   Blit__ctx_type_2_init(_output_);
   return ;
}

void Blit_controlChange(Blit__ctx_type_2 &_ctx, int control, int value, int channel){
}

void Blit_default_init(Blit__ctx_type_2 &_output_){
   Blit__ctx_type_2_init(_output_);
   return ;
}

void Blit_default(Blit__ctx_type_2 &_ctx){
}

void Adsr__ctx_type_0_init(Adsr__ctx_type_0 &_output_){
   Adsr__ctx_type_0 _ctx;
   _ctx.target = 0x0 /* 0.000000 */;
   _ctx.state = 0;
   _ctx.scale = 0x0 /* 0.000000 */;
   _ctx.rate = 0x0 /* 0.000000 */;
   _ctx.out = 0x0 /* 0.000000 */;
   Util__ctx_type_4_init(_ctx._inst110);
   Util__ctx_type_0_init(_ctx._inst103);
   _output_ = _ctx;
   return ;
}

void Adsr_do_init(Adsr__ctx_type_0 &_output_){
   Adsr__ctx_type_0_init(_output_);
   return ;
}

fix16_t Adsr_do(Adsr__ctx_type_0 &_ctx, fix16_t gate, fix16_t a, fix16_t d, fix16_t s, fix16_t r){
   fix16_t a_rate;
   a_rate = fix_div(0x10000 /* 1.000000 */,(0x28f /* 0.010000 */ + fix_mul(0x640000 /* 100.000000 */,a)));
   fix16_t d_rate;
   d_rate = fix_div(0x10000 /* 1.000000 */,(0x28f /* 0.010000 */ + fix_mul(0x640000 /* 100.000000 */,d)));
   fix16_t r_rate;
   r_rate = fix_div(0x10000 /* 1.000000 */,(0x28f /* 0.010000 */ + fix_mul(0x640000 /* 100.000000 */,r)));
   _ctx.out = (_ctx.out + fix_mul(fix_mul(0x106 /* 0.004000 */,_ctx.rate),(_ctx.target + (- _ctx.out))));
   uint8_t bgate;
   bgate = (gate > 0x0 /* 0.000000 */);
   if(_ctx.state == 0){
      if(Util_edge(_ctx._inst103,bgate)){
         _ctx.state = 1;
         _ctx.scale = fix_mul(0x3333 /* 0.200000 */,gate);
      }
      _ctx.rate = r_rate;
      _ctx.target = 0x0 /* 0.000000 */;
   }
   if(_ctx.state == 1){
      if(bool_not(bgate)){
         _ctx.state = 0;
      }
      if(_ctx.out > 0x4000000 /* 1024.000000 */){
         _ctx.state = 2;
      }
      _ctx.rate = a_rate;
      _ctx.target = 0x4cccccc /* 1228.800000 */;
   }
   if(_ctx.state == 2){
      if(bool_not(bgate)){
         _ctx.state = 0;
      }
      _ctx.rate = d_rate;
      _ctx.target = (s << 10);
   }
   return fix_mul(Util_smooth(_ctx._inst110,_ctx.scale),fix_clip((_ctx.out >> 10),0x0 /* 0.000000 */,0x10000 /* 1.000000 */));
}

void Adsr__ctx_type_1_init(Adsr__ctx_type_1 &_output_){
   Adsr__ctx_type_1 _ctx;
   _ctx.knob4 = 0x0 /* 0.000000 */;
   _ctx.knob3 = 0x0 /* 0.000000 */;
   _ctx.knob2 = 0x0 /* 0.000000 */;
   _ctx.knob1 = 0x0 /* 0.000000 */;
   Adsr__ctx_type_0_init(_ctx._inst112);
   _output_ = _ctx;
   return ;
}

void Adsr_process_init(Adsr__ctx_type_1 &_output_){
   Adsr__ctx_type_1_init(_output_);
   return ;
}

fix16_t Adsr_process(Adsr__ctx_type_1 &_ctx, fix16_t gate){
   return Adsr_do(_ctx._inst112,gate,_ctx.knob1,_ctx.knob2,_ctx.knob3,_ctx.knob4);
}

void Adsr_noteOn_init(Adsr__ctx_type_1 &_output_){
   Adsr__ctx_type_1_init(_output_);
   return ;
}

void Adsr_noteOn(Adsr__ctx_type_1 &_ctx, int note, int velocity, int channel){
}

void Adsr_noteOff_init(Adsr__ctx_type_1 &_output_){
   Adsr__ctx_type_1_init(_output_);
   return ;
}

void Adsr_noteOff(Adsr__ctx_type_1 &_ctx, int note, int channel){
}

void Adsr_controlChange_init(Adsr__ctx_type_1 &_output_){
   Adsr__ctx_type_1_init(_output_);
   return ;
}

void Adsr_controlChange(Adsr__ctx_type_1 &_ctx, int control, int value, int channel){
   if(control == 1){
      _ctx.knob1 = fix_mul(0x204 /* 0.007874 */,int_to_fix(value));
   }
   if(control == 2){
      _ctx.knob2 = fix_mul(0x204 /* 0.007874 */,int_to_fix(value));
   }
   if(control == 3){
      _ctx.knob3 = fix_mul(0x204 /* 0.007874 */,int_to_fix(value));
   }
   if(control == 4){
      _ctx.knob4 = fix_mul(0x204 /* 0.007874 */,int_to_fix(value));
   }
}

void Adsr_default_init(Adsr__ctx_type_1 &_output_){
   Adsr__ctx_type_1_init(_output_);
   return ;
}

void Adsr_default(Adsr__ctx_type_1 &_ctx){
   _ctx.knob1 = 0x0 /* 0.000000 */;
   _ctx.knob2 = 0x8000 /* 0.500000 */;
   _ctx.knob3 = 0x10000 /* 1.000000 */;
   _ctx.knob4 = 0x8000 /* 0.500000 */;
}

void Voice_4__ctx_type_0_init(Voice_4__ctx_type_0 &_output_){
   Voice_4__ctx_type_0 _ctx;
   _ctx.sustain = 0x0 /* 0.000000 */;
   _ctx.release = 0x0 /* 0.000000 */;
   _ctx.pw4 = 0x0 /* 0.000000 */;
   _ctx.pw3 = 0x0 /* 0.000000 */;
   _ctx.pw2 = 0x0 /* 0.000000 */;
   _ctx.pw1 = 0x0 /* 0.000000 */;
   _ctx.lfo_shape = 0x0 /* 0.000000 */;
   _ctx.lfo_reset = 0x0 /* 0.000000 */;
   _ctx.lfo_rate = 0x0 /* 0.000000 */;
   _ctx.lfo_pw = 0x0 /* 0.000000 */;
   _ctx.lfo_flt = 0x0 /* 0.000000 */;
   _ctx.lfo_cv = 0x0 /* 0.000000 */;
   _ctx.level4 = 0x0 /* 0.000000 */;
   _ctx.level3 = 0x0 /* 0.000000 */;
   _ctx.level2 = 0x0 /* 0.000000 */;
   _ctx.level1 = 0x0 /* 0.000000 */;
   _ctx.flt_shape = 0;
   _ctx.flt_res = 0x0 /* 0.000000 */;
   _ctx.flt_cut = 0x0 /* 0.000000 */;
   _ctx.decay = 0x0 /* 0.000000 */;
   _ctx.attack = 0x0 /* 0.000000 */;
   Adsr__ctx_type_0_init(_ctx._inst128);
   Svf__ctx_type_4_init(_ctx._inst127);
   Tricore__ctx_type_0_init(_ctx._inst126);
   Blit__ctx_type_2_init(_ctx._inst125);
   Blit__ctx_type_2_init(_ctx._inst124);
   Blit__ctx_type_2_init(_ctx._inst123);
   Lfo__ctx_type_1_init(_ctx._inst122);
   _output_ = _ctx;
   return ;
}

void Voice_4_process_init(Voice_4__ctx_type_0 &_output_){
   Voice_4__ctx_type_0_init(_output_);
   return ;
}

fix16_t Voice_4_process(Voice_4__ctx_type_0 &_ctx, fix16_t cv, fix16_t vel, fix16_t gate){
   fix16_t lfo;
   lfo = Lfo_process(_ctx._inst122,_ctx.lfo_rate,_ctx.lfo_shape,fix_mul(_ctx.lfo_reset,gate));
   fix16_t mod_pw;
   mod_pw = fix_mul(_ctx.lfo_pw,lfo);
   fix16_t mod_cv;
   mod_cv = fix_mul(_ctx.lfo_cv,lfo);
   fix16_t mod_flt;
   mod_flt = fix_mul(_ctx.lfo_flt,lfo);
   fix16_t o1;
   o1 = Blit_process(_ctx._inst123,(0x6 /* 0.000100 */ + cv + mod_cv),(_ctx.pw1 + mod_pw),0x0 /* 0.000000 */);
   fix16_t o2;
   o2 = Blit_process(_ctx._inst124,(0xd /* 0.000200 */ + cv + mod_cv),(_ctx.pw2 + mod_pw),0x10000 /* 1.000000 */);
   fix16_t o3;
   o3 = Blit_process(_ctx._inst125,(_ctx.pw3 + cv + mod_cv),(_ctx.pw1 + mod_pw),0x0 /* 0.000000 */);
   fix16_t sub;
   sub = Saturate_process(fix_mul((0x20000 /* 2.000000 */ + fix_mul(0x50000 /* 5.000000 */,_ctx.pw4)),Tricore_process(_ctx._inst126,(cv + mod_cv),0x0 /* 0.000000 */,0x10000 /* 1.000000 */)));
   fix16_t o;
   o = (fix_mul(_ctx.level1,o1) + fix_mul(_ctx.level2,o2) + fix_mul(_ctx.level3,o3) + fix_mul(_ctx.level4,sub));
   fix16_t f;
   f = Svf_process(_ctx._inst127,o,(_ctx.flt_cut + mod_flt),_ctx.flt_res,_ctx.flt_shape);
   fix16_t env;
   env = Adsr_do(_ctx._inst128,gate,_ctx.attack,_ctx.decay,_ctx.sustain,_ctx.release);
   return fix_mul(env,f);
}

void Voice_4_noteOn_init(Voice_4__ctx_type_0 &_output_){
   Voice_4__ctx_type_0_init(_output_);
   return ;
}

void Voice_4_noteOn(Voice_4__ctx_type_0 &_ctx, int note, int velocity, int channel){
}

void Voice_4_noteOff_init(Voice_4__ctx_type_0 &_output_){
   Voice_4__ctx_type_0_init(_output_);
   return ;
}

void Voice_4_noteOff(Voice_4__ctx_type_0 &_ctx, int note, int channel){
}

void Voice_4_controlChange_init(Voice_4__ctx_type_0 &_output_){
   Voice_4__ctx_type_0_init(_output_);
   return ;
}

void Voice_4_controlChange(Voice_4__ctx_type_0 &_ctx, int control, int value, int channel){
   if(control == 30){
      _ctx.level1 = fix_mul(0x204 /* 0.007874 */,int_to_fix(value));
   }
   if(control == 31){
      _ctx.level2 = fix_mul(0x204 /* 0.007874 */,int_to_fix(value));
   }
   if(control == 32){
      _ctx.level3 = fix_mul(0x204 /* 0.007874 */,int_to_fix(value));
   }
   if(control == 33){
      _ctx.level4 = fix_mul(0x204 /* 0.007874 */,int_to_fix(value));
   }
   if(control == 34){
      _ctx.pw1 = fix_mul(0x204 /* 0.007874 */,int_to_fix(value));
   }
   if(control == 35){
      _ctx.pw2 = fix_mul(0x204 /* 0.007874 */,int_to_fix(value));
   }
   if(control == 36){
      _ctx.pw3 = fix_mul(0x33 /* 0.000788 */,int_to_fix(value));
   }
   if(control == 37){
      _ctx.pw4 = fix_mul(0x204 /* 0.007874 */,int_to_fix(value));
   }
   if(control == 38){
      _ctx.lfo_rate = Util_map(int_to_fix(value),0x0 /* 0.000000 */,0x7f0000 /* 127.000000 */,-0x6666 /* -0.400000 */,0x1999 /* 0.100000 */);
   }
   if(control == 39){
      _ctx.lfo_shape = fix_mul(0x60c /* 0.023622 */,int_to_fix(value));
   }
   if(control == 40){
      _ctx.lfo_pw = Util_map(int_to_fix(value),0x0 /* 0.000000 */,0x7f0000 /* 127.000000 */,-0x10000 /* -1.000000 */,0x10000 /* 1.000000 */);
   }
   if(control == 41){
      _ctx.lfo_cv = Util_map(int_to_fix(value),0x0 /* 0.000000 */,0x7f0000 /* 127.000000 */,-0x1999 /* -0.100000 */,0x1999 /* 0.100000 */);
   }
   if(control == 42){
      _ctx.lfo_flt = Util_map(int_to_fix(value),0x0 /* 0.000000 */,0x7f0000 /* 127.000000 */,-0x4ccc /* -0.300000 */,0x4ccc /* 0.300000 */);
   }
   if(control == 43){
      if(value > 0){
         _ctx.lfo_reset = 0x10000 /* 1.000000 */;
      }
      else
      {
         _ctx.lfo_reset = 0x0 /* 0.000000 */;
      }
   }
   if(control == 44){
      _ctx.flt_cut = Util_map(int_to_fix(value),0x0 /* 0.000000 */,0x7f0000 /* 127.000000 */,-0x3333 /* -0.200000 */,0x8000 /* 0.500000 */);
   }
   if(control == 45){
      _ctx.flt_res = fix_mul(0x204 /* 0.007874 */,int_to_fix(value));
   }
   if(control == 46){
      _ctx.flt_shape = ((value << 2) / 127);
   }
   if(control == 47){
      _ctx.attack = fix_mul(0x204 /* 0.007874 */,int_to_fix(value));
   }
   if(control == 48){
      _ctx.decay = fix_mul(0x204 /* 0.007874 */,int_to_fix(value));
   }
   if(control == 49){
      _ctx.sustain = fix_mul(0x204 /* 0.007874 */,int_to_fix(value));
   }
   if(control == 50){
      _ctx.release = fix_mul(0x204 /* 0.007874 */,int_to_fix(value));
   }
}

void Voice_4_default_init(Voice_4__ctx_type_0 &_output_){
   Voice_4__ctx_type_0_init(_output_);
   return ;
}

void Voice_4_default(Voice_4__ctx_type_0 &_ctx){
}


