
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#ifndef AFF_F_H
#define AFF_F_H

#include <stdint.h>
#include <math.h>
#include "vultin.h"
#include <m_pd.h>
#include "aff_f.tables.h"

typedef struct Aff_f__ctx_type_0 {
   int x;
} Aff_f__ctx_type_0;

typedef Aff_f__ctx_type_0 Aff_f_process_type;

static_inline void Aff_f__ctx_type_0_init(Aff_f__ctx_type_0 &_output_){
   Aff_f__ctx_type_0 _ctx;
   _ctx.x = 0;
   _output_ = _ctx;
   return ;
}

static_inline void Aff_f_process_init(Aff_f__ctx_type_0 &_output_){
   Aff_f__ctx_type_0_init(_output_);
   return ;
}

static_inline float Aff_f_process(Aff_f__ctx_type_0 &_ctx, float a, float b){
   _ctx.x = (1 + _ctx.x);
   return (a * b);
}

typedef Aff_f__ctx_type_0 Aff_f_noteOn_type;

static_inline void Aff_f_noteOn_init(Aff_f__ctx_type_0 &_output_){
   Aff_f__ctx_type_0_init(_output_);
   return ;
}

static_inline void Aff_f_noteOn(Aff_f__ctx_type_0 &_ctx, int note, int velocity, int channel){
}

typedef Aff_f__ctx_type_0 Aff_f_noteOff_type;

static_inline void Aff_f_noteOff_init(Aff_f__ctx_type_0 &_output_){
   Aff_f__ctx_type_0_init(_output_);
   return ;
}

static_inline void Aff_f_noteOff(Aff_f__ctx_type_0 &_ctx, int note, int channel){
}

typedef Aff_f__ctx_type_0 Aff_f_controlChange_type;

static_inline void Aff_f_controlChange_init(Aff_f__ctx_type_0 &_output_){
   Aff_f__ctx_type_0_init(_output_);
   return ;
}

static_inline void Aff_f_controlChange(Aff_f__ctx_type_0 &_ctx, int control, int value, int channel){
}

typedef Aff_f__ctx_type_0 Aff_f_default_type;

static_inline void Aff_f_default_init(Aff_f__ctx_type_0 &_output_){
   Aff_f__ctx_type_0_init(_output_);
   return ;
}

static_inline void Aff_f_default(Aff_f__ctx_type_0 &_ctx){
}



#if defined(_MSC_VER)
    //  Microsoft VC++
    #define EXPORT __declspec(dllexport)
#else
    //  GCC
    #define EXPORT __attribute__((visibility("default")))
#endif

extern "C" {
EXPORT void aff_f_tilde_setup(void);
}

#endif // AFF_F_H
