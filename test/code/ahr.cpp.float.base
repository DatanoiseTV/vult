
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#include "ahr.h"

void Util__ctx_type_3_init(Util__ctx_type_3 &_output_){
   Util__ctx_type_3 _ctx;
   _ctx.y1 = 0.f;
   _ctx.x1 = 0.f;
   _output_ = _ctx;
   return ;
}

float Util_dcblock(Util__ctx_type_3 &_ctx, float x0){
   float y0;
   y0 = (x0 + (- _ctx.x1) + (0.995f * _ctx.y1));
   _ctx.x1 = x0;
   _ctx.y1 = y0;
   return y0;
}

void Ahr__ctx_type_0_init(Ahr__ctx_type_0 &_output_){
   Ahr__ctx_type_0 _ctx;
   _ctx.target = 0.f;
   _ctx.state = 0;
   _ctx.rate = 0.f;
   _ctx.out = 0.f;
   _ctx.hold_phase = 0.f;
   _ctx.do_ret_1 = 0.f;
   _ctx.do_ret_0 = 0.f;
   Util__ctx_type_0_init(_ctx._inst22);
   Util__ctx_type_0_init(_ctx._inst20);
   _output_ = _ctx;
   return ;
}

void Ahr_do(Ahr__ctx_type_0 &_ctx, float gate, float a, float h, float r){
   int release;
   release = 0;
   int attack;
   attack = 1;
   int hold;
   hold = 2;
   int reset;
   reset = 3;
   uint8_t bgate;
   bgate = (gate > 0.f);
   if(Util_edge(_ctx._inst20,bgate)){
      _ctx.state = reset;
   }
   float resetting;
   if(_ctx.state == reset){
      resetting = 1.f;
   }
   else
   {
      resetting = 0.f;
   }
   if(Util_edge(_ctx._inst22,(_ctx.out > 1024.f))){
      _ctx.hold_phase = 0.f;
      _ctx.state = hold;
   }
   if((_ctx.out < 10.f) && (_ctx.state == reset)){
      _ctx.state = attack;
   }
   if((_ctx.hold_phase > 100.f) && (_ctx.state == hold)){
      _ctx.state = release;
   }
   if(_ctx.state == reset){
      _ctx.rate = 0.9900991f;
      _ctx.target = 0.f;
   }
   if(_ctx.state == attack){
      _ctx.rate = (1.f / (0.01f + (100.f * a)));
      _ctx.target = 1228.8f;
   }
   if(_ctx.state == hold){
      float hrate;
      hrate = (1.f / (0.01f + (100.f * h)));
      _ctx.hold_phase = (_ctx.hold_phase + hrate);
   }
   if(_ctx.state == release){
      _ctx.rate = (1.f / (0.01f + (100.f * r)));
      _ctx.target = 0.f;
   }
   _ctx.out = (_ctx.out + (0.005f * _ctx.rate * (_ctx.target + (- _ctx.out))));
   _ctx.do_ret_0 = float_clip((0.0009766f * _ctx.out),0.f,1.f);
   _ctx.do_ret_1 = resetting;
   return ;
}

void Ahr__ctx_type_1_init(Ahr__ctx_type_1 &_output_){
   Ahr__ctx_type_1 _ctx;
   _ctx.process_ret_1 = 0.f;
   _ctx.process_ret_0 = 0.f;
   _ctx.knob3 = 0.f;
   _ctx.knob2 = 0.f;
   _ctx.knob1 = 0.f;
   Ahr__ctx_type_0_init(_ctx._inst31);
   _output_ = _ctx;
   return ;
}

void Ahr_controlChange(Ahr__ctx_type_1 &_ctx, int control, int value, int channel){
   if(control == 1){
      _ctx.knob1 = (0.0078741f * int_to_float(value));
   }
   if(control == 2){
      _ctx.knob2 = (0.0078741f * int_to_float(value));
   }
   if(control == 3){
      _ctx.knob3 = (0.0078741f * int_to_float(value));
   }
}


