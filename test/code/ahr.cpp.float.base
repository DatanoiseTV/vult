
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#include "ahr.h"

void Util__ctx_type_0_init(Util__ctx_type_0 &_output_){
   Util__ctx_type_0 _ctx;
   _ctx.pre = 0;
   _output_ = _ctx;
   return ;
}

void Util_edge_init(Util__ctx_type_0 &_output_){
   Util__ctx_type_0_init(_output_);
   return ;
}

uint8_t Util_edge(Util__ctx_type_0 &_ctx, uint8_t x){
   uint8_t ret;
   ret = (x && bool_not(_ctx.pre));
   _ctx.pre = x;
   return ret;
}

void Util__ctx_type_1_init(Util__ctx_type_1 &_output_){
   Util__ctx_type_1 _ctx;
   _ctx.pre_x = 0.000000f;
   _output_ = _ctx;
   return ;
}

void Util_change_init(Util__ctx_type_1 &_output_){
   Util__ctx_type_1_init(_output_);
   return ;
}

uint8_t Util_change(Util__ctx_type_1 &_ctx, float x){
   uint8_t v;
   v = (_ctx.pre_x != x);
   _ctx.pre_x = x;
   return v;
}

float Util_map(float x, float x0, float x1, float y0, float y1){
   return ((((x + (- x0)) * (y1 + (- y0))) / (x1 + (- x0))) + y0);
}

void Util__ctx_type_3_init(Util__ctx_type_3 &_output_){
   Util__ctx_type_3 _ctx;
   _ctx.y1 = 0.000000f;
   _ctx.x1 = 0.000000f;
   _output_ = _ctx;
   return ;
}

void Util_dcblock_init(Util__ctx_type_3 &_output_){
   Util__ctx_type_3_init(_output_);
   return ;
}

float Util_dcblock(Util__ctx_type_3 &_ctx, float x0){
   float y0;
   y0 = (x0 + (- _ctx.x1) + (_ctx.y1 * 0.995000f));
   _ctx.x1 = x0;
   _ctx.y1 = y0;
   return y0;
}

void Util__ctx_type_4_init(Util__ctx_type_4 &_output_){
   Util__ctx_type_4 _ctx;
   _ctx.x = 0.000000f;
   _output_ = _ctx;
   return ;
}

void Util_smooth_init(Util__ctx_type_4 &_output_){
   Util__ctx_type_4_init(_output_);
   return ;
}

float Util_smooth(Util__ctx_type_4 &_ctx, float input){
   _ctx.x = (_ctx.x + ((input + (- _ctx.x)) * 0.005000f));
   return _ctx.x;
}

void Util__ctx_type_5_init(Util__ctx_type_5 &_output_){
   Util__ctx_type_5 _ctx;
   _ctx.x0 = 0.000000f;
   _output_ = _ctx;
   return ;
}

void Util_average2_init(Util__ctx_type_5 &_output_){
   Util__ctx_type_5_init(_output_);
   return ;
}

float Util_average2(Util__ctx_type_5 &_ctx, float x1){
   float result;
   result = ((_ctx.x0 + x1) * 0.500000f);
   _ctx.x0 = x1;
   return result;
}

float Util_pitchToRate(float pitch){
   int index;
   index = int_clip(float_to_int((0.244094f * pitch)),0,31);
   return (float_get(float_wrap_array(Util_pitchToRate_c0),index) + (pitch * (float_get(float_wrap_array(Util_pitchToRate_c1),index) + (float_get(float_wrap_array(Util_pitchToRate_c2),index) * pitch))));
}

float Util_cvToPitch(float cv){
   return ((cv * 120.000000f) + 24.000000f);
}

float Util_cvToRate(float cv){
   int index;
   index = int_clip(float_to_int((34.444444f * cv)),0,31);
   return (float_get(float_wrap_array(Util_cvToRate_c0),index) + (cv * (float_get(float_wrap_array(Util_cvToRate_c1),index) + (float_get(float_wrap_array(Util_cvToRate_c2),index) * cv))));
}

float Util_pitchToCv(float pitch){
   return (0.008333f * ((-24.000000f) + pitch));
}

float Util_cvToRate_unit(float cv){
   int index;
   index = int_clip(float_to_int((34.444444f * cv)),0,31);
   return (float_get(float_wrap_array(Util_cvToRate_unit_c0),index) + (cv * (float_get(float_wrap_array(Util_cvToRate_unit_c1),index) + (float_get(float_wrap_array(Util_cvToRate_unit_c2),index) * cv))));
}

void Ahr__ctx_type_0_init(Ahr__ctx_type_0 &_output_){
   Ahr__ctx_type_0 _ctx;
   _ctx.target = 0.000000f;
   _ctx.state = 0;
   _ctx.rate = 0.000000f;
   _ctx.out = 0.000000f;
   _ctx.hold_phase = 0.000000f;
   Util__ctx_type_0_init(_ctx._inst15);
   Util__ctx_type_0_init(_ctx._inst13);
   _output_ = _ctx;
   return ;
}

void Ahr_do_init(Ahr__ctx_type_0 &_output_){
   Ahr__ctx_type_0_init(_output_);
   return ;
}

void Ahr_do(Ahr__ctx_type_0 &_ctx, float gate, float a, float h, float r, _tuple_$_real_real_$ &_output_){
   int release;
   release = 0;
   int attack;
   attack = 1;
   int hold;
   hold = 2;
   int reset;
   reset = 3;
   uint8_t bgate;
   bgate = (gate > 0.000000f);
   uint8_t _cond_32;
   _cond_32 = Util_edge(_ctx._inst13,bgate);
   if(_cond_32){
      _ctx.state = reset;
   }
   float resetting;
   uint8_t _cond_41;
   _cond_41 = (_ctx.state == reset);
   if(_cond_41){ resetting = 1.000000f; }
   else
   { resetting = 0.000000f; }
   uint8_t _cond_33;
   _cond_33 = Util_edge(_ctx._inst15,(_ctx.out > 1024.000000f));
   if(_cond_33){
      _ctx.hold_phase = 0.000000f;
      _ctx.state = hold;
   }
   uint8_t _cond_34;
   _cond_34 = ((_ctx.out < 10.000000f) && (_ctx.state == reset));
   if(_cond_34){
      _ctx.state = attack;
   }
   uint8_t _cond_35;
   _cond_35 = ((_ctx.hold_phase > 100.000000f) && (_ctx.state == hold));
   if(_cond_35){
      _ctx.state = release;
   }
   uint8_t _cond_36;
   _cond_36 = (_ctx.state == reset);
   if(_cond_36){
      _ctx.rate = 0.990099f;
      _ctx.target = 0.000000f;
   }
   uint8_t _cond_37;
   _cond_37 = (_ctx.state == attack);
   if(_cond_37){
      _ctx.rate = (1.000000f / ((100.000000f * a) + 0.010000f));
      _ctx.target = 1228.800000f;
   }
   uint8_t _cond_38;
   _cond_38 = (_ctx.state == hold);
   if(_cond_38){
      float hrate;
      hrate = (1.000000f / ((100.000000f * h) + 0.010000f));
      _ctx.hold_phase = (_ctx.hold_phase + hrate);
   }
   uint8_t _cond_39;
   _cond_39 = (_ctx.state == release);
   if(_cond_39){
      _ctx.rate = (1.000000f / ((100.000000f * r) + 0.010000f));
      _ctx.target = 0.000000f;
   }
   _ctx.out = (_ctx.out + ((_ctx.target + (- _ctx.out)) * _ctx.rate * 0.005000f));
   _tuple_$_real_real_$ _tuple_40;
   {
      _tuple_40.field_0 = float_clip((_ctx.out * 0.000977f),0.000000f,1.000000f);
      _tuple_40.field_1 = resetting;
   }
   _output_ = _tuple_40;
   return ;
}

void Ahr__ctx_type_1_init(Ahr__ctx_type_1 &_output_){
   Ahr__ctx_type_1 _ctx;
   _ctx.knob3 = 0.000000f;
   _ctx.knob2 = 0.000000f;
   _ctx.knob1 = 0.000000f;
   Ahr__ctx_type_0_init(_ctx._inst24);
   _output_ = _ctx;
   return ;
}

void Ahr_process_init(Ahr__ctx_type_1 &_output_){
   Ahr__ctx_type_1_init(_output_);
   return ;
}

void Ahr_process(Ahr__ctx_type_1 &_ctx, float gate, _tuple_$_real_real_$ &_output_){
   _tuple_$_real_real_$ _call_43;
   Ahr_do(_ctx._inst24,gate,_ctx.knob1,_ctx.knob2,_ctx.knob3,_call_43);
   _output_ = _call_43;
   return ;
}

void Ahr_noteOn_init(Ahr__ctx_type_1 &_output_){
   Ahr__ctx_type_1_init(_output_);
   return ;
}

void Ahr_noteOn(Ahr__ctx_type_1 &_ctx, int note, int velocity, int channel){
}

void Ahr_noteOff_init(Ahr__ctx_type_1 &_output_){
   Ahr__ctx_type_1_init(_output_);
   return ;
}

void Ahr_noteOff(Ahr__ctx_type_1 &_ctx, int note, int channel){
}

void Ahr_controlChange_init(Ahr__ctx_type_1 &_output_){
   Ahr__ctx_type_1_init(_output_);
   return ;
}

void Ahr_controlChange(Ahr__ctx_type_1 &_ctx, int control, int value, int channel){
   uint8_t _cond_45;
   _cond_45 = (control == 1);
   if(_cond_45){
      _ctx.knob1 = (int_to_float(value) * 0.007874f);
   }
   uint8_t _cond_46;
   _cond_46 = (control == 2);
   if(_cond_46){
      _ctx.knob2 = (int_to_float(value) * 0.007874f);
   }
   uint8_t _cond_47;
   _cond_47 = (control == 3);
   if(_cond_47){
      _ctx.knob3 = (int_to_float(value) * 0.007874f);
   }
}

void Ahr_default_init(Ahr__ctx_type_1 &_output_){
   Ahr__ctx_type_1_init(_output_);
   return ;
}

void Ahr_default(Ahr__ctx_type_1 &_ctx){
   _ctx.knob1 = 0.000000f;
   _ctx.knob2 = 0.500000f;
   _ctx.knob3 = 0.500000f;
}


