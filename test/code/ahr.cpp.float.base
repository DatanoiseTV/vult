
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#include "ahr.h"

void Util__ctx_type_0_init(Util__ctx_type_0 &_output_){
   Util__ctx_type_0 _ctx;
   _ctx.pre = false;
   _output_ = _ctx;
   return ;
}

void Util_edge_init(Util__ctx_type_0 &_output_){
   Util__ctx_type_0_init(_output_);
   return ;
}

uint8_t Util_edge(Util__ctx_type_0 &_ctx, uint8_t x){
   uint8_t ret;
   ret = (x && bool_not(_ctx.pre));
   _ctx.pre = x;
   return ret;
}

void Util__ctx_type_1_init(Util__ctx_type_1 &_output_){
   Util__ctx_type_1 _ctx;
   _ctx.pre_x = 0.f;
   _output_ = _ctx;
   return ;
}

void Util_change_init(Util__ctx_type_1 &_output_){
   Util__ctx_type_1_init(_output_);
   return ;
}

uint8_t Util_change(Util__ctx_type_1 &_ctx, float x){
   uint8_t v;
   v = (_ctx.pre_x != x);
   _ctx.pre_x = x;
   return v;
}

float Util_map(float x, float x0, float x1, float y0, float y1){
   return ((((x + (- x0)) * (y1 + (- y0))) / (x1 + (- x0))) + y0);
}

void Util__ctx_type_3_init(Util__ctx_type_3 &_output_){
   Util__ctx_type_3 _ctx;
   _ctx.y1 = 0.f;
   _ctx.x1 = 0.f;
   _output_ = _ctx;
   return ;
}

void Util_dcblock_init(Util__ctx_type_3 &_output_){
   Util__ctx_type_3_init(_output_);
   return ;
}

float Util_dcblock(Util__ctx_type_3 &_ctx, float x0){
   float y0;
   y0 = (x0 + (- _ctx.x1) + (_ctx.y1 * 0.995f));
   _ctx.x1 = x0;
   _ctx.y1 = y0;
   return y0;
}

void Util__ctx_type_4_init(Util__ctx_type_4 &_output_){
   Util__ctx_type_4 _ctx;
   _ctx.x = 0.f;
   _output_ = _ctx;
   return ;
}

void Util_smooth_init(Util__ctx_type_4 &_output_){
   Util__ctx_type_4_init(_output_);
   return ;
}

float Util_smooth(Util__ctx_type_4 &_ctx, float input){
   _ctx.x = (_ctx.x + ((input + (- _ctx.x)) * 0.005f));
   return _ctx.x;
}

void Util__ctx_type_5_init(Util__ctx_type_5 &_output_){
   Util__ctx_type_5 _ctx;
   _ctx.x0 = 0.f;
   _output_ = _ctx;
   return ;
}

void Util_average2_init(Util__ctx_type_5 &_output_){
   Util__ctx_type_5_init(_output_);
   return ;
}

float Util_average2(Util__ctx_type_5 &_ctx, float x1){
   float result;
   result = ((_ctx.x0 + x1) * 0.5f);
   _ctx.x0 = x1;
   return result;
}

float Util_cubic_clipper(float x){
   if(x <= -0.6666666f){
      return -0.6666666f;
   }
   else
   {
      if(x >= 0.6666667f){
         return 0.6666667f;
      }
      else
      {
         return (x + (-0.3333333f * x * x * x));
      }
   }
}

float Util_pitchToRate_1024(float pitch){
   int index;
   index = int_clip(float_to_int((0.2440945f * pitch)),0,31);
   return (float_wrap_array(Util_pitchToRate_1024_c0)[index] + (pitch * (float_wrap_array(Util_pitchToRate_1024_c1)[index] + (float_wrap_array(Util_pitchToRate_1024_c2)[index] * pitch))));
}

float Util_pitchToRate(float pitch){
   int index;
   index = int_clip(float_to_int((0.2440945f * pitch)),0,31);
   return (float_wrap_array(Util_pitchToRate_c0)[index] + (pitch * (float_wrap_array(Util_pitchToRate_c1)[index] + (float_wrap_array(Util_pitchToRate_c2)[index] * pitch))));
}

float Util_cvToPitch(float cv){
   return ((cv * 120.f) + 24.f);
}

float Util_cvToRate_1024(float cv){
   int index;
   index = int_clip(float_to_int((34.4444445f * cv)),0,31);
   return (float_wrap_array(Util_cvToRate_1024_c0)[index] + (cv * (float_wrap_array(Util_cvToRate_1024_c1)[index] + (float_wrap_array(Util_cvToRate_1024_c2)[index] * cv))));
}

float Util_cvToRate(float cv){
   int index;
   index = int_clip(float_to_int((141.1111112f * cv)),0,127);
   return (float_wrap_array(Util_cvToRate_c0)[index] + (cv * (float_wrap_array(Util_cvToRate_c1)[index] + (float_wrap_array(Util_cvToRate_c2)[index] * cv))));
}

float Util_pitchToCv(float pitch){
   return (0.0083334f * (-24.f + pitch));
}

float Util_cvToperiod(float cv){
   int index;
   index = int_clip(float_to_int((31.f * cv)),0,31);
   return (float_wrap_array(Util_cvToperiod_c0)[index] + (cv * (float_wrap_array(Util_cvToperiod_c1)[index] + (float_wrap_array(Util_cvToperiod_c2)[index] * cv))));
}

float Util_cvTokHz(float cv){
   int index;
   index = int_clip(float_to_int((31.f * cv)),0,31);
   return (float_wrap_array(Util_cvTokHz_c0)[index] + (cv * (float_wrap_array(Util_cvTokHz_c1)[index] + (float_wrap_array(Util_cvTokHz_c2)[index] * cv))));
}

void Ahr__ctx_type_0_init(Ahr__ctx_type_0 &_output_){
   Ahr__ctx_type_0 _ctx;
   _ctx.target = 0.f;
   _ctx.state = 0;
   _ctx.rate = 0.f;
   _ctx.out = 0.f;
   _ctx.hold_phase = 0.f;
   _ctx.do_ret_1 = 0.f;
   _ctx.do_ret_0 = 0.f;
   Util__ctx_type_0_init(_ctx._inst22);
   Util__ctx_type_0_init(_ctx._inst20);
   _output_ = _ctx;
   return ;
}

void Ahr_do_init(Ahr__ctx_type_0 &_output_){
   Ahr__ctx_type_0_init(_output_);
   return ;
}

void Ahr_do(Ahr__ctx_type_0 &_ctx, float gate, float a, float h, float r){
   int release;
   release = 0;
   int attack;
   attack = 1;
   int hold;
   hold = 2;
   int reset;
   reset = 3;
   uint8_t bgate;
   bgate = (gate > 0.f);
   if(Util_edge(_ctx._inst20,bgate)){
      _ctx.state = reset;
   }
   float resetting;
   if(_ctx.state == reset){
      resetting = 1.f;
   }
   else
   {
      resetting = 0.f;
   }
   if(Util_edge(_ctx._inst22,(_ctx.out > 1024.f))){
      _ctx.hold_phase = 0.f;
      _ctx.state = hold;
   }
   if((_ctx.out < 10.f) && (_ctx.state == reset)){
      _ctx.state = attack;
   }
   if((_ctx.hold_phase > 100.f) && (_ctx.state == hold)){
      _ctx.state = release;
   }
   if(_ctx.state == reset){
      _ctx.rate = 0.9900991f;
      _ctx.target = 0.f;
   }
   if(_ctx.state == attack){
      _ctx.rate = (1.f / ((100.f * a) + 0.01f));
      _ctx.target = 1228.8f;
   }
   if(_ctx.state == hold){
      float hrate;
      hrate = (1.f / ((100.f * h) + 0.01f));
      _ctx.hold_phase = (_ctx.hold_phase + hrate);
   }
   if(_ctx.state == release){
      _ctx.rate = (1.f / ((100.f * r) + 0.01f));
      _ctx.target = 0.f;
   }
   _ctx.out = (_ctx.out + ((_ctx.target + (- _ctx.out)) * _ctx.rate * 0.005f));
   _ctx.do_ret_0 = float_clip((_ctx.out * 0.0009766f),0.f,1.f);
   _ctx.do_ret_1 = resetting;
   return ;
}

void Ahr_do_ret_0_init(Ahr__ctx_type_0 &_output_){
   Ahr__ctx_type_0_init(_output_);
   return ;
}

float Ahr_do_ret_0(Ahr__ctx_type_0 &_ctx){
   return _ctx.do_ret_0;
}

void Ahr_do_ret_1_init(Ahr__ctx_type_0 &_output_){
   Ahr__ctx_type_0_init(_output_);
   return ;
}

float Ahr_do_ret_1(Ahr__ctx_type_0 &_ctx){
   return _ctx.do_ret_1;
}

void Ahr__ctx_type_1_init(Ahr__ctx_type_1 &_output_){
   Ahr__ctx_type_1 _ctx;
   _ctx.process_ret_1 = 0.f;
   _ctx.process_ret_0 = 0.f;
   _ctx.knob3 = 0.f;
   _ctx.knob2 = 0.f;
   _ctx.knob1 = 0.f;
   Ahr__ctx_type_0_init(_ctx._inst31);
   _output_ = _ctx;
   return ;
}

void Ahr_process_init(Ahr__ctx_type_1 &_output_){
   Ahr__ctx_type_1_init(_output_);
   return ;
}

void Ahr_process(Ahr__ctx_type_1 &_ctx, float gate){
   Ahr_do(_ctx._inst31,gate,_ctx.knob1,_ctx.knob2,_ctx.knob3);
   _ctx.process_ret_0 = Ahr_do_ret_0(_ctx._inst31);
   _ctx.process_ret_1 = Ahr_do_ret_1(_ctx._inst31);
   return ;
}

void Ahr_process_ret_0_init(Ahr__ctx_type_1 &_output_){
   Ahr__ctx_type_1_init(_output_);
   return ;
}

float Ahr_process_ret_0(Ahr__ctx_type_1 &_ctx){
   return _ctx.process_ret_0;
}

void Ahr_process_ret_1_init(Ahr__ctx_type_1 &_output_){
   Ahr__ctx_type_1_init(_output_);
   return ;
}

float Ahr_process_ret_1(Ahr__ctx_type_1 &_ctx){
   return _ctx.process_ret_1;
}

void Ahr_noteOn_init(Ahr__ctx_type_1 &_output_){
   Ahr__ctx_type_1_init(_output_);
   return ;
}

void Ahr_noteOn(Ahr__ctx_type_1 &_ctx, int note, int velocity, int channel){

}

void Ahr_noteOff_init(Ahr__ctx_type_1 &_output_){
   Ahr__ctx_type_1_init(_output_);
   return ;
}

void Ahr_noteOff(Ahr__ctx_type_1 &_ctx, int note, int channel){

}

void Ahr_controlChange_init(Ahr__ctx_type_1 &_output_){
   Ahr__ctx_type_1_init(_output_);
   return ;
}

void Ahr_controlChange(Ahr__ctx_type_1 &_ctx, int control, int value, int channel){
   if(control == 1){
      _ctx.knob1 = (int_to_float(value) * 0.0078741f);
   }
   if(control == 2){
      _ctx.knob2 = (int_to_float(value) * 0.0078741f);
   }
   if(control == 3){
      _ctx.knob3 = (int_to_float(value) * 0.0078741f);
   }
}

void Ahr_default_init(Ahr__ctx_type_1 &_output_){
   Ahr__ctx_type_1_init(_output_);
   return ;
}

void Ahr_default(Ahr__ctx_type_1 &_ctx){
   _ctx.knob1 = 0.f;
   _ctx.knob2 = 0.5f;
   _ctx.knob3 = 0.5f;
}


