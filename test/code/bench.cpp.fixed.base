
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#include "bench.h"

uint8_t Bench_near_zero(fix16_t x){
   return (fix_abs(x) < 0x0 /* 0.000000 */);
}

fix16_t Bench_pitchToRate(fix16_t d){
   int index;
   index = int_clip(fix_to_int(fix_mul(0x3e7c /* 0.244094 */,d)),0,31);
   return fix_add(fix_get(fix_wrap_array(Bench_pitchToRate_c0),index),fix_mul(d,fix_add(fix_get(fix_wrap_array(Bench_pitchToRate_c1),index),fix_mul(fix_get(fix_wrap_array(Bench_pitchToRate_c2),index),d))));
}

fix16_t Bench_cvToRate(fix16_t cv){
   int index;
   index = int_clip(fix_to_int(fix_mul(0x18ccc /* 1.550000 */,fix_add(cv,0xa0000 /* 10.000000 */))),0,31);
   return fix_add(fix_get(fix_wrap_array(Bench_cvToRate_c0),index),fix_mul(cv,fix_add(fix_get(fix_wrap_array(Bench_cvToRate_c1),index),fix_mul(fix_get(fix_wrap_array(Bench_cvToRate_c2),index),cv))));
}

fix16_t Bench_otanh(fix16_t x){
   int index;
   index = int_clip(fix_to_int(fix_mul(0x1b8e3 /* 1.722222 */,fix_add(x,0x90000 /* 9.000000 */))),0,31);
   return fix_add(fix_get(fix_wrap_array(Bench_otanh_c0),index),fix_mul(x,fix_add(fix_get(fix_wrap_array(Bench_otanh_c1),index),fix_mul(fix_get(fix_wrap_array(Bench_otanh_c2),index),x))));
}

fix16_t Bench_osin_table(fix16_t x){
   int index;
   index = int_clip(fix_to_int(fix_mul(0x28309b /* 40.189873 */,x)),0,127);
   return fix_add(fix_get(fix_wrap_array(Bench_osin_table_c0),index),fix_mul(x,fix_add(fix_get(fix_wrap_array(Bench_osin_table_c1),index),fix_mul(fix_get(fix_wrap_array(Bench_osin_table_c2),index),x))));
}

fix16_t Bench_osin(fix16_t x){
   return Bench_osin_table((x % 0x3243f /* 3.141593 */));
}

void Bench__ctx_type_6_init(Bench__ctx_type_6 &_output_){
   Bench__ctx_type_6 _ctx;
   _ctx.y1 = 0x0 /* 0.000000 */;
   _ctx.x1 = 0x0 /* 0.000000 */;
   _output_ = _ctx;
   return ;
}

void Bench_dcblock_init(Bench__ctx_type_6 &_output_){
   Bench__ctx_type_6_init(_output_);
   return ;
}

fix16_t Bench_dcblock(Bench__ctx_type_6 &_ctx, fix16_t x0){
   fix16_t y0;
   y0 = fix_add(fix_add(x0,(- _ctx.x1)),fix_mul(_ctx.y1,0xfeb8 /* 0.995000 */));
   _ctx.x1 = x0;
   _ctx.y1 = y0;
   return y0;
}

void Bench__ctx_type_7_init(Bench__ctx_type_7 &_output_){
   Bench__ctx_type_7 _ctx;
   _ctx.pre_x = 0x0 /* 0.000000 */;
   _output_ = _ctx;
   return ;
}

void Bench_change_init(Bench__ctx_type_7 &_output_){
   Bench__ctx_type_7_init(_output_);
   return ;
}

uint8_t Bench_change(Bench__ctx_type_7 &_ctx, fix16_t x){
   uint8_t v;
   v = (_ctx.pre_x != x);
   _ctx.pre_x = x;
   return v;
}

void Bench__ctx_type_8_init(Bench__ctx_type_8 &_output_){
   Bench__ctx_type_8 _ctx;
   _ctx.phase = 0x0 /* 0.000000 */;
   _ctx.inc = 0x0 /* 0.000000 */;
   Bench__ctx_type_7_init(_ctx._inst9);
   Bench_init(_ctx);
   _output_ = _ctx;
   return ;
}

void Bench_osc_saw_init(Bench__ctx_type_8 &_output_){
   Bench__ctx_type_8_init(_output_);
   return ;
}

fix16_t Bench_osc_saw(Bench__ctx_type_8 &_ctx, fix16_t cv){
   uint8_t _cond_50;
   _cond_50 = Bench_change(_ctx._inst9,cv);
   if(_cond_50){
      _ctx.inc = Bench_cvToRate(cv);
   }
   fix16_t i;
   uint8_t _cond_53;
   _cond_53 = (_ctx.inc < 0x0 /* 0.000000 */);
   if(_cond_53){ i = 0x0 /* 0.000000 */; }
   else
   { i = _ctx.inc; }
   _ctx.phase = (fix_add(fix_mul(0x20000 /* 2.000000 */,_ctx.inc),_ctx.phase) % 0x20000 /* 2.000000 */);
   fix16_t ph;
   ph = fix_add(_ctx.phase,(-0x10000 /* -1.000000 */));
   fix16_t o;
   o = 0x0 /* 0.000000 */;
   uint8_t _cond_52;
   _cond_52 = (ph >= fix_add(0x10000 /* 1.000000 */,(- i)));
   if(_cond_52){
      fix16_t b;
      b = fix_div(fix_add(fix_add(0x10000 /* 1.000000 */,(- i)),(- ph)),i);
      o = fix_add(fix_mul(b,fix_abs(b)),ph);
   }
   else
   {
      uint8_t _cond_51;
      _cond_51 = (ph <= fix_add(i,(-0x10000 /* -1.000000 */)));
      if(_cond_51){
         fix16_t b;
         b = fix_div(fix_add(fix_add(i,(-0x10000 /* -1.000000 */)),(- ph)),i);
         o = fix_add(fix_mul(b,fix_abs(b)),ph);
      }
      else
      {
         o = ph;
      }
   }
   return o;
}

void Bench_init_init(Bench__ctx_type_8 &_output_){
   Bench__ctx_type_8_init(_output_);
   return ;
}

void Bench_init(Bench__ctx_type_8 &_ctx){
   _ctx.inc = 0xc2 /* 0.002966 */;
}

fix16_t Bench_pulse_train(fix16_t m, fix16_t phase){
   fix16_t pi_phase;
   pi_phase = fix_mul(phase,0x3243f /* 3.141593 */);
   fix16_t denominator1;
   denominator1 = Bench_osin(pi_phase);
   fix16_t tmp1;
   tmp1 = 0x0 /* 0.000000 */;
   uint8_t _cond_54;
   _cond_54 = Bench_near_zero(denominator1);
   if(_cond_54){
      tmp1 = 0x10000 /* 1.000000 */;
   }
   else
   {
      tmp1 = Bench_osin(fix_mul(m,pi_phase));
      tmp1 = fix_div(tmp1,fix_mul(m,denominator1));
   }
   return tmp1;
}

void Bench__ctx_type_10_init(Bench__ctx_type_10 &_output_){
   Bench__ctx_type_10 _ctx;
   _ctx.state_triang = 0x0 /* 0.000000 */;
   _ctx.state_saw = 0x0 /* 0.000000 */;
   _ctx.state_pulse = 0x0 /* 0.000000 */;
   _ctx.rate = 0x0 /* 0.000000 */;
   _ctx.phase = 0x0 /* 0.000000 */;
   _ctx.output = 0x0 /* 0.000000 */;
   _ctx.m = 0x0 /* 0.000000 */;
   Bench__ctx_type_6_init(_ctx._inst30);
   Bench__ctx_type_7_init(_ctx._inst22);
   Bench_init_blit(_ctx);
   _output_ = _ctx;
   return ;
}

void Bench_osc_blit_init(Bench__ctx_type_10 &_output_){
   Bench__ctx_type_10_init(_output_);
   return ;
}

fix16_t Bench_osc_blit(Bench__ctx_type_10 &_ctx, fix16_t cv, fix16_t pw, fix16_t wave){
   fix16_t fixed_cv;
   fixed_cv = 0x0 /* 0.000000 */;
   uint8_t _cond_55;
   _cond_55 = (wave < 0x20000 /* 2.000000 */);
   if(_cond_55){
      fixed_cv = cv;
   }
   else
   {
      fixed_cv = fix_add(cv,0x10000 /* 1.000000 */);
   }
   uint8_t _cond_56;
   _cond_56 = Bench_change(_ctx._inst22,fixed_cv);
   if(_cond_56){
      _ctx.rate = Bench_cvToRate(fixed_cv);
      fix16_t p;
      p = fix_div(0x10000 /* 1.000000 */,_ctx.rate);
      fix16_t maxHarmonics;
      maxHarmonics = fix_floor(fix_mul(p,0x8000 /* 0.500000 */));
      _ctx.m = fix_add(fix_mul(0x20000 /* 2.000000 */,maxHarmonics),0x10000 /* 1.000000 */);
   }
   fix16_t shift05;
   shift05 = fix_add(0x8000 /* 0.500000 */,fix_mul(pw,0x7d70 /* 0.490000 */));
   fix16_t shift;
   shift = fix_add(_ctx.phase,shift05);
   uint8_t _cond_57;
   _cond_57 = (shift > 0x10000 /* 1.000000 */);
   if(_cond_57){
      shift = fix_add(shift,(-0x10000 /* -1.000000 */));
   }
   fix16_t tmp1;
   tmp1 = Bench_pulse_train(_ctx.m,_ctx.phase);
   fix16_t tmp2;
   tmp2 = Bench_pulse_train(_ctx.m,shift);
   _ctx.phase = fix_add(_ctx.phase,_ctx.rate);
   uint8_t _cond_58;
   _cond_58 = (_ctx.phase > 0x10000 /* 1.000000 */);
   if(_cond_58){
      _ctx.phase = fix_add(_ctx.phase,(-0x10000 /* -1.000000 */));
   }
   _ctx.state_pulse = fix_clip(fix_add(fix_add(fix_mul(_ctx.state_pulse,0xffdf /* 0.999500 */),tmp1),(- tmp2)),(-0x10000 /* -1.000000 */),0x10000 /* 1.000000 */);
   _ctx.state_saw = fix_clip(fix_add(fix_mul(_ctx.state_saw,0xffdf /* 0.999500 */),fix_mul(fix_div(fix_add(fix_add(tmp1,tmp2),fix_mul((-0x20000 /* -2.000000 */),_ctx.rate)),shift05),0x8000 /* 0.500000 */)),(-0x10000 /* -1.000000 */),0x10000 /* 1.000000 */);
   _ctx.state_triang = fix_clip(fix_add(fix_mul(_ctx.state_triang,0xffdf /* 0.999500 */),fix_mul(fix_mul(0x20000 /* 2.000000 */,_ctx.state_pulse),_ctx.rate)),(-0x10000 /* -1.000000 */),0x10000 /* 1.000000 */);
   uint8_t _cond_60;
   _cond_60 = (wave < 0x10000 /* 1.000000 */);
   if(_cond_60){
      _ctx.output = _ctx.state_pulse;
   }
   else
   {
      uint8_t _cond_59;
      _cond_59 = (wave < 0x20000 /* 2.000000 */);
      if(_cond_59){
         _ctx.output = fix_mul(0x20000 /* 2.000000 */,_ctx.state_saw);
      }
      else
      {
         _ctx.output = fix_mul(fix_mul(0x20000 /* 2.000000 */,_ctx.state_triang),fix_add(0x10000 /* 1.000000 */,pw));
      }
   }
   _ctx.output = Bench_dcblock(_ctx._inst30,_ctx.output);
   return fix_clip(_ctx.output,(-0x10000 /* -1.000000 */),0x10000 /* 1.000000 */);
}

void Bench_init_blit_init(Bench__ctx_type_10 &_output_){
   Bench__ctx_type_10_init(_output_);
   return ;
}

void Bench_init_blit(Bench__ctx_type_10 &_ctx){
   _ctx.rate = 0xc2 /* 0.002966 */;
   fix16_t p;
   p = fix_div(0x10000 /* 1.000000 */,_ctx.rate);
   fix16_t maxHarmonics;
   maxHarmonics = fix_floor(fix_mul(p,0x8000 /* 0.500000 */));
   _ctx.m = fix_add(fix_mul(0x20000 /* 2.000000 */,maxHarmonics),0x10000 /* 1.000000 */);
}

fix16_t Bench_map(fix16_t x, fix16_t x0, fix16_t x1, fix16_t y0, fix16_t y1){
   return fix_add(fix_div(fix_mul(fix_add(x,(- x0)),fix_add(y1,(- y0))),fix_add(x1,(- x0))),y0);
}

void Bench__ctx_type_12_init(Bench__ctx_type_12 &_output_){
   Bench__ctx_type_12 _ctx;
   _ctx.dlow = 0x0 /* 0.000000 */;
   _ctx.dband = 0x0 /* 0.000000 */;
   _output_ = _ctx;
   return ;
}

void Bench_svf_step_init(Bench__ctx_type_12 &_output_){
   Bench__ctx_type_12_init(_output_);
   return ;
}

fix16_t Bench_svf_step(Bench__ctx_type_12 &_ctx, fix16_t input, fix16_t g, fix16_t q, int sel){
   fix16_t low;
   low = fix_add(_ctx.dlow,fix_mul(g,_ctx.dband));
   fix16_t high;
   high = fix_add(fix_add(input,(- low)),(- fix_mul(q,_ctx.dband)));
   fix16_t band;
   band = fix_add(fix_mul(g,high),_ctx.dband);
   fix16_t notch;
   notch = fix_add(high,low);
   _ctx.dband = fix_mul(0x100000 /* 16.000000 */,Bench_otanh(fix_mul(band,0x1000 /* 0.062500 */)));
   _ctx.dlow = fix_mul(0x100000 /* 16.000000 */,Bench_otanh(fix_mul(low,0x1000 /* 0.062500 */)));
   fix16_t output;
   uint8_t _cond_61;
   _cond_61 = (sel == 0);
   if(_cond_61){ output = low; }
   else
   {
      uint8_t _cond_63;
      _cond_63 = (sel == 1);
      if(_cond_63){ output = high; }
      else
      {
         uint8_t _cond_64;
         _cond_64 = (sel == 2);
         if(_cond_64){ output = band; }
         else
         { output = notch; }
      }
   }
   return output;
}

fix16_t Bench_cv_to_g(fix16_t cv){
   int index;
   index = int_clip(fix_to_int(fix_mul(0x18ccc /* 1.550000 */,fix_add(cv,0xa0000 /* 10.000000 */))),0,31);
   return fix_add(fix_get(fix_wrap_array(Bench_cv_to_g_c0),index),fix_mul(cv,fix_add(fix_get(fix_wrap_array(Bench_cv_to_g_c1),index),fix_mul(fix_get(fix_wrap_array(Bench_cv_to_g_c2),index),cv))));
}

void Bench__ctx_type_14_init(Bench__ctx_type_14 &_output_){
   Bench__ctx_type_14 _ctx;
   Bench__ctx_type_12_init(_ctx.step);
   _ctx.g = 0x0 /* 0.000000 */;
   Bench__ctx_type_7_init(_ctx._inst36);
   _output_ = _ctx;
   return ;
}

void Bench_flt_svf_init(Bench__ctx_type_14 &_output_){
   Bench__ctx_type_14_init(_output_);
   return ;
}

fix16_t Bench_flt_svf(Bench__ctx_type_14 &_ctx, fix16_t input, fix16_t cv, fix16_t q, int sel){
   cv = fix_clip(cv,(-0x10000 /* -1.000000 */),0x60000 /* 6.000000 */);
   q = fix_clip(q,0x0 /* 0.000000 */,0x50000 /* 5.000000 */);
   fix16_t fix_q;
   fix_q = Bench_map(q,0x0 /* 0.000000 */,0x50000 /* 5.000000 */,0x20000 /* 2.000000 */,0x0 /* 0.000000 */);
   uint8_t _cond_62;
   _cond_62 = Bench_change(_ctx._inst36,cv);
   if(_cond_62){
      _ctx.g = Bench_cv_to_g(cv);
   }
   fix16_t x1;
   x1 = Bench_svf_step(_ctx.step,input,_ctx.g,fix_q,sel);
   fix16_t x2;
   x2 = Bench_svf_step(_ctx.step,input,_ctx.g,fix_q,sel);
   return fix_mul(fix_add(x1,x2),0x8000 /* 0.500000 */);
}

void Bench__ctx_type_15_init(Bench__ctx_type_15 &_output_){
   Bench__ctx_type_15 _ctx;
   Bench__ctx_type_14_init(_ctx._inst44);
   Bench__ctx_type_10_init(_ctx._inst43);
   Bench__ctx_type_8_init(_ctx._inst42);
   Bench__ctx_type_8_init(_ctx._inst41);
   Bench__ctx_type_8_init(_ctx._inst40);
   Bench__ctx_type_8_init(_ctx._inst39);
   _output_ = _ctx;
   return ;
}

void Bench_process_init(Bench__ctx_type_15 &_output_){
   Bench__ctx_type_15_init(_output_);
   return ;
}

fix16_t Bench_process(Bench__ctx_type_15 &_ctx){
   fix16_t lfo1;
   lfo1 = Bench_osc_saw(_ctx._inst39,(-0x70000 /* -7.000000 */));
   fix16_t lfo2;
   lfo2 = (- Bench_osc_saw(_ctx._inst40,(-0x88000 /* -8.500000 */)));
   fix16_t lfo3;
   lfo3 = Bench_osc_saw(_ctx._inst41,(-0x90000 /* -9.000000 */));
   fix16_t lfo4;
   lfo4 = Bench_osc_saw(_ctx._inst42,(-0x98000 /* -9.500000 */));
   fix16_t o1;
   o1 = Bench_osc_blit(_ctx._inst43,lfo1,lfo2,fix_abs(fix_mul(lfo3,0x20000 /* 2.000000 */)));
   fix16_t o;
   o = Bench_flt_svf(_ctx._inst44,o1,fix_abs(fix_mul(lfo4,0x50000 /* 5.000000 */)),0x8000 /* 0.500000 */,0);
   return o;
}

void Bench_noteOn_init(Bench__ctx_type_15 &_output_){
   Bench__ctx_type_15_init(_output_);
   return ;
}

void Bench_noteOn(Bench__ctx_type_15 &_ctx, int note, int velocity, int channel){
}

void Bench_noteOff_init(Bench__ctx_type_15 &_output_){
   Bench__ctx_type_15_init(_output_);
   return ;
}

void Bench_noteOff(Bench__ctx_type_15 &_ctx, int note, int channel){
}

void Bench_controlChange_init(Bench__ctx_type_15 &_output_){
   Bench__ctx_type_15_init(_output_);
   return ;
}

void Bench_controlChange(Bench__ctx_type_15 &_ctx, int control, int value, int channel){
}

void Bench_default_init(Bench__ctx_type_15 &_output_){
   Bench__ctx_type_15_init(_output_);
   return ;
}

void Bench_default(Bench__ctx_type_15 &_ctx){
}


