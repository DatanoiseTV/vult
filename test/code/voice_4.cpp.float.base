
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#include "voice_4.h"

void Util__ctx_type_0_init(Util__ctx_type_0 &_output_){
   Util__ctx_type_0 _ctx;
   _ctx.pre = false;
   _output_ = _ctx;
   return ;
}

void Util_edge_init(Util__ctx_type_0 &_output_){
   Util__ctx_type_0_init(_output_);
   return ;
}

uint8_t Util_edge(Util__ctx_type_0 &_ctx, uint8_t x){
   uint8_t ret;
   ret = (x && bool_not(_ctx.pre));
   _ctx.pre = x;
   return ret;
}

void Util__ctx_type_1_init(Util__ctx_type_1 &_output_){
   Util__ctx_type_1 _ctx;
   _ctx.pre_x = 0.f;
   _output_ = _ctx;
   return ;
}

void Util_change_init(Util__ctx_type_1 &_output_){
   Util__ctx_type_1_init(_output_);
   return ;
}

uint8_t Util_change(Util__ctx_type_1 &_ctx, float x){
   uint8_t v;
   v = (_ctx.pre_x != x);
   _ctx.pre_x = x;
   return v;
}

float Util_map(float x, float x0, float x1, float y0, float y1){
   return (y0 + (((x + (- x0)) * (y1 + (- y0))) / (x1 + (- x0))));
}

void Util__ctx_type_3_init(Util__ctx_type_3 &_output_){
   Util__ctx_type_3 _ctx;
   _ctx.y1 = 0.f;
   _ctx.x1 = 0.f;
   _output_ = _ctx;
   return ;
}

void Util_dcblock_init(Util__ctx_type_3 &_output_){
   Util__ctx_type_3_init(_output_);
   return ;
}

float Util_dcblock(Util__ctx_type_3 &_ctx, float x0){
   float y0;
   y0 = (x0 + (- _ctx.x1) + (0.995f * _ctx.y1));
   _ctx.x1 = x0;
   _ctx.y1 = y0;
   return y0;
}

void Util__ctx_type_4_init(Util__ctx_type_4 &_output_){
   Util__ctx_type_4 _ctx;
   _ctx.x = 0.f;
   _output_ = _ctx;
   return ;
}

void Util_smooth_init(Util__ctx_type_4 &_output_){
   Util__ctx_type_4_init(_output_);
   return ;
}

float Util_smooth(Util__ctx_type_4 &_ctx, float input){
   _ctx.x = (_ctx.x + (0.005f * (input + (- _ctx.x))));
   return _ctx.x;
}

void Util__ctx_type_5_init(Util__ctx_type_5 &_output_){
   Util__ctx_type_5 _ctx;
   _ctx.x0 = 0.f;
   _output_ = _ctx;
   return ;
}

void Util_average2_init(Util__ctx_type_5 &_output_){
   Util__ctx_type_5_init(_output_);
   return ;
}

float Util_average2(Util__ctx_type_5 &_ctx, float x1){
   float result;
   result = (0.5f * (_ctx.x0 + x1));
   _ctx.x0 = x1;
   return result;
}

float Util_cubic_clipper(float x){
   if(x <= -0.6666666f){
      return -0.6666666f;
   }
   else
   {
      if(x >= 0.6666667f){
         return 0.6666667f;
      }
      else
      {
         return (x + (-0.3333333f * x * x * x));
      }
   }
}

float Util_pitchToRate_1024_raw_c0(int index){
   return Util_pitchToRate_1024_c0[index];
}

float Util_pitchToRate_1024_raw_c1(int index){
   return Util_pitchToRate_1024_c1[index];
}

float Util_pitchToRate_1024_raw_c2(int index){
   return Util_pitchToRate_1024_c2[index];
}

float Util_pitchToRate_1024(float pitch){
   int index;
   index = int_clip(float_to_int((0.2440945f * pitch)),0,31);
   return (float_wrap_array(Util_pitchToRate_1024_c0)[index] + (pitch * (float_wrap_array(Util_pitchToRate_1024_c1)[index] + (pitch * float_wrap_array(Util_pitchToRate_1024_c2)[index]))));
}

float Util_pitchToRate_raw_c0(int index){
   return Util_pitchToRate_c0[index];
}

float Util_pitchToRate_raw_c1(int index){
   return Util_pitchToRate_c1[index];
}

float Util_pitchToRate_raw_c2(int index){
   return Util_pitchToRate_c2[index];
}

float Util_pitchToRate(float pitch){
   int index;
   index = int_clip(float_to_int((0.2440945f * pitch)),0,31);
   return (float_wrap_array(Util_pitchToRate_c0)[index] + (pitch * (float_wrap_array(Util_pitchToRate_c1)[index] + (pitch * float_wrap_array(Util_pitchToRate_c2)[index]))));
}

float Util_cvToPitch(float cv){
   return (24.f + (120.f * cv));
}

float Util_cvToRate_1024_raw_c0(int index){
   return Util_cvToRate_1024_c0[index];
}

float Util_cvToRate_1024_raw_c1(int index){
   return Util_cvToRate_1024_c1[index];
}

float Util_cvToRate_1024_raw_c2(int index){
   return Util_cvToRate_1024_c2[index];
}

float Util_cvToRate_1024(float cv){
   int index;
   index = int_clip(float_to_int((34.4444445f * cv)),0,31);
   return (float_wrap_array(Util_cvToRate_1024_c0)[index] + (cv * (float_wrap_array(Util_cvToRate_1024_c1)[index] + (cv * float_wrap_array(Util_cvToRate_1024_c2)[index]))));
}

float Util_cvToRate_raw_c0(int index){
   return Util_cvToRate_c0[index];
}

float Util_cvToRate_raw_c1(int index){
   return Util_cvToRate_c1[index];
}

float Util_cvToRate_raw_c2(int index){
   return Util_cvToRate_c2[index];
}

float Util_cvToRate(float cv){
   int index;
   index = int_clip(float_to_int((141.1111112f * cv)),0,127);
   return (float_wrap_array(Util_cvToRate_c0)[index] + (cv * (float_wrap_array(Util_cvToRate_c1)[index] + (cv * float_wrap_array(Util_cvToRate_c2)[index]))));
}

float Util_pitchToCv(float pitch){
   return (0.0083334f * (-24.f + pitch));
}

float Util_cvToperiod_raw_c0(int index){
   return Util_cvToperiod_c0[index];
}

float Util_cvToperiod_raw_c1(int index){
   return Util_cvToperiod_c1[index];
}

float Util_cvToperiod_raw_c2(int index){
   return Util_cvToperiod_c2[index];
}

float Util_cvToperiod(float cv){
   int index;
   index = int_clip(float_to_int((31.f * cv)),0,31);
   return (float_wrap_array(Util_cvToperiod_c0)[index] + (cv * (float_wrap_array(Util_cvToperiod_c1)[index] + (cv * float_wrap_array(Util_cvToperiod_c2)[index]))));
}

float Util_cvTokHz_raw_c0(int index){
   return Util_cvTokHz_c0[index];
}

float Util_cvTokHz_raw_c1(int index){
   return Util_cvTokHz_c1[index];
}

float Util_cvTokHz_raw_c2(int index){
   return Util_cvTokHz_c2[index];
}

float Util_cvTokHz(float cv){
   int index;
   index = int_clip(float_to_int((31.f * cv)),0,31);
   return (float_wrap_array(Util_cvTokHz_c0)[index] + (cv * (float_wrap_array(Util_cvTokHz_c1)[index] + (cv * float_wrap_array(Util_cvTokHz_c2)[index]))));
}

void Tricore__ctx_type_0_init(Tricore__ctx_type_0 &_output_){
   Tricore__ctx_type_0 _ctx;
   _ctx.reset_state = false;
   _ctx.reset_phase = 0.f;
   _ctx.rate = 0.f;
   _ctx.phase = 0.f;
   _ctx.direction = false;
   Util__ctx_type_0_init(_ctx._inst23);
   Util__ctx_type_0_init(_ctx._inst22);
   Util__ctx_type_1_init(_ctx._inst20);
   Tricore_default(_ctx);
   _output_ = _ctx;
   return ;
}

void Tricore_process_init(Tricore__ctx_type_0 &_output_){
   Tricore__ctx_type_0_init(_output_);
   return ;
}

float Tricore_process(Tricore__ctx_type_0 &_ctx, float cv, float reset, float disable){
   float out;
   out = 0.f;
   if(Util_change(_ctx._inst20,cv)){
      _ctx.rate = (4.f * Util_cvToRate_1024(cv));
   }
   float new_phase;
   float _if_158;
   if(_ctx.direction){
      _if_158 = _ctx.rate;
   }
   else
   {
      _if_158 = (- _ctx.rate);
   }
   new_phase = (_ctx.phase + _if_158);
   uint8_t bdisable;
   bdisable = (disable > 0.5f);
   if(Util_edge(_ctx._inst22,(reset > 0.f)) || Util_edge(_ctx._inst23,bdisable)){
      _ctx.reset_phase = _ctx.phase;
      _ctx.reset_state = true;
      new_phase = 0.f;
   }
   if(new_phase > 1024.f){
      new_phase = (1024.f + (- (-1024.f + new_phase)));
      _ctx.direction = false;
   }
   else
   {
      if(new_phase < -1024.f){
         _ctx.direction = true;
      }
   }
   if(bdisable){
      _ctx.phase = 0.f;
   }
   else
   {
      _ctx.phase = new_phase;
   }
   if(_ctx.reset_state){
      if((fabsf(_ctx.reset_phase) > 10.f) || bdisable){
         float reset_speed;
         if(bdisable){
            reset_speed = 0.01f;
         }
         else
         {
            reset_speed = 0.5f;
         }
         _ctx.reset_phase = (_ctx.reset_phase + (- (_ctx.reset_phase * reset_speed)));
      }
      else
      {
         uint8_t _cond_162;
         _cond_162 = (_ctx.reset_phase > 10.f);
         if(bool_not(_cond_162)){
            _ctx.reset_phase = 0.f;
         }
         _ctx.reset_state = false;
         _ctx.direction = true;
      }
      out = _ctx.reset_phase;
   }
   out = (_ctx.phase + out);
   return (0.0009766f * out);
}

void Tricore_noteOn_init(Tricore__ctx_type_0 &_output_){
   Tricore__ctx_type_0_init(_output_);
   return ;
}

void Tricore_noteOn(Tricore__ctx_type_0 &_ctx, int note, int velocity, int channel){
}

void Tricore_noteOff_init(Tricore__ctx_type_0 &_output_){
   Tricore__ctx_type_0_init(_output_);
   return ;
}

void Tricore_noteOff(Tricore__ctx_type_0 &_ctx, int note, int channel){
}

void Tricore_controlChange_init(Tricore__ctx_type_0 &_output_){
   Tricore__ctx_type_0_init(_output_);
   return ;
}

void Tricore_controlChange(Tricore__ctx_type_0 &_ctx, int control, int value, int channel){
}

void Tricore_default_init(Tricore__ctx_type_0 &_output_){
   Tricore__ctx_type_0_init(_output_);
   return ;
}

void Tricore_default(Tricore__ctx_type_0 &_ctx){
   _ctx.rate = 0.7593668f;
}

float Saturate_soft_tanh_table_raw_c0(int index){
   return Saturate_soft_tanh_table_c0[index];
}

float Saturate_soft_tanh_table_raw_c1(int index){
   return Saturate_soft_tanh_table_c1[index];
}

float Saturate_soft_tanh_table_raw_c2(int index){
   return Saturate_soft_tanh_table_c2[index];
}

float Saturate_soft_tanh_table(float x){
   int index;
   index = int_clip(float_to_int((5.f * (24.f + x))),0,240);
   return (float_wrap_array(Saturate_soft_tanh_table_c0)[index] + (x * (float_wrap_array(Saturate_soft_tanh_table_c1)[index] + (x * float_wrap_array(Saturate_soft_tanh_table_c2)[index]))));
}

float Saturate_soft_process(float x){
   return Saturate_soft_tanh_table(x);
}

void Saturate_soft_noteOn(int note, int velocity, int channel){
}

void Saturate_soft_noteOff(int note, int channel){
}

void Saturate_soft_controlChange(int control, int value, int channel){
}

void Saturate_soft_default(){
}

float Svf_calc_g_raw_c0(int index){
   return Svf_calc_g_c0[index];
}

float Svf_calc_g_raw_c1(int index){
   return Svf_calc_g_c1[index];
}

float Svf_calc_g_raw_c2(int index){
   return Svf_calc_g_c2[index];
}

float Svf_calc_g(float cv){
   int index;
   index = int_clip(float_to_int((141.1111112f * cv)),0,127);
   return (float_wrap_array(Svf_calc_g_c0)[index] + (cv * (float_wrap_array(Svf_calc_g_c1)[index] + (cv * float_wrap_array(Svf_calc_g_c2)[index]))));
}

void Svf__ctx_type_4_init(Svf__ctx_type_4 &_output_){
   Svf__ctx_type_4 _ctx;
   _ctx.z2 = 0.f;
   _ctx.z1 = 0.f;
   _ctx.inv_den = 0.f;
   _ctx.g = 0.f;
   Util__ctx_type_1_init(_ctx._inst44);
   Util__ctx_type_1_init(_ctx._inst43);
   _ctx.R = 0.f;
   Svf_default(_ctx);
   _output_ = _ctx;
   return ;
}

void Svf_process_init(Svf__ctx_type_4 &_output_){
   Svf__ctx_type_4_init(_output_);
   return ;
}

float Svf_process(Svf__ctx_type_4 &_ctx, float x, float cv, float q, int sel){
   q = (0.5f + q);
   if(Util_change(_ctx._inst43,cv) || Util_change(_ctx._inst44,q)){
      _ctx.g = Svf_calc_g(cv);
      _ctx.R = (1.f / (2.f * (1e-07f + q)));
      _ctx.inv_den = (1.f / (1.f + (2.f * _ctx.R * _ctx.g) + (_ctx.g * _ctx.g)));
   }
   float high;
   high = (_ctx.inv_den * (x + (- _ctx.z2) + (- (_ctx.z1 * (_ctx.g + (2.f * _ctx.R))))));
   float band;
   band = (_ctx.z1 + (_ctx.g * high));
   float low;
   low = (_ctx.z2 + (_ctx.g * band));
   float notch;
   notch = (high + low);
   _ctx.z1 = (band + (_ctx.g * high));
   _ctx.z2 = (low + (_ctx.g * band));
   float output;
   switch(sel) {
      case 0:
         output = low;
      break;
      case 1:
         output = high;
      break;
      case 2:
         output = band;
      break;
    default: 
      output = notch;
   }
   return Saturate_soft_process(output);
}

void Svf_noteOn_init(Svf__ctx_type_4 &_output_){
   Svf__ctx_type_4_init(_output_);
   return ;
}

void Svf_noteOn(Svf__ctx_type_4 &_ctx, int note, int velocity, int channel){
}

void Svf_noteOff_init(Svf__ctx_type_4 &_output_){
   Svf__ctx_type_4_init(_output_);
   return ;
}

void Svf_noteOff(Svf__ctx_type_4 &_ctx, int note, int channel){
}

void Svf_controlChange_init(Svf__ctx_type_4 &_output_){
   Svf__ctx_type_4_init(_output_);
   return ;
}

void Svf_controlChange(Svf__ctx_type_4 &_ctx, int control, int value, int channel){
}

void Svf_default_init(Svf__ctx_type_4 &_output_){
   Svf__ctx_type_4_init(_output_);
   return ;
}

void Svf_default(Svf__ctx_type_4 &_ctx){
   _ctx.g = 0.0023298f;
   _ctx.R = 1.f;
   _ctx.inv_den = (1.f / (1.f + (_ctx.g * _ctx.g)));
}

float Saturate_tanh_table_raw_c0(int index){
   return Saturate_tanh_table_c0[index];
}

float Saturate_tanh_table_raw_c1(int index){
   return Saturate_tanh_table_c1[index];
}

float Saturate_tanh_table_raw_c2(int index){
   return Saturate_tanh_table_c2[index];
}

float Saturate_tanh_table(float x){
   int index;
   index = int_clip(float_to_int((5.f * (24.f + x))),0,240);
   return (float_wrap_array(Saturate_tanh_table_c0)[index] + (x * (float_wrap_array(Saturate_tanh_table_c1)[index] + (x * float_wrap_array(Saturate_tanh_table_c2)[index]))));
}

float Saturate_process(float x){
   return Saturate_tanh_table(x);
}

void Saturate_noteOn(int note, int velocity, int channel){
}

void Saturate_noteOff(int note, int channel){
}

void Saturate_controlChange(int control, int value, int channel){
}

void Saturate_default(){
}

void Lfo__ctx_type_0_init(Lfo__ctx_type_0 &_output_){
   Lfo__ctx_type_0 _ctx;
   _ctx.x4 = 0.f;
   _ctx.x3 = 0.f;
   _ctx.x2 = 0.f;
   _output_ = _ctx;
   return ;
}

void Lfo_soft_init(Lfo__ctx_type_0 &_output_){
   Lfo__ctx_type_0_init(_output_);
   return ;
}

float Lfo_soft(Lfo__ctx_type_0 &_ctx, float x1){
   float o;
   o = (0.25f * (_ctx.x2 + _ctx.x3 + _ctx.x4 + x1));
   float _tmp_166_0;
   _tmp_166_0 = x1;
   float _tmp_166_1;
   _tmp_166_1 = _ctx.x2;
   float _tmp_166_2;
   _tmp_166_2 = _ctx.x3;
   _ctx.x2 = _tmp_166_0;
   _ctx.x3 = _tmp_166_1;
   _ctx.x4 = _tmp_166_2;
   return o;
}

void Lfo__ctx_type_1_init(Lfo__ctx_type_1 &_output_){
   Lfo__ctx_type_1 _ctx;
   _ctx.rate = 0.f;
   _ctx.phase = 0.f;
   Lfo__ctx_type_0_init(_ctx._inst62);
   Util__ctx_type_0_init(_ctx._inst60);
   Util__ctx_type_1_init(_ctx._inst58);
   _output_ = _ctx;
   return ;
}

void Lfo_process_init(Lfo__ctx_type_1 &_output_){
   Lfo__ctx_type_1_init(_output_);
   return ;
}

float Lfo_process(Lfo__ctx_type_1 &_ctx, float cv, float shape, float reset){
   if(Util_change(_ctx._inst58,cv)){
      _ctx.rate = Util_cvToRate((-0.3f + cv));
   }
   _ctx.phase = (_ctx.phase + _ctx.rate);
   if(_ctx.phase > 2.f){
      _ctx.phase = (-2.f + _ctx.phase);
   }
   uint8_t breset;
   breset = (reset > 0.f);
   if(Util_edge(_ctx._inst60,breset)){
      _ctx.phase = 0.f;
   }
   float tmp;
   tmp = (-1.f + _ctx.phase);
   float o;
   if(shape < 1.f){
      o = tmp;
   }
   else
   {
      if(shape < 2.f){
         o = (-1.f + (2.f * fabsf(tmp)));
      }
      else
      {
         if(tmp > 0.f){
            o = 1.f;
         }
         else
         {
            o = 0.f;
         }
      }
   }
   return Lfo_soft(_ctx._inst62,o);
}

void Lfo_noteOn_init(Lfo__ctx_type_1 &_output_){
   Lfo__ctx_type_1_init(_output_);
   return ;
}

void Lfo_noteOn(Lfo__ctx_type_1 &_ctx, int note, int velocity, int channel){
}

void Lfo_noteOff_init(Lfo__ctx_type_1 &_output_){
   Lfo__ctx_type_1_init(_output_);
   return ;
}

void Lfo_noteOff(Lfo__ctx_type_1 &_ctx, int note, int channel){
}

void Lfo_controlChange_init(Lfo__ctx_type_1 &_output_){
   Lfo__ctx_type_1_init(_output_);
   return ;
}

void Lfo_controlChange(Lfo__ctx_type_1 &_ctx, int control, int value, int channel){
}

void Lfo_default_init(Lfo__ctx_type_1 &_output_){
   Lfo__ctx_type_1_init(_output_);
   return ;
}

void Lfo_default(Lfo__ctx_type_1 &_ctx){
}

float Tables_nsine_raw_c0(int index){
   return Tables_nsine_c0[index];
}

float Tables_nsine_raw_c1(int index){
   return Tables_nsine_c1[index];
}

float Tables_nsine_raw_c2(int index){
   return Tables_nsine_c2[index];
}

float Tables_nsine(float x){
   int index;
   index = int_clip(float_to_int((127.f * x)),0,127);
   return (float_wrap_array(Tables_nsine_c0)[index] + (x * (float_wrap_array(Tables_nsine_c1)[index] + (x * float_wrap_array(Tables_nsine_c2)[index]))));
}

void Phase__ctx_type_0_init(Phase__ctx_type_0 &_output_){
   Phase__ctx_type_0 _ctx;
   _ctx.rate = 0.f;
   _ctx.phase = 0.f;
   Util__ctx_type_0_init(_ctx._inst71);
   Util__ctx_type_1_init(_ctx._inst69);
   Phase_default(_ctx);
   _output_ = _ctx;
   return ;
}

void Phase_process_init(Phase__ctx_type_0 &_output_){
   Phase__ctx_type_0_init(_output_);
   return ;
}

float Phase_process(Phase__ctx_type_0 &_ctx, float cv, float reset){
   if(Util_change(_ctx._inst69,cv)){
      _ctx.rate = Util_cvToRate_1024(cv);
   }
   if(Util_edge(_ctx._inst71,(reset > 0.5f))){
      _ctx.phase = 0.f;
   }
   else
   {
      _ctx.phase = (_ctx.phase + _ctx.rate);
   }
   if(_ctx.phase > 1024.f){
      _ctx.phase = (-1024.f + _ctx.phase);
   }
   return (0.0009766f * _ctx.phase);
}

void Phase_noteOn_init(Phase__ctx_type_0 &_output_){
   Phase__ctx_type_0_init(_output_);
   return ;
}

void Phase_noteOn(Phase__ctx_type_0 &_ctx, int note, int velocity, int channel){
}

void Phase_noteOff_init(Phase__ctx_type_0 &_output_){
   Phase__ctx_type_0_init(_output_);
   return ;
}

void Phase_noteOff(Phase__ctx_type_0 &_ctx, int note, int channel){
}

void Phase_controlChange_init(Phase__ctx_type_0 &_output_){
   Phase__ctx_type_0_init(_output_);
   return ;
}

void Phase_controlChange(Phase__ctx_type_0 &_ctx, int control, int value, int channel){
}

void Phase_default_init(Phase__ctx_type_0 &_output_){
   Phase__ctx_type_0_init(_output_);
   return ;
}

void Phase_default(Phase__ctx_type_0 &_ctx){
   _ctx.rate = 0.7593668f;
}

void Blit__ctx_type_0_init(Blit__ctx_type_0 &_output_){
   Blit__ctx_type_0 _ctx;
   _ctx.scale = 0.f;
   _ctx.m = 0;
   Util__ctx_type_1_init(_ctx._inst77);
   Blit_pulse_start(_ctx);
   _output_ = _ctx;
   return ;
}

void Blit_pulse_train_init(Blit__ctx_type_0 &_output_){
   Blit__ctx_type_0_init(_output_);
   return ;
}

float Blit_pulse_train(Blit__ctx_type_0 &_ctx, float cv, float phase){
   if(Util_change(_ctx._inst77,cv)){
      _ctx.m = (1 + (float_to_int(Util_cvToperiod(cv)) << 1));
      _ctx.scale = (2.f * Util_cvToperiod(cv));
   }
   float pi_phase;
   pi_phase = (0.5f * phase);
   float denominator;
   denominator = Tables_nsine(pi_phase);
   float out;
   out = 0.f;
   if(denominator <= 1e-07f){
      out = 1.f;
   }
   else
   {
      float m_phase;
      m_phase = fmodf((pi_phase * int_to_float(_ctx.m)),1.f);
      float numerator;
      numerator = Tables_nsine(m_phase);
      out = (numerator / (_ctx.scale * denominator));
   }
   return out;
}

void Blit_pulse_start_init(Blit__ctx_type_0 &_output_){
   Blit__ctx_type_0_init(_output_);
   return ;
}

void Blit_pulse_start(Blit__ctx_type_0 &_ctx){
   _ctx.m = 1349;
   _ctx.scale = 1349.4920696f;
}

void Blit__ctx_type_1_init(Blit__ctx_type_1 &_output_){
   Blit__ctx_type_1 _ctx;
   _ctx.state_saw = 0.f;
   _ctx.state_pulse = 0.f;
   _ctx.rate = 0.f;
   _ctx.output = 0.f;
   Util__ctx_type_3_init(_ctx._inst93);
   Blit__ctx_type_0_init(_ctx._inst90);
   Blit__ctx_type_0_init(_ctx._inst89);
   Phase__ctx_type_0_init(_ctx._inst87);
   Util__ctx_type_1_init(_ctx._inst85);
   Blit_init(_ctx);
   _output_ = _ctx;
   return ;
}

void Blit_osc_blit_init(Blit__ctx_type_1 &_output_){
   Blit__ctx_type_1_init(_output_);
   return ;
}

float Blit_osc_blit(Blit__ctx_type_1 &_ctx, float cv, float pw, float wave){
   float fixed_cv;
   fixed_cv = 0.f;
   if(wave < 1.f){
      fixed_cv = cv;
   }
   else
   {
      fixed_cv = (-0.1f + cv);
   }
   if(Util_change(_ctx._inst85,fixed_cv)){
      _ctx.rate = Util_cvToRate(fixed_cv);
   }
   float phase;
   phase = Phase_process(_ctx._inst87,fixed_cv,0.f);
   float shift05;
   shift05 = (0.5f + (0.49f * pw));
   float shift;
   shift = (phase + shift05);
   if(shift > 1.f){
      shift = (-1.f + shift);
   }
   float pulse1;
   pulse1 = Blit_pulse_train(_ctx._inst89,fixed_cv,phase);
   float pulse2;
   pulse2 = Blit_pulse_train(_ctx._inst90,fixed_cv,shift);
   _ctx.state_pulse = (pulse1 + (- pulse2) + (0.9995f * _ctx.state_pulse));
   _ctx.state_saw = ((0.5f * ((pulse1 + pulse2 + (-2.f * _ctx.rate)) / shift05)) + (0.9995f * _ctx.state_saw));
   if(wave < 1.f){
      _ctx.output = _ctx.state_pulse;
   }
   else
   {
      _ctx.output = (2.f * _ctx.state_saw);
   }
   _ctx.output = Util_dcblock(_ctx._inst93,_ctx.output);
   return _ctx.output;
}

void Blit_init_init(Blit__ctx_type_1 &_output_){
   Blit__ctx_type_1_init(_output_);
   return ;
}

void Blit_init(Blit__ctx_type_1 &_ctx){
   _ctx.rate = 0.0007416f;
}

void Blit__ctx_type_2_init(Blit__ctx_type_2 &_output_){
   Blit__ctx_type_2 _ctx;
   Blit__ctx_type_1_init(_ctx._inst96);
   _output_ = _ctx;
   return ;
}

void Blit_process_init(Blit__ctx_type_2 &_output_){
   Blit__ctx_type_2_init(_output_);
   return ;
}

float Blit_process(Blit__ctx_type_2 &_ctx, float cv, float pw, float wave){
   return Blit_osc_blit(_ctx._inst96,cv,pw,wave);
}

void Blit_noteOn_init(Blit__ctx_type_2 &_output_){
   Blit__ctx_type_2_init(_output_);
   return ;
}

void Blit_noteOn(Blit__ctx_type_2 &_ctx, int note, int velocity, int channel){
}

void Blit_noteOff_init(Blit__ctx_type_2 &_output_){
   Blit__ctx_type_2_init(_output_);
   return ;
}

void Blit_noteOff(Blit__ctx_type_2 &_ctx, int note, int channel){
}

void Blit_controlChange_init(Blit__ctx_type_2 &_output_){
   Blit__ctx_type_2_init(_output_);
   return ;
}

void Blit_controlChange(Blit__ctx_type_2 &_ctx, int control, int value, int channel){
}

void Blit_default_init(Blit__ctx_type_2 &_output_){
   Blit__ctx_type_2_init(_output_);
   return ;
}

void Blit_default(Blit__ctx_type_2 &_ctx){
}

void Adsr__ctx_type_0_init(Adsr__ctx_type_0 &_output_){
   Adsr__ctx_type_0 _ctx;
   _ctx.target = 0.f;
   _ctx.state = 0;
   _ctx.scale = 0.f;
   _ctx.rate = 0.f;
   _ctx.out = 0.f;
   Util__ctx_type_4_init(_ctx._inst110);
   Util__ctx_type_0_init(_ctx._inst103);
   _output_ = _ctx;
   return ;
}

void Adsr_do_init(Adsr__ctx_type_0 &_output_){
   Adsr__ctx_type_0_init(_output_);
   return ;
}

float Adsr_do(Adsr__ctx_type_0 &_ctx, float gate, float a, float d, float s, float r){
   float a_rate;
   a_rate = (1.f / (0.01f + (100.f * a)));
   float d_rate;
   d_rate = (1.f / (0.01f + (100.f * d)));
   float r_rate;
   r_rate = (1.f / (0.01f + (100.f * r)));
   _ctx.out = (_ctx.out + (0.004f * _ctx.rate * (_ctx.target + (- _ctx.out))));
   uint8_t bgate;
   bgate = (gate > 0.f);
   if(_ctx.state == 0){
      if(Util_edge(_ctx._inst103,bgate)){
         _ctx.state = 1;
         _ctx.scale = (0.2f * gate);
      }
      _ctx.rate = r_rate;
      _ctx.target = 0.f;
   }
   if(_ctx.state == 1){
      if(bool_not(bgate)){
         _ctx.state = 0;
      }
      if(_ctx.out > 1024.f){
         _ctx.state = 2;
      }
      _ctx.rate = a_rate;
      _ctx.target = 1228.8f;
   }
   if(_ctx.state == 2){
      if(bool_not(bgate)){
         _ctx.state = 0;
      }
      _ctx.rate = d_rate;
      _ctx.target = (1024.f * s);
   }
   return (Util_smooth(_ctx._inst110,_ctx.scale) * float_clip((0.0009766f * _ctx.out),0.f,1.f));
}

void Adsr__ctx_type_1_init(Adsr__ctx_type_1 &_output_){
   Adsr__ctx_type_1 _ctx;
   _ctx.knob4 = 0.f;
   _ctx.knob3 = 0.f;
   _ctx.knob2 = 0.f;
   _ctx.knob1 = 0.f;
   Adsr__ctx_type_0_init(_ctx._inst112);
   _output_ = _ctx;
   return ;
}

void Adsr_process_init(Adsr__ctx_type_1 &_output_){
   Adsr__ctx_type_1_init(_output_);
   return ;
}

float Adsr_process(Adsr__ctx_type_1 &_ctx, float gate){
   return Adsr_do(_ctx._inst112,gate,_ctx.knob1,_ctx.knob2,_ctx.knob3,_ctx.knob4);
}

void Adsr_noteOn_init(Adsr__ctx_type_1 &_output_){
   Adsr__ctx_type_1_init(_output_);
   return ;
}

void Adsr_noteOn(Adsr__ctx_type_1 &_ctx, int note, int velocity, int channel){
}

void Adsr_noteOff_init(Adsr__ctx_type_1 &_output_){
   Adsr__ctx_type_1_init(_output_);
   return ;
}

void Adsr_noteOff(Adsr__ctx_type_1 &_ctx, int note, int channel){
}

void Adsr_controlChange_init(Adsr__ctx_type_1 &_output_){
   Adsr__ctx_type_1_init(_output_);
   return ;
}

void Adsr_controlChange(Adsr__ctx_type_1 &_ctx, int control, int value, int channel){
   if(control == 1){
      _ctx.knob1 = (0.0078741f * int_to_float(value));
   }
   if(control == 2){
      _ctx.knob2 = (0.0078741f * int_to_float(value));
   }
   if(control == 3){
      _ctx.knob3 = (0.0078741f * int_to_float(value));
   }
   if(control == 4){
      _ctx.knob4 = (0.0078741f * int_to_float(value));
   }
}

void Adsr_default_init(Adsr__ctx_type_1 &_output_){
   Adsr__ctx_type_1_init(_output_);
   return ;
}

void Adsr_default(Adsr__ctx_type_1 &_ctx){
   _ctx.knob1 = 0.f;
   _ctx.knob2 = 0.5f;
   _ctx.knob3 = 1.f;
   _ctx.knob4 = 0.5f;
}

void Voice_4__ctx_type_0_init(Voice_4__ctx_type_0 &_output_){
   Voice_4__ctx_type_0 _ctx;
   _ctx.sustain = 0.f;
   _ctx.release = 0.f;
   _ctx.pw4 = 0.f;
   _ctx.pw3 = 0.f;
   _ctx.pw2 = 0.f;
   _ctx.pw1 = 0.f;
   _ctx.lfo_shape = 0.f;
   _ctx.lfo_reset = 0.f;
   _ctx.lfo_rate = 0.f;
   _ctx.lfo_pw = 0.f;
   _ctx.lfo_flt = 0.f;
   _ctx.lfo_cv = 0.f;
   _ctx.level4 = 0.f;
   _ctx.level3 = 0.f;
   _ctx.level2 = 0.f;
   _ctx.level1 = 0.f;
   _ctx.flt_shape = 0;
   _ctx.flt_res = 0.f;
   _ctx.flt_cut = 0.f;
   _ctx.decay = 0.f;
   _ctx.attack = 0.f;
   Adsr__ctx_type_0_init(_ctx._inst128);
   Svf__ctx_type_4_init(_ctx._inst127);
   Tricore__ctx_type_0_init(_ctx._inst126);
   Blit__ctx_type_2_init(_ctx._inst125);
   Blit__ctx_type_2_init(_ctx._inst124);
   Blit__ctx_type_2_init(_ctx._inst123);
   Lfo__ctx_type_1_init(_ctx._inst122);
   _output_ = _ctx;
   return ;
}

void Voice_4_process_init(Voice_4__ctx_type_0 &_output_){
   Voice_4__ctx_type_0_init(_output_);
   return ;
}

float Voice_4_process(Voice_4__ctx_type_0 &_ctx, float cv, float vel, float gate){
   float lfo;
   lfo = Lfo_process(_ctx._inst122,_ctx.lfo_rate,_ctx.lfo_shape,(_ctx.lfo_reset * gate));
   float mod_pw;
   mod_pw = (_ctx.lfo_pw * lfo);
   float mod_cv;
   mod_cv = (_ctx.lfo_cv * lfo);
   float mod_flt;
   mod_flt = (_ctx.lfo_flt * lfo);
   float o1;
   o1 = Blit_process(_ctx._inst123,(0.0001f + cv + mod_cv),(_ctx.pw1 + mod_pw),0.f);
   float o2;
   o2 = Blit_process(_ctx._inst124,(0.0002f + cv + mod_cv),(_ctx.pw2 + mod_pw),1.f);
   float o3;
   o3 = Blit_process(_ctx._inst125,(_ctx.pw3 + cv + mod_cv),(_ctx.pw1 + mod_pw),0.f);
   float sub;
   sub = Saturate_process(((2.f + (5.f * _ctx.pw4)) * Tricore_process(_ctx._inst126,(cv + mod_cv),0.f,1.f)));
   float o;
   o = ((_ctx.level1 * o1) + (_ctx.level2 * o2) + (_ctx.level3 * o3) + (_ctx.level4 * sub));
   float f;
   f = Svf_process(_ctx._inst127,o,(_ctx.flt_cut + mod_flt),_ctx.flt_res,_ctx.flt_shape);
   float env;
   env = Adsr_do(_ctx._inst128,gate,_ctx.attack,_ctx.decay,_ctx.sustain,_ctx.release);
   return (env * f);
}

void Voice_4_noteOn_init(Voice_4__ctx_type_0 &_output_){
   Voice_4__ctx_type_0_init(_output_);
   return ;
}

void Voice_4_noteOn(Voice_4__ctx_type_0 &_ctx, int note, int velocity, int channel){
}

void Voice_4_noteOff_init(Voice_4__ctx_type_0 &_output_){
   Voice_4__ctx_type_0_init(_output_);
   return ;
}

void Voice_4_noteOff(Voice_4__ctx_type_0 &_ctx, int note, int channel){
}

void Voice_4_controlChange_init(Voice_4__ctx_type_0 &_output_){
   Voice_4__ctx_type_0_init(_output_);
   return ;
}

void Voice_4_controlChange(Voice_4__ctx_type_0 &_ctx, int control, int value, int channel){
   if(control == 30){
      _ctx.level1 = (0.0078741f * int_to_float(value));
   }
   if(control == 31){
      _ctx.level2 = (0.0078741f * int_to_float(value));
   }
   if(control == 32){
      _ctx.level3 = (0.0078741f * int_to_float(value));
   }
   if(control == 33){
      _ctx.level4 = (0.0078741f * int_to_float(value));
   }
   if(control == 34){
      _ctx.pw1 = (0.0078741f * int_to_float(value));
   }
   if(control == 35){
      _ctx.pw2 = (0.0078741f * int_to_float(value));
   }
   if(control == 36){
      _ctx.pw3 = (0.0007875f * int_to_float(value));
   }
   if(control == 37){
      _ctx.pw4 = (0.0078741f * int_to_float(value));
   }
   if(control == 38){
      _ctx.lfo_rate = Util_map(int_to_float(value),0.f,127.f,-0.4f,0.1f);
   }
   if(control == 39){
      _ctx.lfo_shape = (0.0236221f * int_to_float(value));
   }
   if(control == 40){
      _ctx.lfo_pw = Util_map(int_to_float(value),0.f,127.f,-1.f,1.f);
   }
   if(control == 41){
      _ctx.lfo_cv = Util_map(int_to_float(value),0.f,127.f,-0.1f,0.1f);
   }
   if(control == 42){
      _ctx.lfo_flt = Util_map(int_to_float(value),0.f,127.f,-0.3f,0.3f);
   }
   if(control == 43){
      if(value > 0){
         _ctx.lfo_reset = 1.f;
      }
      else
      {
         _ctx.lfo_reset = 0.f;
      }
   }
   if(control == 44){
      _ctx.flt_cut = Util_map(int_to_float(value),0.f,127.f,-0.2f,0.5f);
   }
   if(control == 45){
      _ctx.flt_res = (0.0078741f * int_to_float(value));
   }
   if(control == 46){
      _ctx.flt_shape = ((value << 2) / 127);
   }
   if(control == 47){
      _ctx.attack = (0.0078741f * int_to_float(value));
   }
   if(control == 48){
      _ctx.decay = (0.0078741f * int_to_float(value));
   }
   if(control == 49){
      _ctx.sustain = (0.0078741f * int_to_float(value));
   }
   if(control == 50){
      _ctx.release = (0.0078741f * int_to_float(value));
   }
}

void Voice_4_default_init(Voice_4__ctx_type_0 &_output_){
   Voice_4__ctx_type_0_init(_output_);
   return ;
}

void Voice_4_default(Voice_4__ctx_type_0 &_ctx){
}


