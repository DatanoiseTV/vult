
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#include "voice_4.h"

void Util__ctx_type_0_init(Util__ctx_type_0 &_output_){
   Util__ctx_type_0 _ctx;
   _ctx.pre = 0;
   _output_ = _ctx;
   return ;
}

void Util_edge_init(Util__ctx_type_0 &_output_){
   Util__ctx_type_0_init(_output_);
   return ;
}

uint8_t Util_edge(Util__ctx_type_0 &_ctx, uint8_t x){
   uint8_t ret;
   ret = (x && bool_not(_ctx.pre));
   _ctx.pre = x;
   return ret;
}

void Util__ctx_type_1_init(Util__ctx_type_1 &_output_){
   Util__ctx_type_1 _ctx;
   _ctx.pre_x = 0.000000f;
   _output_ = _ctx;
   return ;
}

void Util_change_init(Util__ctx_type_1 &_output_){
   Util__ctx_type_1_init(_output_);
   return ;
}

uint8_t Util_change(Util__ctx_type_1 &_ctx, float x){
   uint8_t v;
   v = (_ctx.pre_x != x);
   _ctx.pre_x = x;
   return v;
}

float Util_map(float x, float x0, float x1, float y0, float y1){
   return ((((x + (- x0)) * (y1 + (- y0))) / (x1 + (- x0))) + y0);
}

void Util__ctx_type_3_init(Util__ctx_type_3 &_output_){
   Util__ctx_type_3 _ctx;
   _ctx.y1 = 0.000000f;
   _ctx.x1 = 0.000000f;
   _output_ = _ctx;
   return ;
}

void Util_dcblock_init(Util__ctx_type_3 &_output_){
   Util__ctx_type_3_init(_output_);
   return ;
}

float Util_dcblock(Util__ctx_type_3 &_ctx, float x0){
   float y0;
   y0 = (x0 + (- _ctx.x1) + (_ctx.y1 * 0.995000f));
   _ctx.x1 = x0;
   _ctx.y1 = y0;
   return y0;
}

void Util__ctx_type_4_init(Util__ctx_type_4 &_output_){
   Util__ctx_type_4 _ctx;
   _ctx.x = 0.000000f;
   _output_ = _ctx;
   return ;
}

void Util_smooth_init(Util__ctx_type_4 &_output_){
   Util__ctx_type_4_init(_output_);
   return ;
}

float Util_smooth(Util__ctx_type_4 &_ctx, float input){
   _ctx.x = (_ctx.x + ((input + (- _ctx.x)) * 0.005000f));
   return _ctx.x;
}

void Util__ctx_type_5_init(Util__ctx_type_5 &_output_){
   Util__ctx_type_5 _ctx;
   _ctx.x0 = 0.000000f;
   _output_ = _ctx;
   return ;
}

void Util_average2_init(Util__ctx_type_5 &_output_){
   Util__ctx_type_5_init(_output_);
   return ;
}

float Util_average2(Util__ctx_type_5 &_ctx, float x1){
   float result;
   result = ((_ctx.x0 + x1) * 0.500000f);
   _ctx.x0 = x1;
   return result;
}

float Util_pitchToRate_1024(float pitch){
   int index;
   index = int_clip(float_to_int((0.244094f * pitch)),0,31);
   return (float_get(float_wrap_array(Util_pitchToRate_1024_c0),index) + (pitch * (float_get(float_wrap_array(Util_pitchToRate_1024_c1),index) + (float_get(float_wrap_array(Util_pitchToRate_1024_c2),index) * pitch))));
}

float Util_pitchToRate(float pitch){
   int index;
   index = int_clip(float_to_int((0.244094f * pitch)),0,31);
   return (float_get(float_wrap_array(Util_pitchToRate_c0),index) + (pitch * (float_get(float_wrap_array(Util_pitchToRate_c1),index) + (float_get(float_wrap_array(Util_pitchToRate_c2),index) * pitch))));
}

float Util_cvToPitch(float cv){
   return ((cv * 120.000000f) + 24.000000f);
}

float Util_cvToRate_1024(float cv){
   int index;
   index = int_clip(float_to_int((34.444444f * cv)),0,31);
   return (float_get(float_wrap_array(Util_cvToRate_1024_c0),index) + (cv * (float_get(float_wrap_array(Util_cvToRate_1024_c1),index) + (float_get(float_wrap_array(Util_cvToRate_1024_c2),index) * cv))));
}

float Util_cvToRate(float cv){
   int index;
   index = int_clip(float_to_int((34.444444f * cv)),0,31);
   return (float_get(float_wrap_array(Util_cvToRate_c0),index) + (cv * (float_get(float_wrap_array(Util_cvToRate_c1),index) + (float_get(float_wrap_array(Util_cvToRate_c2),index) * cv))));
}

float Util_pitchToCv(float pitch){
   return (0.008333f * ((-24.000000f) + pitch));
}

float Util_cvToperiod(float cv){
   int index;
   index = int_clip(float_to_int((31.000000f * cv)),0,31);
   return (float_get(float_wrap_array(Util_cvToperiod_c0),index) + (cv * (float_get(float_wrap_array(Util_cvToperiod_c1),index) + (float_get(float_wrap_array(Util_cvToperiod_c2),index) * cv))));
}

void Tricore__ctx_type_0_init(Tricore__ctx_type_0 &_output_){
   Tricore__ctx_type_0 _ctx;
   _ctx.reset_state = 0;
   _ctx.reset_phase = 0.000000f;
   _ctx.rate = 0.000000f;
   _ctx.phase = 0.000000f;
   _ctx.direction = 0;
   Util__ctx_type_0_init(_ctx._inst18);
   Util__ctx_type_0_init(_ctx._inst17);
   Util__ctx_type_1_init(_ctx._inst15);
   Tricore_default(_ctx);
   _output_ = _ctx;
   return ;
}

void Tricore_process_init(Tricore__ctx_type_0 &_output_){
   Tricore__ctx_type_0_init(_output_);
   return ;
}

float Tricore_process(Tricore__ctx_type_0 &_ctx, float cv, float reset, float disable){
   float out;
   out = 0.000000f;
   uint8_t _cond_30;
   _cond_30 = Util_change(_ctx._inst15,cv);
   if(_cond_30){
      _ctx.rate = (4.000000f * Util_cvToRate_1024(cv));
   }
   float new_phase;
   float _if_31;
   if(_ctx.direction){ _if_31 = _ctx.rate; }
   else
   { _if_31 = (- _ctx.rate); }
   new_phase = (_ctx.phase + _if_31);
   uint8_t bdisable;
   bdisable = (disable > 0.500000f);
   uint8_t _cond_32;
   _cond_32 = (Util_edge(_ctx._inst17,(reset > 0.000000f)) || Util_edge(_ctx._inst18,bdisable));
   if(_cond_32){
      _ctx.reset_phase = _ctx.phase;
      _ctx.reset_state = 1;
      new_phase = 0.000000f;
   }
   uint8_t _cond_34;
   _cond_34 = (new_phase > 1024.000000f);
   if(_cond_34){
      new_phase = (1024.000000f + (- (new_phase + (-1024.000000f))));
      _ctx.direction = 0;
   }
   else
   {
      uint8_t _cond_33;
      _cond_33 = (new_phase < (-1024.000000f));
      if(_cond_33){
         _ctx.direction = 1;
         new_phase = new_phase;
      }
   }
   if(bdisable){ _ctx.phase = 0.000000f; }
   else
   { _ctx.phase = new_phase; }
   if(_ctx.reset_state){
      uint8_t _cond_36;
      _cond_36 = ((fabsf(_ctx.reset_phase) > 10.000000f) || bdisable);
      if(_cond_36){
         float reset_speed;
         if(bdisable){ reset_speed = 0.010000f; }
         else
         { reset_speed = 0.500000f; }
         _ctx.reset_phase = (_ctx.reset_phase + (- (_ctx.reset_phase * reset_speed)));
      }
      else
      {
         uint8_t _cond_35;
         _cond_35 = (_ctx.reset_phase > 10.000000f);
         if(_cond_35){ _ctx.reset_phase = _ctx.reset_phase; }
         else
         { _ctx.reset_phase = 0.000000f; }
         _ctx.reset_state = 0;
         _ctx.direction = 1;
      }
      out = _ctx.reset_phase;
   }
   out = (out + _ctx.phase);
   return (out * 0.000977f);
}

void Tricore_noteOn_init(Tricore__ctx_type_0 &_output_){
   Tricore__ctx_type_0_init(_output_);
   return ;
}

void Tricore_noteOn(Tricore__ctx_type_0 &_ctx, int note, int velocity, int channel){
}

void Tricore_noteOff_init(Tricore__ctx_type_0 &_output_){
   Tricore__ctx_type_0_init(_output_);
   return ;
}

void Tricore_noteOff(Tricore__ctx_type_0 &_ctx, int note, int channel){
}

void Tricore_controlChange_init(Tricore__ctx_type_0 &_output_){
   Tricore__ctx_type_0_init(_output_);
   return ;
}

void Tricore_controlChange(Tricore__ctx_type_0 &_ctx, int control, int value, int channel){
}

void Tricore_default_init(Tricore__ctx_type_0 &_output_){
   Tricore__ctx_type_0_init(_output_);
   return ;
}

void Tricore_default(Tricore__ctx_type_0 &_ctx){
   _ctx.rate = 0.759367f;
}

float Saturate_soft_table(float x){
   int index;
   index = int_clip(float_to_int((1.500000f * x)),0,9);
   return (float_get(float_wrap_array(Saturate_soft_table_c0),index) + (x * (float_get(float_wrap_array(Saturate_soft_table_c1),index) + (float_get(float_wrap_array(Saturate_soft_table_c2),index) * x))));
}

float Saturate_soft_process(float x){
   uint8_t _cond_46;
   _cond_46 = (x == 0.000000f);
   if(_cond_46){
      return 0.000000f;
   }
   float fixed;
   uint8_t sign;
   uint8_t _cond_48;
   _cond_48 = (x > 0.000000f);
   if(_cond_48){
      fixed = x;
      sign = 0;
   }
   else
   {
      fixed = (- x);
      sign = 1;
   }
   float out;
   out = 0.000000f;
   uint8_t _cond_47;
   _cond_47 = (fixed > 6.000000f);
   if(_cond_47){
      out = 1.000000f;
   }
   else
   {
      out = Saturate_soft_table(fixed);
   }
   if(sign){ out = (- out); }
   else
   { out = out; }
   return out;
}

void Saturate_soft_noteOn(int note, int velocity, int channel){
}

void Saturate_soft_noteOff(int note, int channel){
}

void Saturate_soft_controlChange(int control, int value, int channel){
}

void Saturate_soft_default(){
}

float Svf_calc_g(float cv){
   int index;
   index = int_clip(float_to_int((141.111111f * cv)),0,127);
   return (float_get(float_wrap_array(Svf_calc_g_c0),index) + (cv * (float_get(float_wrap_array(Svf_calc_g_c1),index) + (float_get(float_wrap_array(Svf_calc_g_c2),index) * cv))));
}

void Svf__ctx_type_1_init(Svf__ctx_type_1 &_output_){
   Svf__ctx_type_1 _ctx;
   _ctx.z2 = 0.000000f;
   _ctx.z1 = 0.000000f;
   _ctx.inv_den = 0.000000f;
   _ctx.g = 0.000000f;
   Util__ctx_type_1_init(_ctx._inst54);
   Util__ctx_type_1_init(_ctx._inst53);
   _ctx.R = 0.000000f;
   Svf_default(_ctx);
   _output_ = _ctx;
   return ;
}

void Svf_process_init(Svf__ctx_type_1 &_output_){
   Svf__ctx_type_1_init(_output_);
   return ;
}

float Svf_process(Svf__ctx_type_1 &_ctx, float x, float cv, float q, int sel){
   q = (q + 0.500000f);
   uint8_t _cond_60;
   _cond_60 = (Util_change(_ctx._inst53,cv) || Util_change(_ctx._inst54,q));
   if(_cond_60){
      _ctx.g = Svf_calc_g(cv);
      _ctx.R = (1.000000f / (2.000000f * (q + 0.000000f)));
      _ctx.inv_den = (1.000000f / (1.000000f + (2.000000f * _ctx.R * _ctx.g) + (_ctx.g * _ctx.g)));
   }
   float high;
   high = ((x + (- (((2.000000f * _ctx.R) + _ctx.g) * _ctx.z1)) + (- _ctx.z2)) * _ctx.inv_den);
   float band;
   band = ((_ctx.g * high) + _ctx.z1);
   float low;
   low = ((_ctx.g * band) + _ctx.z2);
   float notch;
   notch = (low + high);
   _ctx.z1 = ((_ctx.g * high) + band);
   _ctx.z2 = ((_ctx.g * band) + low);
   float output;
   uint8_t _cond_61;
   _cond_61 = (sel == 0);
   if(_cond_61){ output = low; }
   else
   {
      uint8_t _cond_62;
      _cond_62 = (sel == 1);
      if(_cond_62){ output = high; }
      else
      {
         uint8_t _cond_63;
         _cond_63 = (sel == 2);
         if(_cond_63){ output = band; }
         else
         { output = notch; }
      }
   }
   return Saturate_soft_process(output);
}

void Svf_noteOn_init(Svf__ctx_type_1 &_output_){
   Svf__ctx_type_1_init(_output_);
   return ;
}

void Svf_noteOn(Svf__ctx_type_1 &_ctx, int note, int velocity, int channel){
}

void Svf_noteOff_init(Svf__ctx_type_1 &_output_){
   Svf__ctx_type_1_init(_output_);
   return ;
}

void Svf_noteOff(Svf__ctx_type_1 &_ctx, int note, int channel){
}

void Svf_controlChange_init(Svf__ctx_type_1 &_output_){
   Svf__ctx_type_1_init(_output_);
   return ;
}

void Svf_controlChange(Svf__ctx_type_1 &_ctx, int control, int value, int channel){
}

void Svf_default_init(Svf__ctx_type_1 &_output_){
   Svf__ctx_type_1_init(_output_);
   return ;
}

void Svf_default(Svf__ctx_type_1 &_ctx){
   _ctx.g = 0.002330f;
   _ctx.R = 1.000000f;
   _ctx.inv_den = (1.000000f / (1.000000f + (_ctx.g * _ctx.g)));
}

float Saturate_table(float x){
   int index;
   index = int_clip(float_to_int((1.500000f * x)),0,9);
   return (float_get(float_wrap_array(Saturate_table_c0),index) + (x * (float_get(float_wrap_array(Saturate_table_c1),index) + (float_get(float_wrap_array(Saturate_table_c2),index) * x))));
}

float Saturate_process(float x){
   uint8_t _cond_73;
   _cond_73 = (x == 0.000000f);
   if(_cond_73){
      return 0.000000f;
   }
   float fixed;
   uint8_t sign;
   uint8_t _cond_75;
   _cond_75 = (x > 0.000000f);
   if(_cond_75){
      fixed = x;
      sign = 0;
   }
   else
   {
      fixed = (- x);
      sign = 1;
   }
   float out;
   out = 0.000000f;
   uint8_t _cond_74;
   _cond_74 = (fixed > 6.000000f);
   if(_cond_74){
      out = 1.000000f;
   }
   else
   {
      out = Saturate_table(fixed);
   }
   if(sign){ out = (- out); }
   else
   { out = out; }
   return out;
}

void Saturate_noteOn(int note, int velocity, int channel){
}

void Saturate_noteOff(int note, int channel){
}

void Saturate_controlChange(int control, int value, int channel){
}

void Saturate_default(){
}

void Lfo__ctx_type_0_init(Lfo__ctx_type_0 &_output_){
   Lfo__ctx_type_0 _ctx;
   _ctx.x4 = 0.000000f;
   _ctx.x3 = 0.000000f;
   _ctx.x2 = 0.000000f;
   _output_ = _ctx;
   return ;
}

void Lfo_soft_init(Lfo__ctx_type_0 &_output_){
   Lfo__ctx_type_0_init(_output_);
   return ;
}

float Lfo_soft(Lfo__ctx_type_0 &_ctx, float x1){
   float o;
   o = ((x1 + _ctx.x2 + _ctx.x3 + _ctx.x4) * 0.250000f);
   float _tmp_89_0;
   _tmp_89_0 = x1;
   float _tmp_89_1;
   _tmp_89_1 = _ctx.x2;
   float _tmp_89_2;
   _tmp_89_2 = _ctx.x3;
   _ctx.x2 = _tmp_89_0;
   _ctx.x3 = _tmp_89_1;
   _ctx.x4 = _tmp_89_2;
   return o;
}

void Lfo__ctx_type_1_init(Lfo__ctx_type_1 &_output_){
   Lfo__ctx_type_1 _ctx;
   _ctx.rate = 0.000000f;
   _ctx.phase = 0.000000f;
   Lfo__ctx_type_0_init(_ctx._inst84);
   Util__ctx_type_0_init(_ctx._inst82);
   Util__ctx_type_1_init(_ctx._inst80);
   _output_ = _ctx;
   return ;
}

void Lfo_process_init(Lfo__ctx_type_1 &_output_){
   Lfo__ctx_type_1_init(_output_);
   return ;
}

float Lfo_process(Lfo__ctx_type_1 &_ctx, float cv, float shape, float reset){
   uint8_t _cond_90;
   _cond_90 = Util_change(_ctx._inst80,cv);
   if(_cond_90){
      _ctx.rate = Util_cvToRate((cv + (-0.300000f)));
   }
   _ctx.phase = fmodf((_ctx.phase + _ctx.rate),2.000000f);
   uint8_t breset;
   breset = (reset > 0.000000f);
   uint8_t _cond_91;
   _cond_91 = Util_edge(_ctx._inst82,breset);
   if(_cond_91){
      _ctx.phase = 0.000000f;
   }
   float tmp;
   tmp = (_ctx.phase + (-1.000000f));
   float o;
   uint8_t _cond_92;
   _cond_92 = (shape < 1.000000f);
   if(_cond_92){ o = tmp; }
   else
   {
      uint8_t _cond_93;
      _cond_93 = (shape < 2.000000f);
      if(_cond_93){ o = ((fabsf(tmp) * 2.000000f) + (-1.000000f)); }
      else
      {
         uint8_t _cond_94;
         _cond_94 = (tmp > 0.000000f);
         if(_cond_94){ o = 1.000000f; }
         else
         { o = 0.000000f; }
      }
   }
   return Lfo_soft(_ctx._inst84,o);
}

void Lfo_noteOn_init(Lfo__ctx_type_1 &_output_){
   Lfo__ctx_type_1_init(_output_);
   return ;
}

void Lfo_noteOn(Lfo__ctx_type_1 &_ctx, int note, int velocity, int channel){
}

void Lfo_noteOff_init(Lfo__ctx_type_1 &_output_){
   Lfo__ctx_type_1_init(_output_);
   return ;
}

void Lfo_noteOff(Lfo__ctx_type_1 &_ctx, int note, int channel){
}

void Lfo_controlChange_init(Lfo__ctx_type_1 &_output_){
   Lfo__ctx_type_1_init(_output_);
   return ;
}

void Lfo_controlChange(Lfo__ctx_type_1 &_ctx, int control, int value, int channel){
}

void Lfo_default_init(Lfo__ctx_type_1 &_output_){
   Lfo__ctx_type_1_init(_output_);
   return ;
}

void Lfo_default(Lfo__ctx_type_1 &_ctx){
}

float Tables_nsine(float x){
   int index;
   index = int_clip(float_to_int((127.000000f * x)),0,127);
   return (float_get(float_wrap_array(Tables_nsine_c0),index) + (x * (float_get(float_wrap_array(Tables_nsine_c1),index) + (float_get(float_wrap_array(Tables_nsine_c2),index) * x))));
}

void Phase__ctx_type_0_init(Phase__ctx_type_0 &_output_){
   Phase__ctx_type_0 _ctx;
   _ctx.rate = 0.000000f;
   _ctx.phase = 0.000000f;
   Util__ctx_type_0_init(_ctx._inst99);
   Util__ctx_type_1_init(_ctx._inst97);
   Phase_default(_ctx);
   _output_ = _ctx;
   return ;
}

void Phase_process_init(Phase__ctx_type_0 &_output_){
   Phase__ctx_type_0_init(_output_);
   return ;
}

float Phase_process(Phase__ctx_type_0 &_ctx, float cv, float reset){
   uint8_t _cond_104;
   _cond_104 = Util_change(_ctx._inst97,cv);
   if(_cond_104){
      _ctx.rate = Util_cvToRate_1024(cv);
   }
   uint8_t _cond_105;
   _cond_105 = Util_edge(_ctx._inst99,(reset > 0.500000f));
   if(_cond_105){ _ctx.phase = 0.000000f; }
   else
   { _ctx.phase = (_ctx.phase + _ctx.rate); }
   uint8_t _cond_106;
   _cond_106 = (_ctx.phase > 1024.000000f);
   if(_cond_106){ _ctx.phase = (_ctx.phase + (-1024.000000f)); }
   else
   { _ctx.phase = _ctx.phase; }
   return (_ctx.phase * 0.000977f);
}

void Phase_noteOn_init(Phase__ctx_type_0 &_output_){
   Phase__ctx_type_0_init(_output_);
   return ;
}

void Phase_noteOn(Phase__ctx_type_0 &_ctx, int note, int velocity, int channel){
}

void Phase_noteOff_init(Phase__ctx_type_0 &_output_){
   Phase__ctx_type_0_init(_output_);
   return ;
}

void Phase_noteOff(Phase__ctx_type_0 &_ctx, int note, int channel){
}

void Phase_controlChange_init(Phase__ctx_type_0 &_output_){
   Phase__ctx_type_0_init(_output_);
   return ;
}

void Phase_controlChange(Phase__ctx_type_0 &_ctx, int control, int value, int channel){
}

void Phase_default_init(Phase__ctx_type_0 &_output_){
   Phase__ctx_type_0_init(_output_);
   return ;
}

void Phase_default(Phase__ctx_type_0 &_ctx){
   _ctx.rate = 0.759367f;
}

void Blit__ctx_type_0_init(Blit__ctx_type_0 &_output_){
   Blit__ctx_type_0 _ctx;
   _ctx.scale = 0.000000f;
   _ctx.m = 0;
   Util__ctx_type_1_init(_ctx._inst108);
   Blit_pulse_start(_ctx);
   _output_ = _ctx;
   return ;
}

void Blit_pulse_train_init(Blit__ctx_type_0 &_output_){
   Blit__ctx_type_0_init(_output_);
   return ;
}

float Blit_pulse_train(Blit__ctx_type_0 &_ctx, float cv, float phase){
   uint8_t _cond_132;
   _cond_132 = Util_change(_ctx._inst108,cv);
   if(_cond_132){
      _ctx.m = ((2 * float_to_int(Util_cvToperiod(cv))) + 1);
      _ctx.scale = (2.000000f * Util_cvToperiod(cv));
   }
   float pi_phase;
   pi_phase = (phase * 0.500000f);
   float denominator;
   denominator = Tables_nsine(pi_phase);
   float out;
   out = 0.000000f;
   uint8_t _cond_133;
   _cond_133 = (denominator <= 0.000000f);
   if(_cond_133){
      out = 1.000000f;
   }
   else
   {
      float m_phase;
      m_phase = fmodf((int_to_float(_ctx.m) * pi_phase),1.000000f);
      float numerator;
      numerator = Tables_nsine(m_phase);
      out = (numerator / (_ctx.scale * denominator));
   }
   return out;
}

void Blit_pulse_start_init(Blit__ctx_type_0 &_output_){
   Blit__ctx_type_0_init(_output_);
   return ;
}

void Blit_pulse_start(Blit__ctx_type_0 &_ctx){
   _ctx.m = 1349;
   _ctx.scale = 1349.492070f;
}

void Blit__ctx_type_1_init(Blit__ctx_type_1 &_output_){
   Blit__ctx_type_1 _ctx;
   _ctx.state_saw = 0.000000f;
   _ctx.state_pulse = 0.000000f;
   _ctx.rate = 0.000000f;
   _ctx.output = 0.000000f;
   Util__ctx_type_3_init(_ctx._inst124);
   Blit__ctx_type_0_init(_ctx._inst121);
   Blit__ctx_type_0_init(_ctx._inst120);
   Phase__ctx_type_0_init(_ctx._inst118);
   Util__ctx_type_1_init(_ctx._inst116);
   Blit_init(_ctx);
   _output_ = _ctx;
   return ;
}

void Blit_osc_blit_init(Blit__ctx_type_1 &_output_){
   Blit__ctx_type_1_init(_output_);
   return ;
}

float Blit_osc_blit(Blit__ctx_type_1 &_ctx, float cv, float pw, float wave){
   float fixed_cv;
   fixed_cv = 0.000000f;
   uint8_t _cond_134;
   _cond_134 = (wave < 1.000000f);
   if(_cond_134){
      fixed_cv = cv;
   }
   else
   {
      fixed_cv = (cv + (-0.100000f));
   }
   uint8_t _cond_135;
   _cond_135 = Util_change(_ctx._inst116,fixed_cv);
   if(_cond_135){
      _ctx.rate = Util_cvToRate(fixed_cv);
   }
   float phase;
   phase = Phase_process(_ctx._inst118,fixed_cv,0.000000f);
   float shift05;
   shift05 = (0.500000f + (pw * 0.490000f));
   float shift;
   shift = (phase + shift05);
   uint8_t _cond_136;
   _cond_136 = (shift > 1.000000f);
   if(_cond_136){
      shift = (shift + (-1.000000f));
   }
   float pulse1;
   pulse1 = Blit_pulse_train(_ctx._inst120,fixed_cv,phase);
   float pulse2;
   pulse2 = Blit_pulse_train(_ctx._inst121,fixed_cv,shift);
   _ctx.state_pulse = ((_ctx.state_pulse * 0.999500f) + pulse1 + (- pulse2));
   _ctx.state_saw = ((_ctx.state_saw * 0.999500f) + (((pulse1 + pulse2 + ((-2.000000f) * _ctx.rate)) / shift05) * 0.500000f));
   uint8_t _cond_137;
   _cond_137 = (wave < 1.000000f);
   if(_cond_137){
      _ctx.output = _ctx.state_pulse;
   }
   else
   {
      _ctx.output = (2.000000f * _ctx.state_saw);
   }
   _ctx.output = Util_dcblock(_ctx._inst124,_ctx.output);
   return _ctx.output;
}

void Blit_init_init(Blit__ctx_type_1 &_output_){
   Blit__ctx_type_1_init(_output_);
   return ;
}

void Blit_init(Blit__ctx_type_1 &_ctx){
   _ctx.rate = 0.000742f;
}

void Blit__ctx_type_2_init(Blit__ctx_type_2 &_output_){
   Blit__ctx_type_2 _ctx;
   Blit__ctx_type_1_init(_ctx._inst127);
   _output_ = _ctx;
   return ;
}

void Blit_process_init(Blit__ctx_type_2 &_output_){
   Blit__ctx_type_2_init(_output_);
   return ;
}

float Blit_process(Blit__ctx_type_2 &_ctx, float cv, float pw, float wave){
   return Blit_osc_blit(_ctx._inst127,cv,pw,wave);
}

void Blit_noteOn_init(Blit__ctx_type_2 &_output_){
   Blit__ctx_type_2_init(_output_);
   return ;
}

void Blit_noteOn(Blit__ctx_type_2 &_ctx, int note, int velocity, int channel){
}

void Blit_noteOff_init(Blit__ctx_type_2 &_output_){
   Blit__ctx_type_2_init(_output_);
   return ;
}

void Blit_noteOff(Blit__ctx_type_2 &_ctx, int note, int channel){
}

void Blit_controlChange_init(Blit__ctx_type_2 &_output_){
   Blit__ctx_type_2_init(_output_);
   return ;
}

void Blit_controlChange(Blit__ctx_type_2 &_ctx, int control, int value, int channel){
}

void Blit_default_init(Blit__ctx_type_2 &_output_){
   Blit__ctx_type_2_init(_output_);
   return ;
}

void Blit_default(Blit__ctx_type_2 &_ctx){
}

void Adsr__ctx_type_0_init(Adsr__ctx_type_0 &_output_){
   Adsr__ctx_type_0 _ctx;
   _ctx.target = 0.000000f;
   _ctx.state = 0;
   _ctx.scale = 0.000000f;
   _ctx.rate = 0.000000f;
   _ctx.out = 0.000000f;
   Util__ctx_type_4_init(_ctx._inst147);
   Util__ctx_type_0_init(_ctx._inst140);
   _output_ = _ctx;
   return ;
}

void Adsr_do_init(Adsr__ctx_type_0 &_output_){
   Adsr__ctx_type_0_init(_output_);
   return ;
}

float Adsr_do(Adsr__ctx_type_0 &_ctx, float gate, float a, float d, float s, float r){
   float a_rate;
   a_rate = (1.000000f / ((100.000000f * a) + 0.010000f));
   float d_rate;
   d_rate = (1.000000f / ((100.000000f * d) + 0.010000f));
   float r_rate;
   r_rate = (1.000000f / ((100.000000f * r) + 0.010000f));
   _ctx.out = (_ctx.out + ((_ctx.target + (- _ctx.out)) * _ctx.rate * 0.004000f));
   uint8_t bgate;
   bgate = (gate > 0.000000f);
   uint8_t _cond_159;
   _cond_159 = (_ctx.state == 0);
   if(_cond_159){
      uint8_t _cond_158;
      _cond_158 = Util_edge(_ctx._inst140,bgate);
      if(_cond_158){
         _ctx.state = 1;
         _ctx.scale = (gate * 0.200000f);
      }
      _ctx.rate = r_rate;
      _ctx.target = 0.000000f;
   }
   uint8_t _cond_162;
   _cond_162 = (_ctx.state == 1);
   if(_cond_162){
      uint8_t _cond_160;
      _cond_160 = bool_not(bgate);
      if(_cond_160){
         _ctx.state = 0;
      }
      uint8_t _cond_161;
      _cond_161 = (_ctx.out > 1024.000000f);
      if(_cond_161){
         _ctx.state = 2;
      }
      _ctx.rate = a_rate;
      _ctx.target = 1228.800000f;
   }
   uint8_t _cond_164;
   _cond_164 = (_ctx.state == 2);
   if(_cond_164){
      uint8_t _cond_163;
      _cond_163 = bool_not(bgate);
      if(_cond_163){
         _ctx.state = 0;
      }
      _ctx.rate = d_rate;
      _ctx.target = (s * 1024.000000f);
   }
   return (Util_smooth(_ctx._inst147,_ctx.scale) * float_clip((_ctx.out * 0.000977f),0.000000f,1.000000f));
}

void Adsr__ctx_type_1_init(Adsr__ctx_type_1 &_output_){
   Adsr__ctx_type_1 _ctx;
   _ctx.knob4 = 0.000000f;
   _ctx.knob3 = 0.000000f;
   _ctx.knob2 = 0.000000f;
   _ctx.knob1 = 0.000000f;
   Adsr__ctx_type_0_init(_ctx._inst149);
   _output_ = _ctx;
   return ;
}

void Adsr_process_init(Adsr__ctx_type_1 &_output_){
   Adsr__ctx_type_1_init(_output_);
   return ;
}

float Adsr_process(Adsr__ctx_type_1 &_ctx, float gate){
   return Adsr_do(_ctx._inst149,gate,_ctx.knob1,_ctx.knob2,_ctx.knob3,_ctx.knob4);
}

void Adsr_noteOn_init(Adsr__ctx_type_1 &_output_){
   Adsr__ctx_type_1_init(_output_);
   return ;
}

void Adsr_noteOn(Adsr__ctx_type_1 &_ctx, int note, int velocity, int channel){
}

void Adsr_noteOff_init(Adsr__ctx_type_1 &_output_){
   Adsr__ctx_type_1_init(_output_);
   return ;
}

void Adsr_noteOff(Adsr__ctx_type_1 &_ctx, int note, int channel){
}

void Adsr_controlChange_init(Adsr__ctx_type_1 &_output_){
   Adsr__ctx_type_1_init(_output_);
   return ;
}

void Adsr_controlChange(Adsr__ctx_type_1 &_ctx, int control, int value, int channel){
   uint8_t _cond_165;
   _cond_165 = (control == 1);
   if(_cond_165){
      _ctx.knob1 = (int_to_float(value) * 0.007874f);
   }
   uint8_t _cond_166;
   _cond_166 = (control == 2);
   if(_cond_166){
      _ctx.knob2 = (int_to_float(value) * 0.007874f);
   }
   uint8_t _cond_167;
   _cond_167 = (control == 3);
   if(_cond_167){
      _ctx.knob3 = (int_to_float(value) * 0.007874f);
   }
   uint8_t _cond_168;
   _cond_168 = (control == 4);
   if(_cond_168){
      _ctx.knob4 = (int_to_float(value) * 0.007874f);
   }
}

void Adsr_default_init(Adsr__ctx_type_1 &_output_){
   Adsr__ctx_type_1_init(_output_);
   return ;
}

void Adsr_default(Adsr__ctx_type_1 &_ctx){
   _ctx.knob1 = 0.000000f;
   _ctx.knob2 = 0.500000f;
   _ctx.knob3 = 1.000000f;
   _ctx.knob4 = 0.500000f;
}

void Voice_4__ctx_type_0_init(Voice_4__ctx_type_0 &_output_){
   Voice_4__ctx_type_0 _ctx;
   _ctx.sustain = 0.000000f;
   _ctx.release = 0.000000f;
   _ctx.pw4 = 0.000000f;
   _ctx.pw3 = 0.000000f;
   _ctx.pw2 = 0.000000f;
   _ctx.pw1 = 0.000000f;
   _ctx.lfo_shape = 0.000000f;
   _ctx.lfo_reset = 0.000000f;
   _ctx.lfo_rate = 0.000000f;
   _ctx.lfo_pw = 0.000000f;
   _ctx.lfo_flt = 0.000000f;
   _ctx.lfo_cv = 0.000000f;
   _ctx.level4 = 0.000000f;
   _ctx.level3 = 0.000000f;
   _ctx.level2 = 0.000000f;
   _ctx.level1 = 0.000000f;
   _ctx.flt_shape = 0;
   _ctx.flt_res = 0.000000f;
   _ctx.flt_cut = 0.000000f;
   _ctx.decay = 0.000000f;
   _ctx.attack = 0.000000f;
   Adsr__ctx_type_0_init(_ctx._inst176);
   Svf__ctx_type_1_init(_ctx._inst175);
   Tricore__ctx_type_0_init(_ctx._inst174);
   Blit__ctx_type_2_init(_ctx._inst173);
   Blit__ctx_type_2_init(_ctx._inst172);
   Blit__ctx_type_2_init(_ctx._inst171);
   Lfo__ctx_type_1_init(_ctx._inst170);
   _output_ = _ctx;
   return ;
}

void Voice_4_process_init(Voice_4__ctx_type_0 &_output_){
   Voice_4__ctx_type_0_init(_output_);
   return ;
}

float Voice_4_process(Voice_4__ctx_type_0 &_ctx, float cv, float vel, float gate){
   float lfo;
   lfo = Lfo_process(_ctx._inst170,_ctx.lfo_rate,_ctx.lfo_shape,(gate * _ctx.lfo_reset));
   float mod_pw;
   mod_pw = (_ctx.lfo_pw * lfo);
   float mod_cv;
   mod_cv = (_ctx.lfo_cv * lfo);
   float mod_flt;
   mod_flt = (_ctx.lfo_flt * lfo);
   float o1;
   o1 = Blit_process(_ctx._inst171,(cv + 0.000100f + mod_cv),(_ctx.pw1 + mod_pw),0.000000f);
   float o2;
   o2 = Blit_process(_ctx._inst172,(cv + 0.000200f + mod_cv),(_ctx.pw2 + mod_pw),1.000000f);
   float o3;
   o3 = Blit_process(_ctx._inst173,(cv + _ctx.pw3 + mod_cv),(_ctx.pw1 + mod_pw),0.000000f);
   float sub;
   sub = Saturate_process((((5.000000f * _ctx.pw4) + 2.000000f) * Tricore_process(_ctx._inst174,(cv + mod_cv),0.000000f,1.000000f)));
   float o;
   o = ((_ctx.level1 * o1) + (_ctx.level2 * o2) + (_ctx.level3 * o3) + (_ctx.level4 * sub));
   float f;
   f = Svf_process(_ctx._inst175,o,(_ctx.flt_cut + mod_flt),_ctx.flt_res,_ctx.flt_shape);
   float env;
   env = Adsr_do(_ctx._inst176,gate,_ctx.attack,_ctx.decay,_ctx.sustain,_ctx.release);
   return (env * f);
}

void Voice_4_noteOn_init(Voice_4__ctx_type_0 &_output_){
   Voice_4__ctx_type_0_init(_output_);
   return ;
}

void Voice_4_noteOn(Voice_4__ctx_type_0 &_ctx, int note, int velocity, int channel){
}

void Voice_4_noteOff_init(Voice_4__ctx_type_0 &_output_){
   Voice_4__ctx_type_0_init(_output_);
   return ;
}

void Voice_4_noteOff(Voice_4__ctx_type_0 &_ctx, int note, int channel){
}

void Voice_4_controlChange_init(Voice_4__ctx_type_0 &_output_){
   Voice_4__ctx_type_0_init(_output_);
   return ;
}

void Voice_4_controlChange(Voice_4__ctx_type_0 &_ctx, int control, int value, int channel){
   uint8_t _cond_202;
   _cond_202 = (control == 30);
   if(_cond_202){
      _ctx.level1 = (int_to_float(value) * 0.007874f);
   }
   uint8_t _cond_203;
   _cond_203 = (control == 31);
   if(_cond_203){
      _ctx.level2 = (int_to_float(value) * 0.007874f);
   }
   uint8_t _cond_204;
   _cond_204 = (control == 32);
   if(_cond_204){
      _ctx.level3 = (int_to_float(value) * 0.007874f);
   }
   uint8_t _cond_205;
   _cond_205 = (control == 33);
   if(_cond_205){
      _ctx.level4 = (int_to_float(value) * 0.007874f);
   }
   uint8_t _cond_206;
   _cond_206 = (control == 34);
   if(_cond_206){
      _ctx.pw1 = (int_to_float(value) * 0.007874f);
   }
   uint8_t _cond_207;
   _cond_207 = (control == 35);
   if(_cond_207){
      _ctx.pw2 = (int_to_float(value) * 0.007874f);
   }
   uint8_t _cond_208;
   _cond_208 = (control == 36);
   if(_cond_208){
      _ctx.pw3 = (0.000787f * int_to_float(value));
   }
   uint8_t _cond_209;
   _cond_209 = (control == 37);
   if(_cond_209){
      _ctx.pw4 = (int_to_float(value) * 0.007874f);
   }
   uint8_t _cond_210;
   _cond_210 = (control == 38);
   if(_cond_210){
      _ctx.lfo_rate = Util_map(int_to_float(value),0.000000f,127.000000f,(-0.400000f),0.100000f);
   }
   uint8_t _cond_211;
   _cond_211 = (control == 39);
   if(_cond_211){
      _ctx.lfo_shape = (0.023622f * int_to_float(value));
   }
   uint8_t _cond_212;
   _cond_212 = (control == 40);
   if(_cond_212){
      _ctx.lfo_pw = Util_map(int_to_float(value),0.000000f,127.000000f,(-1.000000f),1.000000f);
   }
   uint8_t _cond_213;
   _cond_213 = (control == 41);
   if(_cond_213){
      _ctx.lfo_cv = Util_map(int_to_float(value),0.000000f,127.000000f,(-0.100000f),0.100000f);
   }
   uint8_t _cond_214;
   _cond_214 = (control == 42);
   if(_cond_214){
      _ctx.lfo_flt = Util_map(int_to_float(value),0.000000f,127.000000f,(-0.300000f),0.300000f);
   }
   uint8_t _cond_216;
   _cond_216 = (control == 43);
   if(_cond_216){
      uint8_t _cond_215;
      _cond_215 = (value > 0);
      if(_cond_215){ _ctx.lfo_reset = 1.000000f; }
      else
      { _ctx.lfo_reset = 0.000000f; }
   }
   uint8_t _cond_217;
   _cond_217 = (control == 44);
   if(_cond_217){
      _ctx.flt_cut = Util_map(int_to_float(value),0.000000f,127.000000f,(-0.200000f),0.500000f);
   }
   uint8_t _cond_218;
   _cond_218 = (control == 45);
   if(_cond_218){
      _ctx.flt_res = (int_to_float(value) * 0.007874f);
   }
   uint8_t _cond_219;
   _cond_219 = (control == 46);
   if(_cond_219){
      _ctx.flt_shape = ((value * 4) / 127);
   }
   uint8_t _cond_220;
   _cond_220 = (control == 47);
   if(_cond_220){
      _ctx.attack = (int_to_float(value) * 0.007874f);
   }
   uint8_t _cond_221;
   _cond_221 = (control == 48);
   if(_cond_221){
      _ctx.decay = (int_to_float(value) * 0.007874f);
   }
   uint8_t _cond_222;
   _cond_222 = (control == 49);
   if(_cond_222){
      _ctx.sustain = (int_to_float(value) * 0.007874f);
   }
   uint8_t _cond_223;
   _cond_223 = (control == 50);
   if(_cond_223){
      _ctx.release = (int_to_float(value) * 0.007874f);
   }
}

void Voice_4_default_init(Voice_4__ctx_type_0 &_output_){
   Voice_4__ctx_type_0_init(_output_);
   return ;
}

void Voice_4_default(Voice_4__ctx_type_0 &_ctx){
}


