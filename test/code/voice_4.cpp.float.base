
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#include "voice_4.h"

void Util__ctx_type_3_init(Util__ctx_type_3 &_output_){
   Util__ctx_type_3 _ctx;
   _ctx.y1 = 0.0f;
   _ctx.x1 = 0.0f;
   _output_ = _ctx;
   return ;
}

float Util_dcblock(Util__ctx_type_3 &_ctx, float x0){
   float y0;
   y0 = (x0 + (- _ctx.x1) + (0.995f * _ctx.y1));
   _ctx.x1 = x0;
   _ctx.y1 = y0;
   return y0;
}

void Tricore__ctx_type_0_init(Tricore__ctx_type_0 &_output_){
   Tricore__ctx_type_0 _ctx;
   _ctx.reset_state = false;
   _ctx.reset_phase = 0.0f;
   _ctx.rate = 0.0f;
   _ctx.phase = 0.0f;
   _ctx.direction = false;
   Util__ctx_type_0_init(_ctx._inst451);
   Util__ctx_type_0_init(_ctx._inst351);
   Util__ctx_type_1_init(_ctx._inst13b);
   Tricore_default(_ctx);
   _output_ = _ctx;
   return ;
}

float Tricore_process(Tricore__ctx_type_0 &_ctx, float cv, float reset, float disable){
   float out;
   out = 0.0f;
   if(Util_change(_ctx._inst13b,cv)){
      _ctx.rate = (4.f * Util_cvToRate_1024(cv));
   }
   float new_phase;
   float _if_13;
   if(_ctx.direction){
      _if_13 = _ctx.rate;
   }
   else
   {
      _if_13 = (- _ctx.rate);
   }
   new_phase = (_ctx.phase + _if_13);
   uint8_t bdisable;
   bdisable = (disable > 0.5f);
   if(Util_edge(_ctx._inst351,(reset > 0.0f)) || Util_edge(_ctx._inst451,bdisable)){
      _ctx.reset_phase = _ctx.phase;
      _ctx.reset_state = true;
      new_phase = 0.0f;
   }
   if(new_phase > 1024.f){
      new_phase = (1024.f + (- (-1024.f + new_phase)));
      _ctx.direction = false;
   }
   else
   {
      if(new_phase < -1024.f){
         _ctx.direction = true;
      }
   }
   if(bdisable){
      _ctx.phase = 0.0f;
   }
   else
   {
      _ctx.phase = new_phase;
   }
   if(_ctx.reset_state){
      if((fabsf(_ctx.reset_phase) > 10.f) || bdisable){
         float reset_speed;
         if(bdisable){
            reset_speed = 0.01f;
         }
         else
         {
            reset_speed = 0.5f;
         }
         _ctx.reset_phase = (_ctx.reset_phase + (- (_ctx.reset_phase * reset_speed)));
      }
      else
      {
         uint8_t _cond_17;
         _cond_17 = (_ctx.reset_phase > 10.f);
         if(bool_not(_cond_17)){
            _ctx.reset_phase = 0.0f;
         }
         _ctx.reset_state = false;
         _ctx.direction = true;
      }
      out = _ctx.reset_phase;
   }
   out = (_ctx.phase + out);
   return (0.0009766f * out);
}

void Svf__ctx_type_4_init(Svf__ctx_type_4 &_output_){
   Svf__ctx_type_4 _ctx;
   _ctx.z2 = 0.0f;
   _ctx.z1 = 0.0f;
   _ctx.inv_den = 0.0f;
   _ctx.g = 0.0f;
   Util__ctx_type_1_init(_ctx._inst23b);
   Util__ctx_type_1_init(_ctx._inst13b);
   _ctx.R = 0.0f;
   Svf_default(_ctx);
   _output_ = _ctx;
   return ;
}

float Svf_process(Svf__ctx_type_4 &_ctx, float x, float cv, float q, int sel){
   q = (0.5f + q);
   if(Util_change(_ctx._inst13b,cv) || Util_change(_ctx._inst23b,q)){
      _ctx.g = Svf_calc_g(cv);
      _ctx.R = (1.f / (2.f * (1e-07f + q)));
      _ctx.inv_den = (1.f / (1.f + (2.f * _ctx.R * _ctx.g) + (_ctx.g * _ctx.g)));
   }
   float high;
   high = (_ctx.inv_den * (x + (- _ctx.z2) + (- (_ctx.z1 * (_ctx.g + (2.f * _ctx.R))))));
   float band;
   band = (_ctx.z1 + (_ctx.g * high));
   float low;
   low = (_ctx.z2 + (_ctx.g * band));
   float notch;
   notch = (high + low);
   _ctx.z1 = (band + (_ctx.g * high));
   _ctx.z2 = (low + (_ctx.g * band));
   float output;
   switch(sel) {
      case 0:
         output = low;
      break;
      case 1:
         output = high;
      break;
      case 2:
         output = band;
      break;
    default: 
      output = notch;
   }
   return Saturate_soft_process(output);
}

void Lfo__ctx_type_0_init(Lfo__ctx_type_0 &_output_){
   Lfo__ctx_type_0 _ctx;
   _ctx.x4 = 0.0f;
   _ctx.x3 = 0.0f;
   _ctx.x2 = 0.0f;
   _output_ = _ctx;
   return ;
}

float Lfo_soft(Lfo__ctx_type_0 &_ctx, float x1){
   float o;
   o = (0.25f * (_ctx.x2 + _ctx.x3 + _ctx.x4 + x1));
   float _tmp_1_0;
   _tmp_1_0 = x1;
   float _tmp_1_1;
   _tmp_1_1 = _ctx.x2;
   float _tmp_1_2;
   _tmp_1_2 = _ctx.x3;
   _ctx.x2 = _tmp_1_0;
   _ctx.x3 = _tmp_1_1;
   _ctx.x4 = _tmp_1_2;
   return o;
}

void Lfo__ctx_type_1_init(Lfo__ctx_type_1 &_output_){
   Lfo__ctx_type_1 _ctx;
   _ctx.rate = 0.0f;
   _ctx.phase = 0.0f;
   Lfo__ctx_type_0_init(_ctx._inst59b);
   Util__ctx_type_0_init(_ctx._inst351);
   Util__ctx_type_1_init(_ctx._inst13b);
   _output_ = _ctx;
   return ;
}

float Lfo_process(Lfo__ctx_type_1 &_ctx, float cv, float shape, float reset){
   if(Util_change(_ctx._inst13b,cv)){
      _ctx.rate = Util_cvToRate((-0.3f + cv));
   }
   _ctx.phase = (_ctx.phase + _ctx.rate);
   if(_ctx.phase > 2.f){
      _ctx.phase = (-2.f + _ctx.phase);
   }
   uint8_t breset;
   breset = (reset > 0.0f);
   if(Util_edge(_ctx._inst351,breset)){
      _ctx.phase = 0.0f;
   }
   float tmp;
   tmp = (-1.f + _ctx.phase);
   float o;
   if(shape < 1.f){
      o = tmp;
   }
   else
   {
      if(shape < 2.f){
         o = (-1.f + (2.f * fabsf(tmp)));
      }
      else
      {
         if(tmp > 0.0f){
            o = 1.f;
         }
         else
         {
            o = 0.0f;
         }
      }
   }
   return Lfo_soft(_ctx._inst59b,o);
}

void Phase__ctx_type_0_init(Phase__ctx_type_0 &_output_){
   Phase__ctx_type_0 _ctx;
   _ctx.rate = 0.0f;
   _ctx.phase = 0.0f;
   Util__ctx_type_0_init(_ctx._inst351);
   Util__ctx_type_1_init(_ctx._inst13b);
   Phase_default(_ctx);
   _output_ = _ctx;
   return ;
}

float Phase_process(Phase__ctx_type_0 &_ctx, float cv, float reset){
   if(Util_change(_ctx._inst13b,cv)){
      _ctx.rate = Util_cvToRate_1024(cv);
   }
   if(Util_edge(_ctx._inst351,(reset > 0.5f))){
      _ctx.phase = 0.0f;
   }
   else
   {
      _ctx.phase = (_ctx.phase + _ctx.rate);
   }
   if(_ctx.phase > 1024.f){
      _ctx.phase = (-1024.f + _ctx.phase);
   }
   return (0.0009766f * _ctx.phase);
}

void Blit__ctx_type_0_init(Blit__ctx_type_0 &_output_){
   Blit__ctx_type_0 _ctx;
   _ctx.scale = 0.0f;
   _ctx.m = 0;
   Util__ctx_type_1_init(_ctx._inst13b);
   Blit_pulse_start(_ctx);
   _output_ = _ctx;
   return ;
}

float Blit_pulse_train(Blit__ctx_type_0 &_ctx, float cv, float phase){
   if(Util_change(_ctx._inst13b,cv)){
      _ctx.m = (1 + (float_to_int(Util_cvToperiod(cv)) << 1));
      _ctx.scale = (2.f * Util_cvToperiod(cv));
   }
   float pi_phase;
   pi_phase = (0.5f * phase);
   float denominator;
   denominator = Tables_nsine(pi_phase);
   float out;
   out = 0.0f;
   if(denominator <= 1e-07f){
      out = 1.f;
   }
   else
   {
      float m_phase;
      m_phase = fmodf((pi_phase * int_to_float(_ctx.m)),1.f);
      float numerator;
      numerator = Tables_nsine(m_phase);
      out = (numerator / (_ctx.scale * denominator));
   }
   return out;
}

void Blit__ctx_type_1_init(Blit__ctx_type_1 &_output_){
   Blit__ctx_type_1 _ctx;
   _ctx.state_saw = 0.0f;
   _ctx.state_pulse = 0.0f;
   _ctx.rate = 0.0f;
   _ctx.output = 0.0f;
   Blit__ctx_type_0_init(_ctx._inst846);
   Blit__ctx_type_0_init(_ctx._inst746);
   Phase__ctx_type_0_init(_ctx._inst5cd);
   Util__ctx_type_1_init(_ctx._inst33b);
   Util__ctx_type_3_init(_ctx._inst117d);
   Blit_init(_ctx);
   _output_ = _ctx;
   return ;
}

float Blit_osc_blit(Blit__ctx_type_1 &_ctx, float cv, float pw, float wave){
   float fixed_cv;
   fixed_cv = 0.0f;
   if(wave < 1.f){
      fixed_cv = cv;
   }
   else
   {
      fixed_cv = (-0.1f + cv);
   }
   if(Util_change(_ctx._inst33b,fixed_cv)){
      _ctx.rate = Util_cvToRate(fixed_cv);
   }
   float phase;
   phase = Phase_process(_ctx._inst5cd,fixed_cv,0.0f);
   float shift05;
   shift05 = (0.5f + (0.49f * pw));
   float shift;
   shift = (phase + shift05);
   if(shift > 1.f){
      shift = (-1.f + shift);
   }
   float pulse1;
   pulse1 = Blit_pulse_train(_ctx._inst746,fixed_cv,phase);
   float pulse2;
   pulse2 = Blit_pulse_train(_ctx._inst846,fixed_cv,shift);
   _ctx.state_pulse = (pulse1 + (- pulse2) + (0.9995f * _ctx.state_pulse));
   _ctx.state_saw = ((0.5f * ((pulse1 + pulse2 + (-2.f * _ctx.rate)) / shift05)) + (0.9995f * _ctx.state_saw));
   if(wave < 1.f){
      _ctx.output = _ctx.state_pulse;
   }
   else
   {
      _ctx.output = (2.f * _ctx.state_saw);
   }
   _ctx.output = Util_dcblock(_ctx._inst117d,_ctx.output);
   return _ctx.output;
}

void Adsr__ctx_type_0_init(Adsr__ctx_type_0 &_output_){
   Adsr__ctx_type_0 _ctx;
   _ctx.target = 0.0f;
   _ctx.state = 0;
   _ctx.scale = 0.0f;
   _ctx.rate = 0.0f;
   _ctx.out = 0.0f;
   Util__ctx_type_4_init(_ctx._inst955);
   Util__ctx_type_0_init(_ctx._inst251);
   _output_ = _ctx;
   return ;
}

float Adsr_do(Adsr__ctx_type_0 &_ctx, float gate, float a, float d, float s, float r){
   float a_rate;
   a_rate = (1.f / (0.01f + (100.f * a)));
   float d_rate;
   d_rate = (1.f / (0.01f + (100.f * d)));
   float r_rate;
   r_rate = (1.f / (0.01f + (100.f * r)));
   _ctx.out = (_ctx.out + (0.004f * _ctx.rate * (_ctx.target + (- _ctx.out))));
   uint8_t bgate;
   bgate = (gate > 0.0f);
   if(_ctx.state == 0){
      if(Util_edge(_ctx._inst251,bgate)){
         _ctx.state = 1;
         _ctx.scale = (0.2f * gate);
      }
      _ctx.rate = r_rate;
      _ctx.target = 0.0f;
   }
   if(_ctx.state == 1){
      if(bool_not(bgate)){
         _ctx.state = 0;
      }
      if(_ctx.out > 1024.f){
         _ctx.state = 2;
      }
      _ctx.rate = a_rate;
      _ctx.target = 1228.8f;
   }
   if(_ctx.state == 2){
      if(bool_not(bgate)){
         _ctx.state = 0;
      }
      _ctx.rate = d_rate;
      _ctx.target = (1024.f * s);
   }
   return (Util_smooth(_ctx._inst955,_ctx.scale) * float_clip((0.0009766f * _ctx.out),0.0f,1.f));
}

void Adsr__ctx_type_1_init(Adsr__ctx_type_1 &_output_){
   Adsr__ctx_type_1 _ctx;
   _ctx.knob4 = 0.0f;
   _ctx.knob3 = 0.0f;
   _ctx.knob2 = 0.0f;
   _ctx.knob1 = 0.0f;
   Adsr__ctx_type_0_init(_ctx._inst16);
   _output_ = _ctx;
   return ;
}

void Adsr_controlChange(Adsr__ctx_type_1 &_ctx, int control, int value, int channel){
   if(control == 1){
      _ctx.knob1 = (0.0078741f * int_to_float(value));
   }
   if(control == 2){
      _ctx.knob2 = (0.0078741f * int_to_float(value));
   }
   if(control == 3){
      _ctx.knob3 = (0.0078741f * int_to_float(value));
   }
   if(control == 4){
      _ctx.knob4 = (0.0078741f * int_to_float(value));
   }
}

void Voice_4__ctx_type_0_init(Voice_4__ctx_type_0 &_output_){
   Voice_4__ctx_type_0 _ctx;
   _ctx.sustain = 0.0f;
   _ctx.release = 0.0f;
   _ctx.pw4 = 0.0f;
   _ctx.pw3 = 0.0f;
   _ctx.pw2 = 0.0f;
   _ctx.pw1 = 0.0f;
   _ctx.lfo_shape = 0.0f;
   _ctx.lfo_reset = 0.0f;
   _ctx.lfo_rate = 0.0f;
   _ctx.lfo_pw = 0.0f;
   _ctx.lfo_flt = 0.0f;
   _ctx.lfo_cv = 0.0f;
   _ctx.level4 = 0.0f;
   _ctx.level3 = 0.0f;
   _ctx.level2 = 0.0f;
   _ctx.level1 = 0.0f;
   _ctx.flt_shape = 0;
   _ctx.flt_res = 0.0f;
   _ctx.flt_cut = 0.0f;
   _ctx.decay = 0.0f;
   _ctx.attack = 0.0f;
   Adsr__ctx_type_0_init(_ctx._inst76);
   Svf__ctx_type_4_init(_ctx._inst612);
   Tricore__ctx_type_0_init(_ctx._inst541);
   Blit__ctx_type_2_init(_ctx._inst44f);
   Blit__ctx_type_2_init(_ctx._inst34f);
   Blit__ctx_type_2_init(_ctx._inst24f);
   Lfo__ctx_type_1_init(_ctx._inst15);
   _output_ = _ctx;
   return ;
}

float Voice_4_process(Voice_4__ctx_type_0 &_ctx, float cv, float vel, float gate){
   float lfo;
   lfo = Lfo_process(_ctx._inst15,_ctx.lfo_rate,_ctx.lfo_shape,(_ctx.lfo_reset * gate));
   float mod_pw;
   mod_pw = (_ctx.lfo_pw * lfo);
   float mod_cv;
   mod_cv = (_ctx.lfo_cv * lfo);
   float mod_flt;
   mod_flt = (_ctx.lfo_flt * lfo);
   float o1;
   o1 = Blit_process(_ctx._inst24f,(0.0001f + cv + mod_cv),(_ctx.pw1 + mod_pw),0.0f);
   float o2;
   o2 = Blit_process(_ctx._inst34f,(0.0002f + cv + mod_cv),(_ctx.pw2 + mod_pw),1.f);
   float o3;
   o3 = Blit_process(_ctx._inst44f,(_ctx.pw3 + cv + mod_cv),(_ctx.pw1 + mod_pw),0.0f);
   float sub;
   sub = Saturate_process((Tricore_process(_ctx._inst541,(cv + mod_cv),0.0f,1.f) * (2.f + (5.f * _ctx.pw4))));
   float o;
   o = ((_ctx.level1 * o1) + (_ctx.level2 * o2) + (_ctx.level3 * o3) + (_ctx.level4 * sub));
   float f;
   f = Svf_process(_ctx._inst612,o,(_ctx.flt_cut + mod_flt),_ctx.flt_res,_ctx.flt_shape);
   float env;
   env = Adsr_do(_ctx._inst76,gate,_ctx.attack,_ctx.decay,_ctx.sustain,_ctx.release);
   return (env * f);
}

void Voice_4_controlChange(Voice_4__ctx_type_0 &_ctx, int control, int value, int channel){
   if(control == 30){
      _ctx.level1 = (0.0078741f * int_to_float(value));
   }
   if(control == 31){
      _ctx.level2 = (0.0078741f * int_to_float(value));
   }
   if(control == 32){
      _ctx.level3 = (0.0078741f * int_to_float(value));
   }
   if(control == 33){
      _ctx.level4 = (0.0078741f * int_to_float(value));
   }
   if(control == 34){
      _ctx.pw1 = (0.0078741f * int_to_float(value));
   }
   if(control == 35){
      _ctx.pw2 = (0.0078741f * int_to_float(value));
   }
   if(control == 36){
      _ctx.pw3 = (0.0007875f * int_to_float(value));
   }
   if(control == 37){
      _ctx.pw4 = (0.0078741f * int_to_float(value));
   }
   if(control == 38){
      _ctx.lfo_rate = Util_map(int_to_float(value),0.0f,127.f,-0.4f,0.1f);
   }
   if(control == 39){
      _ctx.lfo_shape = (0.0236221f * int_to_float(value));
   }
   if(control == 40){
      _ctx.lfo_pw = Util_map(int_to_float(value),0.0f,127.f,-1.f,1.f);
   }
   if(control == 41){
      _ctx.lfo_cv = Util_map(int_to_float(value),0.0f,127.f,-0.1f,0.1f);
   }
   if(control == 42){
      _ctx.lfo_flt = Util_map(int_to_float(value),0.0f,127.f,-0.3f,0.3f);
   }
   if(control == 43){
      if(value > 0){
         _ctx.lfo_reset = 1.f;
      }
      else
      {
         _ctx.lfo_reset = 0.0f;
      }
   }
   if(control == 44){
      _ctx.flt_cut = Util_map(int_to_float(value),0.0f,127.f,-0.2f,0.5f);
   }
   if(control == 45){
      _ctx.flt_res = (0.0078741f * int_to_float(value));
   }
   if(control == 46){
      _ctx.flt_shape = ((value << 2) / 127);
   }
   if(control == 47){
      _ctx.attack = (0.0078741f * int_to_float(value));
   }
   if(control == 48){
      _ctx.decay = (0.0078741f * int_to_float(value));
   }
   if(control == 49){
      _ctx.sustain = (0.0078741f * int_to_float(value));
   }
   if(control == 50){
      _ctx.release = (0.0078741f * int_to_float(value));
   }
}


