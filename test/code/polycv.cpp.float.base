
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#include "polycv.h"

void Util__ctx_type_3_init(Util__ctx_type_3 &_output_){
   Util__ctx_type_3 _ctx;
   _ctx.y1 = 0.0f;
   _ctx.x1 = 0.0f;
   _output_ = _ctx;
   return ;
}

float Util_dcblock(Util__ctx_type_3 &_ctx, float x0){
   float y0;
   y0 = (x0 + (- _ctx.x1) + (0.995f * _ctx.y1));
   _ctx.x1 = x0;
   _ctx.y1 = y0;
   return y0;
}

float Polycv_velToGate(int vel){
   float _if_1;
   if(vel > 0){
      _if_1 = (0.0078741f * int_to_float(vel));
   }
   else
   {
      _if_1 = 0.0f;
   }
   return _if_1;
}

void Polycv__ctx_type_2_init(Polycv__ctx_type_2 &_output_){
   Polycv__ctx_type_2 _ctx;
   int_init_array(4,0,_ctx.vel);
   _ctx.polyState_ret_9 = 0.0f;
   _ctx.polyState_ret_8 = 0.0f;
   _ctx.polyState_ret_7 = 0.0f;
   _ctx.polyState_ret_6 = 0.0f;
   _ctx.polyState_ret_5 = 0.0f;
   _ctx.polyState_ret_4 = 0.0f;
   _ctx.polyState_ret_3 = 0.0f;
   _ctx.polyState_ret_2 = 0.0f;
   _ctx.polyState_ret_11 = 0.0f;
   _ctx.polyState_ret_10 = 0.0f;
   _ctx.polyState_ret_1 = 0.0f;
   _ctx.polyState_ret_0 = 0.0f;
   int_init_array(4,0,_ctx.notes);
   _output_ = _ctx;
   return ;
}

void Polycv_poly_noteOn(Polycv__ctx_type_2 &_ctx, int note, int velocity){
   int i;
   i = 0;
   uint8_t found;
   found = false;
   while((i < 4) && bool_not(found)){
      if(int_get(_ctx.vel,i) == 0){
         int_set(_ctx.notes,i,note);
         int_set(_ctx.vel,i,velocity);
         found = true;
      }
      i = (1 + i);
   }
}

void Polycv_poly_noteOff(Polycv__ctx_type_2 &_ctx, int note){
   int i;
   i = 0;
   uint8_t found;
   found = false;
   while((i < 4) && bool_not(found)){
      if(int_get(_ctx.notes,i) == note){
         int_set(_ctx.vel,i,0);
         found = true;
      }
      i = (1 + i);
   }
}

void Polycv_polyState(Polycv__ctx_type_2 &_ctx){
   float note1;
   note1 = Util_pitchToCv(int_to_float(int_get(_ctx.notes,0)));
   float note2;
   note2 = Util_pitchToCv(int_to_float(int_get(_ctx.notes,1)));
   float note3;
   note3 = Util_pitchToCv(int_to_float(int_get(_ctx.notes,2)));
   float note4;
   note4 = Util_pitchToCv(int_to_float(int_get(_ctx.notes,3)));
   float vel1;
   vel1 = Polycv_velToCV(int_get(_ctx.vel,0));
   float vel2;
   vel2 = Polycv_velToCV(int_get(_ctx.vel,1));
   float vel3;
   vel3 = Polycv_velToCV(int_get(_ctx.vel,2));
   float vel4;
   vel4 = Polycv_velToCV(int_get(_ctx.vel,3));
   float gate1;
   gate1 = Polycv_velToGate(int_get(_ctx.vel,0));
   float gate2;
   gate2 = Polycv_velToGate(int_get(_ctx.vel,1));
   float gate3;
   gate3 = Polycv_velToGate(int_get(_ctx.vel,2));
   float gate4;
   gate4 = Polycv_velToGate(int_get(_ctx.vel,3));
   _ctx.polyState_ret_0 = note1;
   _ctx.polyState_ret_1 = vel1;
   _ctx.polyState_ret_2 = gate1;
   _ctx.polyState_ret_3 = note2;
   _ctx.polyState_ret_4 = vel2;
   _ctx.polyState_ret_5 = gate2;
   _ctx.polyState_ret_6 = note3;
   _ctx.polyState_ret_7 = vel3;
   _ctx.polyState_ret_8 = gate3;
   _ctx.polyState_ret_9 = note4;
   _ctx.polyState_ret_10 = vel4;
   _ctx.polyState_ret_11 = gate4;
   return ;
}

void Polycv__ctx_type_3_init(Polycv__ctx_type_3 &_output_){
   Polycv__ctx_type_3 _ctx;
   _ctx.process_ret_9 = 0.0f;
   _ctx.process_ret_8 = 0.0f;
   _ctx.process_ret_7 = 0.0f;
   _ctx.process_ret_6 = 0.0f;
   _ctx.process_ret_5 = 0.0f;
   _ctx.process_ret_4 = 0.0f;
   _ctx.process_ret_3 = 0.0f;
   _ctx.process_ret_2 = 0.0f;
   _ctx.process_ret_11 = 0.0f;
   _ctx.process_ret_10 = 0.0f;
   _ctx.process_ret_1 = 0.0f;
   _ctx.process_ret_0 = 0.0f;
   Polycv__ctx_type_2_init(_ctx.poly);
   _ctx.channel_in = 0;
   _output_ = _ctx;
   return ;
}

void Polycv_process(Polycv__ctx_type_3 &_ctx, int c){
   _ctx.channel_in = c;
   Polycv_polyState(_ctx.poly);
   _ctx.process_ret_0 = Polycv_polyState_ret_0(_ctx.poly);
   _ctx.process_ret_1 = Polycv_polyState_ret_1(_ctx.poly);
   _ctx.process_ret_2 = Polycv_polyState_ret_2(_ctx.poly);
   _ctx.process_ret_3 = Polycv_polyState_ret_3(_ctx.poly);
   _ctx.process_ret_4 = Polycv_polyState_ret_4(_ctx.poly);
   _ctx.process_ret_5 = Polycv_polyState_ret_5(_ctx.poly);
   _ctx.process_ret_6 = Polycv_polyState_ret_6(_ctx.poly);
   _ctx.process_ret_7 = Polycv_polyState_ret_7(_ctx.poly);
   _ctx.process_ret_8 = Polycv_polyState_ret_8(_ctx.poly);
   _ctx.process_ret_9 = Polycv_polyState_ret_9(_ctx.poly);
   _ctx.process_ret_10 = Polycv_polyState_ret_10(_ctx.poly);
   _ctx.process_ret_11 = Polycv_polyState_ret_11(_ctx.poly);
   return ;
}


