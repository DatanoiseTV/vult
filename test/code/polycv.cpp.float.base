
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#include "polycv.h"

void Util__ctx_type_0_init(Util__ctx_type_0 &_output_){
   Util__ctx_type_0 _ctx;
   _ctx.pre = false;
   _output_ = _ctx;
   return ;
}

void Util_edge_init(Util__ctx_type_0 &_output_){
   Util__ctx_type_0_init(_output_);
   return ;
}

uint8_t Util_edge(Util__ctx_type_0 &_ctx, uint8_t x){
   uint8_t ret;
   ret = (x && bool_not(_ctx.pre));
   _ctx.pre = x;
   return ret;
}

void Util__ctx_type_1_init(Util__ctx_type_1 &_output_){
   Util__ctx_type_1 _ctx;
   _ctx.pre_x = 0.f;
   _output_ = _ctx;
   return ;
}

void Util_change_init(Util__ctx_type_1 &_output_){
   Util__ctx_type_1_init(_output_);
   return ;
}

uint8_t Util_change(Util__ctx_type_1 &_ctx, float x){
   uint8_t v;
   v = (_ctx.pre_x != x);
   _ctx.pre_x = x;
   return v;
}

float Util_map(float x, float x0, float x1, float y0, float y1){
   return (y0 + (((x + (- x0)) * (y1 + (- y0))) / (x1 + (- x0))));
}

void Util__ctx_type_3_init(Util__ctx_type_3 &_output_){
   Util__ctx_type_3 _ctx;
   _ctx.y1 = 0.f;
   _ctx.x1 = 0.f;
   _output_ = _ctx;
   return ;
}

void Util_dcblock_init(Util__ctx_type_3 &_output_){
   Util__ctx_type_3_init(_output_);
   return ;
}

float Util_dcblock(Util__ctx_type_3 &_ctx, float x0){
   float y0;
   y0 = (x0 + (- _ctx.x1) + (0.995f * _ctx.y1));
   _ctx.x1 = x0;
   _ctx.y1 = y0;
   return y0;
}

void Util__ctx_type_4_init(Util__ctx_type_4 &_output_){
   Util__ctx_type_4 _ctx;
   _ctx.x = 0.f;
   _output_ = _ctx;
   return ;
}

void Util_smooth_init(Util__ctx_type_4 &_output_){
   Util__ctx_type_4_init(_output_);
   return ;
}

float Util_smooth(Util__ctx_type_4 &_ctx, float input){
   _ctx.x = (_ctx.x + (0.005f * (input + (- _ctx.x))));
   return _ctx.x;
}

void Util__ctx_type_5_init(Util__ctx_type_5 &_output_){
   Util__ctx_type_5 _ctx;
   _ctx.x0 = 0.f;
   _output_ = _ctx;
   return ;
}

void Util_average2_init(Util__ctx_type_5 &_output_){
   Util__ctx_type_5_init(_output_);
   return ;
}

float Util_average2(Util__ctx_type_5 &_ctx, float x1){
   float result;
   result = (0.5f * (_ctx.x0 + x1));
   _ctx.x0 = x1;
   return result;
}

float Util_cubic_clipper(float x){
   if(x <= -0.6666666f){
      return -0.6666666f;
   }
   else
   {
      if(x >= 0.6666667f){
         return 0.6666667f;
      }
      else
      {
         return (x + (-0.3333333f * x * x * x));
      }
   }
}

float Util_pitchToRate_1024_raw_c0(int index){
   return Util_pitchToRate_1024_c0[index];
}

float Util_pitchToRate_1024_raw_c1(int index){
   return Util_pitchToRate_1024_c1[index];
}

float Util_pitchToRate_1024_raw_c2(int index){
   return Util_pitchToRate_1024_c2[index];
}

float Util_pitchToRate_1024(float pitch){
   int index;
   index = int_clip(float_to_int((0.2440945f * pitch)),0,31);
   return (float_wrap_array(Util_pitchToRate_1024_c0)[index] + (pitch * (float_wrap_array(Util_pitchToRate_1024_c1)[index] + (pitch * float_wrap_array(Util_pitchToRate_1024_c2)[index]))));
}

float Util_pitchToRate_raw_c0(int index){
   return Util_pitchToRate_c0[index];
}

float Util_pitchToRate_raw_c1(int index){
   return Util_pitchToRate_c1[index];
}

float Util_pitchToRate_raw_c2(int index){
   return Util_pitchToRate_c2[index];
}

float Util_pitchToRate(float pitch){
   int index;
   index = int_clip(float_to_int((0.2440945f * pitch)),0,31);
   return (float_wrap_array(Util_pitchToRate_c0)[index] + (pitch * (float_wrap_array(Util_pitchToRate_c1)[index] + (pitch * float_wrap_array(Util_pitchToRate_c2)[index]))));
}

float Util_cvToPitch(float cv){
   return (24.f + (120.f * cv));
}

float Util_cvToRate_1024_raw_c0(int index){
   return Util_cvToRate_1024_c0[index];
}

float Util_cvToRate_1024_raw_c1(int index){
   return Util_cvToRate_1024_c1[index];
}

float Util_cvToRate_1024_raw_c2(int index){
   return Util_cvToRate_1024_c2[index];
}

float Util_cvToRate_1024(float cv){
   int index;
   index = int_clip(float_to_int((34.4444445f * cv)),0,31);
   return (float_wrap_array(Util_cvToRate_1024_c0)[index] + (cv * (float_wrap_array(Util_cvToRate_1024_c1)[index] + (cv * float_wrap_array(Util_cvToRate_1024_c2)[index]))));
}

float Util_cvToRate_raw_c0(int index){
   return Util_cvToRate_c0[index];
}

float Util_cvToRate_raw_c1(int index){
   return Util_cvToRate_c1[index];
}

float Util_cvToRate_raw_c2(int index){
   return Util_cvToRate_c2[index];
}

float Util_cvToRate(float cv){
   int index;
   index = int_clip(float_to_int((141.1111112f * cv)),0,127);
   return (float_wrap_array(Util_cvToRate_c0)[index] + (cv * (float_wrap_array(Util_cvToRate_c1)[index] + (cv * float_wrap_array(Util_cvToRate_c2)[index]))));
}

float Util_pitchToCv(float pitch){
   return (0.0083334f * (-24.f + pitch));
}

float Util_cvToperiod_raw_c0(int index){
   return Util_cvToperiod_c0[index];
}

float Util_cvToperiod_raw_c1(int index){
   return Util_cvToperiod_c1[index];
}

float Util_cvToperiod_raw_c2(int index){
   return Util_cvToperiod_c2[index];
}

float Util_cvToperiod(float cv){
   int index;
   index = int_clip(float_to_int((31.f * cv)),0,31);
   return (float_wrap_array(Util_cvToperiod_c0)[index] + (cv * (float_wrap_array(Util_cvToperiod_c1)[index] + (cv * float_wrap_array(Util_cvToperiod_c2)[index]))));
}

float Util_cvTokHz_raw_c0(int index){
   return Util_cvTokHz_c0[index];
}

float Util_cvTokHz_raw_c1(int index){
   return Util_cvTokHz_c1[index];
}

float Util_cvTokHz_raw_c2(int index){
   return Util_cvTokHz_c2[index];
}

float Util_cvTokHz(float cv){
   int index;
   index = int_clip(float_to_int((31.f * cv)),0,31);
   return (float_wrap_array(Util_cvTokHz_c0)[index] + (cv * (float_wrap_array(Util_cvTokHz_c1)[index] + (cv * float_wrap_array(Util_cvTokHz_c2)[index]))));
}

float Polycv_velToCV(int vel){
   return (0.0078741f * int_to_float(vel));
}

float Polycv_velToGate(int vel){
   float _if_40;
   if(vel > 0){
      _if_40 = (0.0078741f * int_to_float(vel));
   }
   else
   {
      _if_40 = 0.f;
   }
   return _if_40;
}

void Polycv__ctx_type_2_init(Polycv__ctx_type_2 &_output_){
   Polycv__ctx_type_2 _ctx;
   int_init_array(4,0,_ctx.vel);
   _ctx.polyState_ret_9 = 0.f;
   _ctx.polyState_ret_8 = 0.f;
   _ctx.polyState_ret_7 = 0.f;
   _ctx.polyState_ret_6 = 0.f;
   _ctx.polyState_ret_5 = 0.f;
   _ctx.polyState_ret_4 = 0.f;
   _ctx.polyState_ret_3 = 0.f;
   _ctx.polyState_ret_2 = 0.f;
   _ctx.polyState_ret_11 = 0.f;
   _ctx.polyState_ret_10 = 0.f;
   _ctx.polyState_ret_1 = 0.f;
   _ctx.polyState_ret_0 = 0.f;
   int_init_array(4,0,_ctx.notes);
   _output_ = _ctx;
   return ;
}

void Polycv_poly_noteOn_init(Polycv__ctx_type_2 &_output_){
   Polycv__ctx_type_2_init(_output_);
   return ;
}

void Polycv_poly_noteOn(Polycv__ctx_type_2 &_ctx, int note, int velocity){
   int i;
   i = 0;
   uint8_t found;
   found = false;
   while((i < 4) && bool_not(found)){
      if(int_get(_ctx.vel,i) == 0){
         int_set(_ctx.notes,i,note);
         int_set(_ctx.vel,i,velocity);
         found = true;
      }
      i = (1 + i);
   }
}

void Polycv_poly_noteOff_init(Polycv__ctx_type_2 &_output_){
   Polycv__ctx_type_2_init(_output_);
   return ;
}

void Polycv_poly_noteOff(Polycv__ctx_type_2 &_ctx, int note){
   int i;
   i = 0;
   uint8_t found;
   found = false;
   while((i < 4) && bool_not(found)){
      if(int_get(_ctx.notes,i) == note){
         int_set(_ctx.vel,i,0);
         found = true;
      }
      i = (1 + i);
   }
}

void Polycv_polyState_init(Polycv__ctx_type_2 &_output_){
   Polycv__ctx_type_2_init(_output_);
   return ;
}

void Polycv_polyState(Polycv__ctx_type_2 &_ctx){
   float note1;
   note1 = Util_pitchToCv(int_to_float(int_get(_ctx.notes,0)));
   float note2;
   note2 = Util_pitchToCv(int_to_float(int_get(_ctx.notes,1)));
   float note3;
   note3 = Util_pitchToCv(int_to_float(int_get(_ctx.notes,2)));
   float note4;
   note4 = Util_pitchToCv(int_to_float(int_get(_ctx.notes,3)));
   float vel1;
   vel1 = Polycv_velToCV(int_get(_ctx.vel,0));
   float vel2;
   vel2 = Polycv_velToCV(int_get(_ctx.vel,1));
   float vel3;
   vel3 = Polycv_velToCV(int_get(_ctx.vel,2));
   float vel4;
   vel4 = Polycv_velToCV(int_get(_ctx.vel,3));
   float gate1;
   gate1 = Polycv_velToGate(int_get(_ctx.vel,0));
   float gate2;
   gate2 = Polycv_velToGate(int_get(_ctx.vel,1));
   float gate3;
   gate3 = Polycv_velToGate(int_get(_ctx.vel,2));
   float gate4;
   gate4 = Polycv_velToGate(int_get(_ctx.vel,3));
   _ctx.polyState_ret_0 = note1;
   _ctx.polyState_ret_1 = vel1;
   _ctx.polyState_ret_2 = gate1;
   _ctx.polyState_ret_3 = note2;
   _ctx.polyState_ret_4 = vel2;
   _ctx.polyState_ret_5 = gate2;
   _ctx.polyState_ret_6 = note3;
   _ctx.polyState_ret_7 = vel3;
   _ctx.polyState_ret_8 = gate3;
   _ctx.polyState_ret_9 = note4;
   _ctx.polyState_ret_10 = vel4;
   _ctx.polyState_ret_11 = gate4;
   return ;
}

void Polycv_polyState_ret_0_init(Polycv__ctx_type_2 &_output_){
   Polycv__ctx_type_2_init(_output_);
   return ;
}

float Polycv_polyState_ret_0(Polycv__ctx_type_2 &_ctx){
   return _ctx.polyState_ret_0;
}

void Polycv_polyState_ret_1_init(Polycv__ctx_type_2 &_output_){
   Polycv__ctx_type_2_init(_output_);
   return ;
}

float Polycv_polyState_ret_1(Polycv__ctx_type_2 &_ctx){
   return _ctx.polyState_ret_1;
}

void Polycv_polyState_ret_2_init(Polycv__ctx_type_2 &_output_){
   Polycv__ctx_type_2_init(_output_);
   return ;
}

float Polycv_polyState_ret_2(Polycv__ctx_type_2 &_ctx){
   return _ctx.polyState_ret_2;
}

void Polycv_polyState_ret_3_init(Polycv__ctx_type_2 &_output_){
   Polycv__ctx_type_2_init(_output_);
   return ;
}

float Polycv_polyState_ret_3(Polycv__ctx_type_2 &_ctx){
   return _ctx.polyState_ret_3;
}

void Polycv_polyState_ret_4_init(Polycv__ctx_type_2 &_output_){
   Polycv__ctx_type_2_init(_output_);
   return ;
}

float Polycv_polyState_ret_4(Polycv__ctx_type_2 &_ctx){
   return _ctx.polyState_ret_4;
}

void Polycv_polyState_ret_5_init(Polycv__ctx_type_2 &_output_){
   Polycv__ctx_type_2_init(_output_);
   return ;
}

float Polycv_polyState_ret_5(Polycv__ctx_type_2 &_ctx){
   return _ctx.polyState_ret_5;
}

void Polycv_polyState_ret_6_init(Polycv__ctx_type_2 &_output_){
   Polycv__ctx_type_2_init(_output_);
   return ;
}

float Polycv_polyState_ret_6(Polycv__ctx_type_2 &_ctx){
   return _ctx.polyState_ret_6;
}

void Polycv_polyState_ret_7_init(Polycv__ctx_type_2 &_output_){
   Polycv__ctx_type_2_init(_output_);
   return ;
}

float Polycv_polyState_ret_7(Polycv__ctx_type_2 &_ctx){
   return _ctx.polyState_ret_7;
}

void Polycv_polyState_ret_8_init(Polycv__ctx_type_2 &_output_){
   Polycv__ctx_type_2_init(_output_);
   return ;
}

float Polycv_polyState_ret_8(Polycv__ctx_type_2 &_ctx){
   return _ctx.polyState_ret_8;
}

void Polycv_polyState_ret_9_init(Polycv__ctx_type_2 &_output_){
   Polycv__ctx_type_2_init(_output_);
   return ;
}

float Polycv_polyState_ret_9(Polycv__ctx_type_2 &_ctx){
   return _ctx.polyState_ret_9;
}

void Polycv_polyState_ret_10_init(Polycv__ctx_type_2 &_output_){
   Polycv__ctx_type_2_init(_output_);
   return ;
}

float Polycv_polyState_ret_10(Polycv__ctx_type_2 &_ctx){
   return _ctx.polyState_ret_10;
}

void Polycv_polyState_ret_11_init(Polycv__ctx_type_2 &_output_){
   Polycv__ctx_type_2_init(_output_);
   return ;
}

float Polycv_polyState_ret_11(Polycv__ctx_type_2 &_ctx){
   return _ctx.polyState_ret_11;
}

void Polycv__ctx_type_3_init(Polycv__ctx_type_3 &_output_){
   Polycv__ctx_type_3 _ctx;
   _ctx.process_ret_9 = 0.f;
   _ctx.process_ret_8 = 0.f;
   _ctx.process_ret_7 = 0.f;
   _ctx.process_ret_6 = 0.f;
   _ctx.process_ret_5 = 0.f;
   _ctx.process_ret_4 = 0.f;
   _ctx.process_ret_3 = 0.f;
   _ctx.process_ret_2 = 0.f;
   _ctx.process_ret_11 = 0.f;
   _ctx.process_ret_10 = 0.f;
   _ctx.process_ret_1 = 0.f;
   _ctx.process_ret_0 = 0.f;
   Polycv__ctx_type_2_init(_ctx.poly);
   _ctx.channel_in = 0;
   _output_ = _ctx;
   return ;
}

void Polycv_process_init(Polycv__ctx_type_3 &_output_){
   Polycv__ctx_type_3_init(_output_);
   return ;
}

void Polycv_process(Polycv__ctx_type_3 &_ctx, int c){
   _ctx.channel_in = c;
   Polycv_polyState(_ctx.poly);
   _ctx.process_ret_0 = Polycv_polyState_ret_0(_ctx.poly);
   _ctx.process_ret_1 = Polycv_polyState_ret_1(_ctx.poly);
   _ctx.process_ret_2 = Polycv_polyState_ret_2(_ctx.poly);
   _ctx.process_ret_3 = Polycv_polyState_ret_3(_ctx.poly);
   _ctx.process_ret_4 = Polycv_polyState_ret_4(_ctx.poly);
   _ctx.process_ret_5 = Polycv_polyState_ret_5(_ctx.poly);
   _ctx.process_ret_6 = Polycv_polyState_ret_6(_ctx.poly);
   _ctx.process_ret_7 = Polycv_polyState_ret_7(_ctx.poly);
   _ctx.process_ret_8 = Polycv_polyState_ret_8(_ctx.poly);
   _ctx.process_ret_9 = Polycv_polyState_ret_9(_ctx.poly);
   _ctx.process_ret_10 = Polycv_polyState_ret_10(_ctx.poly);
   _ctx.process_ret_11 = Polycv_polyState_ret_11(_ctx.poly);
   return ;
}

void Polycv_process_ret_0_init(Polycv__ctx_type_3 &_output_){
   Polycv__ctx_type_3_init(_output_);
   return ;
}

float Polycv_process_ret_0(Polycv__ctx_type_3 &_ctx){
   return _ctx.process_ret_0;
}

void Polycv_process_ret_1_init(Polycv__ctx_type_3 &_output_){
   Polycv__ctx_type_3_init(_output_);
   return ;
}

float Polycv_process_ret_1(Polycv__ctx_type_3 &_ctx){
   return _ctx.process_ret_1;
}

void Polycv_process_ret_2_init(Polycv__ctx_type_3 &_output_){
   Polycv__ctx_type_3_init(_output_);
   return ;
}

float Polycv_process_ret_2(Polycv__ctx_type_3 &_ctx){
   return _ctx.process_ret_2;
}

void Polycv_process_ret_3_init(Polycv__ctx_type_3 &_output_){
   Polycv__ctx_type_3_init(_output_);
   return ;
}

float Polycv_process_ret_3(Polycv__ctx_type_3 &_ctx){
   return _ctx.process_ret_3;
}

void Polycv_process_ret_4_init(Polycv__ctx_type_3 &_output_){
   Polycv__ctx_type_3_init(_output_);
   return ;
}

float Polycv_process_ret_4(Polycv__ctx_type_3 &_ctx){
   return _ctx.process_ret_4;
}

void Polycv_process_ret_5_init(Polycv__ctx_type_3 &_output_){
   Polycv__ctx_type_3_init(_output_);
   return ;
}

float Polycv_process_ret_5(Polycv__ctx_type_3 &_ctx){
   return _ctx.process_ret_5;
}

void Polycv_process_ret_6_init(Polycv__ctx_type_3 &_output_){
   Polycv__ctx_type_3_init(_output_);
   return ;
}

float Polycv_process_ret_6(Polycv__ctx_type_3 &_ctx){
   return _ctx.process_ret_6;
}

void Polycv_process_ret_7_init(Polycv__ctx_type_3 &_output_){
   Polycv__ctx_type_3_init(_output_);
   return ;
}

float Polycv_process_ret_7(Polycv__ctx_type_3 &_ctx){
   return _ctx.process_ret_7;
}

void Polycv_process_ret_8_init(Polycv__ctx_type_3 &_output_){
   Polycv__ctx_type_3_init(_output_);
   return ;
}

float Polycv_process_ret_8(Polycv__ctx_type_3 &_ctx){
   return _ctx.process_ret_8;
}

void Polycv_process_ret_9_init(Polycv__ctx_type_3 &_output_){
   Polycv__ctx_type_3_init(_output_);
   return ;
}

float Polycv_process_ret_9(Polycv__ctx_type_3 &_ctx){
   return _ctx.process_ret_9;
}

void Polycv_process_ret_10_init(Polycv__ctx_type_3 &_output_){
   Polycv__ctx_type_3_init(_output_);
   return ;
}

float Polycv_process_ret_10(Polycv__ctx_type_3 &_ctx){
   return _ctx.process_ret_10;
}

void Polycv_process_ret_11_init(Polycv__ctx_type_3 &_output_){
   Polycv__ctx_type_3_init(_output_);
   return ;
}

float Polycv_process_ret_11(Polycv__ctx_type_3 &_ctx){
   return _ctx.process_ret_11;
}

void Polycv_noteOn_init(Polycv__ctx_type_3 &_output_){
   Polycv__ctx_type_3_init(_output_);
   return ;
}

void Polycv_noteOn(Polycv__ctx_type_3 &_ctx, int note, int velocity, int channel){
   if(_ctx.channel_in == channel){
      if(velocity > 0){
         Polycv_poly_noteOn(_ctx.poly,note,velocity);
      }
      else
      {
         Polycv_poly_noteOff(_ctx.poly,note);
      }
   }
}

void Polycv_noteOff_init(Polycv__ctx_type_3 &_output_){
   Polycv__ctx_type_3_init(_output_);
   return ;
}

void Polycv_noteOff(Polycv__ctx_type_3 &_ctx, int note, int channel){
   if(_ctx.channel_in == channel){
      Polycv_poly_noteOff(_ctx.poly,note);
   }
}

void Polycv_controlChange_init(Polycv__ctx_type_3 &_output_){
   Polycv__ctx_type_3_init(_output_);
   return ;
}

void Polycv_controlChange(Polycv__ctx_type_3 &_ctx, int control, int value, int channel){
}

void Polycv_default_init(Polycv__ctx_type_3 &_output_){
   Polycv__ctx_type_3_init(_output_);
   return ;
}

void Polycv_default(Polycv__ctx_type_3 &_ctx){
}


