
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#include "polycv.h"

void Util__ctx_type_0_init(Util__ctx_type_0 &_output_){
   Util__ctx_type_0 _ctx;
   _ctx.pre = 0;
   _output_ = _ctx;
   return ;
}

void Util_edge_init(Util__ctx_type_0 &_output_){
   Util__ctx_type_0_init(_output_);
   return ;
}

uint8_t Util_edge(Util__ctx_type_0 &_ctx, uint8_t x){
   uint8_t ret;
   ret = (x && bool_not(_ctx.pre));
   _ctx.pre = x;
   return ret;
}

void Util__ctx_type_1_init(Util__ctx_type_1 &_output_){
   Util__ctx_type_1 _ctx;
   _ctx.pre_x = 0.000000f;
   _output_ = _ctx;
   return ;
}

void Util_change_init(Util__ctx_type_1 &_output_){
   Util__ctx_type_1_init(_output_);
   return ;
}

uint8_t Util_change(Util__ctx_type_1 &_ctx, float x){
   uint8_t v;
   v = (_ctx.pre_x != x);
   _ctx.pre_x = x;
   return v;
}

float Util_map(float x, float x0, float x1, float y0, float y1){
   return ((((x + (- x0)) * (y1 + (- y0))) / (x1 + (- x0))) + y0);
}

void Util__ctx_type_3_init(Util__ctx_type_3 &_output_){
   Util__ctx_type_3 _ctx;
   _ctx.y1 = 0.000000f;
   _ctx.x1 = 0.000000f;
   _output_ = _ctx;
   return ;
}

void Util_dcblock_init(Util__ctx_type_3 &_output_){
   Util__ctx_type_3_init(_output_);
   return ;
}

float Util_dcblock(Util__ctx_type_3 &_ctx, float x0){
   float y0;
   y0 = (x0 + (- _ctx.x1) + (_ctx.y1 * 0.995000f));
   _ctx.x1 = x0;
   _ctx.y1 = y0;
   return y0;
}

void Util__ctx_type_4_init(Util__ctx_type_4 &_output_){
   Util__ctx_type_4 _ctx;
   _ctx.x = 0.000000f;
   _output_ = _ctx;
   return ;
}

void Util_smooth_init(Util__ctx_type_4 &_output_){
   Util__ctx_type_4_init(_output_);
   return ;
}

float Util_smooth(Util__ctx_type_4 &_ctx, float input){
   _ctx.x = (_ctx.x + ((input + (- _ctx.x)) * 0.005000f));
   return _ctx.x;
}

void Util__ctx_type_5_init(Util__ctx_type_5 &_output_){
   Util__ctx_type_5 _ctx;
   _ctx.x0 = 0.000000f;
   _output_ = _ctx;
   return ;
}

void Util_average2_init(Util__ctx_type_5 &_output_){
   Util__ctx_type_5_init(_output_);
   return ;
}

float Util_average2(Util__ctx_type_5 &_ctx, float x1){
   float result;
   result = ((_ctx.x0 + x1) * 0.500000f);
   _ctx.x0 = x1;
   return result;
}

float Util_cubic_clipper(float x){
   uint8_t _cond_21;
   _cond_21 = (x <= (-0.666667f));
   if(_cond_21){
      return (-0.666667f);
   }
   else
   {
      uint8_t _cond_20;
      _cond_20 = (x >= 0.666667f);
      if(_cond_20){
         return 0.666667f;
      }
      else
      {
         return (x + ((-0.333333f) * x * x * x));
      }
   }
}

float Util_pitchToRate_1024(float pitch){
   int index;
   index = int_clip(float_to_int((0.244094f * pitch)),0,31);
   return (float_wrap_array(Util_pitchToRate_1024_c0)[index] + (pitch * (float_wrap_array(Util_pitchToRate_1024_c1)[index] + (float_wrap_array(Util_pitchToRate_1024_c2)[index] * pitch))));
}

float Util_pitchToRate(float pitch){
   int index;
   index = int_clip(float_to_int((0.244094f * pitch)),0,31);
   return (float_wrap_array(Util_pitchToRate_c0)[index] + (pitch * (float_wrap_array(Util_pitchToRate_c1)[index] + (float_wrap_array(Util_pitchToRate_c2)[index] * pitch))));
}

float Util_cvToPitch(float cv){
   return ((cv * 120.000000f) + 24.000000f);
}

float Util_cvToRate_1024(float cv){
   int index;
   index = int_clip(float_to_int((34.444444f * cv)),0,31);
   return (float_wrap_array(Util_cvToRate_1024_c0)[index] + (cv * (float_wrap_array(Util_cvToRate_1024_c1)[index] + (float_wrap_array(Util_cvToRate_1024_c2)[index] * cv))));
}

float Util_cvToRate(float cv){
   int index;
   index = int_clip(float_to_int((34.444444f * cv)),0,31);
   return (float_wrap_array(Util_cvToRate_c0)[index] + (cv * (float_wrap_array(Util_cvToRate_c1)[index] + (float_wrap_array(Util_cvToRate_c2)[index] * cv))));
}

float Util_pitchToCv(float pitch){
   return (0.008333f * ((-24.000000f) + pitch));
}

float Util_cvToperiod(float cv){
   int index;
   index = int_clip(float_to_int((31.000000f * cv)),0,31);
   return (float_wrap_array(Util_cvToperiod_c0)[index] + (cv * (float_wrap_array(Util_cvToperiod_c1)[index] + (float_wrap_array(Util_cvToperiod_c2)[index] * cv))));
}

float Util_cvTokHz(float cv){
   int index;
   index = int_clip(float_to_int((31.000000f * cv)),0,31);
   return (float_wrap_array(Util_cvTokHz_c0)[index] + (cv * (float_wrap_array(Util_cvTokHz_c1)[index] + (float_wrap_array(Util_cvTokHz_c2)[index] * cv))));
}

float Polycv_velToCV(int vel){
   return (int_to_float(vel) * 0.007874f);
}

float Polycv_velToGate(int vel){
   float _if_40;
   uint8_t _cond_50;
   _cond_50 = (vel > 0);
   if(_cond_50){ _if_40 = (int_to_float(vel) * 0.007874f); }
   else
   { _if_40 = 0.000000f; }
   return _if_40;
}

void Polycv__ctx_type_2_init(Polycv__ctx_type_2 &_output_){
   Polycv__ctx_type_2 _ctx;
   int_init_array(4,0,_ctx.vel);
   int_init_array(4,0,_ctx.notes);
   _output_ = _ctx;
   return ;
}

void Polycv_poly_noteOn_init(Polycv__ctx_type_2 &_output_){
   Polycv__ctx_type_2_init(_output_);
   return ;
}

void Polycv_poly_noteOn(Polycv__ctx_type_2 &_ctx, int note, int velocity){
   int i;
   i = 0;
   uint8_t found;
   found = 0;
   while((i < 4) && bool_not(found)){
      uint8_t _cond_41;
      _cond_41 = (int_get(_ctx.vel,i) == 0);
      if(_cond_41){
         int_set(_ctx.notes,i,note);
         int_set(_ctx.vel,i,velocity);
         found = 1;
      }
      i = (i + 1);
   }
}

void Polycv_poly_noteOff_init(Polycv__ctx_type_2 &_output_){
   Polycv__ctx_type_2_init(_output_);
   return ;
}

void Polycv_poly_noteOff(Polycv__ctx_type_2 &_ctx, int note){
   int i;
   i = 0;
   uint8_t found;
   found = 0;
   while((i < 4) && bool_not(found)){
      uint8_t _cond_42;
      _cond_42 = (int_get(_ctx.notes,i) == note);
      if(_cond_42){
         int_set(_ctx.vel,i,0);
         found = 1;
      }
      i = (i + 1);
   }
}

void Polycv_polyState_init(Polycv__ctx_type_2 &_output_){
   Polycv__ctx_type_2_init(_output_);
   return ;
}

void Polycv_polyState(Polycv__ctx_type_2 &_ctx, _tuple___real_real_real_real_real_real_real_real_real_real_real_real__ &_output_){
   float note1;
   note1 = Util_pitchToCv(int_to_float(int_get(_ctx.notes,0)));
   float note2;
   note2 = Util_pitchToCv(int_to_float(int_get(_ctx.notes,1)));
   float note3;
   note3 = Util_pitchToCv(int_to_float(int_get(_ctx.notes,2)));
   float note4;
   note4 = Util_pitchToCv(int_to_float(int_get(_ctx.notes,3)));
   float vel1;
   vel1 = Polycv_velToCV(int_get(_ctx.vel,0));
   float vel2;
   vel2 = Polycv_velToCV(int_get(_ctx.vel,1));
   float vel3;
   vel3 = Polycv_velToCV(int_get(_ctx.vel,2));
   float vel4;
   vel4 = Polycv_velToCV(int_get(_ctx.vel,3));
   float gate1;
   gate1 = Polycv_velToGate(int_get(_ctx.vel,0));
   float gate2;
   gate2 = Polycv_velToGate(int_get(_ctx.vel,1));
   float gate3;
   gate3 = Polycv_velToGate(int_get(_ctx.vel,2));
   float gate4;
   gate4 = Polycv_velToGate(int_get(_ctx.vel,3));
   _tuple___real_real_real_real_real_real_real_real_real_real_real_real__ _tuple_43;
   {
      _tuple_43.field_0 = note1;
      _tuple_43.field_1 = vel1;
      _tuple_43.field_2 = gate1;
      _tuple_43.field_3 = note2;
      _tuple_43.field_4 = vel2;
      _tuple_43.field_5 = gate2;
      _tuple_43.field_6 = note3;
      _tuple_43.field_7 = vel3;
      _tuple_43.field_8 = gate3;
      _tuple_43.field_9 = note4;
      _tuple_43.field_10 = vel4;
      _tuple_43.field_11 = gate4;
   }
   _output_ = _tuple_43;
   return ;
}

void Polycv__ctx_type_3_init(Polycv__ctx_type_3 &_output_){
   Polycv__ctx_type_3 _ctx;
   Polycv__ctx_type_2_init(_ctx.poly);
   _ctx.channel_in = 0;
   _output_ = _ctx;
   return ;
}

void Polycv_process_init(Polycv__ctx_type_3 &_output_){
   Polycv__ctx_type_3_init(_output_);
   return ;
}

void Polycv_process(Polycv__ctx_type_3 &_ctx, int c, _tuple___real_real_real_real_real_real_real_real_real_real_real_real__ &_output_){
   _ctx.channel_in = c;
   _tuple___real_real_real_real_real_real_real_real_real_real_real_real__ _call_45;
   Polycv_polyState(_ctx.poly,_call_45);
   _output_ = _call_45;
   return ;
}

void Polycv_noteOn_init(Polycv__ctx_type_3 &_output_){
   Polycv__ctx_type_3_init(_output_);
   return ;
}

void Polycv_noteOn(Polycv__ctx_type_3 &_ctx, int note, int velocity, int channel){
   uint8_t _cond_48;
   _cond_48 = (_ctx.channel_in == channel);
   if(_cond_48){
      uint8_t _cond_47;
      _cond_47 = (velocity > 0);
      if(_cond_47){
         Polycv_poly_noteOn(_ctx.poly,note,velocity);
      }
      else
      {
         Polycv_poly_noteOff(_ctx.poly,note);
      }
   }
}

void Polycv_noteOff_init(Polycv__ctx_type_3 &_output_){
   Polycv__ctx_type_3_init(_output_);
   return ;
}

void Polycv_noteOff(Polycv__ctx_type_3 &_ctx, int note, int channel){
   uint8_t _cond_49;
   _cond_49 = (_ctx.channel_in == channel);
   if(_cond_49){
      Polycv_poly_noteOff(_ctx.poly,note);
   }
}

void Polycv_controlChange_init(Polycv__ctx_type_3 &_output_){
   Polycv__ctx_type_3_init(_output_);
   return ;
}

void Polycv_controlChange(Polycv__ctx_type_3 &_ctx, int control, int value, int channel){
}

void Polycv_default_init(Polycv__ctx_type_3 &_output_){
   Polycv__ctx_type_3_init(_output_);
   return ;
}

void Polycv_default(Polycv__ctx_type_3 &_ctx){
}


