
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#ifndef SAW_R_H
#define SAW_R_H
#include <stdint.h>
#include <math.h>
#include "vultin.h"

typedef struct Util__ctx_type_0 {
   uint8_t pre;
} Util__ctx_type_0;

typedef Util__ctx_type_0 Util_edge_type;

void Util__ctx_type_0_init(Util__ctx_type_0 &_output_);

void Util_edge_init(Util__ctx_type_0 &_output_);

uint8_t Util_edge(Util__ctx_type_0 &_ctx, uint8_t x);

typedef struct Util__ctx_type_1 {
   float pre_x;
} Util__ctx_type_1;

typedef Util__ctx_type_1 Util_change_type;

void Util__ctx_type_1_init(Util__ctx_type_1 &_output_);

void Util_change_init(Util__ctx_type_1 &_output_);

uint8_t Util_change(Util__ctx_type_1 &_ctx, float x);

float Util_map(float x, float x0, float x1, float y0, float y1);

typedef struct Util__ctx_type_3 {
   float y1;
   float x1;
} Util__ctx_type_3;

typedef Util__ctx_type_3 Util_dcblock_type;

void Util__ctx_type_3_init(Util__ctx_type_3 &_output_);

void Util_dcblock_init(Util__ctx_type_3 &_output_);

float Util_dcblock(Util__ctx_type_3 &_ctx, float x0);

typedef struct Util__ctx_type_4 {
   float x;
} Util__ctx_type_4;

typedef Util__ctx_type_4 Util_smooth_type;

void Util__ctx_type_4_init(Util__ctx_type_4 &_output_);

void Util_smooth_init(Util__ctx_type_4 &_output_);

float Util_smooth(Util__ctx_type_4 &_ctx, float input);

typedef struct Util__ctx_type_5 {
   float x0;
} Util__ctx_type_5;

typedef Util__ctx_type_5 Util_average2_type;

void Util__ctx_type_5_init(Util__ctx_type_5 &_output_);

void Util_average2_init(Util__ctx_type_5 &_output_);

float Util_average2(Util__ctx_type_5 &_ctx, float x1);

float Util_cubic_clipper(float x);

static const float Util_pitchToRate_1024_c0[33] = {0.1898f,0.1913f,0.1987f,0.2194f,0.2657f,0.3564f,0.5207f,0.8016f,1.2628f,1.9966f,3.1355f,4.8683f,7.4613f,11.2877f,16.8680f,24.9233f,36.4485f,52.8099f,75.8766f,108.1966f,153.2316f,215.6711f,301.8494f,420.3017f,582.5003f,803.8319f,1104.8901f,1513.1840f,2065.3943f,2810.3466f,3812.9291f,5159.2452f,6963.3862f};
static const float Util_pitchToRate_1024_c1[33] = {0.0109f,0.0102f,0.0083f,0.0049f,(-0.0009f),(-0.0101f),(-0.0238f),(-0.0440f),(-0.0730f),(-0.1140f),(-0.1713f),(-0.2506f),(-0.3594f),(-0.5075f),(-0.7082f),(-0.9786f),(-1.3412f),(-1.8258f),(-2.4711f),(-3.3277f),(-4.4616f),(-5.9590f),(-7.9317f),(-10.5254f),(-13.9291f),(-18.3881f),(-24.2200f),(-31.8365f),(-41.7700f),(-54.7088f),(-71.5420f),(-93.4177f),(-121.8166f)};
static const float Util_pitchToRate_1024_c2[33] = {0.0004f,0.0004f,0.0006f,0.0007f,0.0009f,0.0011f,0.0014f,0.0018f,0.0022f,0.0028f,0.0035f,0.0044f,0.0056f,0.0070f,0.0088f,0.0111f,0.0139f,0.0175f,0.0220f,0.0277f,0.0348f,0.0438f,0.0551f,0.0693f,0.0872f,0.1096f,0.1379f,0.1734f,0.2181f,0.2742f,0.3449f,0.4338f,0.5455f};
float Util_pitchToRate_1024(float pitch);

static const float Util_pitchToRate_c0[33] = {0.0002f,0.0002f,0.0002f,0.0002f,0.0003f,0.0003f,0.0005f,0.0008f,0.0012f,0.0019f,0.0031f,0.0048f,0.0073f,0.0110f,0.0165f,0.0243f,0.0356f,0.0516f,0.0741f,0.1057f,0.1496f,0.2106f,0.2948f,0.4105f,0.5688f,0.7850f,1.0790f,1.4777f,2.0170f,2.7445f,3.7236f,5.0383f,6.8002f};
static const float Util_pitchToRate_c1[33] = {0.0000f,0.0000f,0.0000f,0.0000f,(-0.0000f),(-0.0000f),(-0.0000f),(-0.0000f),(-0.0001f),(-0.0001f),(-0.0002f),(-0.0002f),(-0.0004f),(-0.0005f),(-0.0007f),(-0.0010f),(-0.0013f),(-0.0018f),(-0.0024f),(-0.0032f),(-0.0044f),(-0.0058f),(-0.0077f),(-0.0103f),(-0.0136f),(-0.0180f),(-0.0237f),(-0.0311f),(-0.0408f),(-0.0534f),(-0.0699f),(-0.0912f),(-0.1190f)};
static const float Util_pitchToRate_c2[33] = {0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0000f,0.0001f,0.0001f,0.0001f,0.0001f,0.0001f,0.0002f,0.0002f,0.0003f,0.0003f,0.0004f,0.0005f};
float Util_pitchToRate(float pitch);

float Util_cvToPitch(float cv);

static const float Util_cvToRate_1024_c0[33] = {0.7594f,0.7629f,0.7797f,0.8257f,0.9246f,1.1124f,1.4407f,1.9834f,2.8444f,4.1683f,6.1540f,9.0732f,13.2943f,19.3136f,27.7961f,39.6283f,55.9867f,78.4269f,108.9974f,150.3878f,206.1178f,280.7811f,380.3573f,512.6116f,687.6053f,918.3474f,1221.6261f,1619.0668f,2138.4785f,2815.5636f,3696.0898f,4838.6433f,6318.1165f};
static const float Util_cvToRate_1024_c1[33] = {5.2456f,4.9989f,4.4031f,3.3191f,1.5645f,(-1.0993f),(-4.9822f),(-10.4859f),(-18.1280f),(-28.5741f),(-42.6774f),(-61.5281f),(-86.5167f),(-119.4121f),(-162.4604f),(-218.5081f),(-291.1571f),(-384.9574f),(-505.6483f),(-660.4605f),(-858.4912f),(-1111.1728f),(-1432.8575f),(-1841.5435f),(-2359.7804f),(-3015.7941f),(-3844.8864f),(-4891.1724f),(-6209.7399f),(-7869.3288f),(-9955.6558f),(-12575.5384f),(-15862.0069f)};
static const float Util_cvToRate_1024_c2[33] = {20.1256f,24.4576f,29.7220f,36.1196f,43.8942f,53.3423f,64.8241f,78.7774f,95.7340f,116.3405f,141.3825f,171.8147f,208.7973f,253.7404f,308.3573f,374.7304f,455.3902f,553.4117f,672.5321f,817.2928f,993.2130f,1206.9994f,1466.8029f,1782.5283f,2166.2129f,2632.4845f,3199.1198f,3887.7219f,4724.5438f,5741.4893f,6977.3298f,8479.1816f,10304.3030f};
float Util_cvToRate_1024(float cv);

static const float Util_cvToRate_c0[129] = {0.0007f,0.0007f,0.0007f,0.0007f,0.0007f,0.0007f,0.0007f,0.0007f,0.0008f,0.0008f,0.0008f,0.0008f,0.0008f,0.0008f,0.0008f,0.0008f,0.0009f,0.0009f,0.0009f,0.0010f,0.0010f,0.0011f,0.0011f,0.0012f,0.0013f,0.0014f,0.0015f,0.0016f,0.0017f,0.0019f,0.0020f,0.0022f,0.0024f,0.0027f,0.0029f,0.0032f,0.0035f,0.0039f,0.0043f,0.0047f,0.0052f,0.0057f,0.0063f,0.0070f,0.0077f,0.0085f,0.0093f,0.0102f,0.0113f,0.0124f,0.0136f,0.0150f,0.0164f,0.0180f,0.0198f,0.0217f,0.0237f,0.0260f,0.0284f,0.0311f,0.0339f,0.0371f,0.0404f,0.0441f,0.0481f,0.0524f,0.0571f,0.0621f,0.0676f,0.0735f,0.0799f,0.0867f,0.0942f,0.1022f,0.1109f,0.1202f,0.1303f,0.1411f,0.1528f,0.1654f,0.1790f,0.1936f,0.2093f,0.2262f,0.2443f,0.2639f,0.2849f,0.3074f,0.3317f,0.3577f,0.3856f,0.4156f,0.4478f,0.4823f,0.5194f,0.5591f,0.6017f,0.6473f,0.6963f,0.7487f,0.8048f,0.8650f,0.9294f,0.9983f,1.0722f,1.1512f,1.2357f,1.3261f,1.4229f,1.5263f,1.6369f,1.7552f,1.8816f,2.0167f,2.1611f,2.3154f,2.4802f,2.6562f,2.8442f,3.0450f,3.2593f,3.4881f,3.7323f,3.9930f,4.2711f,4.5678f,4.8844f,5.2221f,5.5822f};
static const float Util_cvToRate_c1[129] = {0.0051f,0.0051f,0.0051f,0.0051f,0.0050f,0.0049f,0.0048f,0.0047f,0.0046f,0.0044f,0.0042f,0.0040f,0.0037f,0.0034f,0.0031f,0.0027f,0.0023f,0.0018f,0.0012f,0.0007f,0.0000f,(-0.0007f),(-0.0015f),(-0.0023f),(-0.0033f),(-0.0043f),(-0.0055f),(-0.0067f),(-0.0080f),(-0.0095f),(-0.0111f),(-0.0128f),(-0.0146f),(-0.0166f),(-0.0188f),(-0.0212f),(-0.0237f),(-0.0265f),(-0.0294f),(-0.0326f),(-0.0360f),(-0.0397f),(-0.0437f),(-0.0480f),(-0.0526f),(-0.0575f),(-0.0628f),(-0.0684f),(-0.0745f),(-0.0810f),(-0.0880f),(-0.0955f),(-0.1035f),(-0.1121f),(-0.1212f),(-0.1310f),(-0.1415f),(-0.1527f),(-0.1647f),(-0.1775f),(-0.1911f),(-0.2057f),(-0.2212f),(-0.2378f),(-0.2555f),(-0.2743f),(-0.2944f),(-0.3159f),(-0.3387f),(-0.3630f),(-0.3889f),(-0.4165f),(-0.4459f),(-0.4772f),(-0.5105f),(-0.5459f),(-0.5836f),(-0.6237f),(-0.6663f),(-0.7117f),(-0.7599f),(-0.8111f),(-0.8656f),(-0.9235f),(-0.9850f),(-1.0504f),(-1.1198f),(-1.1936f),(-1.2719f),(-1.3551f),(-1.4434f),(-1.5371f),(-1.6366f),(-1.7422f),(-1.8543f),(-1.9732f),(-2.0994f),(-2.2333f),(-2.3753f),(-2.5259f),(-2.6856f),(-2.8550f),(-3.0346f),(-3.2250f),(-3.4269f),(-3.6409f),(-3.8677f),(-4.1081f),(-4.3629f),(-4.6328f),(-4.9189f),(-5.2220f),(-5.5430f),(-5.8831f),(-6.2434f),(-6.6250f),(-7.0291f),(-7.4570f),(-7.9102f),(-8.3900f),(-8.8981f),(-9.4359f),(-10.0053f),(-10.6080f),(-11.2460f),(-11.9212f),(-12.6358f),(-13.3921f),(-14.1924f)};
static const float Util_cvToRate_c2[129] = {0.0183f,0.0192f,0.0201f,0.0211f,0.0222f,0.0233f,0.0245f,0.0257f,0.0270f,0.0283f,0.0297f,0.0312f,0.0328f,0.0344f,0.0361f,0.0379f,0.0398f,0.0418f,0.0439f,0.0461f,0.0484f,0.0508f,0.0533f,0.0560f,0.0588f,0.0617f,0.0648f,0.0681f,0.0715f,0.0750f,0.0788f,0.0827f,0.0868f,0.0912f,0.0957f,0.1005f,0.1055f,0.1108f,0.1163f,0.1221f,0.1282f,0.1346f,0.1414f,0.1484f,0.1558f,0.1636f,0.1718f,0.1804f,0.1894f,0.1988f,0.2088f,0.2192f,0.2302f,0.2416f,0.2537f,0.2664f,0.2797f,0.2937f,0.3083f,0.3237f,0.3399f,0.3569f,0.3747f,0.3934f,0.4131f,0.4337f,0.4553f,0.4781f,0.5020f,0.5270f,0.5534f,0.5810f,0.6100f,0.6405f,0.6725f,0.7061f,0.7413f,0.7783f,0.8172f,0.8580f,0.9009f,0.9459f,0.9931f,1.0427f,1.0948f,1.1495f,1.2069f,1.2672f,1.3305f,1.3969f,1.4667f,1.5399f,1.6168f,1.6976f,1.7824f,1.8714f,1.9649f,2.0630f,2.1660f,2.2742f,2.3878f,2.5070f,2.6322f,2.7637f,2.9017f,3.0467f,3.1988f,3.3586f,3.5263f,3.7025f,3.8874f,4.0815f,4.2854f,4.4994f,4.7241f,4.9601f,5.2078f,5.4679f,5.7410f,6.0277f,6.3287f,6.6448f,6.9767f,7.3251f,7.6910f,8.0751f,8.4784f,8.9019f,9.3465f};
float Util_cvToRate(float cv);

float Util_pitchToCv(float pitch);

static const float Util_cvToperiod_c0[33] = {674.2460f,671.5538f,662.7618f,646.7595f,623.7994f,594.8718f,561.2983f,524.4769f,485.7314f,446.2294f,406.9474f,368.6638f,331.9687f,297.2842f,264.8877f,234.9369f,207.4931f,182.5430f,160.0169f,139.8048f,121.7696f,105.7571f,91.6051f,79.1491f,68.2272f,58.6839f,50.3717f,43.1534f,36.9020f,31.5020f,26.8485f,22.8472f,19.4138f};
static const float Util_cvToperiod_c1[33] = {(-4656.6563f),(-4481.9606f),(-4198.6861f),(-3855.7515f),(-3487.1395f),(-3115.8588f),(-2756.9303f),(-2419.6251f),(-2109.1348f),(-1827.8083f),(-1576.0630f),(-1353.0471f),(-1157.1189f),(-986.1863f),(-837.9447f),(-710.0391f),(-600.1712f),(-506.1666f),(-426.0135f),(-357.8822f),(-300.1302f),(-251.2989f),(-210.1041f),(-175.4235f),(-146.2821f),(-121.8379f),(-101.3665f),(-84.2477f),(-69.9521f),(-58.0293f),(-48.0972f),(-39.8328f),(-32.9632f)};
static const float Util_cvToperiod_c2[33] = {14548.8232f,11715.3695f,9433.7447f,7596.4773f,6117.0266f,4925.7061f,3966.4010f,3193.9253f,2571.8929f,2071.0043f,1667.6662f,1342.8802f,1081.3478f,870.7500f,701.1673f,564.6116f,454.6507f,366.1053f,294.8045f,237.3899f,191.1571f,153.9283f,123.9500f,99.8102f,80.3717f,64.7189f,52.1146f,41.9650f,33.7921f,27.2109f,21.9115f,17.6441f,14.2078f};
float Util_cvToperiod(float cv);

static const float Util_cvTokHz_c0[33] = {0.0327f,0.0329f,0.0340f,0.0369f,0.0432f,0.0556f,0.0777f,0.1151f,0.1756f,0.2707f,0.4165f,0.6356f,0.9592f,1.4308f,2.1100f,3.0780f,4.4457f,6.3629f,9.0319f,12.7247f,17.8056f,24.7617f,34.2420f,47.1090f,64.5069f,87.9496f,119.4362f,161.6023f,217.9151f,292.9296f,392.6192f,524.8066f,699.7215f};
static const float Util_cvTokHz_c1[33] = {0.2257f,0.2123f,0.1792f,0.1176f,0.0158f,(-0.1422f),(-0.3775f),(-0.7183f),(-1.2018f),(-1.8772f),(-2.8091f),(-4.0819f),(-5.8060f),(-8.1254f),(-11.2270f),(-15.3537f),(-20.8198f),(-28.0318f),(-37.5145f),(-49.9444f),(-66.1924f),(-87.3784f),(-114.9404f),(-150.7233f),(-197.0916f),(-257.0723f),(-334.5377f),(-434.4368f),(-563.0898f),(-728.5619f),(-941.1373f),(-1213.9213f),(-1563.6033f)};
static const float Util_cvTokHz_c2[33] = {0.8763f,1.0883f,1.3515f,1.6784f,2.0843f,2.5884f,3.2144f,3.9919f,4.9573f,6.1563f,7.6452f,9.4943f,11.7905f,14.6422f,18.1835f,22.5813f,28.0428f,34.8252f,43.2479f,53.7078f,66.6974f,82.8287f,102.8615f,127.7393f,158.6341f,197.0010f,244.6472f,303.8170f,377.2976f,468.5499f,581.8724f,722.6028f,897.3699f};
float Util_cvTokHz(float cv);

typedef struct Saw_r__ctx_type_0 {
   float phase;
   float inc;
   Util__ctx_type_1 _inst23;
} Saw_r__ctx_type_0;

typedef Saw_r__ctx_type_0 Saw_r_process_type;

void Saw_r__ctx_type_0_init(Saw_r__ctx_type_0 &_output_);

void Saw_r_process_init(Saw_r__ctx_type_0 &_output_);

float Saw_r_process(Saw_r__ctx_type_0 &_ctx, float cv);

typedef Saw_r__ctx_type_0 Saw_r_noteOn_type;

void Saw_r_noteOn_init(Saw_r__ctx_type_0 &_output_);

void Saw_r_noteOn(Saw_r__ctx_type_0 &_ctx, int note, int velocity, int channel);

typedef Saw_r__ctx_type_0 Saw_r_noteOff_type;

void Saw_r_noteOff_init(Saw_r__ctx_type_0 &_output_);

void Saw_r_noteOff(Saw_r__ctx_type_0 &_ctx, int note, int channel);

typedef Saw_r__ctx_type_0 Saw_r_controlChange_type;

void Saw_r_controlChange_init(Saw_r__ctx_type_0 &_output_);

void Saw_r_controlChange(Saw_r__ctx_type_0 &_ctx, int control, int value, int channel);

typedef Saw_r__ctx_type_0 Saw_r_default_type;

void Saw_r_default_init(Saw_r__ctx_type_0 &_output_);

void Saw_r_default(Saw_r__ctx_type_0 &_ctx);



#endif // SAW_R_H
