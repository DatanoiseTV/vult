
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#ifndef SAW_R_H
#define SAW_R_H
#include <stdint.h>
#include <math.h>
#include "vultin.h"

typedef struct Util__ctx_type_0 {
   uint8_t pre;
} Util__ctx_type_0;

typedef Util__ctx_type_0 Util_edge_type;

void Util__ctx_type_0_init(Util__ctx_type_0 &_output_);

void Util_edge_init(Util__ctx_type_0 &_output_);

uint8_t Util_edge(Util__ctx_type_0 &_ctx, uint8_t x);

typedef struct Util__ctx_type_1 {
   float pre_x;
} Util__ctx_type_1;

typedef Util__ctx_type_1 Util_change_type;

void Util__ctx_type_1_init(Util__ctx_type_1 &_output_);

void Util_change_init(Util__ctx_type_1 &_output_);

uint8_t Util_change(Util__ctx_type_1 &_ctx, float x);

float Util_map(float x, float x0, float x1, float y0, float y1);

typedef struct Util__ctx_type_3 {
   float y1;
   float x1;
} Util__ctx_type_3;

typedef Util__ctx_type_3 Util_dcblock_type;

void Util__ctx_type_3_init(Util__ctx_type_3 &_output_);

void Util_dcblock_init(Util__ctx_type_3 &_output_);

float Util_dcblock(Util__ctx_type_3 &_ctx, float x0);

typedef struct Util__ctx_type_4 {
   float x;
} Util__ctx_type_4;

typedef Util__ctx_type_4 Util_smooth_type;

void Util__ctx_type_4_init(Util__ctx_type_4 &_output_);

void Util_smooth_init(Util__ctx_type_4 &_output_);

float Util_smooth(Util__ctx_type_4 &_ctx, float input);

typedef struct Util__ctx_type_5 {
   float x0;
} Util__ctx_type_5;

typedef Util__ctx_type_5 Util_average2_type;

void Util__ctx_type_5_init(Util__ctx_type_5 &_output_);

void Util_average2_init(Util__ctx_type_5 &_output_);

float Util_average2(Util__ctx_type_5 &_ctx, float x1);

float Util_cubic_clipper(float x);

static const float Util_pitchToRate_1024_c0[33] = {0.18980f,0.19130f,0.19860f,0.21940f,0.26560f,0.35640f,0.52060f,0.80150f,1.26270f,1.99650f,3.13550f,4.86830f,7.46120f,11.28770f,16.86800f,24.92330f,36.44850f,52.80980f,75.87660f,108.19650f,153.23160f,215.67100f,301.84940f,420.30170f,582.50030f,803.83190f,1104.89000f,1513.18400f,2065.39420f,2810.34650f,3812.92900f,5159.24510f,6963.38620f};
static const float Util_pitchToRate_1024_c1[33] = {0.01090f,0.01010f,0.00830f,0.00480f,(-0.00090f),(-0.01000f),(-0.02380f),(-0.04400f),(-0.07300f),(-0.11400f),(-0.17130f),(-0.25060f),(-0.35930f),(-0.50750f),(-0.70820f),(-0.97850f),(-1.34120f),(-1.82580f),(-2.47110f),(-3.32770f),(-4.46160f),(-5.95890f),(-7.93170f),(-10.52540f),(-13.92910f),(-18.38800f),(-24.22000f),(-31.83650f),(-41.76990f),(-54.70870f),(-71.54200f),(-93.41760f),(-121.81660f)};
static const float Util_pitchToRate_1024_c2[33] = {0.00030f,0.00040f,0.00050f,0.00070f,0.00080f,0.00110f,0.00140f,0.00170f,0.00220f,0.00270f,0.00350f,0.00440f,0.00550f,0.00700f,0.00880f,0.01100f,0.01390f,0.01750f,0.02200f,0.02770f,0.03480f,0.04380f,0.05510f,0.06930f,0.08710f,0.10960f,0.13780f,0.17330f,0.21800f,0.27420f,0.34480f,0.43370f,0.54550f};
float Util_pitchToRate_1024(float pitch);

static const float Util_pitchToRate_c0[33] = {0.00010f,0.00010f,0.00010f,0.00020f,0.00020f,0.00030f,0.00050f,0.00070f,0.00120f,0.00190f,0.00300f,0.00470f,0.00720f,0.01100f,0.01640f,0.02430f,0.03550f,0.05150f,0.07400f,0.10560f,0.14960f,0.21060f,0.29470f,0.41040f,0.56880f,0.78490f,1.07890f,1.47770f,2.01690f,2.74440f,3.72350f,5.03830f,6.80010f};
static const float Util_pitchToRate_c1[33] = {0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,(-0.00010f),(-0.00010f),(-0.00020f),(-0.00030f),(-0.00040f),(-0.00060f),(-0.00090f),(-0.00130f),(-0.00170f),(-0.00240f),(-0.00320f),(-0.00430f),(-0.00580f),(-0.00770f),(-0.01020f),(-0.01360f),(-0.01790f),(-0.02360f),(-0.03100f),(-0.04070f),(-0.05340f),(-0.06980f),(-0.09120f),(-0.11890f)};
static const float Util_pitchToRate_c2[33] = {0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00000f,0.00010f,0.00010f,0.00010f,0.00020f,0.00020f,0.00030f,0.00040f,0.00050f};
float Util_pitchToRate(float pitch);

float Util_cvToPitch(float cv);

static const float Util_cvToRate_1024_c0[33] = {0.75930f,0.76280f,0.77970f,0.82560f,0.92460f,1.11230f,1.44060f,1.98330f,2.84440f,4.16830f,6.15390f,9.07310f,13.29420f,19.31360f,27.79610f,39.62820f,55.98670f,78.42680f,108.99740f,150.38780f,206.11770f,280.78100f,380.35730f,512.61160f,687.60520f,918.34730f,1221.62600f,1619.06680f,2138.47840f,2815.56350f,3696.08980f,4838.64320f,6318.11650f};
static const float Util_cvToRate_1024_c1[33] = {5.24550f,4.99890f,4.40300f,3.31910f,1.56440f,(-1.09920f),(-4.98220f),(-10.48580f),(-18.12790f),(-28.57410f),(-42.67730f),(-61.52810f),(-86.51670f),(-119.41210f),(-162.46030f),(-218.50810f),(-291.15710f),(-384.95730f),(-505.64830f),(-660.46050f),(-858.49110f),(-1111.17280f),(-1432.85750f),(-1841.54350f),(-2359.78030f),(-3015.79410f),(-3844.88630f),(-4891.17230f),(-6209.73980f),(-7869.32870f),(-9955.65580f),(-12575.53830f),(-15862.00680f)};
static const float Util_cvToRate_1024_c2[33] = {20.12550f,24.45750f,29.72200f,36.11950f,43.89420f,53.34230f,64.82410f,78.77730f,95.73390f,116.34040f,141.38240f,171.81460f,208.79730f,253.74030f,308.35730f,374.73040f,455.39010f,553.41160f,672.53200f,817.29280f,993.21290f,1206.99940f,1466.80280f,1782.52830f,2166.21280f,2632.48440f,3199.11970f,3887.72180f,4724.54370f,5741.48930f,6977.32970f,8479.18150f,10304.30300f};
float Util_cvToRate_1024(float cv);

static const float Util_cvToRate_c0[129] = {0.00070f,0.00070f,0.00070f,0.00070f,0.00070f,0.00070f,0.00070f,0.00070f,0.00070f,0.00070f,0.00070f,0.00070f,0.00070f,0.00070f,0.00080f,0.00080f,0.00080f,0.00080f,0.00090f,0.00090f,0.00100f,0.00100f,0.00110f,0.00110f,0.00120f,0.00130f,0.00140f,0.00150f,0.00170f,0.00180f,0.00200f,0.00220f,0.00240f,0.00260f,0.00290f,0.00320f,0.00350f,0.00380f,0.00420f,0.00470f,0.00510f,0.00570f,0.00630f,0.00690f,0.00760f,0.00840f,0.00930f,0.01020f,0.01120f,0.01230f,0.01360f,0.01490f,0.01640f,0.01800f,0.01970f,0.02160f,0.02370f,0.02590f,0.02840f,0.03100f,0.03390f,0.03700f,0.04040f,0.04410f,0.04800f,0.05240f,0.05700f,0.06210f,0.06750f,0.07340f,0.07980f,0.08670f,0.09410f,0.10220f,0.11080f,0.12020f,0.13020f,0.14110f,0.15280f,0.16540f,0.17890f,0.19350f,0.20920f,0.22610f,0.24430f,0.26380f,0.28480f,0.30740f,0.33160f,0.35760f,0.38560f,0.41560f,0.44770f,0.48230f,0.51930f,0.55900f,0.60160f,0.64730f,0.69620f,0.74860f,0.80480f,0.86490f,0.92930f,0.99830f,1.07210f,1.15110f,1.23560f,1.32610f,1.42280f,1.52630f,1.63690f,1.75510f,1.88160f,2.01670f,2.16110f,2.31540f,2.48020f,2.65620f,2.84420f,3.04490f,3.25930f,3.48810f,3.73230f,3.99290f,4.27100f,4.56780f,4.88430f,5.22200f,5.58220f};
static const float Util_cvToRate_c1[129] = {0.00510f,0.00510f,0.00500f,0.00500f,0.00490f,0.00490f,0.00480f,0.00470f,0.00450f,0.00430f,0.00410f,0.00390f,0.00360f,0.00330f,0.00300f,0.00260f,0.00220f,0.00170f,0.00120f,0.00060f,0.00000f,(-0.00070f),(-0.00140f),(-0.00230f),(-0.00320f),(-0.00430f),(-0.00540f),(-0.00660f),(-0.00800f),(-0.00940f),(-0.01100f),(-0.01270f),(-0.01460f),(-0.01660f),(-0.01880f),(-0.02110f),(-0.02370f),(-0.02640f),(-0.02940f),(-0.03260f),(-0.03600f),(-0.03970f),(-0.04360f),(-0.04790f),(-0.05250f),(-0.05740f),(-0.06270f),(-0.06840f),(-0.07450f),(-0.08100f),(-0.08800f),(-0.09550f),(-0.10350f),(-0.11200f),(-0.12120f),(-0.13100f),(-0.14150f),(-0.15270f),(-0.16460f),(-0.17740f),(-0.19100f),(-0.20560f),(-0.22120f),(-0.23770f),(-0.25540f),(-0.27430f),(-0.29440f),(-0.31580f),(-0.33860f),(-0.36300f),(-0.38890f),(-0.41650f),(-0.44590f),(-0.47710f),(-0.51040f),(-0.54580f),(-0.58350f),(-0.62360f),(-0.66630f),(-0.71160f),(-0.75980f),(-0.81110f),(-0.86560f),(-0.92350f),(-0.98500f),(-1.05030f),(-1.11980f),(-1.19350f),(-1.27180f),(-1.35500f),(-1.44330f),(-1.53700f),(-1.63660f),(-1.74220f),(-1.85420f),(-1.97320f),(-2.09930f),(-2.23320f),(-2.37520f),(-2.52580f),(-2.68560f),(-2.85490f),(-3.03450f),(-3.22500f),(-3.42680f),(-3.64080f),(-3.86770f),(-4.10810f),(-4.36280f),(-4.63280f),(-4.91880f),(-5.22190f),(-5.54300f),(-5.88310f),(-6.24340f),(-6.62490f),(-7.02900f),(-7.45700f),(-7.91020f),(-8.39000f),(-8.89800f),(-9.43590f),(-10.00530f),(-10.60800f),(-11.24590f),(-11.92120f),(-12.63580f),(-13.39210f),(-14.19230f)};
static const float Util_cvToRate_c2[129] = {0.01820f,0.01910f,0.02010f,0.02110f,0.02210f,0.02320f,0.02440f,0.02560f,0.02690f,0.02830f,0.02970f,0.03120f,0.03270f,0.03430f,0.03610f,0.03790f,0.03980f,0.04180f,0.04380f,0.04600f,0.04830f,0.05080f,0.05330f,0.05600f,0.05870f,0.06170f,0.06480f,0.06800f,0.07140f,0.07500f,0.07870f,0.08270f,0.08680f,0.09110f,0.09570f,0.10050f,0.10550f,0.11070f,0.11630f,0.12210f,0.12820f,0.13460f,0.14130f,0.14840f,0.15580f,0.16360f,0.17170f,0.18030f,0.18930f,0.19880f,0.20870f,0.21920f,0.23010f,0.24160f,0.25370f,0.26630f,0.27960f,0.29360f,0.30830f,0.32370f,0.33980f,0.35680f,0.37460f,0.39340f,0.41300f,0.43360f,0.45530f,0.47800f,0.50190f,0.52700f,0.55330f,0.58090f,0.61000f,0.64040f,0.67240f,0.70600f,0.74130f,0.77830f,0.81720f,0.85800f,0.90080f,0.94580f,0.99310f,1.04270f,1.09480f,1.14940f,1.20680f,1.26710f,1.33040f,1.39690f,1.46660f,1.53990f,1.61680f,1.69750f,1.78230f,1.87130f,1.96480f,2.06290f,2.16600f,2.27410f,2.38770f,2.50700f,2.63220f,2.76370f,2.90170f,3.04660f,3.19880f,3.35850f,3.52630f,3.70240f,3.88730f,4.08150f,4.28530f,4.49930f,4.72410f,4.96000f,5.20770f,5.46780f,5.74090f,6.02760f,6.32870f,6.64480f,6.97660f,7.32510f,7.69090f,8.07510f,8.47840f,8.90180f,9.34640f};
float Util_cvToRate(float cv);

float Util_pitchToCv(float pitch);

static const float Util_cvToperiod_c0[33] = {674.24600f,671.55380f,662.76170f,646.75950f,623.79940f,594.87180f,561.29820f,524.47690f,485.73130f,446.22930f,406.94740f,368.66370f,331.96860f,297.28410f,264.88760f,234.93680f,207.49310f,182.54300f,160.01690f,139.80480f,121.76950f,105.75710f,91.60510f,79.14900f,68.22720f,58.68380f,50.37170f,43.15330f,36.90200f,31.50200f,26.84840f,22.84710f,19.41370f};
static const float Util_cvToperiod_c1[33] = {(-4656.65630f),(-4481.96050f),(-4198.68610f),(-3855.75150f),(-3487.13940f),(-3115.85880f),(-2756.93030f),(-2419.62510f),(-2109.13470f),(-1827.80830f),(-1576.06290f),(-1353.04700f),(-1157.11880f),(-986.18620f),(-837.94460f),(-710.03910f),(-600.17120f),(-506.16650f),(-426.01340f),(-357.88210f),(-300.13010f),(-251.29890f),(-210.10410f),(-175.42340f),(-146.28210f),(-121.83780f),(-101.36650f),(-84.24770f),(-69.95200f),(-58.02920f),(-48.09720f),(-39.83280f),(-32.96310f)};
static const float Util_cvToperiod_c2[33] = {14548.82310f,11715.36950f,9433.74460f,7596.47720f,6117.02660f,4925.70610f,3966.40100f,3193.92520f,2571.89280f,2071.00430f,1667.66620f,1342.88010f,1081.34770f,870.75000f,701.16720f,564.61150f,454.65070f,366.10520f,294.80450f,237.38990f,191.15700f,153.92830f,123.95000f,99.81010f,80.37160f,64.71880f,52.11450f,41.96500f,33.79210f,27.21090f,21.91140f,17.64410f,14.20780f};
float Util_cvToperiod(float cv);

static const float Util_cvTokHz_c0[33] = {0.03270f,0.03290f,0.03390f,0.03680f,0.04320f,0.05560f,0.07770f,0.11500f,0.17560f,0.27070f,0.41650f,0.63550f,0.95920f,1.43080f,2.10990f,3.07800f,4.44560f,6.36290f,9.03190f,12.72460f,17.80560f,24.76170f,34.24190f,47.10900f,64.50690f,87.94950f,119.43620f,161.60220f,217.91510f,292.92960f,392.61920f,524.80660f,699.72140f};
static const float Util_cvTokHz_c1[33] = {0.22570f,0.21220f,0.17910f,0.11760f,0.01570f,(-0.14210f),(-0.37740f),(-0.71820f),(-1.20170f),(-1.87720f),(-2.80900f),(-4.08180f),(-5.80600f),(-8.12530f),(-11.22700f),(-15.35370f),(-20.81970f),(-28.03170f),(-37.51450f),(-49.94440f),(-66.19240f),(-87.37840f),(-114.94030f),(-150.72330f),(-197.09150f),(-257.07220f),(-334.53760f),(-434.43670f),(-563.08980f),(-728.56180f),(-941.13720f),(-1213.92130f),(-1563.60330f)};
static const float Util_cvTokHz_c2[33] = {0.87630f,1.08820f,1.35140f,1.67830f,2.08420f,2.58830f,3.21440f,3.99180f,4.95730f,6.15620f,7.64520f,9.49420f,11.79050f,14.64210f,18.18350f,22.58130f,28.04280f,34.82510f,43.24790f,53.70770f,66.69740f,82.82870f,102.86140f,127.73930f,158.63400f,197.00090f,244.64710f,303.81700f,377.29750f,468.54990f,581.87230f,722.60270f,897.36980f};
float Util_cvTokHz(float cv);

typedef struct Saw_r__ctx_type_0 {
   float phase;
   float inc;
   Util__ctx_type_1 _inst23;
} Saw_r__ctx_type_0;

typedef Saw_r__ctx_type_0 Saw_r_process_type;

void Saw_r__ctx_type_0_init(Saw_r__ctx_type_0 &_output_);

void Saw_r_process_init(Saw_r__ctx_type_0 &_output_);

float Saw_r_process(Saw_r__ctx_type_0 &_ctx, float cv);

typedef Saw_r__ctx_type_0 Saw_r_noteOn_type;

void Saw_r_noteOn_init(Saw_r__ctx_type_0 &_output_);

void Saw_r_noteOn(Saw_r__ctx_type_0 &_ctx, int note, int velocity, int channel);

typedef Saw_r__ctx_type_0 Saw_r_noteOff_type;

void Saw_r_noteOff_init(Saw_r__ctx_type_0 &_output_);

void Saw_r_noteOff(Saw_r__ctx_type_0 &_ctx, int note, int channel);

typedef Saw_r__ctx_type_0 Saw_r_controlChange_type;

void Saw_r_controlChange_init(Saw_r__ctx_type_0 &_output_);

void Saw_r_controlChange(Saw_r__ctx_type_0 &_ctx, int control, int value, int channel);

typedef Saw_r__ctx_type_0 Saw_r_default_type;

void Saw_r_default_init(Saw_r__ctx_type_0 &_output_);

void Saw_r_default(Saw_r__ctx_type_0 &_ctx);



#endif // SAW_R_H
