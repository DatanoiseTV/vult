
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#ifndef PHASE_H
#define PHASE_H
#include <stdint.h>
#include <math.h>
#include "vultin.h"

typedef struct Util__ctx_type_0 {
   uint8_t pre;
} Util__ctx_type_0;

typedef Util__ctx_type_0 Util_edge_type;

void Util__ctx_type_0_init(Util__ctx_type_0 &_output_);

void Util_edge_init(Util__ctx_type_0 &_output_);

uint8_t Util_edge(Util__ctx_type_0 &_ctx, uint8_t x);

typedef struct Util__ctx_type_1 {
   float pre_x;
} Util__ctx_type_1;

typedef Util__ctx_type_1 Util_change_type;

void Util__ctx_type_1_init(Util__ctx_type_1 &_output_);

void Util_change_init(Util__ctx_type_1 &_output_);

uint8_t Util_change(Util__ctx_type_1 &_ctx, float x);

float Util_map(float x, float x0, float x1, float y0, float y1);

typedef struct Util__ctx_type_3 {
   float y1;
   float x1;
} Util__ctx_type_3;

typedef Util__ctx_type_3 Util_dcblock_type;

void Util__ctx_type_3_init(Util__ctx_type_3 &_output_);

void Util_dcblock_init(Util__ctx_type_3 &_output_);

float Util_dcblock(Util__ctx_type_3 &_ctx, float x0);

typedef struct Util__ctx_type_4 {
   float x;
} Util__ctx_type_4;

typedef Util__ctx_type_4 Util_smooth_type;

void Util__ctx_type_4_init(Util__ctx_type_4 &_output_);

void Util_smooth_init(Util__ctx_type_4 &_output_);

float Util_smooth(Util__ctx_type_4 &_ctx, float input);

typedef struct Util__ctx_type_5 {
   float x0;
} Util__ctx_type_5;

typedef Util__ctx_type_5 Util_average2_type;

void Util__ctx_type_5_init(Util__ctx_type_5 &_output_);

void Util_average2_init(Util__ctx_type_5 &_output_);

float Util_average2(Util__ctx_type_5 &_ctx, float x1);

static const float Util_pitchToRate_1024_c0[33] = {0.189842f,0.191326f,0.198689f,0.219425f,0.265677f,0.356438f,0.520651f,0.801560f,1.262758f,1.996562f,3.135544f,4.868347f,7.461281f,11.287715f,16.867996f,24.923305f,36.448521f,52.809903f,75.876616f,108.197225f,153.232414f,215.672344f,301.846626f,420.298038f,582.505178f,803.812129f,1104.880165f,1513.124126f,2065.373952f,2810.230550f,3812.902888f,5159.525580f,6963.761469f};
static const float Util_pitchToRate_1024_c1[33] = {0.010913f,0.010176f,0.008334f,0.004867f,(-0.000939f),(-0.010061f),(-0.023820f),(-0.044002f),(-0.073002f),(-0.114025f),(-0.171341f),(-0.250621f),(-0.359381f),(-0.507548f),(-0.708208f),(-0.978575f),(-1.341250f),(-1.825848f),(-2.471123f),(-3.327721f),(-4.461658f),(-5.959006f),(-7.931626f),(-10.525312f),(-13.929212f),(-18.387588f),(-24.219785f),(-31.835151f),(-41.769557f),(-54.706455f),(-71.541226f),(-93.422592f),(-121.823163f)};
static const float Util_pitchToRate_1024_c2[33] = {0.000356f,0.000447f,0.000562f,0.000707f,0.000889f,0.001119f,0.001407f,0.001769f,0.002225f,0.002799f,0.003520f,0.004426f,0.005567f,0.007001f,0.008805f,0.011074f,0.013927f,0.017515f,0.022028f,0.027704f,0.034841f,0.043818f,0.055107f,0.069305f,0.087163f,0.109617f,0.137862f,0.173377f,0.218054f,0.274227f,0.344892f,0.433780f,0.545543f};
float Util_pitchToRate_1024(float pitch);

static const float Util_pitchToRate_c0[33] = {0.000185f,0.000187f,0.000194f,0.000214f,0.000259f,0.000348f,0.000508f,0.000783f,0.001233f,0.001950f,0.003062f,0.004754f,0.007286f,0.011023f,0.016473f,0.024339f,0.035594f,0.051572f,0.074098f,0.105661f,0.149641f,0.210618f,0.294772f,0.410447f,0.568853f,0.784973f,1.078985f,1.477660f,2.016967f,2.744366f,3.723538f,5.038599f,6.800548f};
static const float Util_pitchToRate_c1[33] = {0.000011f,0.000010f,0.000008f,0.000005f,(-0.000001f),(-0.000010f),(-0.000023f),(-0.000043f),(-0.000071f),(-0.000111f),(-0.000167f),(-0.000245f),(-0.000351f),(-0.000496f),(-0.000692f),(-0.000956f),(-0.001310f),(-0.001783f),(-0.002413f),(-0.003250f),(-0.004357f),(-0.005819f),(-0.007746f),(-0.010279f),(-0.013603f),(-0.017957f),(-0.023652f),(-0.031089f),(-0.040791f),(-0.053424f),(-0.069864f),(-0.091233f),(-0.118968f)};
static const float Util_pitchToRate_c2[33] = {0.000000f,0.000000f,0.000001f,0.000001f,0.000001f,0.000001f,0.000001f,0.000002f,0.000002f,0.000003f,0.000003f,0.000004f,0.000005f,0.000007f,0.000009f,0.000011f,0.000014f,0.000017f,0.000022f,0.000027f,0.000034f,0.000043f,0.000054f,0.000068f,0.000085f,0.000107f,0.000135f,0.000169f,0.000213f,0.000268f,0.000337f,0.000424f,0.000533f};
float Util_pitchToRate(float pitch);

float Util_cvToPitch(float cv);

static const float Util_cvToRate_1024_c0[33] = {0.759367f,0.762877f,0.779737f,0.825652f,0.924648f,1.112398f,1.440687f,1.983392f,2.844434f,4.168310f,6.153994f,9.073195f,13.294301f,19.313616f,27.796102f,39.628290f,55.986657f,78.426750f,108.998215f,150.387464f,206.118533f,280.781675f,380.357513f,512.612775f,687.616764f,918.349028f,1221.607949f,1619.052235f,2138.629322f,2815.436671f,3696.162408f,4838.694117f,6318.211520f};
static const float Util_cvToRate_1024_c1[33] = {5.245583f,4.998943f,4.403089f,3.319116f,1.564497f,(-1.099256f),(-4.982226f),(-10.485864f),(-18.127956f),(-28.574100f),(-42.677360f),(-61.528124f),(-86.516770f),(-119.412133f),(-162.460318f),(-218.508269f),(-291.156786f),(-384.956978f),(-505.652297f),(-660.458539f),(-858.494950f),(-1111.173376f),(-1432.858445f),(-1841.544459f),(-2359.816046f),(-3015.795467f),(-3844.838138f),(-4891.101919f),(-6210.197274f),(-7868.993868f),(-9955.778008f),(-12575.747874f),(-15862.234621f)};
static const float Util_cvToRate_1024_c2[33] = {20.125592f,24.457572f,29.722000f,36.119582f,43.894227f,53.342343f,64.824143f,78.777366f,95.733987f,116.340471f,141.382451f,171.814646f,208.797363f,253.740413f,308.357211f,374.730622f,455.389632f,553.410816f,672.536916f,817.290611f,993.216833f,1207.000622f,1466.803875f,1782.529271f,2166.244997f,2632.487590f,3199.072620f,3887.673024f,4724.859179f,5741.245302f,6977.441755f,8479.290028f,10304.455486f};
float Util_cvToRate_1024(float cv);

static const float Util_cvToRate_c0[33] = {0.000742f,0.000745f,0.000761f,0.000806f,0.000903f,0.001086f,0.001407f,0.001937f,0.002778f,0.004071f,0.006010f,0.008861f,0.012983f,0.018861f,0.027145f,0.038700f,0.054674f,0.076589f,0.106444f,0.146863f,0.201288f,0.274201f,0.371443f,0.500598f,0.671501f,0.896825f,1.192977f,1.581106f,2.088505f,2.749450f,3.609534f,4.725287f,6.170128f};
static const float Util_cvToRate_c1[33] = {0.005123f,0.004882f,0.004300f,0.003241f,0.001528f,(-0.001073f),(-0.004865f),(-0.010240f),(-0.017703f),(-0.027904f),(-0.041677f),(-0.060086f),(-0.084489f),(-0.116613f),(-0.158653f),(-0.213387f),(-0.284333f),(-0.375935f),(-0.493801f),(-0.644979f),(-0.838374f),(-1.085130f),(-1.399276f),(-1.798383f),(-2.304508f),(-2.945113f),(-3.754725f),(-4.776467f),(-6.064646f),(-7.684564f),(-9.722439f),(-12.281004f),(-15.490463f)};
static const float Util_cvToRate_c2[33] = {0.019654f,0.023884f,0.029025f,0.035273f,0.042865f,0.052092f,0.063305f,0.076931f,0.093490f,0.113614f,0.138069f,0.167788f,0.203904f,0.247793f,0.301130f,0.365948f,0.444716f,0.540440f,0.656774f,0.798135f,0.969938f,1.178712f,1.432426f,1.740751f,2.115474f,2.570789f,3.124094f,3.796556f,4.614120f,5.606685f,6.813908f,8.280557f,10.062945f};
float Util_cvToRate(float cv);

float Util_pitchToCv(float pitch);

typedef struct Phase__ctx_type_0 {
   float rate;
   float phase;
   Util__ctx_type_0 _inst16;
   Util__ctx_type_1 _inst14;
} Phase__ctx_type_0;

typedef Phase__ctx_type_0 Phase_process_type;

void Phase__ctx_type_0_init(Phase__ctx_type_0 &_output_);

void Phase_process_init(Phase__ctx_type_0 &_output_);

float Phase_process(Phase__ctx_type_0 &_ctx, float cv, float reset);

typedef Phase__ctx_type_0 Phase_noteOn_type;

void Phase_noteOn_init(Phase__ctx_type_0 &_output_);

void Phase_noteOn(Phase__ctx_type_0 &_ctx, int note, int velocity, int channel);

typedef Phase__ctx_type_0 Phase_noteOff_type;

void Phase_noteOff_init(Phase__ctx_type_0 &_output_);

void Phase_noteOff(Phase__ctx_type_0 &_ctx, int note, int channel);

typedef Phase__ctx_type_0 Phase_controlChange_type;

void Phase_controlChange_init(Phase__ctx_type_0 &_output_);

void Phase_controlChange(Phase__ctx_type_0 &_ctx, int control, int value, int channel);

typedef Phase__ctx_type_0 Phase_default_type;

void Phase_default_init(Phase__ctx_type_0 &_output_);

void Phase_default(Phase__ctx_type_0 &_ctx);



#endif // PHASE_H
