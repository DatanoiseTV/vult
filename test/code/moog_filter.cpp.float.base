
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#include "moog_filter.h"

void Moog_filter__ctx_type_0_init(Moog_filter__ctx_type_0 &_output_){
   Moog_filter__ctx_type_0 _ctx;
   _ctx.pre_x = 0.000000f;
   _output_ = _ctx;
   return ;
}

void Moog_filter_change_init(Moog_filter__ctx_type_0 &_output_){
   Moog_filter__ctx_type_0_init(_output_);
   return ;
}

uint8_t Moog_filter_change(Moog_filter__ctx_type_0 &_ctx, float x){
   uint8_t v;
   v = (_ctx.pre_x != x);
   _ctx.pre_x = x;
   return v;
}

float Moog_filter_min(float a, float b){
   float _if_11;
   uint8_t _cond_14;
   _cond_14 = (a < b);
   if(_cond_14){ _if_11 = a; }
   else
   { _if_11 = b; }
   return _if_11;
}

float Moog_filter_max(float a, float b){
   float _if_12;
   uint8_t _cond_15;
   _cond_15 = (a > b);
   if(_cond_15){ _if_12 = a; }
   else
   { _if_12 = b; }
   return _if_12;
}

float Moog_filter_clip(float value, float low, float high){
   return Moog_filter_min(Moog_filter_max(low,value),high);
}

float Moog_filter_PI(){
   return 3.141593f;
}

float Moog_filter_thermal(){
   return 0.819200f;
}

void Moog_filter__ctx_type_6_init(Moog_filter__ctx_type_6 &_output_){
   Moog_filter__ctx_type_6 _ctx;
   _ctx.tw2 = 0.000000f;
   _ctx.tw1 = 0.000000f;
   _ctx.tw0 = 0.000000f;
   _ctx.dw3 = 0.000000f;
   _ctx.dw2 = 0.000000f;
   _ctx.dw1 = 0.000000f;
   _ctx.dw0 = 0.000000f;
   _output_ = _ctx;
   return ;
}

void Moog_filter_moog_step_init(Moog_filter__ctx_type_6 &_output_){
   Moog_filter__ctx_type_6_init(_output_);
   return ;
}

float Moog_filter_moog_step(Moog_filter__ctx_type_6 &_ctx, float input, float resFixed, float tune, float output){
   float i0;
   i0 = (input + (- (resFixed * output)));
   float w0;
   w0 = (_ctx.dw0 + (tune * (tanhf((i0 * 0.819200f)) + (- _ctx.tw0))));
   _ctx.tw0 = tanhf((w0 * 0.819200f));
   float w1;
   w1 = (_ctx.dw1 + (tune * _ctx.tw0) + (- _ctx.tw1));
   _ctx.tw1 = tanhf((w1 * 0.819200f));
   float w2;
   w2 = (_ctx.dw2 + (tune * _ctx.tw1) + (- _ctx.tw2));
   _ctx.tw2 = tanhf((w2 * 0.819200f));
   float w3;
   w3 = (_ctx.dw3 + (tune * _ctx.tw2) + (- tanhf((_ctx.dw3 * 0.819200f))));
   _ctx.dw0 = w0;
   _ctx.dw1 = w1;
   _ctx.dw2 = w2;
   _ctx.dw3 = w3;
   return w3;
}

void Moog_filter__ctx_type_7_init(Moog_filter__ctx_type_7 &_output_){
   Moog_filter__ctx_type_7 _ctx;
   _ctx.tune = 0.000000f;
   _ctx.resFixed = 0.000000f;
   Moog_filter__ctx_type_6_init(_ctx.filter);
   _ctx.dx1 = 0.000000f;
   Moog_filter__ctx_type_0_init(_ctx._inst9);
   Moog_filter__ctx_type_0_init(_ctx._inst8);
   _output_ = _ctx;
   return ;
}

void Moog_filter_moog_init(Moog_filter__ctx_type_7 &_output_){
   Moog_filter__ctx_type_7_init(_output_);
   return ;
}

float Moog_filter_moog(Moog_filter__ctx_type_7 &_ctx, float input, float cut, float res){
   uint8_t _cond_13;
   _cond_13 = (Moog_filter_change(_ctx._inst8,cut) || Moog_filter_change(_ctx._inst9,res));
   if(_cond_13){
      res = Moog_filter_clip(res,0.000000f,1.000000f);
      cut = Moog_filter_clip(cut,1.000000f,22050.000000f);
      float fc;
      fc = (cut * 0.000023f);
      float x_2;
      x_2 = (fc * 0.500000f);
      float x2;
      x2 = (fc * fc);
      float x3;
      x3 = (fc * x2);
      float fcr;
      fcr = ((1.873000f * x3) + (0.495500f * x2) + ((-0.649000f) * fc) + 0.998800f);
      float acr;
      acr = (((-3.936400f) * x2) + (1.840900f * fc) + 0.996800f);
      _ctx.tune = ((1.000000f + (- expf(((-6.283185f) * x_2 * fcr)))) * 1.220703f);
      _ctx.resFixed = (4.000000f * res * acr);
   }
   float x0;
   x0 = Moog_filter_moog_step(_ctx.filter,input,_ctx.resFixed,_ctx.tune,_ctx.dx1);
   float x1;
   x1 = Moog_filter_moog_step(_ctx.filter,input,_ctx.resFixed,_ctx.tune,x0);
   _ctx.dx1 = x1;
   return ((x0 + x1) * 0.500000f);
}


