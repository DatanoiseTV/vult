
local this = {}
local ffi = require("ffi")
function this.ternary(cond,then_,else_) if cond then return then_ else return else_ end end
function this.eps()              return 1e-18; end
function this.pi()               return 3.1415926535897932384; end
function this.random()           return math.random(); end
function this.irandom()          return math.floor(math.random() * 4294967296); end
function this.clip(x,low,high)   return (this.ternary(x<low, low, this.ternary(x>high, high, x))); end
function this.real(x)            return x; end
function this.int(x)             local int_part,_ = math.modf(x) return int_part; end
function this.sin(x)             return math.sin(x); end
function this.cos(x)             return math.cos(x); end
function this.abs(x)             return math.abs(x); end
function this.exp(x)             return math.exp(x); end
function this.floor(x)           return math.floor(x); end
function this.tan(x)             return math.tan(x); end
function this.tanh(x)            return math.tanh(x); end
function this.sqrt(x)            return x; end
function this.set(a, i, v)       a[i+1]=v; end
function this.get(a, i)          return a[i+1]; end
function this.makeArray(size, v) local a = {}; for i=1,size do a[i]=v end return a; end
function this.wrap_array(a)      return a; end
function this.Noise__ctx_type_0_init()
   local _ctx = {}; 
   _ctx.w1 = 0.; 
   return _ctx; 

end

function this.Noise_pinker_init()
   return this.Noise__ctx_type_0_init(); 
end

function this.Noise_pinker(_ctx,x)
   local b0 = 0.027713; 
   local b1 = 0.027713; 
   local a1 = (-0.944574); 
   local w0 = (x + (- (a1 * _ctx.w1))); 
   local y0 = ((b0 * w0) + (b1 * _ctx.w1)); 
   _ctx.w1 = w0; 
   return y0; 

end

function this.Noise__ctx_type_1_init()
   local _ctx = {}; 
   _ctx.x2 = 0; 
   _ctx.x1 = 0; 
   _ctx._inst2 = this.Noise__ctx_type_0_init(); 
   return _ctx; 

end

function this.Noise_process_init()
   return this.Noise__ctx_type_1_init(); 
end

function this.Noise_process(_ctx,color)
   _ctx.x1 = (((_ctx.x1 * 17389) + 7919) % 32768); 
   local y1 = (this.real(_ctx.x1) * 3.06e-05); 
   _ctx.x2 = (((_ctx.x2 * 27449) + 12553) % 32768); 
   local y2 = (this.real(_ctx.x2) * 3.06e-05); 
   local out = 0.0; 
   if (color > 0.5) then
      out = this.Noise_pinker(_ctx._inst2,(y1 + (- y2))); 
   else

      out = (y1 + (- y2)); 
   end
   return (2. * out); 

end

function this.Noise_noteOn_init()
   return this.Noise__ctx_type_1_init(); 
end

function this.Noise_noteOn(_ctx,note,velocity,channel)
   ;
end

function this.Noise_noteOff_init()
   return this.Noise__ctx_type_1_init(); 
end

function this.Noise_noteOff(_ctx,note,channel)
   ;
end

function this.Noise_controlChange_init()
   return this.Noise__ctx_type_1_init(); 
end

function this.Noise_controlChange(_ctx,control,value,channel)
   ;
end

function this.Noise_default_init()
   return this.Noise__ctx_type_1_init(); 
end

function this.Noise_default(_ctx)
   ;
end


function this.process(ctx,color) return this.Noise_process(ctx,color) end
function this.noteOn(ctx,note,velocity,channel) return this.Noise_noteOn(ctx,note,velocity,channel) end
function this.noteOff(ctx,note,channel) return this.Noise_noteOff(ctx,note,channel) end
function this.controlChange(ctx,control,value,channel) return this.Noise_controlChange(ctx,control,value,channel) end
function this.init() return this.Noise_process_init() end
function this.default(ctx) return this.Noise_default(ctx) end
this.config = { inputs = 2, outputs = 1, noteon_inputs = 4, noteoff_inputs = 3, controlchange_inputs = 4, is_active = true }
return this
