package .ladder;

import java.util.Arrays;
import java.util.Random;
import .external.*;

public class ladder {

static int clip(int x, int minv, int maxv) {
   if(x > maxv)
      return maxv;
   else if(x < minv)
      return minv;
   else return x;
}

static float clip(float x, float minv, float maxv) {
   if(x > maxv)
      return maxv;
   else if(x < minv)
      return minv;
   else return x;
}

int[] makeArray(int size, int init) {
   int a[] = new int[size];
   Arrays.fill(a, init);
   return a;
}

float[] makeArray(int size, float init) {
   float a[] = new float[size];
   Arrays.fill(a, init);
   return a;
}

boolean[] makeArray(int size, boolean init) {
   boolean a[] = new boolean[size];
   Arrays.fill(a, init);
   return a;
}

int int_to_fix16(int a) { return a * 0x00010000; }

int fix16_to_int(int a) { return (a >> 16); }

int fix16_add(int x, int y) { return x + y; }

int fix16_sub(int x, int y) { return x - y; }

int fix16_minus(int x) { return -x; }

float fix16_to_float(int a) { return (float)a / 0x00010000; }
int float_to_fix16(float a) {
   float temp = a * 0x00010000;
   return (int)temp;
}

int fix16_mul(int x, int y) {
   long res = (long)x * (long)y;
   return (int)(res >> 16);
}

int fix16_div(int a, int b) {
   if (b == 0)
      return 0;
   int result = (int)(((long)a << 16) / b);
   return result;
}

static boolean not(boolean x) {
   return !x;
}

static float int_to_float(int x) {
   return (float)x;
}

int float_to_int(float x) {
   return (int)x;
}

float floor(float x) {
   return (float)Math.floor(x);
}

static Random rand = new Random();

float random() {
   return rand.nextFloat();
}

int irandom() {
   return rand.nextInt();
}

float get(float[] a, int i) {
   return a[i];
}

void set(float[] a, int i, float val) {
   a[i] = val;
}

int get(int[] a, int i) {
   return a[i];
}

void set(int[] a, int i, int val) {
   a[i] = val;
}

float[] wrap_array(float x[]) {
   return x;
}

int[] wrap_array(int x[]) {
   return x;
}

float cosh(float x) {
   return (float)Math.cosh(x);
}

float cos(float x) {
   return (float)Math.cos(x);
}

float sin(float x) {
   return (float)Math.sin(x);
}

float sinh(float x) {
   return (float)Math.sinh(x);
}

float tan(float x) {
   return (float)Math.tan(x);
}

float tanh(float x) {
   return (float)Math.tanh(x);
}

float sqrt(float x) {
   return (float)Math.sqrt(x);
}

float pow(float x, float y) {
   return (float)Math.pow(x, y);
}

float exp(float x) {
   return (float)Math.exp(x);
}


private class Util__ctx_type_0 {
   public boolean pre;
 
   Util__ctx_type_0(){ this.pre = false;
    } 
   Util__ctx_type_0(boolean pre){ this.pre = pre;
    } }

private class Util__ctx_type_1 {
   public float pre_x;
 
   Util__ctx_type_1(){ this.pre_x = 0.0f;
    } 
   Util__ctx_type_1(float pre_x){ this.pre_x = pre_x;
    } }

private class Util__ctx_type_3 {
   public float y1;
   public float x1;
 
   Util__ctx_type_3(){ this.y1 = 0.0f;
   this.x1 = 0.0f;
    } 
   Util__ctx_type_3(float y1,float x1){ this.y1 = y1;
   this.x1 = x1;
    } }

private class Util__ctx_type_4 {
   public float x;
 
   Util__ctx_type_4(){ this.x = 0.0f;
    } 
   Util__ctx_type_4(float x){ this.x = x;
    } }

private class Util__ctx_type_5 {
   public float x0;
 
   Util__ctx_type_5(){ this.x0 = 0.0f;
    } 
   Util__ctx_type_5(float x0){ this.x0 = x0;
    } }

float Util_pitchToRate_1024_c0[];
         public void set_Util_pitchToRate_1024_c0(java.nio.FloatBuffer buffer){
            Util_pitchToRate_1024_c0 = new float[32];
            buffer.get(Util_pitchToRate_1024_c0);
            }
float Util_pitchToRate_1024_c1[];
         public void set_Util_pitchToRate_1024_c1(java.nio.FloatBuffer buffer){
            Util_pitchToRate_1024_c1 = new float[32];
            buffer.get(Util_pitchToRate_1024_c1);
            }
float Util_pitchToRate_1024_c2[];
         public void set_Util_pitchToRate_1024_c2(java.nio.FloatBuffer buffer){
            Util_pitchToRate_1024_c2 = new float[32];
            buffer.get(Util_pitchToRate_1024_c2);
            }
float Util_pitchToRate_c0[];
         public void set_Util_pitchToRate_c0(java.nio.FloatBuffer buffer){
            Util_pitchToRate_c0 = new float[32];
            buffer.get(Util_pitchToRate_c0);
            }
float Util_pitchToRate_c1[];
         public void set_Util_pitchToRate_c1(java.nio.FloatBuffer buffer){
            Util_pitchToRate_c1 = new float[32];
            buffer.get(Util_pitchToRate_c1);
            }
float Util_pitchToRate_c2[];
         public void set_Util_pitchToRate_c2(java.nio.FloatBuffer buffer){
            Util_pitchToRate_c2 = new float[32];
            buffer.get(Util_pitchToRate_c2);
            }
float Util_cvToRate_1024_c0[];
         public void set_Util_cvToRate_1024_c0(java.nio.FloatBuffer buffer){
            Util_cvToRate_1024_c0 = new float[32];
            buffer.get(Util_cvToRate_1024_c0);
            }
float Util_cvToRate_1024_c1[];
         public void set_Util_cvToRate_1024_c1(java.nio.FloatBuffer buffer){
            Util_cvToRate_1024_c1 = new float[32];
            buffer.get(Util_cvToRate_1024_c1);
            }
float Util_cvToRate_1024_c2[];
         public void set_Util_cvToRate_1024_c2(java.nio.FloatBuffer buffer){
            Util_cvToRate_1024_c2 = new float[32];
            buffer.get(Util_cvToRate_1024_c2);
            }
float Util_cvToRate_c0[];
         public void set_Util_cvToRate_c0(java.nio.FloatBuffer buffer){
            Util_cvToRate_c0 = new float[128];
            buffer.get(Util_cvToRate_c0);
            }
float Util_cvToRate_c1[];
         public void set_Util_cvToRate_c1(java.nio.FloatBuffer buffer){
            Util_cvToRate_c1 = new float[128];
            buffer.get(Util_cvToRate_c1);
            }
float Util_cvToRate_c2[];
         public void set_Util_cvToRate_c2(java.nio.FloatBuffer buffer){
            Util_cvToRate_c2 = new float[128];
            buffer.get(Util_cvToRate_c2);
            }
float Util_cvToperiod_c0[];
         public void set_Util_cvToperiod_c0(java.nio.FloatBuffer buffer){
            Util_cvToperiod_c0 = new float[32];
            buffer.get(Util_cvToperiod_c0);
            }
float Util_cvToperiod_c1[];
         public void set_Util_cvToperiod_c1(java.nio.FloatBuffer buffer){
            Util_cvToperiod_c1 = new float[32];
            buffer.get(Util_cvToperiod_c1);
            }
float Util_cvToperiod_c2[];
         public void set_Util_cvToperiod_c2(java.nio.FloatBuffer buffer){
            Util_cvToperiod_c2 = new float[32];
            buffer.get(Util_cvToperiod_c2);
            }
float Util_cvTokHz_c0[];
         public void set_Util_cvTokHz_c0(java.nio.FloatBuffer buffer){
            Util_cvTokHz_c0 = new float[32];
            buffer.get(Util_cvTokHz_c0);
            }
float Util_cvTokHz_c1[];
         public void set_Util_cvTokHz_c1(java.nio.FloatBuffer buffer){
            Util_cvTokHz_c1 = new float[32];
            buffer.get(Util_cvTokHz_c1);
            }
float Util_cvTokHz_c2[];
         public void set_Util_cvTokHz_c2(java.nio.FloatBuffer buffer){
            Util_cvTokHz_c2 = new float[32];
            buffer.get(Util_cvTokHz_c2);
            }
float Ladder_tune_c0[];
         public void set_Ladder_tune_c0(java.nio.FloatBuffer buffer){
            Ladder_tune_c0 = new float[128];
            buffer.get(Ladder_tune_c0);
            }
float Ladder_tune_c1[];
         public void set_Ladder_tune_c1(java.nio.FloatBuffer buffer){
            Ladder_tune_c1 = new float[128];
            buffer.get(Ladder_tune_c1);
            }
float Ladder_tune_c2[];
         public void set_Ladder_tune_c2(java.nio.FloatBuffer buffer){
            Ladder_tune_c2 = new float[128];
            buffer.get(Ladder_tune_c2);
            }
private class Ladder__ctx_type_4 {
   public float p3;
   public float p2;
   public float p1;
   public float p0;
 
   Ladder__ctx_type_4(){ this.p3 = 0.0f;
   this.p2 = 0.0f;
   this.p1 = 0.0f;
   this.p0 = 0.0f;
    } 
   Ladder__ctx_type_4(float p3,float p2,float p1,float p0){ this.p3 = p3;
   this.p2 = p2;
   this.p1 = p1;
   this.p0 = p0;
    } }

private class Ladder__ctx_type_5 {
   public float p3;
   public float p2;
   public float p1;
   public float p0;
 
   Ladder__ctx_type_5(){ this.p3 = 0.0f;
   this.p2 = 0.0f;
   this.p1 = 0.0f;
   this.p0 = 0.0f;
    } 
   Ladder__ctx_type_5(float p3,float p2,float p1,float p0){ this.p3 = p3;
   this.p2 = p2;
   this.p1 = p1;
   this.p0 = p0;
    } }

private class Ladder__ctx_type_6 {
   public float fh;
   public Ladder__ctx_type_5 e;
   public Util__ctx_type_1 _inst13b;
 
   Ladder__ctx_type_6(){ this.fh = 0.0f;
   this.e = new Ladder__ctx_type_5();
   this._inst13b = new Util__ctx_type_1();
    } 
   Ladder__ctx_type_6(float fh,Ladder__ctx_type_5 e,Util__ctx_type_1 _inst13b){ this.fh = fh;
   this.e = e;
   this._inst13b = _inst13b;
    } }

private class Ladder__ctx_type_7 {
   public Ladder__ctx_type_4 h;
   public float fh;
   public Util__ctx_type_1 _inst13b;
 
   Ladder__ctx_type_7(){ this.h = new Ladder__ctx_type_4();
   this.fh = 0.0f;
   this._inst13b = new Util__ctx_type_1();
    } 
   Ladder__ctx_type_7(Ladder__ctx_type_4 h,float fh,Util__ctx_type_1 _inst13b){ this.h = h;
   this.fh = fh;
   this._inst13b = _inst13b;
    } }

private class Ladder__ctx_type_8 {
   public Ladder__ctx_type_7 _inst112;
 
   Ladder__ctx_type_8(){ this._inst112 = new Ladder__ctx_type_7();
    } 
   Ladder__ctx_type_8(Ladder__ctx_type_7 _inst112){ this._inst112 = _inst112;
    } }

private Util__ctx_type_0 Util__ctx_type_0_init(){
   Util__ctx_type_0 _ctx = new Util__ctx_type_0(); 
   _ctx.pre = false;
   return _ctx;
}

private Util__ctx_type_0 Util_edge_init(){return Util__ctx_type_0_init();}

private boolean Util_edge(Util__ctx_type_0 _ctx, boolean x){
   boolean ret = (x && not(_ctx.pre)); 
   _ctx.pre = x;
   return ret;
}

private Util__ctx_type_1 Util__ctx_type_1_init(){
   Util__ctx_type_1 _ctx = new Util__ctx_type_1(); 
   _ctx.pre_x = 0.0f;
   return _ctx;
}

private Util__ctx_type_1 Util_change_init(){return Util__ctx_type_1_init();}

private boolean Util_change(Util__ctx_type_1 _ctx, float x){
   boolean v = (_ctx.pre_x != x); 
   _ctx.pre_x = x;
   return v;
}

private float Util_map(float x, float x0, float x1, float y0, float y1){return (y0 + (((x + (- x0)) * (y1 + (- y0))) / (x1 + (- x0))));}

private Util__ctx_type_3 Util__ctx_type_3_init(){
   Util__ctx_type_3 _ctx = new Util__ctx_type_3(); 
   _ctx.y1 = 0.0f;
   _ctx.x1 = 0.0f;
   return _ctx;
}

private Util__ctx_type_3 Util_dcblock_init(){return Util__ctx_type_3_init();}

private float Util_dcblock(Util__ctx_type_3 _ctx, float x0){
   float y0 = (x0 + (- _ctx.x1) + (0.995f * _ctx.y1)); 
   _ctx.x1 = x0;
   _ctx.y1 = y0;
   return y0;
}

private Util__ctx_type_4 Util__ctx_type_4_init(){
   Util__ctx_type_4 _ctx = new Util__ctx_type_4(); 
   _ctx.x = 0.0f;
   return _ctx;
}

private Util__ctx_type_4 Util_smooth_init(){return Util__ctx_type_4_init();}

private float Util_smooth(Util__ctx_type_4 _ctx, float input){
   _ctx.x = (_ctx.x + (0.005f * (input + (- _ctx.x))));
   return _ctx.x;
}

private Util__ctx_type_5 Util__ctx_type_5_init(){
   Util__ctx_type_5 _ctx = new Util__ctx_type_5(); 
   _ctx.x0 = 0.0f;
   return _ctx;
}

private Util__ctx_type_5 Util_average2_init(){return Util__ctx_type_5_init();}

private float Util_average2(Util__ctx_type_5 _ctx, float x1){
   float result = (0.5f * (_ctx.x0 + x1)); 
   _ctx.x0 = x1;
   return result;
}

private float Util_cubic_clipper(float x){if(x <= -0.6666666f){ return -0.6666666f; }
else
{ if(x >= 0.6666667f){ return 0.6666667f; }
else
{ return (x + (-0.3333333f * x * x * x)); } }}

private float Util_pitchToRate_1024_raw_c0(int index){return Util_pitchToRate_1024_c0[index];}

private float Util_pitchToRate_1024_raw_c1(int index){return Util_pitchToRate_1024_c1[index];}

private float Util_pitchToRate_1024_raw_c2(int index){return Util_pitchToRate_1024_c2[index];}

private float Util_pitchToRate_1024(float pitch){
   int index = clip(float_to_int((0.2440945f * pitch)),0,31); 
   return (wrap_array(Util_pitchToRate_1024_c0)[index] + (pitch * (wrap_array(Util_pitchToRate_1024_c1)[index] + (pitch * wrap_array(Util_pitchToRate_1024_c2)[index]))));
}

private float Util_pitchToRate_raw_c0(int index){return Util_pitchToRate_c0[index];}

private float Util_pitchToRate_raw_c1(int index){return Util_pitchToRate_c1[index];}

private float Util_pitchToRate_raw_c2(int index){return Util_pitchToRate_c2[index];}

private float Util_pitchToRate(float pitch){
   int index = clip(float_to_int((0.2440945f * pitch)),0,31); 
   return (wrap_array(Util_pitchToRate_c0)[index] + (pitch * (wrap_array(Util_pitchToRate_c1)[index] + (pitch * wrap_array(Util_pitchToRate_c2)[index]))));
}

private float Util_cvToPitch(float cv){return (24.f + (120.f * cv));}

private float Util_cvToRate_1024_raw_c0(int index){return Util_cvToRate_1024_c0[index];}

private float Util_cvToRate_1024_raw_c1(int index){return Util_cvToRate_1024_c1[index];}

private float Util_cvToRate_1024_raw_c2(int index){return Util_cvToRate_1024_c2[index];}

private float Util_cvToRate_1024(float cv){
   int index = clip(float_to_int((34.4444445f * cv)),0,31); 
   return (wrap_array(Util_cvToRate_1024_c0)[index] + (cv * (wrap_array(Util_cvToRate_1024_c1)[index] + (cv * wrap_array(Util_cvToRate_1024_c2)[index]))));
}

private float Util_cvToRate_raw_c0(int index){return Util_cvToRate_c0[index];}

private float Util_cvToRate_raw_c1(int index){return Util_cvToRate_c1[index];}

private float Util_cvToRate_raw_c2(int index){return Util_cvToRate_c2[index];}

private float Util_cvToRate(float cv){
   int index = clip(float_to_int((141.1111112f * cv)),0,127); 
   return (wrap_array(Util_cvToRate_c0)[index] + (cv * (wrap_array(Util_cvToRate_c1)[index] + (cv * wrap_array(Util_cvToRate_c2)[index]))));
}

private float Util_pitchToCv(float pitch){return (0.0083334f * (-24.f + pitch));}

private float Util_cvToperiod_raw_c0(int index){return Util_cvToperiod_c0[index];}

private float Util_cvToperiod_raw_c1(int index){return Util_cvToperiod_c1[index];}

private float Util_cvToperiod_raw_c2(int index){return Util_cvToperiod_c2[index];}

private float Util_cvToperiod(float cv){
   int index = clip(float_to_int((31.f * cv)),0,31); 
   return (wrap_array(Util_cvToperiod_c0)[index] + (cv * (wrap_array(Util_cvToperiod_c1)[index] + (cv * wrap_array(Util_cvToperiod_c2)[index]))));
}

private float Util_cvTokHz_raw_c0(int index){return Util_cvTokHz_c0[index];}

private float Util_cvTokHz_raw_c1(int index){return Util_cvTokHz_c1[index];}

private float Util_cvTokHz_raw_c2(int index){return Util_cvTokHz_c2[index];}

private float Util_cvTokHz(float cv){
   int index = clip(float_to_int((31.f * cv)),0,31); 
   return (wrap_array(Util_cvTokHz_c0)[index] + (cv * (wrap_array(Util_cvTokHz_c1)[index] + (cv * wrap_array(Util_cvTokHz_c2)[index]))));
}

private float Ladder_tune_raw_c0(int index){return Ladder_tune_c0[index];}

private float Ladder_tune_raw_c1(int index){return Ladder_tune_c1[index];}

private float Ladder_tune_raw_c2(int index){return Ladder_tune_c2[index];}

private float Ladder_tune(float cut){
   int index = clip(float_to_int((127.f * cut)),0,127); 
   return (wrap_array(Ladder_tune_c0)[index] + (cut * (wrap_array(Ladder_tune_c1)[index] + (cut * wrap_array(Ladder_tune_c2)[index]))));
}

private Ladder__ctx_type_4 Ladder__ctx_type_4_init(){
   Ladder__ctx_type_4 _ctx = new Ladder__ctx_type_4(); 
   _ctx.p3 = 0.0f;
   _ctx.p2 = 0.0f;
   _ctx.p1 = 0.0f;
   _ctx.p0 = 0.0f;
   return _ctx;
}

private Ladder__ctx_type_4 Ladder_heun_init(){return Ladder__ctx_type_4_init();}

private float Ladder_heun(Ladder__ctx_type_4 _ctx, float input, float fh, float res){
   float wt0 = Util_cubic_clipper((input + (-4.f * _ctx.p3 * res))); 
   float wt1 = Util_cubic_clipper(_ctx.p0); 
   float dpt0 = (fh * (wt0 + (- wt1))); 
   float wt3 = Util_cubic_clipper(_ctx.p1); 
   float dpt1 = (fh * (wt1 + (- wt3))); 
   float wt5 = Util_cubic_clipper(_ctx.p2); 
   float dpt2 = (fh * (wt3 + (- wt5))); 
   float wt7 = Util_cubic_clipper(_ctx.p3); 
   float dpt3 = (fh * (wt5 + (- wt7))); 
   float pt0 = (_ctx.p0 + dpt0); 
   float pt1 = (_ctx.p1 + dpt1); 
   float pt2 = (_ctx.p2 + dpt2); 
   float pt3 = (_ctx.p3 + dpt3); 
   float w0 = Util_cubic_clipper((input + (-4.f * pt3 * res))); 
   float w1 = Util_cubic_clipper(pt0); 
   float dp0 = (fh * (w0 + (- w1))); 
   float w3 = Util_cubic_clipper(pt1); 
   float dp1 = (fh * (w1 + (- w3))); 
   float w5 = Util_cubic_clipper(pt2); 
   float dp2 = (fh * (w3 + (- w5))); 
   float w7 = Util_cubic_clipper(pt3); 
   float dp3 = (fh * (w5 + (- w7))); 
   _ctx.p0 = (_ctx.p0 + (0.5f * (dp0 + dpt0)));
   _ctx.p1 = (_ctx.p1 + (0.5f * (dp1 + dpt1)));
   _ctx.p2 = (_ctx.p2 + (0.5f * (dp2 + dpt2)));
   _ctx.p3 = (_ctx.p3 + (0.5f * (dp3 + dpt3)));
   return _ctx.p3;
}

private Ladder__ctx_type_5 Ladder__ctx_type_5_init(){
   Ladder__ctx_type_5 _ctx = new Ladder__ctx_type_5(); 
   _ctx.p3 = 0.0f;
   _ctx.p2 = 0.0f;
   _ctx.p1 = 0.0f;
   _ctx.p0 = 0.0f;
   return _ctx;
}

private Ladder__ctx_type_5 Ladder_euler_init(){return Ladder__ctx_type_5_init();}

private float Ladder_euler(Ladder__ctx_type_5 _ctx, float input, float fh, float res){
   float w0 = Util_cubic_clipper((input + (-4.f * _ctx.p3 * res))); 
   float w1 = Util_cubic_clipper(_ctx.p0); 
   float dpt0 = (fh * (w0 + (- w1))); 
   float w3 = Util_cubic_clipper(_ctx.p1); 
   float dpt1 = (fh * (w1 + (- w3))); 
   float w5 = Util_cubic_clipper(_ctx.p2); 
   float dpt2 = (fh * (w3 + (- w5))); 
   float w7 = Util_cubic_clipper(_ctx.p3); 
   float dpt3 = (fh * (w5 + (- w7))); 
   _ctx.p0 = (_ctx.p0 + dpt0);
   _ctx.p1 = (_ctx.p1 + dpt1);
   _ctx.p2 = (_ctx.p2 + dpt2);
   _ctx.p3 = (_ctx.p3 + dpt3);
   return _ctx.p3;
}

private Ladder__ctx_type_6 Ladder__ctx_type_6_init(){
   Ladder__ctx_type_6 _ctx = new Ladder__ctx_type_6(); 
   _ctx.fh = 0.0f;
   _ctx.e = Ladder__ctx_type_5_init();
   _ctx._inst13b = Util__ctx_type_1_init();
   return _ctx;
}

private Ladder__ctx_type_6 Ladder_process_euler_init(){return Ladder__ctx_type_6_init();}

private float Ladder_process_euler(Ladder__ctx_type_6 _ctx, float input, float cut, float res){
   if(Util_change(_ctx._inst13b,cut)){ _ctx.fh = Ladder_tune(cut); }
   Ladder_euler(_ctx.e,input,_ctx.fh,res);
   Ladder_euler(_ctx.e,input,_ctx.fh,res);
   Ladder_euler(_ctx.e,input,_ctx.fh,res);
   float out = Ladder_euler(_ctx.e,input,_ctx.fh,res); 
   return out;
}

private Ladder__ctx_type_7 Ladder__ctx_type_7_init(){
   Ladder__ctx_type_7 _ctx = new Ladder__ctx_type_7(); 
   _ctx.h = Ladder__ctx_type_4_init();
   _ctx.fh = 0.0f;
   _ctx._inst13b = Util__ctx_type_1_init();
   return _ctx;
}

private Ladder__ctx_type_7 Ladder_process_heun_init(){return Ladder__ctx_type_7_init();}

private float Ladder_process_heun(Ladder__ctx_type_7 _ctx, float input, float cut, float res){
   if(Util_change(_ctx._inst13b,cut)){ _ctx.fh = Ladder_tune(cut); }
   Ladder_heun(_ctx.h,input,_ctx.fh,res);
   Ladder_heun(_ctx.h,input,_ctx.fh,res);
   Ladder_heun(_ctx.h,input,_ctx.fh,res);
   float out = Ladder_heun(_ctx.h,input,_ctx.fh,res); 
   return out;
}

private Ladder__ctx_type_8 Ladder__ctx_type_8_init(){
   Ladder__ctx_type_8 _ctx = new Ladder__ctx_type_8(); 
   _ctx._inst112 = Ladder__ctx_type_7_init();
   return _ctx;
}

private Ladder__ctx_type_8 Ladder_process_init(){return Ladder__ctx_type_8_init();}

private float Ladder_process(Ladder__ctx_type_8 _ctx, float input, float cut, float res){return Ladder_process_heun(_ctx._inst112,input,cut,res);}

private Ladder__ctx_type_8 Ladder_noteOn_init(){return Ladder__ctx_type_8_init();}

private void Ladder_noteOn(Ladder__ctx_type_8 _ctx, int note, int velocity, int channel){
}

private Ladder__ctx_type_8 Ladder_noteOff_init(){return Ladder__ctx_type_8_init();}

private void Ladder_noteOff(Ladder__ctx_type_8 _ctx, int note, int channel){
}

private Ladder__ctx_type_8 Ladder_controlChange_init(){return Ladder__ctx_type_8_init();}

private void Ladder_controlChange(Ladder__ctx_type_8 _ctx, int control, int value, int channel){
}

private Ladder__ctx_type_8 Ladder_default_init(){return Ladder__ctx_type_8_init();}

private void Ladder_default(Ladder__ctx_type_8 _ctx){
}


}