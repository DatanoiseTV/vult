
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#ifndef AF_F_H
#define AF_F_H

#include <stdint.h>
#include <math.h>
#include "vultin.h"
#include "ext.h"
#include "ext_obex.h"
#include "z_dsp.h"

typedef struct Af_f__ctx_type_0 {
   int x;
} Af_f__ctx_type_0;

typedef Af_f__ctx_type_0 Af_f_process_type;

static_inline void Af_f__ctx_type_0_init(Af_f__ctx_type_0 &_output_){
   Af_f__ctx_type_0 _ctx;
   _ctx.x = 0;
   _output_ = _ctx;
   return ;
}

static_inline void Af_f_process_init(Af_f__ctx_type_0 &_output_){
   Af_f__ctx_type_0_init(_output_);
   return ;
}

static_inline fix16_t Af_f_process(Af_f__ctx_type_0 &_ctx, fix16_t input){
   _ctx.x = (1 + _ctx.x);
   return fix_mul(input,input);
}

typedef Af_f__ctx_type_0 Af_f_noteOn_type;

static_inline void Af_f_noteOn_init(Af_f__ctx_type_0 &_output_){
   Af_f__ctx_type_0_init(_output_);
   return ;
}

static_inline void Af_f_noteOn(Af_f__ctx_type_0 &_ctx, int note, int velocity, int channel){
}

typedef Af_f__ctx_type_0 Af_f_noteOff_type;

static_inline void Af_f_noteOff_init(Af_f__ctx_type_0 &_output_){
   Af_f__ctx_type_0_init(_output_);
   return ;
}

static_inline void Af_f_noteOff(Af_f__ctx_type_0 &_ctx, int note, int channel){
}

typedef Af_f__ctx_type_0 Af_f_controlChange_type;

static_inline void Af_f_controlChange_init(Af_f__ctx_type_0 &_output_){
   Af_f__ctx_type_0_init(_output_);
   return ;
}

static_inline void Af_f_controlChange(Af_f__ctx_type_0 &_ctx, int control, int value, int channel){
}

typedef Af_f__ctx_type_0 Af_f_default_type;

static_inline void Af_f_default_init(Af_f__ctx_type_0 &_output_){
   Af_f__ctx_type_0_init(_output_);
   return ;
}

static_inline void Af_f_default(Af_f__ctx_type_0 &_ctx){
}



#if defined(_MSC_VER)
    //  Microsoft VC++
    #define EXPORT __declspec(dllexport)
#else
    //  GCC
    #define EXPORT __attribute__((visibility("default")))
#endif

extern "C" {
EXPORT void ext_main(void *r);
}

#endif // AF_F_H
