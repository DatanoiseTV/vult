
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#include "ladder.h"

void Util__ctx_type_0_init(Util__ctx_type_0 &_output_){
   Util__ctx_type_0 _ctx;
   _ctx.pre = false;
   _output_ = _ctx;
   return ;
}

void Util_edge_init(Util__ctx_type_0 &_output_){
   Util__ctx_type_0_init(_output_);
   return ;
}

uint8_t Util_edge(Util__ctx_type_0 &_ctx, uint8_t x){
   uint8_t ret;
   ret = (x && bool_not(_ctx.pre));
   _ctx.pre = x;
   return ret;
}

void Util__ctx_type_1_init(Util__ctx_type_1 &_output_){
   Util__ctx_type_1 _ctx;
   _ctx.pre_x = 0.f;
   _output_ = _ctx;
   return ;
}

void Util_change_init(Util__ctx_type_1 &_output_){
   Util__ctx_type_1_init(_output_);
   return ;
}

uint8_t Util_change(Util__ctx_type_1 &_ctx, float x){
   uint8_t v;
   v = (_ctx.pre_x != x);
   _ctx.pre_x = x;
   return v;
}

float Util_map(float x, float x0, float x1, float y0, float y1){
   return (y0 + (((x + (- x0)) * (y1 + (- y0))) / (x1 + (- x0))));
}

void Util__ctx_type_3_init(Util__ctx_type_3 &_output_){
   Util__ctx_type_3 _ctx;
   _ctx.y1 = 0.f;
   _ctx.x1 = 0.f;
   _output_ = _ctx;
   return ;
}

void Util_dcblock_init(Util__ctx_type_3 &_output_){
   Util__ctx_type_3_init(_output_);
   return ;
}

float Util_dcblock(Util__ctx_type_3 &_ctx, float x0){
   float y0;
   y0 = (x0 + (- _ctx.x1) + (0.995f * _ctx.y1));
   _ctx.x1 = x0;
   _ctx.y1 = y0;
   return y0;
}

void Util__ctx_type_4_init(Util__ctx_type_4 &_output_){
   Util__ctx_type_4 _ctx;
   _ctx.x = 0.f;
   _output_ = _ctx;
   return ;
}

void Util_smooth_init(Util__ctx_type_4 &_output_){
   Util__ctx_type_4_init(_output_);
   return ;
}

float Util_smooth(Util__ctx_type_4 &_ctx, float input){
   _ctx.x = (_ctx.x + (0.005f * (input + (- _ctx.x))));
   return _ctx.x;
}

void Util__ctx_type_5_init(Util__ctx_type_5 &_output_){
   Util__ctx_type_5 _ctx;
   _ctx.x0 = 0.f;
   _output_ = _ctx;
   return ;
}

void Util_average2_init(Util__ctx_type_5 &_output_){
   Util__ctx_type_5_init(_output_);
   return ;
}

float Util_average2(Util__ctx_type_5 &_ctx, float x1){
   float result;
   result = (0.5f * (_ctx.x0 + x1));
   _ctx.x0 = x1;
   return result;
}

float Util_cubic_clipper(float x){
   if(x <= -0.6666666f){
      return -0.6666666f;
   }
   else
   {
      if(x >= 0.6666667f){
         return 0.6666667f;
      }
      else
      {
         return (x + (-0.3333333f * x * x * x));
      }
   }
}

float Util_pitchToRate_1024_raw_c0(int index){
   return Util_pitchToRate_1024_c0[index];
}

float Util_pitchToRate_1024_raw_c1(int index){
   return Util_pitchToRate_1024_c1[index];
}

float Util_pitchToRate_1024_raw_c2(int index){
   return Util_pitchToRate_1024_c2[index];
}

float Util_pitchToRate_1024(float pitch){
   int index;
   index = int_clip(float_to_int((0.2440945f * pitch)),0,31);
   return (float_wrap_array(Util_pitchToRate_1024_c0)[index] + (pitch * (float_wrap_array(Util_pitchToRate_1024_c1)[index] + (pitch * float_wrap_array(Util_pitchToRate_1024_c2)[index]))));
}

float Util_pitchToRate_raw_c0(int index){
   return Util_pitchToRate_c0[index];
}

float Util_pitchToRate_raw_c1(int index){
   return Util_pitchToRate_c1[index];
}

float Util_pitchToRate_raw_c2(int index){
   return Util_pitchToRate_c2[index];
}

float Util_pitchToRate(float pitch){
   int index;
   index = int_clip(float_to_int((0.2440945f * pitch)),0,31);
   return (float_wrap_array(Util_pitchToRate_c0)[index] + (pitch * (float_wrap_array(Util_pitchToRate_c1)[index] + (pitch * float_wrap_array(Util_pitchToRate_c2)[index]))));
}

float Util_cvToPitch(float cv){
   return (24.f + (120.f * cv));
}

float Util_cvToRate_1024_raw_c0(int index){
   return Util_cvToRate_1024_c0[index];
}

float Util_cvToRate_1024_raw_c1(int index){
   return Util_cvToRate_1024_c1[index];
}

float Util_cvToRate_1024_raw_c2(int index){
   return Util_cvToRate_1024_c2[index];
}

float Util_cvToRate_1024(float cv){
   int index;
   index = int_clip(float_to_int((34.4444445f * cv)),0,31);
   return (float_wrap_array(Util_cvToRate_1024_c0)[index] + (cv * (float_wrap_array(Util_cvToRate_1024_c1)[index] + (cv * float_wrap_array(Util_cvToRate_1024_c2)[index]))));
}

float Util_cvToRate_raw_c0(int index){
   return Util_cvToRate_c0[index];
}

float Util_cvToRate_raw_c1(int index){
   return Util_cvToRate_c1[index];
}

float Util_cvToRate_raw_c2(int index){
   return Util_cvToRate_c2[index];
}

float Util_cvToRate(float cv){
   int index;
   index = int_clip(float_to_int((141.1111112f * cv)),0,127);
   return (float_wrap_array(Util_cvToRate_c0)[index] + (cv * (float_wrap_array(Util_cvToRate_c1)[index] + (cv * float_wrap_array(Util_cvToRate_c2)[index]))));
}

float Util_pitchToCv(float pitch){
   return (0.0083334f * (-24.f + pitch));
}

float Util_cvToperiod_raw_c0(int index){
   return Util_cvToperiod_c0[index];
}

float Util_cvToperiod_raw_c1(int index){
   return Util_cvToperiod_c1[index];
}

float Util_cvToperiod_raw_c2(int index){
   return Util_cvToperiod_c2[index];
}

float Util_cvToperiod(float cv){
   int index;
   index = int_clip(float_to_int((31.f * cv)),0,31);
   return (float_wrap_array(Util_cvToperiod_c0)[index] + (cv * (float_wrap_array(Util_cvToperiod_c1)[index] + (cv * float_wrap_array(Util_cvToperiod_c2)[index]))));
}

float Util_cvTokHz_raw_c0(int index){
   return Util_cvTokHz_c0[index];
}

float Util_cvTokHz_raw_c1(int index){
   return Util_cvTokHz_c1[index];
}

float Util_cvTokHz_raw_c2(int index){
   return Util_cvTokHz_c2[index];
}

float Util_cvTokHz(float cv){
   int index;
   index = int_clip(float_to_int((31.f * cv)),0,31);
   return (float_wrap_array(Util_cvTokHz_c0)[index] + (cv * (float_wrap_array(Util_cvTokHz_c1)[index] + (cv * float_wrap_array(Util_cvTokHz_c2)[index]))));
}

float Ladder_tune_raw_c0(int index){
   return Ladder_tune_c0[index];
}

float Ladder_tune_raw_c1(int index){
   return Ladder_tune_c1[index];
}

float Ladder_tune_raw_c2(int index){
   return Ladder_tune_c2[index];
}

float Ladder_tune(float cut){
   int index;
   index = int_clip(float_to_int((127.f * cut)),0,127);
   return (float_wrap_array(Ladder_tune_c0)[index] + (cut * (float_wrap_array(Ladder_tune_c1)[index] + (cut * float_wrap_array(Ladder_tune_c2)[index]))));
}

void Ladder__ctx_type_4_init(Ladder__ctx_type_4 &_output_){
   Ladder__ctx_type_4 _ctx;
   _ctx.p3 = 0.f;
   _ctx.p2 = 0.f;
   _ctx.p1 = 0.f;
   _ctx.p0 = 0.f;
   _output_ = _ctx;
   return ;
}

void Ladder_heun_init(Ladder__ctx_type_4 &_output_){
   Ladder__ctx_type_4_init(_output_);
   return ;
}

float Ladder_heun(Ladder__ctx_type_4 &_ctx, float input, float fh, float res){
   float wt0;
   wt0 = Util_cubic_clipper((input + (-4.f * _ctx.p3 * res)));
   float wt1;
   wt1 = Util_cubic_clipper(_ctx.p0);
   float dpt0;
   dpt0 = (fh * (wt0 + (- wt1)));
   float wt3;
   wt3 = Util_cubic_clipper(_ctx.p1);
   float dpt1;
   dpt1 = (fh * (wt1 + (- wt3)));
   float wt5;
   wt5 = Util_cubic_clipper(_ctx.p2);
   float dpt2;
   dpt2 = (fh * (wt3 + (- wt5)));
   float wt7;
   wt7 = Util_cubic_clipper(_ctx.p3);
   float dpt3;
   dpt3 = (fh * (wt5 + (- wt7)));
   float pt0;
   pt0 = (_ctx.p0 + dpt0);
   float pt1;
   pt1 = (_ctx.p1 + dpt1);
   float pt2;
   pt2 = (_ctx.p2 + dpt2);
   float pt3;
   pt3 = (_ctx.p3 + dpt3);
   float w0;
   w0 = Util_cubic_clipper((input + (-4.f * pt3 * res)));
   float w1;
   w1 = Util_cubic_clipper(pt0);
   float dp0;
   dp0 = (fh * (w0 + (- w1)));
   float w3;
   w3 = Util_cubic_clipper(pt1);
   float dp1;
   dp1 = (fh * (w1 + (- w3)));
   float w5;
   w5 = Util_cubic_clipper(pt2);
   float dp2;
   dp2 = (fh * (w3 + (- w5)));
   float w7;
   w7 = Util_cubic_clipper(pt3);
   float dp3;
   dp3 = (fh * (w5 + (- w7)));
   _ctx.p0 = (_ctx.p0 + (0.5f * (dp0 + dpt0)));
   _ctx.p1 = (_ctx.p1 + (0.5f * (dp1 + dpt1)));
   _ctx.p2 = (_ctx.p2 + (0.5f * (dp2 + dpt2)));
   _ctx.p3 = (_ctx.p3 + (0.5f * (dp3 + dpt3)));
   return _ctx.p3;
}

void Ladder__ctx_type_5_init(Ladder__ctx_type_5 &_output_){
   Ladder__ctx_type_5 _ctx;
   _ctx.p3 = 0.f;
   _ctx.p2 = 0.f;
   _ctx.p1 = 0.f;
   _ctx.p0 = 0.f;
   _output_ = _ctx;
   return ;
}

void Ladder_euler_init(Ladder__ctx_type_5 &_output_){
   Ladder__ctx_type_5_init(_output_);
   return ;
}

float Ladder_euler(Ladder__ctx_type_5 &_ctx, float input, float fh, float res){
   float w0;
   w0 = Util_cubic_clipper((input + (-4.f * _ctx.p3 * res)));
   float w1;
   w1 = Util_cubic_clipper(_ctx.p0);
   float dpt0;
   dpt0 = (fh * (w0 + (- w1)));
   float w3;
   w3 = Util_cubic_clipper(_ctx.p1);
   float dpt1;
   dpt1 = (fh * (w1 + (- w3)));
   float w5;
   w5 = Util_cubic_clipper(_ctx.p2);
   float dpt2;
   dpt2 = (fh * (w3 + (- w5)));
   float w7;
   w7 = Util_cubic_clipper(_ctx.p3);
   float dpt3;
   dpt3 = (fh * (w5 + (- w7)));
   _ctx.p0 = (_ctx.p0 + dpt0);
   _ctx.p1 = (_ctx.p1 + dpt1);
   _ctx.p2 = (_ctx.p2 + dpt2);
   _ctx.p3 = (_ctx.p3 + dpt3);
   return _ctx.p3;
}

void Ladder__ctx_type_6_init(Ladder__ctx_type_6 &_output_){
   Ladder__ctx_type_6 _ctx;
   _ctx.fh = 0.f;
   Ladder__ctx_type_5_init(_ctx.e);
   Util__ctx_type_1_init(_ctx._inst23);
   _output_ = _ctx;
   return ;
}

void Ladder_process_euler_init(Ladder__ctx_type_6 &_output_){
   Ladder__ctx_type_6_init(_output_);
   return ;
}

float Ladder_process_euler(Ladder__ctx_type_6 &_ctx, float input, float cut, float res){
   if(Util_change(_ctx._inst23,cut)){
      _ctx.fh = Ladder_tune(cut);
   }
   Ladder_euler(_ctx.e,input,_ctx.fh,res);
   Ladder_euler(_ctx.e,input,_ctx.fh,res);
   Ladder_euler(_ctx.e,input,_ctx.fh,res);
   float out;
   out = Ladder_euler(_ctx.e,input,_ctx.fh,res);
   return out;
}

void Ladder__ctx_type_7_init(Ladder__ctx_type_7 &_output_){
   Ladder__ctx_type_7 _ctx;
   Ladder__ctx_type_4_init(_ctx.h);
   _ctx.fh = 0.f;
   Util__ctx_type_1_init(_ctx._inst26);
   _output_ = _ctx;
   return ;
}

void Ladder_process_heun_init(Ladder__ctx_type_7 &_output_){
   Ladder__ctx_type_7_init(_output_);
   return ;
}

float Ladder_process_heun(Ladder__ctx_type_7 &_ctx, float input, float cut, float res){
   if(Util_change(_ctx._inst26,cut)){
      _ctx.fh = Ladder_tune(cut);
   }
   Ladder_heun(_ctx.h,input,_ctx.fh,res);
   Ladder_heun(_ctx.h,input,_ctx.fh,res);
   Ladder_heun(_ctx.h,input,_ctx.fh,res);
   float out;
   out = Ladder_heun(_ctx.h,input,_ctx.fh,res);
   return out;
}

void Ladder__ctx_type_8_init(Ladder__ctx_type_8 &_output_){
   Ladder__ctx_type_8 _ctx;
   Ladder__ctx_type_7_init(_ctx._inst29);
   _output_ = _ctx;
   return ;
}

void Ladder_process_init(Ladder__ctx_type_8 &_output_){
   Ladder__ctx_type_8_init(_output_);
   return ;
}

float Ladder_process(Ladder__ctx_type_8 &_ctx, float input, float cut, float res){
   return Ladder_process_heun(_ctx._inst29,input,cut,res);
}

void Ladder_noteOn_init(Ladder__ctx_type_8 &_output_){
   Ladder__ctx_type_8_init(_output_);
   return ;
}

void Ladder_noteOn(Ladder__ctx_type_8 &_ctx, int note, int velocity, int channel){
}

void Ladder_noteOff_init(Ladder__ctx_type_8 &_output_){
   Ladder__ctx_type_8_init(_output_);
   return ;
}

void Ladder_noteOff(Ladder__ctx_type_8 &_ctx, int note, int channel){
}

void Ladder_controlChange_init(Ladder__ctx_type_8 &_output_){
   Ladder__ctx_type_8_init(_output_);
   return ;
}

void Ladder_controlChange(Ladder__ctx_type_8 &_ctx, int control, int value, int channel){
}

void Ladder_default_init(Ladder__ctx_type_8 &_output_){
   Ladder__ctx_type_8_init(_output_);
   return ;
}

void Ladder_default(Ladder__ctx_type_8 &_ctx){
}


