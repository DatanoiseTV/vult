
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#include "ladder.h"

void Util__ctx_type_0_init(Util__ctx_type_0 &_output_){
   Util__ctx_type_0 _ctx;
   _ctx.pre = 0;
   _output_ = _ctx;
   return ;
}

void Util_edge_init(Util__ctx_type_0 &_output_){
   Util__ctx_type_0_init(_output_);
   return ;
}

uint8_t Util_edge(Util__ctx_type_0 &_ctx, uint8_t x){
   uint8_t ret;
   ret = (x && bool_not(_ctx.pre));
   _ctx.pre = x;
   return ret;
}

void Util__ctx_type_1_init(Util__ctx_type_1 &_output_){
   Util__ctx_type_1 _ctx;
   _ctx.pre_x = 0.000000f;
   _output_ = _ctx;
   return ;
}

void Util_change_init(Util__ctx_type_1 &_output_){
   Util__ctx_type_1_init(_output_);
   return ;
}

uint8_t Util_change(Util__ctx_type_1 &_ctx, float x){
   uint8_t v;
   v = (_ctx.pre_x != x);
   _ctx.pre_x = x;
   return v;
}

float Util_map(float x, float x0, float x1, float y0, float y1){
   return ((((x + (- x0)) * (y1 + (- y0))) / (x1 + (- x0))) + y0);
}

void Util__ctx_type_3_init(Util__ctx_type_3 &_output_){
   Util__ctx_type_3 _ctx;
   _ctx.y1 = 0.000000f;
   _ctx.x1 = 0.000000f;
   _output_ = _ctx;
   return ;
}

void Util_dcblock_init(Util__ctx_type_3 &_output_){
   Util__ctx_type_3_init(_output_);
   return ;
}

float Util_dcblock(Util__ctx_type_3 &_ctx, float x0){
   float y0;
   y0 = (x0 + (- _ctx.x1) + (_ctx.y1 * 0.995000f));
   _ctx.x1 = x0;
   _ctx.y1 = y0;
   return y0;
}

void Util__ctx_type_4_init(Util__ctx_type_4 &_output_){
   Util__ctx_type_4 _ctx;
   _ctx.x = 0.000000f;
   _output_ = _ctx;
   return ;
}

void Util_smooth_init(Util__ctx_type_4 &_output_){
   Util__ctx_type_4_init(_output_);
   return ;
}

float Util_smooth(Util__ctx_type_4 &_ctx, float input){
   _ctx.x = (_ctx.x + ((input + (- _ctx.x)) * 0.005000f));
   return _ctx.x;
}

void Util__ctx_type_5_init(Util__ctx_type_5 &_output_){
   Util__ctx_type_5 _ctx;
   _ctx.x0 = 0.000000f;
   _output_ = _ctx;
   return ;
}

void Util_average2_init(Util__ctx_type_5 &_output_){
   Util__ctx_type_5_init(_output_);
   return ;
}

float Util_average2(Util__ctx_type_5 &_ctx, float x1){
   float result;
   result = ((_ctx.x0 + x1) * 0.500000f);
   _ctx.x0 = x1;
   return result;
}

float Util_cubic_clipper(float x){
   uint8_t _cond_21;
   _cond_21 = (x <= (-0.666667f));
   if(_cond_21){
      return (-0.666667f);
   }
   else
   {
      uint8_t _cond_20;
      _cond_20 = (x >= 0.666667f);
      if(_cond_20){
         return 0.666667f;
      }
      else
      {
         return (x + ((-0.333333f) * x * x * x));
      }
   }
}

float Util_pitchToRate_1024(float pitch){
   int index;
   index = int_clip(float_to_int((0.244094f * pitch)),0,31);
   return (float_get(float_wrap_array(Util_pitchToRate_1024_c0),index) + (pitch * (float_get(float_wrap_array(Util_pitchToRate_1024_c1),index) + (float_get(float_wrap_array(Util_pitchToRate_1024_c2),index) * pitch))));
}

float Util_pitchToRate(float pitch){
   int index;
   index = int_clip(float_to_int((0.244094f * pitch)),0,31);
   return (float_get(float_wrap_array(Util_pitchToRate_c0),index) + (pitch * (float_get(float_wrap_array(Util_pitchToRate_c1),index) + (float_get(float_wrap_array(Util_pitchToRate_c2),index) * pitch))));
}

float Util_cvToPitch(float cv){
   return ((cv * 120.000000f) + 24.000000f);
}

float Util_cvToRate_1024(float cv){
   int index;
   index = int_clip(float_to_int((34.444444f * cv)),0,31);
   return (float_get(float_wrap_array(Util_cvToRate_1024_c0),index) + (cv * (float_get(float_wrap_array(Util_cvToRate_1024_c1),index) + (float_get(float_wrap_array(Util_cvToRate_1024_c2),index) * cv))));
}

float Util_cvToRate(float cv){
   int index;
   index = int_clip(float_to_int((34.444444f * cv)),0,31);
   return (float_get(float_wrap_array(Util_cvToRate_c0),index) + (cv * (float_get(float_wrap_array(Util_cvToRate_c1),index) + (float_get(float_wrap_array(Util_cvToRate_c2),index) * cv))));
}

float Util_pitchToCv(float pitch){
   return (0.008333f * ((-24.000000f) + pitch));
}

float Util_cvToperiod(float cv){
   int index;
   index = int_clip(float_to_int((31.000000f * cv)),0,31);
   return (float_get(float_wrap_array(Util_cvToperiod_c0),index) + (cv * (float_get(float_wrap_array(Util_cvToperiod_c1),index) + (float_get(float_wrap_array(Util_cvToperiod_c2),index) * cv))));
}

float Util_cvTokHz(float cv){
   int index;
   index = int_clip(float_to_int((31.000000f * cv)),0,31);
   return (float_get(float_wrap_array(Util_cvTokHz_c0),index) + (cv * (float_get(float_wrap_array(Util_cvTokHz_c1),index) + (float_get(float_wrap_array(Util_cvTokHz_c2),index) * cv))));
}

float Ladder_tune(float cut){
   int index;
   index = int_clip(float_to_int((127.000000f * cut)),0,127);
   return (float_get(float_wrap_array(Ladder_tune_c0),index) + (cut * (float_get(float_wrap_array(Ladder_tune_c1),index) + (float_get(float_wrap_array(Ladder_tune_c2),index) * cut))));
}

void Ladder_ladder_step(float input, float fh, float res, float (&p)[4], float (&dp)[4]){
   float w0;
   w0 = Util_cubic_clipper((input + ((-4.000000f) * res * float_get(p,3))));
   float w1;
   w1 = Util_cubic_clipper(float_get(p,0));
   float_set(dp,0,((w0 + (- w1)) * fh));
   float w3;
   w3 = Util_cubic_clipper(float_get(p,1));
   float_set(dp,1,((w1 + (- w3)) * fh));
   float w5;
   w5 = Util_cubic_clipper(float_get(p,2));
   float_set(dp,2,((w3 + (- w5)) * fh));
   float w7;
   w7 = Util_cubic_clipper(float_get(p,3));
   float_set(dp,3,((w5 + (- w7)) * fh));
}

void Ladder__ctx_type_2_init(Ladder__ctx_type_2 &_output_){
   Ladder__ctx_type_2 _ctx;
   float_init_array(4,0.000000f,_ctx.p);
   _ctx.fh = 0.000000f;
   Util__ctx_type_1_init(_ctx._inst25);
   _output_ = _ctx;
   return ;
}

void Ladder_heun_init(Ladder__ctx_type_2 &_output_){
   Ladder__ctx_type_2_init(_output_);
   return ;
}

float Ladder_heun(Ladder__ctx_type_2 &_ctx, float input, float cut, float res){
   float dp[4];
   float pt[4];
   float dpt[4];
   uint8_t _cond_38;
   _cond_38 = Util_change(_ctx._inst25,cut);
   if(_cond_38){
      _ctx.fh = Ladder_tune(cut);
   }
   Ladder_ladder_step(input,_ctx.fh,res,_ctx.p,dpt);
   float_set(pt,0,(float_get(_ctx.p,0) + float_get(dpt,0)));
   float_set(pt,1,(float_get(_ctx.p,1) + float_get(dpt,1)));
   float_set(pt,2,(float_get(_ctx.p,2) + float_get(dpt,2)));
   float_set(pt,3,(float_get(_ctx.p,3) + float_get(dpt,3)));
   Ladder_ladder_step(input,_ctx.fh,res,pt,dp);
   float_set(_ctx.p,0,(float_get(_ctx.p,0) + ((float_get(dp,0) + float_get(dpt,0)) * 0.500000f)));
   float_set(_ctx.p,1,(float_get(_ctx.p,1) + ((float_get(dp,1) + float_get(dpt,1)) * 0.500000f)));
   float_set(_ctx.p,2,(float_get(_ctx.p,2) + ((float_get(dp,2) + float_get(dpt,2)) * 0.500000f)));
   float_set(_ctx.p,3,(float_get(_ctx.p,3) + ((float_get(dp,3) + float_get(dpt,3)) * 0.500000f)));
   return float_get(_ctx.p,3);
}

void Ladder__ctx_type_3_init(Ladder__ctx_type_3 &_output_){
   Ladder__ctx_type_3 _ctx;
   float_init_array(4,0.000000f,_ctx.p);
   _ctx.fh = 0.000000f;
   Util__ctx_type_1_init(_ctx._inst28);
   _output_ = _ctx;
   return ;
}

void Ladder_euler_init(Ladder__ctx_type_3 &_output_){
   Ladder__ctx_type_3_init(_output_);
   return ;
}

float Ladder_euler(Ladder__ctx_type_3 &_ctx, float input, float cut, float res){
   float dpt[4];
   uint8_t _cond_39;
   _cond_39 = Util_change(_ctx._inst28,cut);
   if(_cond_39){
      _ctx.fh = Ladder_tune(cut);
   }
   Ladder_ladder_step(input,_ctx.fh,res,_ctx.p,dpt);
   float_set(_ctx.p,0,(float_get(_ctx.p,0) + float_get(dpt,0)));
   float_set(_ctx.p,1,(float_get(_ctx.p,1) + float_get(dpt,1)));
   float_set(_ctx.p,2,(float_get(_ctx.p,2) + float_get(dpt,2)));
   float_set(_ctx.p,3,(float_get(_ctx.p,3) + float_get(dpt,3)));
   return float_get(_ctx.p,3);
}

void Ladder__ctx_type_4_init(Ladder__ctx_type_4 &_output_){
   Ladder__ctx_type_4 _ctx;
   Ladder__ctx_type_3_init(_ctx.e);
   _output_ = _ctx;
   return ;
}

void Ladder_process_euler_init(Ladder__ctx_type_4 &_output_){
   Ladder__ctx_type_4_init(_output_);
   return ;
}

float Ladder_process_euler(Ladder__ctx_type_4 &_ctx, float input, float cut, float res){
   Ladder_euler(_ctx.e,input,cut,res);
   Ladder_euler(_ctx.e,input,cut,res);
   Ladder_euler(_ctx.e,input,cut,res);
   float out;
   out = Ladder_euler(_ctx.e,input,cut,res);
   return out;
}

void Ladder__ctx_type_5_init(Ladder__ctx_type_5 &_output_){
   Ladder__ctx_type_5 _ctx;
   Ladder__ctx_type_2_init(_ctx.h);
   _output_ = _ctx;
   return ;
}

void Ladder_process_heun_init(Ladder__ctx_type_5 &_output_){
   Ladder__ctx_type_5_init(_output_);
   return ;
}

float Ladder_process_heun(Ladder__ctx_type_5 &_ctx, float input, float cut, float res){
   Ladder_heun(_ctx.h,input,cut,res);
   Ladder_heun(_ctx.h,input,cut,res);
   Ladder_heun(_ctx.h,input,cut,res);
   float out;
   out = Ladder_heun(_ctx.h,input,cut,res);
   return out;
}

void Ladder__ctx_type_6_init(Ladder__ctx_type_6 &_output_){
   Ladder__ctx_type_6 _ctx;
   Ladder__ctx_type_5_init(_ctx._inst33);
   _output_ = _ctx;
   return ;
}

void Ladder_process_init(Ladder__ctx_type_6 &_output_){
   Ladder__ctx_type_6_init(_output_);
   return ;
}

float Ladder_process(Ladder__ctx_type_6 &_ctx, float input, float cut, float res){
   return Ladder_process_heun(_ctx._inst33,input,cut,res);
}

void Ladder_noteOn_init(Ladder__ctx_type_6 &_output_){
   Ladder__ctx_type_6_init(_output_);
   return ;
}

void Ladder_noteOn(Ladder__ctx_type_6 &_ctx, int note, int velocity, int channel){
}

void Ladder_noteOff_init(Ladder__ctx_type_6 &_output_){
   Ladder__ctx_type_6_init(_output_);
   return ;
}

void Ladder_noteOff(Ladder__ctx_type_6 &_ctx, int note, int channel){
}

void Ladder_controlChange_init(Ladder__ctx_type_6 &_output_){
   Ladder__ctx_type_6_init(_output_);
   return ;
}

void Ladder_controlChange(Ladder__ctx_type_6 &_ctx, int control, int value, int channel){
}

void Ladder_default_init(Ladder__ctx_type_6 &_output_){
   Ladder__ctx_type_6_init(_output_);
   return ;
}

void Ladder_default(Ladder__ctx_type_6 &_ctx){
}


