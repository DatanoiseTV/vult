
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#include "ladder.h"

void Util__ctx_type_0_init(Util__ctx_type_0 &_output_){
   Util__ctx_type_0 _ctx;
   _ctx.pre = 0;
   _output_ = _ctx;
   return ;
}

void Util_edge_init(Util__ctx_type_0 &_output_){
   Util__ctx_type_0_init(_output_);
   return ;
}

uint8_t Util_edge(Util__ctx_type_0 &_ctx, uint8_t x){
   uint8_t ret;
   ret = (x && bool_not(_ctx.pre));
   _ctx.pre = x;
   return ret;
}

void Util__ctx_type_1_init(Util__ctx_type_1 &_output_){
   Util__ctx_type_1 _ctx;
   _ctx.pre_x = 0.000000f;
   _output_ = _ctx;
   return ;
}

void Util_change_init(Util__ctx_type_1 &_output_){
   Util__ctx_type_1_init(_output_);
   return ;
}

uint8_t Util_change(Util__ctx_type_1 &_ctx, float x){
   uint8_t v;
   v = (_ctx.pre_x != x);
   _ctx.pre_x = x;
   return v;
}

float Util_map(float x, float x0, float x1, float y0, float y1){
   return ((((x + (- x0)) * (y1 + (- y0))) / (x1 + (- x0))) + y0);
}

void Util__ctx_type_3_init(Util__ctx_type_3 &_output_){
   Util__ctx_type_3 _ctx;
   _ctx.y1 = 0.000000f;
   _ctx.x1 = 0.000000f;
   _output_ = _ctx;
   return ;
}

void Util_dcblock_init(Util__ctx_type_3 &_output_){
   Util__ctx_type_3_init(_output_);
   return ;
}

float Util_dcblock(Util__ctx_type_3 &_ctx, float x0){
   float y0;
   y0 = (x0 + (- _ctx.x1) + (_ctx.y1 * 0.995000f));
   _ctx.x1 = x0;
   _ctx.y1 = y0;
   return y0;
}

void Util__ctx_type_4_init(Util__ctx_type_4 &_output_){
   Util__ctx_type_4 _ctx;
   _ctx.x = 0.000000f;
   _output_ = _ctx;
   return ;
}

void Util_smooth_init(Util__ctx_type_4 &_output_){
   Util__ctx_type_4_init(_output_);
   return ;
}

float Util_smooth(Util__ctx_type_4 &_ctx, float input){
   _ctx.x = (_ctx.x + ((input + (- _ctx.x)) * 0.005000f));
   return _ctx.x;
}

void Util__ctx_type_5_init(Util__ctx_type_5 &_output_){
   Util__ctx_type_5 _ctx;
   _ctx.x0 = 0.000000f;
   _output_ = _ctx;
   return ;
}

void Util_average2_init(Util__ctx_type_5 &_output_){
   Util__ctx_type_5_init(_output_);
   return ;
}

float Util_average2(Util__ctx_type_5 &_ctx, float x1){
   float result;
   result = ((_ctx.x0 + x1) * 0.500000f);
   _ctx.x0 = x1;
   return result;
}

float Util_pitchToRate_1024(float pitch){
   int index;
   index = int_clip(float_to_int((0.244094f * pitch)),0,31);
   return (float_get(float_wrap_array(Util_pitchToRate_1024_c0),index) + (pitch * (float_get(float_wrap_array(Util_pitchToRate_1024_c1),index) + (float_get(float_wrap_array(Util_pitchToRate_1024_c2),index) * pitch))));
}

float Util_pitchToRate(float pitch){
   int index;
   index = int_clip(float_to_int((0.244094f * pitch)),0,31);
   return (float_get(float_wrap_array(Util_pitchToRate_c0),index) + (pitch * (float_get(float_wrap_array(Util_pitchToRate_c1),index) + (float_get(float_wrap_array(Util_pitchToRate_c2),index) * pitch))));
}

float Util_cvToPitch(float cv){
   return ((cv * 120.000000f) + 24.000000f);
}

float Util_cvToRate_1024(float cv){
   int index;
   index = int_clip(float_to_int((34.444444f * cv)),0,31);
   return (float_get(float_wrap_array(Util_cvToRate_1024_c0),index) + (cv * (float_get(float_wrap_array(Util_cvToRate_1024_c1),index) + (float_get(float_wrap_array(Util_cvToRate_1024_c2),index) * cv))));
}

float Util_cvToRate(float cv){
   int index;
   index = int_clip(float_to_int((34.444444f * cv)),0,31);
   return (float_get(float_wrap_array(Util_cvToRate_c0),index) + (cv * (float_get(float_wrap_array(Util_cvToRate_c1),index) + (float_get(float_wrap_array(Util_cvToRate_c2),index) * cv))));
}

float Util_pitchToCv(float pitch){
   return (0.008333f * ((-24.000000f) + pitch));
}

float Saturate_table(float x){
   int index;
   index = int_clip(float_to_int((1.500000f * x)),0,9);
   return (float_get(float_wrap_array(Saturate_table_c0),index) + (x * (float_get(float_wrap_array(Saturate_table_c1),index) + (float_get(float_wrap_array(Saturate_table_c2),index) * x))));
}

float Saturate_process(float x){
   uint8_t _cond_22;
   _cond_22 = (x == 0.000000f);
   if(_cond_22){
      return 0.000000f;
   }
   float fixed;
   uint8_t sign;
   uint8_t _cond_24;
   _cond_24 = (x > 0.000000f);
   if(_cond_24){
      fixed = x;
      sign = 0;
   }
   else
   {
      fixed = (- x);
      sign = 1;
   }
   float out;
   out = 0.000000f;
   uint8_t _cond_23;
   _cond_23 = (fixed > 6.000000f);
   if(_cond_23){
      out = 1.000000f;
   }
   else
   {
      out = Saturate_table(fixed);
   }
   if(sign){ out = (- out); }
   else
   { out = out; }
   return out;
}

void Saturate_noteOn(int note, int velocity, int channel){
}

void Saturate_noteOff(int note, int channel){
}

void Saturate_controlChange(int control, int value, int channel){
}

void Saturate_default(){
}

float Ladder_getTune(float cv){
   int index;
   index = int_clip(float_to_int((127.000000f * cv)),0,127);
   return (float_get(float_wrap_array(Ladder_getTune_c0),index) + (cv * (float_get(float_wrap_array(Ladder_getTune_c1),index) + (float_get(float_wrap_array(Ladder_getTune_c2),index) * cv))));
}

void Ladder__ctx_type_1_init(Ladder__ctx_type_1 &_output_){
   Ladder__ctx_type_1 _ctx;
   _ctx.yd = 0.000000f;
   _ctx.yc = 0.000000f;
   _ctx.yb = 0.000000f;
   _ctx.ya = 0.000000f;
   _ctx.wc = 0.000000f;
   _ctx.wb = 0.000000f;
   _ctx.wa = 0.000000f;
   _ctx.tune = 0.000000f;
   Util__ctx_type_1_init(_ctx._inst29);
   _output_ = _ctx;
   return ;
}

void Ladder_step_init(Ladder__ctx_type_1 &_output_){
   Ladder__ctx_type_1_init(_output_);
   return ;
}

float Ladder_step(Ladder__ctx_type_1 &_ctx, float x, float cv, float res){
   float _2vt;
   _2vt = 2.441406f;
   uint8_t _cond_36;
   _cond_36 = Util_change(_ctx._inst29,cv);
   if(_cond_36){
      _ctx.tune = (_2vt * Ladder_getTune(cv));
   }
   _ctx.ya = (_ctx.ya + (_ctx.tune * (Saturate_process(((x + ((-4.000000f) * res * _ctx.yd)) / _2vt)) + (- _ctx.wa))));
   _ctx.wa = Saturate_process((_ctx.ya / _2vt));
   _ctx.yb = (_ctx.yb + (_ctx.tune * (_ctx.wa + (- _ctx.wb))));
   _ctx.wb = Saturate_process((_ctx.yb / _2vt));
   _ctx.yc = (_ctx.yc + (_ctx.tune * (_ctx.wb + (- _ctx.wc))));
   _ctx.wc = Saturate_process((_ctx.yc / _2vt));
   _ctx.yd = (_ctx.yd + (_ctx.tune * (_ctx.wc + (- Saturate_process((_ctx.yd / _2vt))))));
   return _ctx.yd;
}

void Ladder__ctx_type_2_init(Ladder__ctx_type_2 &_output_){
   Ladder__ctx_type_2 _ctx;
   Ladder__ctx_type_1_init(_ctx.filter);
   _output_ = _ctx;
   return ;
}

void Ladder_process_init(Ladder__ctx_type_2 &_output_){
   Ladder__ctx_type_2_init(_output_);
   return ;
}

float Ladder_process(Ladder__ctx_type_2 &_ctx, float input, float cut, float res){
   res = float_clip(res,0.000000f,1.000000f);
   cut = float_clip(cut,(-0.300000f),1.000000f);
   float i;
   i = (input * 0.500000f);
   float x0;
   x0 = Ladder_step(_ctx.filter,input,cut,res);
   float x1;
   x1 = Ladder_step(_ctx.filter,input,cut,res);
   return ((x0 + x1) * (1.000000f + (2.000000f * res)));
}

void Ladder_noteOn_init(Ladder__ctx_type_2 &_output_){
   Ladder__ctx_type_2_init(_output_);
   return ;
}

void Ladder_noteOn(Ladder__ctx_type_2 &_ctx, int note, int velocity, int channel){
}

void Ladder_noteOff_init(Ladder__ctx_type_2 &_output_){
   Ladder__ctx_type_2_init(_output_);
   return ;
}

void Ladder_noteOff(Ladder__ctx_type_2 &_ctx, int note, int channel){
}

void Ladder_controlChange_init(Ladder__ctx_type_2 &_output_){
   Ladder__ctx_type_2_init(_output_);
   return ;
}

void Ladder_controlChange(Ladder__ctx_type_2 &_ctx, int control, int value, int channel){
}

void Ladder_default_init(Ladder__ctx_type_2 &_output_){
   Ladder__ctx_type_2_init(_output_);
   return ;
}

void Ladder_default(Ladder__ctx_type_2 &_ctx){
}


