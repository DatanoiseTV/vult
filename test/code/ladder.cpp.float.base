
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#include "ladder.h"

void Util__ctx_type_3_init(Util__ctx_type_3 &_output_){
   Util__ctx_type_3 _ctx;
   _ctx.y1 = 0.0f;
   _ctx.x1 = 0.0f;
   _output_ = _ctx;
   return ;
}

float Util_dcblock(Util__ctx_type_3 &_ctx, float x0){
   float y0;
   y0 = (x0 + (- _ctx.x1) + (0.995f * _ctx.y1));
   _ctx.x1 = x0;
   _ctx.y1 = y0;
   return y0;
}

void Ladder__ctx_type_4_init(Ladder__ctx_type_4 &_output_){
   Ladder__ctx_type_4 _ctx;
   _ctx.p3 = 0.0f;
   _ctx.p2 = 0.0f;
   _ctx.p1 = 0.0f;
   _ctx.p0 = 0.0f;
   _output_ = _ctx;
   return ;
}

float Ladder_heun(Ladder__ctx_type_4 &_ctx, float input, float fh, float res){
   float wt0;
   wt0 = Util_cubic_clipper((input + (-4.f * _ctx.p3 * res)));
   float wt1;
   wt1 = Util_cubic_clipper(_ctx.p0);
   float dpt0;
   dpt0 = (fh * (wt0 + (- wt1)));
   float wt3;
   wt3 = Util_cubic_clipper(_ctx.p1);
   float dpt1;
   dpt1 = (fh * (wt1 + (- wt3)));
   float wt5;
   wt5 = Util_cubic_clipper(_ctx.p2);
   float dpt2;
   dpt2 = (fh * (wt3 + (- wt5)));
   float wt7;
   wt7 = Util_cubic_clipper(_ctx.p3);
   float dpt3;
   dpt3 = (fh * (wt5 + (- wt7)));
   float pt0;
   pt0 = (_ctx.p0 + dpt0);
   float pt1;
   pt1 = (_ctx.p1 + dpt1);
   float pt2;
   pt2 = (_ctx.p2 + dpt2);
   float pt3;
   pt3 = (_ctx.p3 + dpt3);
   float w0;
   w0 = Util_cubic_clipper((input + (-4.f * pt3 * res)));
   float w1;
   w1 = Util_cubic_clipper(pt0);
   float dp0;
   dp0 = (fh * (w0 + (- w1)));
   float w3;
   w3 = Util_cubic_clipper(pt1);
   float dp1;
   dp1 = (fh * (w1 + (- w3)));
   float w5;
   w5 = Util_cubic_clipper(pt2);
   float dp2;
   dp2 = (fh * (w3 + (- w5)));
   float w7;
   w7 = Util_cubic_clipper(pt3);
   float dp3;
   dp3 = (fh * (w5 + (- w7)));
   _ctx.p0 = (_ctx.p0 + (0.5f * (dp0 + dpt0)));
   _ctx.p1 = (_ctx.p1 + (0.5f * (dp1 + dpt1)));
   _ctx.p2 = (_ctx.p2 + (0.5f * (dp2 + dpt2)));
   _ctx.p3 = (_ctx.p3 + (0.5f * (dp3 + dpt3)));
   return _ctx.p3;
}

void Ladder__ctx_type_5_init(Ladder__ctx_type_5 &_output_){
   Ladder__ctx_type_5 _ctx;
   _ctx.p3 = 0.0f;
   _ctx.p2 = 0.0f;
   _ctx.p1 = 0.0f;
   _ctx.p0 = 0.0f;
   _output_ = _ctx;
   return ;
}

float Ladder_euler(Ladder__ctx_type_5 &_ctx, float input, float fh, float res){
   float w0;
   w0 = Util_cubic_clipper((input + (-4.f * _ctx.p3 * res)));
   float w1;
   w1 = Util_cubic_clipper(_ctx.p0);
   float dpt0;
   dpt0 = (fh * (w0 + (- w1)));
   float w3;
   w3 = Util_cubic_clipper(_ctx.p1);
   float dpt1;
   dpt1 = (fh * (w1 + (- w3)));
   float w5;
   w5 = Util_cubic_clipper(_ctx.p2);
   float dpt2;
   dpt2 = (fh * (w3 + (- w5)));
   float w7;
   w7 = Util_cubic_clipper(_ctx.p3);
   float dpt3;
   dpt3 = (fh * (w5 + (- w7)));
   _ctx.p0 = (_ctx.p0 + dpt0);
   _ctx.p1 = (_ctx.p1 + dpt1);
   _ctx.p2 = (_ctx.p2 + dpt2);
   _ctx.p3 = (_ctx.p3 + dpt3);
   return _ctx.p3;
}

void Ladder__ctx_type_6_init(Ladder__ctx_type_6 &_output_){
   Ladder__ctx_type_6 _ctx;
   _ctx.fh = 0.0f;
   Ladder__ctx_type_5_init(_ctx.e);
   Util__ctx_type_1_init(_ctx._inst159);
   _output_ = _ctx;
   return ;
}

float Ladder_process_euler(Ladder__ctx_type_6 &_ctx, float input, float cut, float res){
   if(Util_change(_ctx._inst159,cut)){
      _ctx.fh = Ladder_tune(cut);
   }
   Ladder_euler(_ctx.e,input,_ctx.fh,res);
   Ladder_euler(_ctx.e,input,_ctx.fh,res);
   Ladder_euler(_ctx.e,input,_ctx.fh,res);
   float out;
   out = Ladder_euler(_ctx.e,input,_ctx.fh,res);
   return out;
}

void Ladder__ctx_type_7_init(Ladder__ctx_type_7 &_output_){
   Ladder__ctx_type_7 _ctx;
   Ladder__ctx_type_4_init(_ctx.h);
   _ctx.fh = 0.0f;
   Util__ctx_type_1_init(_ctx._inst159);
   _output_ = _ctx;
   return ;
}

float Ladder_process_heun(Ladder__ctx_type_7 &_ctx, float input, float cut, float res){
   if(Util_change(_ctx._inst159,cut)){
      _ctx.fh = Ladder_tune(cut);
   }
   Ladder_heun(_ctx.h,input,_ctx.fh,res);
   Ladder_heun(_ctx.h,input,_ctx.fh,res);
   Ladder_heun(_ctx.h,input,_ctx.fh,res);
   float out;
   out = Ladder_heun(_ctx.h,input,_ctx.fh,res);
   return out;
}


