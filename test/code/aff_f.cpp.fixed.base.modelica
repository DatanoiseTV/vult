
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#include "aff_f.h"

void Aff_f__ctx_type_0_init(Aff_f__ctx_type_0 &_output_){
   Aff_f__ctx_type_0 _ctx;
   _ctx.x = 0;
   _output_ = _ctx;
   return ;
}

void Aff_f_process_init(Aff_f__ctx_type_0 &_output_){
   Aff_f__ctx_type_0_init(_output_);
   return ;
}

fix16_t Aff_f_process(Aff_f__ctx_type_0 &_ctx, fix16_t a, fix16_t b){
   _ctx.x = (1 + _ctx.x);
   return fix_mul(a,b);
}

void Aff_f_noteOn_init(Aff_f__ctx_type_0 &_output_){
   Aff_f__ctx_type_0_init(_output_);
   return ;
}

void Aff_f_noteOn(Aff_f__ctx_type_0 &_ctx, int note, int velocity, int channel){
}

void Aff_f_noteOff_init(Aff_f__ctx_type_0 &_output_){
   Aff_f__ctx_type_0_init(_output_);
   return ;
}

void Aff_f_noteOff(Aff_f__ctx_type_0 &_ctx, int note, int channel){
}

void Aff_f_controlChange_init(Aff_f__ctx_type_0 &_output_){
   Aff_f__ctx_type_0_init(_output_);
   return ;
}

void Aff_f_controlChange(Aff_f__ctx_type_0 &_ctx, int control, int value, int channel){
}

void Aff_f_default_init(Aff_f__ctx_type_0 &_output_){
   Aff_f__ctx_type_0_init(_output_);
   return ;
}

void Aff_f_default(Aff_f__ctx_type_0 &_ctx){
}



extern "C" {

EXPORT void *aff_f__constructor()
{
   Aff_f_process_type *data = (Aff_f_process_type *)malloc(sizeof(Aff_f_process_type));
   Aff_f_process_init(*data);
   Aff_f_default(*data);
   return (void *)data;
}

EXPORT void aff_f__destructor(void *object)
{
   Aff_f_process_type *data = (Aff_f_process_type *)object;
   free(data);
}

EXPORT double aff_f__process(void *object, double in_0, double in_1)
{
   Aff_f_process_type *data = (Aff_f_process_type *)object;
   fix16_t ret =  Aff_f_process(*data,float_to_fix(in_0),float_to_fix(in_1)); 
return fix_to_float(ret); 
}


EXPORT void aff_f__noteOn(void *object, int note,int velocity,int channel){
   Aff_f_process_type *data = (Aff_f_process_type *)object;
   if(vel) Aff_f_noteOn(*data,(int)note,(int)velocity,(int)channel);
   else Aff_f_noteOff(*data,(int)note,(int)channel);
}



EXPORT void aff_f__noteOff(void *object, int note,int channel) {
   Aff_f_process_type *data = (Aff_f_process_type *)object;
   Aff_f_noteOff(*data,(int)note,(int)channel);
}



EXPORT void aff_f__controlChange(void *object, int control,int value,int channel) {
   Aff_f_process_type *data = (Aff_f_process_type *)object;
   Aff_f_controlChange(*data,(int)control,(int)value,(int)channel);
}


} // extern "C"
