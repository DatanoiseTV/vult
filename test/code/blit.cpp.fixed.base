
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#include "blit.h"

uint8_t Blit_near_zero(fix16_t x){
   return (fix_abs(x) < 0x51e /* 0.020000 */);
}

void Blit__ctx_type_1_init(Blit__ctx_type_1 &_output_){
   Blit__ctx_type_1 _ctx;
   _ctx.pre_x = 0x0 /* 0.000000 */;
   _output_ = _ctx;
   return ;
}

void Blit_change_init(Blit__ctx_type_1 &_output_){
   Blit__ctx_type_1_init(_output_);
   return ;
}

uint8_t Blit_change(Blit__ctx_type_1 &_ctx, fix16_t x){
   uint8_t v;
   v = (_ctx.pre_x != x);
   _ctx.pre_x = x;
   return v;
}

void Blit__ctx_type_2_init(Blit__ctx_type_2 &_output_){
   Blit__ctx_type_2 _ctx;
   _ctx.y1 = 0x0 /* 0.000000 */;
   _ctx.x1 = 0x0 /* 0.000000 */;
   _output_ = _ctx;
   return ;
}

void Blit_dcblock_init(Blit__ctx_type_2 &_output_){
   Blit__ctx_type_2_init(_output_);
   return ;
}

fix16_t Blit_dcblock(Blit__ctx_type_2 &_ctx, fix16_t x0){
   fix16_t y0;
   y0 = fix_add(fix_add(x0,(- _ctx.x1)),fix_mul(_ctx.y1,0xfeb8 /* 0.995000 */));
   _ctx.x1 = x0;
   _ctx.y1 = y0;
   return y0;
}

fix16_t Blit_pitchToRate(fix16_t d){
   return fix_mul(0xc /* 0.000185 */,fix_exp(fix_mul(0xec9 /* 0.057762 */,d)));
}

fix16_t Blit_pulse_train(fix16_t m, fix16_t phase){
   fix16_t pi_phase;
   pi_phase = fix_mul(phase,0x3243f /* 3.141593 */);
   fix16_t denominator1;
   denominator1 = fix_sin(pi_phase);
   fix16_t tmp1;
   tmp1 = 0x0 /* 0.000000 */;
   uint8_t _cond_28;
   _cond_28 = Blit_near_zero(denominator1);
   if(_cond_28){
      tmp1 = 0x10000 /* 1.000000 */;
   }
   else
   {
      tmp1 = fix_sin(fix_mul(m,pi_phase));
      tmp1 = fix_div(tmp1,fix_mul(m,denominator1));
   }
   return tmp1;
}

void Blit__ctx_type_5_init(Blit__ctx_type_5 &_output_){
   Blit__ctx_type_5 _ctx;
   _ctx.state_triang = 0x0 /* 0.000000 */;
   _ctx.state_saw = 0x0 /* 0.000000 */;
   _ctx.state_pulse = 0x0 /* 0.000000 */;
   _ctx.rate = 0x0 /* 0.000000 */;
   _ctx.phase = 0x0 /* 0.000000 */;
   _ctx.output = 0x0 /* 0.000000 */;
   _ctx.m = 0x0 /* 0.000000 */;
   Blit__ctx_type_2_init(_ctx._inst18);
   Blit__ctx_type_1_init(_ctx._inst10);
   _output_ = _ctx;
   return ;
}

void Blit_osc_init(Blit__ctx_type_5 &_output_){
   Blit__ctx_type_5_init(_output_);
   return ;
}

fix16_t Blit_osc(Blit__ctx_type_5 &_ctx, fix16_t pitch, fix16_t pw, fix16_t wave){
   fix16_t fixed_pitch;
   fixed_pitch = 0x0 /* 0.000000 */;
   uint8_t _cond_29;
   _cond_29 = (wave < 0xaaaa /* 0.666667 */);
   if(_cond_29){
      fixed_pitch = pitch;
   }
   else
   {
      fixed_pitch = fix_add(pitch,0xc0000 /* 12.000000 */);
   }
   uint8_t _cond_30;
   _cond_30 = Blit_change(_ctx._inst10,fixed_pitch);
   if(_cond_30){
      _ctx.rate = Blit_pitchToRate(fixed_pitch);
      fix16_t p;
      p = fix_div(0x10000 /* 1.000000 */,_ctx.rate);
      fix16_t maxHarmonics;
      maxHarmonics = fix_floor(fix_mul(p,0x8000 /* 0.500000 */));
      _ctx.m = fix_add(fix_mul(0x20000 /* 2.000000 */,maxHarmonics),0x10000 /* 1.000000 */);
   }
   fix16_t shift05;
   shift05 = fix_add(0x8000 /* 0.500000 */,fix_mul(pw,0x7d70 /* 0.490000 */));
   fix16_t shift;
   shift = fix_add(_ctx.phase,shift05);
   uint8_t _cond_31;
   _cond_31 = (shift > 0x10000 /* 1.000000 */);
   if(_cond_31){
      shift = fix_add(shift,(-0x10000 /* -1.000000 */));
   }
   fix16_t tmp1;
   tmp1 = Blit_pulse_train(_ctx.m,_ctx.phase);
   fix16_t tmp2;
   tmp2 = Blit_pulse_train(_ctx.m,shift);
   _ctx.phase = fix_add(_ctx.phase,_ctx.rate);
   uint8_t _cond_32;
   _cond_32 = (_ctx.phase > 0x10000 /* 1.000000 */);
   if(_cond_32){
      _ctx.phase = fix_add(_ctx.phase,(-0x10000 /* -1.000000 */));
   }
   _ctx.state_pulse = fix_clip(fix_add(fix_add(fix_mul(_ctx.state_pulse,0xffdf /* 0.999500 */),tmp1),(- tmp2)),(-0x10000 /* -1.000000 */),0x10000 /* 1.000000 */);
   _ctx.state_saw = fix_clip(fix_add(fix_mul(_ctx.state_saw,0xffdf /* 0.999500 */),fix_mul(fix_div(fix_add(fix_add(tmp1,tmp2),fix_mul((-0x20000 /* -2.000000 */),_ctx.rate)),shift05),0x8000 /* 0.500000 */)),(-0x10000 /* -1.000000 */),0x10000 /* 1.000000 */);
   _ctx.state_triang = fix_clip(fix_add(fix_mul(_ctx.state_triang,0xffdf /* 0.999500 */),fix_mul(fix_mul(0x20000 /* 2.000000 */,_ctx.state_pulse),_ctx.rate)),(-0x10000 /* -1.000000 */),0x10000 /* 1.000000 */);
   uint8_t _cond_34;
   _cond_34 = (wave < 0x5555 /* 0.333333 */);
   if(_cond_34){
      _ctx.output = _ctx.state_pulse;
   }
   else
   {
      uint8_t _cond_33;
      _cond_33 = (wave < 0xaaaa /* 0.666667 */);
      if(_cond_33){
         _ctx.output = fix_mul(0x20000 /* 2.000000 */,_ctx.state_saw);
      }
      else
      {
         _ctx.output = fix_mul(fix_mul(0x20000 /* 2.000000 */,_ctx.state_triang),fix_add(0x10000 /* 1.000000 */,pw));
      }
   }
   _ctx.output = Blit_dcblock(_ctx._inst18,_ctx.output);
   return fix_clip(fix_mul(_ctx.output,0x4000 /* 0.250000 */),(-0x10000 /* -1.000000 */),0x10000 /* 1.000000 */);
}

void Blit__ctx_type_6_init(Blit__ctx_type_6 &_output_){
   Blit__ctx_type_6 _ctx;
   _ctx.wave = 0x0 /* 0.000000 */;
   _ctx.pw = 0x0 /* 0.000000 */;
   _ctx.pitch = 0x0 /* 0.000000 */;
   Blit__ctx_type_5_init(_ctx._inst20);
   _output_ = _ctx;
   return ;
}

void Blit_process_init(Blit__ctx_type_6 &_output_){
   Blit__ctx_type_6_init(_output_);
   return ;
}

fix16_t Blit_process(Blit__ctx_type_6 &_ctx, fix16_t input){
   return Blit_osc(_ctx._inst20,_ctx.pitch,_ctx.pw,_ctx.wave);
}

void Blit_noteOn_init(Blit__ctx_type_6 &_output_){
   Blit__ctx_type_6_init(_output_);
   return ;
}

void Blit_noteOn(Blit__ctx_type_6 &_ctx, int note, int velocity, int channel){
   _ctx.pitch = int_to_fix(note);
}

void Blit_noteOff_init(Blit__ctx_type_6 &_output_){
   Blit__ctx_type_6_init(_output_);
   return ;
}

void Blit_noteOff(Blit__ctx_type_6 &_ctx, int note, int channel){
}

void Blit_controlChange_init(Blit__ctx_type_6 &_output_){
   Blit__ctx_type_6_init(_output_);
   return ;
}

void Blit_controlChange(Blit__ctx_type_6 &_ctx, int control, int value, int channel){
   uint8_t _cond_35;
   _cond_35 = (control == 30);
   if(_cond_35){
      _ctx.pw = fix_mul(int_to_fix(value),0x204 /* 0.007874 */);
   }
   uint8_t _cond_36;
   _cond_36 = (control == 31);
   if(_cond_36){
      _ctx.wave = fix_mul(int_to_fix(value),0x204 /* 0.007874 */);
   }
}

void Blit_default_init(Blit__ctx_type_6 &_output_){
   Blit__ctx_type_6_init(_output_);
   return ;
}

void Blit_default(Blit__ctx_type_6 &_ctx){
   _ctx.pw = 0x0 /* 0.000000 */;
   _ctx.wave = 0x2d0000 /* 45.000000 */;
   _ctx.pitch = 0x2d0000 /* 45.000000 */;
}


