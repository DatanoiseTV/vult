
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#include "blit.h"

void Util__ctx_type_0_init(Util__ctx_type_0 &_output_){
   Util__ctx_type_0 _ctx;
   _ctx.pre = 0;
   _output_ = _ctx;
   return ;
}

void Util_edge_init(Util__ctx_type_0 &_output_){
   Util__ctx_type_0_init(_output_);
   return ;
}

uint8_t Util_edge(Util__ctx_type_0 &_ctx, uint8_t x){
   uint8_t ret;
   ret = (x && bool_not(_ctx.pre));
   _ctx.pre = x;
   return ret;
}

void Util__ctx_type_1_init(Util__ctx_type_1 &_output_){
   Util__ctx_type_1 _ctx;
   _ctx.pre_x = 0x0 /* 0.000000 */;
   _output_ = _ctx;
   return ;
}

void Util_change_init(Util__ctx_type_1 &_output_){
   Util__ctx_type_1_init(_output_);
   return ;
}

uint8_t Util_change(Util__ctx_type_1 &_ctx, fix16_t x){
   uint8_t v;
   v = (_ctx.pre_x != x);
   _ctx.pre_x = x;
   return v;
}

fix16_t Util_map(fix16_t x, fix16_t x0, fix16_t x1, fix16_t y0, fix16_t y1){
   return fix_add(fix_div(fix_mul(fix_add(x,(- x0)),fix_add(y1,(- y0))),fix_add(x1,(- x0))),y0);
}

void Util__ctx_type_3_init(Util__ctx_type_3 &_output_){
   Util__ctx_type_3 _ctx;
   _ctx.y1 = 0x0 /* 0.000000 */;
   _ctx.x1 = 0x0 /* 0.000000 */;
   _output_ = _ctx;
   return ;
}

void Util_dcblock_init(Util__ctx_type_3 &_output_){
   Util__ctx_type_3_init(_output_);
   return ;
}

fix16_t Util_dcblock(Util__ctx_type_3 &_ctx, fix16_t x0){
   fix16_t y0;
   y0 = fix_add(fix_add(x0,(- _ctx.x1)),fix_mul(_ctx.y1,0xfeb8 /* 0.995000 */));
   _ctx.x1 = x0;
   _ctx.y1 = y0;
   return y0;
}

void Util__ctx_type_4_init(Util__ctx_type_4 &_output_){
   Util__ctx_type_4 _ctx;
   _ctx.x = 0x0 /* 0.000000 */;
   _output_ = _ctx;
   return ;
}

void Util_smooth_init(Util__ctx_type_4 &_output_){
   Util__ctx_type_4_init(_output_);
   return ;
}

fix16_t Util_smooth(Util__ctx_type_4 &_ctx, fix16_t input){
   _ctx.x = fix_add(_ctx.x,fix_mul(fix_add(input,(- _ctx.x)),0x147 /* 0.005000 */));
   return _ctx.x;
}

void Util__ctx_type_5_init(Util__ctx_type_5 &_output_){
   Util__ctx_type_5 _ctx;
   _ctx.x0 = 0x0 /* 0.000000 */;
   _output_ = _ctx;
   return ;
}

void Util_average2_init(Util__ctx_type_5 &_output_){
   Util__ctx_type_5_init(_output_);
   return ;
}

fix16_t Util_average2(Util__ctx_type_5 &_ctx, fix16_t x1){
   fix16_t result;
   result = fix_mul(fix_add(_ctx.x0,x1),0x8000 /* 0.500000 */);
   _ctx.x0 = x1;
   return result;
}

fix16_t Util_pitchToRate_1024(fix16_t pitch){
   int index;
   index = int_clip(fix_to_int(fix_mul(0x3e7c /* 0.244094 */,pitch)),0,31);
   return fix_add(fix_get(fix_wrap_array(Util_pitchToRate_1024_c0),index),fix_mul(pitch,fix_add(fix_get(fix_wrap_array(Util_pitchToRate_1024_c1),index),fix_mul(fix_get(fix_wrap_array(Util_pitchToRate_1024_c2),index),pitch))));
}

fix16_t Util_pitchToRate(fix16_t pitch){
   int index;
   index = int_clip(fix_to_int(fix_mul(0x3e7c /* 0.244094 */,pitch)),0,31);
   return fix_add(fix_get(fix_wrap_array(Util_pitchToRate_c0),index),fix_mul(pitch,fix_add(fix_get(fix_wrap_array(Util_pitchToRate_c1),index),fix_mul(fix_get(fix_wrap_array(Util_pitchToRate_c2),index),pitch))));
}

fix16_t Util_cvToPitch(fix16_t cv){
   return fix_add(fix_mul(cv,0x780000 /* 120.000000 */),0x180000 /* 24.000000 */);
}

fix16_t Util_cvToRate_1024(fix16_t cv){
   int index;
   index = int_clip(fix_to_int(fix_mul(0x2271c7 /* 34.444444 */,cv)),0,31);
   return fix_add(fix_get(fix_wrap_array(Util_cvToRate_1024_c0),index),fix_mul(cv,fix_add(fix_get(fix_wrap_array(Util_cvToRate_1024_c1),index),fix_mul(fix_get(fix_wrap_array(Util_cvToRate_1024_c2),index),cv))));
}

fix16_t Util_cvToRate(fix16_t cv){
   int index;
   index = int_clip(fix_to_int(fix_mul(0x2271c7 /* 34.444444 */,cv)),0,31);
   return fix_add(fix_get(fix_wrap_array(Util_cvToRate_c0),index),fix_mul(cv,fix_add(fix_get(fix_wrap_array(Util_cvToRate_c1),index),fix_mul(fix_get(fix_wrap_array(Util_cvToRate_c2),index),cv))));
}

fix16_t Util_pitchToCv(fix16_t pitch){
   return fix_mul(0x222 /* 0.008333 */,fix_add((-0x180000 /* -24.000000 */),pitch));
}

fix16_t Util_cvToperiod(fix16_t cv){
   int index;
   index = int_clip(fix_to_int(fix_mul(0x1f0000 /* 31.000000 */,cv)),0,31);
   return fix_add(fix_get(fix_wrap_array(Util_cvToperiod_c0),index),fix_mul(cv,fix_add(fix_get(fix_wrap_array(Util_cvToperiod_c1),index),fix_mul(fix_get(fix_wrap_array(Util_cvToperiod_c2),index),cv))));
}

void Phase__ctx_type_0_init(Phase__ctx_type_0 &_output_){
   Phase__ctx_type_0 _ctx;
   _ctx.rate = 0x0 /* 0.000000 */;
   _ctx.phase = 0x0 /* 0.000000 */;
   Util__ctx_type_0_init(_ctx._inst17);
   Util__ctx_type_1_init(_ctx._inst15);
   Phase_default(_ctx);
   _output_ = _ctx;
   return ;
}

void Phase_process_init(Phase__ctx_type_0 &_output_){
   Phase__ctx_type_0_init(_output_);
   return ;
}

fix16_t Phase_process(Phase__ctx_type_0 &_ctx, fix16_t cv, fix16_t reset){
   uint8_t _cond_22;
   _cond_22 = Util_change(_ctx._inst15,cv);
   if(_cond_22){
      _ctx.rate = Util_cvToRate_1024(cv);
   }
   uint8_t _cond_23;
   _cond_23 = Util_edge(_ctx._inst17,(reset > 0x8000 /* 0.500000 */));
   if(_cond_23){ _ctx.phase = 0x0 /* 0.000000 */; }
   else
   { _ctx.phase = fix_add(_ctx.phase,_ctx.rate); }
   uint8_t _cond_24;
   _cond_24 = (_ctx.phase > 0x4000000 /* 1024.000000 */);
   if(_cond_24){ _ctx.phase = fix_add(_ctx.phase,(-0x4000000 /* -1024.000000 */)); }
   return fix_mul(_ctx.phase,0x40 /* 0.000977 */);
}

void Phase_noteOn_init(Phase__ctx_type_0 &_output_){
   Phase__ctx_type_0_init(_output_);
   return ;
}

void Phase_noteOn(Phase__ctx_type_0 &_ctx, int note, int velocity, int channel){
}

void Phase_noteOff_init(Phase__ctx_type_0 &_output_){
   Phase__ctx_type_0_init(_output_);
   return ;
}

void Phase_noteOff(Phase__ctx_type_0 &_ctx, int note, int channel){
}

void Phase_controlChange_init(Phase__ctx_type_0 &_output_){
   Phase__ctx_type_0_init(_output_);
   return ;
}

void Phase_controlChange(Phase__ctx_type_0 &_ctx, int control, int value, int channel){
}

void Phase_default_init(Phase__ctx_type_0 &_output_){
   Phase__ctx_type_0_init(_output_);
   return ;
}

void Phase_default(Phase__ctx_type_0 &_ctx){
   _ctx.rate = 0xc265 /* 0.759367 */;
}

fix16_t Tables_nsine(fix16_t x){
   int index;
   index = int_clip(fix_to_int(fix_mul(0x7f0000 /* 127.000000 */,x)),0,127);
   return fix_add(fix_get(fix_wrap_array(Tables_nsine_c0),index),fix_mul(x,fix_add(fix_get(fix_wrap_array(Tables_nsine_c1),index),fix_mul(fix_get(fix_wrap_array(Tables_nsine_c2),index),x))));
}

void Blit__ctx_type_0_init(Blit__ctx_type_0 &_output_){
   Blit__ctx_type_0 _ctx;
   _ctx.scale = 0x0 /* 0.000000 */;
   _ctx.m = 0;
   Util__ctx_type_1_init(_ctx._inst27);
   Blit_pulse_start(_ctx);
   _output_ = _ctx;
   return ;
}

void Blit_pulse_train_init(Blit__ctx_type_0 &_output_){
   Blit__ctx_type_0_init(_output_);
   return ;
}

fix16_t Blit_pulse_train(Blit__ctx_type_0 &_ctx, fix16_t cv, fix16_t phase){
   uint8_t _cond_51;
   _cond_51 = Util_change(_ctx._inst27,cv);
   if(_cond_51){
      _ctx.m = ((2 * fix_to_int(Util_cvToperiod(cv))) + 1);
      _ctx.scale = fix_mul(0x20000 /* 2.000000 */,Util_cvToperiod(cv));
   }
   fix16_t pi_phase;
   pi_phase = fix_mul(phase,0x8000 /* 0.500000 */);
   fix16_t denominator;
   denominator = Tables_nsine(pi_phase);
   fix16_t out;
   out = 0x0 /* 0.000000 */;
   uint8_t _cond_52;
   _cond_52 = (denominator <= 0x0 /* 0.000000 */);
   if(_cond_52){
      out = 0x10000 /* 1.000000 */;
   }
   else
   {
      fix16_t m_phase;
      m_phase = (fix_mul(int_to_fix(_ctx.m),pi_phase) % 0x10000 /* 1.000000 */);
      fix16_t numerator;
      numerator = Tables_nsine(m_phase);
      out = fix_div(numerator,fix_mul(_ctx.scale,denominator));
   }
   return out;
}

void Blit_pulse_start_init(Blit__ctx_type_0 &_output_){
   Blit__ctx_type_0_init(_output_);
   return ;
}

void Blit_pulse_start(Blit__ctx_type_0 &_ctx){
   _ctx.m = 1349;
   _ctx.scale = 0x5457df8 /* 1349.492070 */;
}

void Blit__ctx_type_1_init(Blit__ctx_type_1 &_output_){
   Blit__ctx_type_1 _ctx;
   _ctx.state_saw = 0x0 /* 0.000000 */;
   _ctx.state_pulse = 0x0 /* 0.000000 */;
   _ctx.rate = 0x0 /* 0.000000 */;
   _ctx.output = 0x0 /* 0.000000 */;
   Util__ctx_type_3_init(_ctx._inst43);
   Blit__ctx_type_0_init(_ctx._inst40);
   Blit__ctx_type_0_init(_ctx._inst39);
   Phase__ctx_type_0_init(_ctx._inst37);
   Util__ctx_type_1_init(_ctx._inst35);
   Blit_init(_ctx);
   _output_ = _ctx;
   return ;
}

void Blit_osc_blit_init(Blit__ctx_type_1 &_output_){
   Blit__ctx_type_1_init(_output_);
   return ;
}

fix16_t Blit_osc_blit(Blit__ctx_type_1 &_ctx, fix16_t cv, fix16_t pw, fix16_t wave){
   fix16_t fixed_cv;
   fixed_cv = 0x0 /* 0.000000 */;
   uint8_t _cond_53;
   _cond_53 = (wave < 0x10000 /* 1.000000 */);
   if(_cond_53){
      fixed_cv = cv;
   }
   else
   {
      fixed_cv = fix_add(cv,(-0x1999 /* -0.100000 */));
   }
   uint8_t _cond_54;
   _cond_54 = Util_change(_ctx._inst35,fixed_cv);
   if(_cond_54){
      _ctx.rate = Util_cvToRate(fixed_cv);
   }
   fix16_t phase;
   phase = Phase_process(_ctx._inst37,fixed_cv,0x0 /* 0.000000 */);
   fix16_t shift05;
   shift05 = fix_add(0x8000 /* 0.500000 */,fix_mul(pw,0x7d70 /* 0.490000 */));
   fix16_t shift;
   shift = fix_add(phase,shift05);
   uint8_t _cond_55;
   _cond_55 = (shift > 0x10000 /* 1.000000 */);
   if(_cond_55){
      shift = fix_add(shift,(-0x10000 /* -1.000000 */));
   }
   fix16_t pulse1;
   pulse1 = Blit_pulse_train(_ctx._inst39,fixed_cv,phase);
   fix16_t pulse2;
   pulse2 = Blit_pulse_train(_ctx._inst40,fixed_cv,shift);
   _ctx.state_pulse = fix_add(fix_add(fix_mul(_ctx.state_pulse,0xffdf /* 0.999500 */),pulse1),(- pulse2));
   _ctx.state_saw = fix_add(fix_mul(_ctx.state_saw,0xffdf /* 0.999500 */),fix_mul(fix_div(fix_add(fix_add(pulse1,pulse2),fix_mul((-0x20000 /* -2.000000 */),_ctx.rate)),shift05),0x8000 /* 0.500000 */));
   uint8_t _cond_56;
   _cond_56 = (wave < 0x10000 /* 1.000000 */);
   if(_cond_56){
      _ctx.output = _ctx.state_pulse;
   }
   else
   {
      _ctx.output = fix_mul(0x20000 /* 2.000000 */,_ctx.state_saw);
   }
   _ctx.output = Util_dcblock(_ctx._inst43,_ctx.output);
   return _ctx.output;
}

void Blit_init_init(Blit__ctx_type_1 &_output_){
   Blit__ctx_type_1_init(_output_);
   return ;
}

void Blit_init(Blit__ctx_type_1 &_ctx){
   _ctx.rate = 0x30 /* 0.000742 */;
}

void Blit__ctx_type_2_init(Blit__ctx_type_2 &_output_){
   Blit__ctx_type_2 _ctx;
   Blit__ctx_type_1_init(_ctx._inst46);
   _output_ = _ctx;
   return ;
}

void Blit_process_init(Blit__ctx_type_2 &_output_){
   Blit__ctx_type_2_init(_output_);
   return ;
}

fix16_t Blit_process(Blit__ctx_type_2 &_ctx, fix16_t cv, fix16_t pw, fix16_t wave){
   return Blit_osc_blit(_ctx._inst46,cv,pw,wave);
}

void Blit_noteOn_init(Blit__ctx_type_2 &_output_){
   Blit__ctx_type_2_init(_output_);
   return ;
}

void Blit_noteOn(Blit__ctx_type_2 &_ctx, int note, int velocity, int channel){
}

void Blit_noteOff_init(Blit__ctx_type_2 &_output_){
   Blit__ctx_type_2_init(_output_);
   return ;
}

void Blit_noteOff(Blit__ctx_type_2 &_ctx, int note, int channel){
}

void Blit_controlChange_init(Blit__ctx_type_2 &_output_){
   Blit__ctx_type_2_init(_output_);
   return ;
}

void Blit_controlChange(Blit__ctx_type_2 &_ctx, int control, int value, int channel){
}

void Blit_default_init(Blit__ctx_type_2 &_output_){
   Blit__ctx_type_2_init(_output_);
   return ;
}

void Blit_default(Blit__ctx_type_2 &_ctx){
}


