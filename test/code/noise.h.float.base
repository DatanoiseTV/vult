
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#ifndef NOISE_H
#define NOISE_H
#include <stdint.h>
#include <math.h>
#include "vultin.h"
#include "noise.tables.h"

typedef struct Noise__ctx_type_0 {
   float w1;
} Noise__ctx_type_0;

typedef Noise__ctx_type_0 Noise_pinker_type;

static_inline void Noise__ctx_type_0_init(Noise__ctx_type_0 &_output_){
   Noise__ctx_type_0 _ctx;
   _ctx.w1 = 0.f;
   _output_ = _ctx;
   return ;
}

static_inline void Noise_pinker_init(Noise__ctx_type_0 &_output_){
   Noise__ctx_type_0_init(_output_);
   return ;
}

float Noise_pinker(Noise__ctx_type_0 &_ctx, float x);

typedef struct Noise__ctx_type_1 {
   int x2;
   int x1;
   Noise__ctx_type_0 _inst2;
} Noise__ctx_type_1;

typedef Noise__ctx_type_1 Noise_process_type;

void Noise__ctx_type_1_init(Noise__ctx_type_1 &_output_);

static_inline void Noise_process_init(Noise__ctx_type_1 &_output_){
   Noise__ctx_type_1_init(_output_);
   return ;
}

float Noise_process(Noise__ctx_type_1 &_ctx, float color);

typedef Noise__ctx_type_1 Noise_noteOn_type;

static_inline void Noise_noteOn_init(Noise__ctx_type_1 &_output_){
   Noise__ctx_type_1_init(_output_);
   return ;
}

static_inline void Noise_noteOn(Noise__ctx_type_1 &_ctx, int note, int velocity, int channel){
}

typedef Noise__ctx_type_1 Noise_noteOff_type;

static_inline void Noise_noteOff_init(Noise__ctx_type_1 &_output_){
   Noise__ctx_type_1_init(_output_);
   return ;
}

static_inline void Noise_noteOff(Noise__ctx_type_1 &_ctx, int note, int channel){
}

typedef Noise__ctx_type_1 Noise_controlChange_type;

static_inline void Noise_controlChange_init(Noise__ctx_type_1 &_output_){
   Noise__ctx_type_1_init(_output_);
   return ;
}

static_inline void Noise_controlChange(Noise__ctx_type_1 &_ctx, int control, int value, int channel){
}

typedef Noise__ctx_type_1 Noise_default_type;

static_inline void Noise_default_init(Noise__ctx_type_1 &_output_){
   Noise__ctx_type_1_init(_output_);
   return ;
}

static_inline void Noise_default(Noise__ctx_type_1 &_ctx){
}



#endif // NOISE_H
