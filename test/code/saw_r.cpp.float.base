
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#include "saw_r.h"

void Util__ctx_type_0_init(Util__ctx_type_0 &_output_){
   Util__ctx_type_0 _ctx;
   _ctx.pre = 0;
   _output_ = _ctx;
   return ;
}

void Util_edge_init(Util__ctx_type_0 &_output_){
   Util__ctx_type_0_init(_output_);
   return ;
}

uint8_t Util_edge(Util__ctx_type_0 &_ctx, uint8_t x){
   uint8_t ret;
   ret = (x && bool_not(_ctx.pre));
   _ctx.pre = x;
   return ret;
}

void Util__ctx_type_1_init(Util__ctx_type_1 &_output_){
   Util__ctx_type_1 _ctx;
   _ctx.pre_x = 0.0000f;
   _output_ = _ctx;
   return ;
}

void Util_change_init(Util__ctx_type_1 &_output_){
   Util__ctx_type_1_init(_output_);
   return ;
}

uint8_t Util_change(Util__ctx_type_1 &_ctx, float x){
   uint8_t v;
   v = (_ctx.pre_x != x);
   _ctx.pre_x = x;
   return v;
}

float Util_map(float x, float x0, float x1, float y0, float y1){
   return ((((x + (- x0)) * (y1 + (- y0))) / (x1 + (- x0))) + y0);
}

void Util__ctx_type_3_init(Util__ctx_type_3 &_output_){
   Util__ctx_type_3 _ctx;
   _ctx.y1 = 0.0000f;
   _ctx.x1 = 0.0000f;
   _output_ = _ctx;
   return ;
}

void Util_dcblock_init(Util__ctx_type_3 &_output_){
   Util__ctx_type_3_init(_output_);
   return ;
}

float Util_dcblock(Util__ctx_type_3 &_ctx, float x0){
   float y0;
   y0 = (x0 + (- _ctx.x1) + (_ctx.y1 * 0.9950f));
   _ctx.x1 = x0;
   _ctx.y1 = y0;
   return y0;
}

void Util__ctx_type_4_init(Util__ctx_type_4 &_output_){
   Util__ctx_type_4 _ctx;
   _ctx.x = 0.0000f;
   _output_ = _ctx;
   return ;
}

void Util_smooth_init(Util__ctx_type_4 &_output_){
   Util__ctx_type_4_init(_output_);
   return ;
}

float Util_smooth(Util__ctx_type_4 &_ctx, float input){
   _ctx.x = (_ctx.x + ((input + (- _ctx.x)) * 0.0050f));
   return _ctx.x;
}

void Util__ctx_type_5_init(Util__ctx_type_5 &_output_){
   Util__ctx_type_5 _ctx;
   _ctx.x0 = 0.0000f;
   _output_ = _ctx;
   return ;
}

void Util_average2_init(Util__ctx_type_5 &_output_){
   Util__ctx_type_5_init(_output_);
   return ;
}

float Util_average2(Util__ctx_type_5 &_ctx, float x1){
   float result;
   result = ((_ctx.x0 + x1) * 0.5000f);
   _ctx.x0 = x1;
   return result;
}

float Util_cubic_clipper(float x){
   uint8_t _cond_21;
   _cond_21 = (x <= (-0.6667f));
   if(_cond_21){
      return (-0.6667f);
   }
   else
   {
      uint8_t _cond_20;
      _cond_20 = (x >= 0.6667f);
      if(_cond_20){
         return 0.6667f;
      }
      else
      {
         return (x + ((-0.3333f) * x * x * x));
      }
   }
}

float Util_pitchToRate_1024(float pitch){
   int index;
   index = int_clip(float_to_int((0.2441f * pitch)),0,31);
   return (float_wrap_array(Util_pitchToRate_1024_c0)[index] + (pitch * (float_wrap_array(Util_pitchToRate_1024_c1)[index] + (float_wrap_array(Util_pitchToRate_1024_c2)[index] * pitch))));
}

float Util_pitchToRate(float pitch){
   int index;
   index = int_clip(float_to_int((0.2441f * pitch)),0,31);
   return (float_wrap_array(Util_pitchToRate_c0)[index] + (pitch * (float_wrap_array(Util_pitchToRate_c1)[index] + (float_wrap_array(Util_pitchToRate_c2)[index] * pitch))));
}

float Util_cvToPitch(float cv){
   return ((cv * 120.0000f) + 24.0000f);
}

float Util_cvToRate_1024(float cv){
   int index;
   index = int_clip(float_to_int((34.4444f * cv)),0,31);
   return (float_wrap_array(Util_cvToRate_1024_c0)[index] + (cv * (float_wrap_array(Util_cvToRate_1024_c1)[index] + (float_wrap_array(Util_cvToRate_1024_c2)[index] * cv))));
}

float Util_cvToRate(float cv){
   int index;
   index = int_clip(float_to_int((141.1111f * cv)),0,127);
   return (float_wrap_array(Util_cvToRate_c0)[index] + (cv * (float_wrap_array(Util_cvToRate_c1)[index] + (float_wrap_array(Util_cvToRate_c2)[index] * cv))));
}

float Util_pitchToCv(float pitch){
   return (0.0083f * ((-24.0000f) + pitch));
}

float Util_cvToperiod(float cv){
   int index;
   index = int_clip(float_to_int((31.0000f * cv)),0,31);
   return (float_wrap_array(Util_cvToperiod_c0)[index] + (cv * (float_wrap_array(Util_cvToperiod_c1)[index] + (float_wrap_array(Util_cvToperiod_c2)[index] * cv))));
}

float Util_cvTokHz(float cv){
   int index;
   index = int_clip(float_to_int((31.0000f * cv)),0,31);
   return (float_wrap_array(Util_cvTokHz_c0)[index] + (cv * (float_wrap_array(Util_cvTokHz_c1)[index] + (float_wrap_array(Util_cvTokHz_c2)[index] * cv))));
}

void Saw_r__ctx_type_0_init(Saw_r__ctx_type_0 &_output_){
   Saw_r__ctx_type_0 _ctx;
   _ctx.phase = 0.0000f;
   _ctx.inc = 0.0000f;
   Util__ctx_type_1_init(_ctx._inst23);
   Saw_r_default(_ctx);
   _output_ = _ctx;
   return ;
}

void Saw_r_process_init(Saw_r__ctx_type_0 &_output_){
   Saw_r__ctx_type_0_init(_output_);
   return ;
}

float Saw_r_process(Saw_r__ctx_type_0 &_ctx, float cv){
   uint8_t _cond_33;
   _cond_33 = Util_change(_ctx._inst23,cv);
   if(_cond_33){
      _ctx.inc = Util_cvToRate(cv);
   }
   float i;
   uint8_t _cond_36;
   _cond_36 = (_ctx.inc < 0.0000f);
   if(_cond_36){ i = 0.0000f; }
   else
   { i = _ctx.inc; }
   _ctx.phase = ((2.0000f * _ctx.inc) + _ctx.phase);
   uint8_t _cond_37;
   _cond_37 = (_ctx.phase > 2.0000f);
   if(_cond_37){ _ctx.phase = (_ctx.phase + (-2.0000f)); }
   float ph;
   ph = (_ctx.phase + (-1.0000f));
   float o;
   o = 0.0000f;
   uint8_t _cond_35;
   _cond_35 = (ph >= (1.0000f + (- i)));
   if(_cond_35){
      float b;
      b = ((1.0000f + (- i) + (- ph)) / i);
      o = ((b * fabsf(b)) + ph);
   }
   else
   {
      uint8_t _cond_34;
      _cond_34 = (ph <= (i + (-1.0000f)));
      if(_cond_34){
         float b;
         b = ((i + (-1.0000f) + (- ph)) / i);
         o = ((b * fabsf(b)) + ph);
      }
      else
      {
         o = ph;
      }
   }
   return o;
}

void Saw_r_noteOn_init(Saw_r__ctx_type_0 &_output_){
   Saw_r__ctx_type_0_init(_output_);
   return ;
}

void Saw_r_noteOn(Saw_r__ctx_type_0 &_ctx, int note, int velocity, int channel){
}

void Saw_r_noteOff_init(Saw_r__ctx_type_0 &_output_){
   Saw_r__ctx_type_0_init(_output_);
   return ;
}

void Saw_r_noteOff(Saw_r__ctx_type_0 &_ctx, int note, int channel){
}

void Saw_r_controlChange_init(Saw_r__ctx_type_0 &_output_){
   Saw_r__ctx_type_0_init(_output_);
   return ;
}

void Saw_r_controlChange(Saw_r__ctx_type_0 &_ctx, int control, int value, int channel){
}

void Saw_r_default_init(Saw_r__ctx_type_0 &_output_){
   Saw_r__ctx_type_0_init(_output_);
   return ;
}

void Saw_r_default(Saw_r__ctx_type_0 &_ctx){
   _ctx.inc = 0.0007f;
}


