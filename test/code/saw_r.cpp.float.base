
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#include "saw_r.h"

void Util__ctx_type_3_init(Util__ctx_type_3 &_output_){
   Util__ctx_type_3 _ctx;
   _ctx.y1 = 0.0f;
   _ctx.x1 = 0.0f;
   _output_ = _ctx;
   return ;
}

float Util_dcblock(Util__ctx_type_3 &_ctx, float x0){
   float y0;
   y0 = (x0 + (- _ctx.x1) + (0.995f * _ctx.y1));
   _ctx.x1 = x0;
   _ctx.y1 = y0;
   return y0;
}

void Saw_r__ctx_type_0_init(Saw_r__ctx_type_0 &_output_){
   Saw_r__ctx_type_0 _ctx;
   _ctx.phase = 0.0f;
   _ctx.inc = 0.0f;
   Util__ctx_type_1_init(_ctx._inst159);
   Saw_r_default(_ctx);
   _output_ = _ctx;
   return ;
}

float Saw_r_process(Saw_r__ctx_type_0 &_ctx, float cv){
   if(Util_change(_ctx._inst159,cv)){
      _ctx.inc = Util_cvToRate(cv);
   }
   float i;
   if(_ctx.inc < 1e-07f){
      i = 1e-07f;
   }
   else
   {
      i = _ctx.inc;
   }
   _ctx.phase = (_ctx.phase + (2.f * _ctx.inc));
   if(_ctx.phase > 2.f){
      _ctx.phase = (-2.f + _ctx.phase);
   }
   float ph;
   ph = (-1.f + _ctx.phase);
   float o;
   o = 0.0f;
   if(ph >= (1.f + (- i))){
      float b;
      b = ((1.f + (- i) + (- ph)) / i);
      o = (ph + (b * fabsf(b)));
   }
   else
   {
      if(ph <= (-1.f + i)){
         float b;
         b = ((-1.f + i + (- ph)) / i);
         o = (ph + (b * fabsf(b)));
      }
      else
      {
         o = ph;
      }
   }
   return o;
}


