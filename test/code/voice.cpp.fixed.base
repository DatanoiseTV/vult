
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#include "voice.h"

fix16_t Voice_minFixed(){
   return 0x1 /* 0.000015 */;
}

void Voice__ctx_type_1_init(Voice__ctx_type_1 &_output_){
   Voice__ctx_type_1 _ctx;
   _ctx.pre_x = 0x0 /* 0.000000 */;
   _output_ = _ctx;
   return ;
}

void Voice_change_init(Voice__ctx_type_1 &_output_){
   Voice__ctx_type_1_init(_output_);
   return ;
}

uint8_t Voice_change(Voice__ctx_type_1 &_ctx, fix16_t x){
   uint8_t v = (_ctx.pre_x != x);
   _ctx.pre_x = x;
   return v;
}

void Voice__ctx_type_2_init(Voice__ctx_type_2 &_output_){
   Voice__ctx_type_2 _ctx;
   _ctx.pre_x = 0;
   _output_ = _ctx;
   return ;
}

void Voice_bchange_init(Voice__ctx_type_2 &_output_){
   Voice__ctx_type_2_init(_output_);
   return ;
}

uint8_t Voice_bchange(Voice__ctx_type_2 &_ctx, uint8_t x){
   uint8_t v = (_ctx.pre_x != x);
   _ctx.pre_x = x;
   return v;
}

void Voice__ctx_type_3_init(Voice__ctx_type_3 &_output_){
   Voice__ctx_type_3 _ctx;
   _ctx.pre_x = 0;
   _output_ = _ctx;
   return ;
}

void Voice_edge_init(Voice__ctx_type_3 &_output_){
   Voice__ctx_type_3_init(_output_);
   return ;
}

uint8_t Voice_edge(Voice__ctx_type_3 &_ctx, uint8_t x){
   uint8_t v = ((_ctx.pre_x != x) && (_ctx.pre_x == 1));
   _ctx.pre_x = x;
   return v;
}

void Voice__ctx_type_4_init(Voice__ctx_type_4 &_output_){
   Voice__ctx_type_4 _ctx;
   _ctx.count = 0;
   _output_ = _ctx;
   return ;
}

void Voice_each_init(Voice__ctx_type_4 &_output_){
   Voice__ctx_type_4_init(_output_);
   return ;
}

uint8_t Voice_each(Voice__ctx_type_4 &_ctx, int n){
   uint8_t ret = (_ctx.count == 0);
   _ctx.count = ((_ctx.count + 1) % n);
   return ret;
}

uint8_t Voice_near_zero(fix16_t x){
   return (fix_abs(x) < 0x51e /* 0.020000 */);
}

void Voice__ctx_type_6_init(Voice__ctx_type_6 &_output_){
   Voice__ctx_type_6 _ctx;
   _ctx.y1 = 0x0 /* 0.000000 */;
   _ctx.x1 = 0x0 /* 0.000000 */;
   _output_ = _ctx;
   return ;
}

void Voice_dcblock_init(Voice__ctx_type_6 &_output_){
   Voice__ctx_type_6_init(_output_);
   return ;
}

fix16_t Voice_dcblock(Voice__ctx_type_6 &_ctx, fix16_t x0){
   fix16_t y0 = fix_add(fix_add(x0,(- _ctx.x1)),fix_mul(_ctx.y1,0xfeb8 /* 0.995000 */));
   _ctx.x1 = x0;
   _ctx.y1 = y0;
   return y0;
}

void Voice__ctx_type_7_init(Voice__ctx_type_7 &_output_){
   Voice__ctx_type_7 _ctx;
   _ctx.pre_x = 0x0 /* 0.000000 */;
   _output_ = _ctx;
   return ;
}

void Voice_lpfilter_init(Voice__ctx_type_7 &_output_){
   Voice__ctx_type_7_init(_output_);
   return ;
}

fix16_t Voice_lpfilter(Voice__ctx_type_7 &_ctx, fix16_t x){
   fix16_t ret = fix_mul(fix_add(x,_ctx.pre_x),0x8000 /* 0.500000 */);
   _ctx.pre_x = x;
   return ret;
}

fix16_t Voice_pitchToRate(fix16_t d){
   return fix_mul(0xc /* 0.000185 */,fix_exp(fix_mul(0xec9 /* 0.057762 */,d)));
}

fix16_t Voice_pulse_train(fix16_t m, fix16_t phase){
   fix16_t pi_phase = fix_mul(phase,0x3243f /* 3.141593 */);
   fix16_t denominator1 = fix_sin(pi_phase);
   fix16_t tmp1 = 0x0 /* 0.000000 */;
   uint8_t _cond_3 = Voice_near_zero(denominator1);
   if(_cond_3){
      tmp1 = 0x10000 /* 1.000000 */;
   }
   else
   {
      tmp1 = fix_sin(fix_mul(m,pi_phase));
      tmp1 = fix_div(tmp1,fix_mul(m,denominator1));
   }
   return tmp1;
}

void Voice__ctx_type_10_init(Voice__ctx_type_10 &_output_){
   Voice__ctx_type_10 _ctx;
   _ctx.state_triang = 0x0 /* 0.000000 */;
   _ctx.state_saw = 0x0 /* 0.000000 */;
   _ctx.state_pulse = 0x0 /* 0.000000 */;
   _ctx.rate = 0x0 /* 0.000000 */;
   _ctx.phase = 0x0 /* 0.000000 */;
   _ctx.output = 0x0 /* 0.000000 */;
   _ctx.m = 0x0 /* 0.000000 */;
   Voice__ctx_type_1_init(_ctx._inst3);
   Voice__ctx_type_6_init(_ctx._inst11);
   _output_ = _ctx;
   return ;
}

void Voice_osc_init(Voice__ctx_type_10 &_output_){
   Voice__ctx_type_10_init(_output_);
   return ;
}

fix16_t Voice_osc(Voice__ctx_type_10 &_ctx, fix16_t pitch, fix16_t pw, fix16_t wave){
   fix16_t fixed_pitch = 0x0 /* 0.000000 */;
   uint8_t _cond_12 = (wave < 0xaaaa /* 0.666667 */);
   if(_cond_12){
      fixed_pitch = pitch;
   }
   else
   {
      fixed_pitch = fix_add(pitch,0xc0000 /* 12.000000 */);
   }
   uint8_t _cond_13 = Voice_change(_ctx._inst3,fixed_pitch);
   if(_cond_13){
      _ctx.rate = Voice_pitchToRate(fixed_pitch);
      fix16_t p = fix_div(0x10000 /* 1.000000 */,_ctx.rate);
      fix16_t maxHarmonics = fix_floor(fix_mul(p,0x8000 /* 0.500000 */));
      _ctx.m = fix_add(fix_mul(0x20000 /* 2.000000 */,maxHarmonics),0x10000 /* 1.000000 */);
   }
   fix16_t shift05 = fix_add(0x8000 /* 0.500000 */,fix_mul(pw,0x7d70 /* 0.490000 */));
   fix16_t shift = fix_add(_ctx.phase,shift05);
   uint8_t _cond_14 = (shift > 0x10000 /* 1.000000 */);
   if(_cond_14){
      shift = fix_add(shift,(-0x10000 /* -1.000000 */));
   }
   fix16_t tmp1 = Voice_pulse_train(_ctx.m,_ctx.phase);
   fix16_t tmp2 = Voice_pulse_train(_ctx.m,shift);
   _ctx.phase = fix_add(_ctx.phase,_ctx.rate);
   uint8_t _cond_15 = (_ctx.phase > 0x10000 /* 1.000000 */);
   if(_cond_15){
      _ctx.phase = fix_add(_ctx.phase,(-0x10000 /* -1.000000 */));
   }
   _ctx.state_pulse = fix_clip(fix_add(fix_add(fix_mul(_ctx.state_pulse,0xffdf /* 0.999500 */),tmp1),(- tmp2)),(-0x10000 /* -1.000000 */),0x10000 /* 1.000000 */);
   _ctx.state_saw = fix_clip(fix_add(fix_mul(_ctx.state_saw,0xffdf /* 0.999500 */),fix_mul(fix_div(fix_add(fix_add(tmp1,tmp2),fix_mul((-0x20000 /* -2.000000 */),_ctx.rate)),shift05),0x8000 /* 0.500000 */)),(-0x10000 /* -1.000000 */),0x10000 /* 1.000000 */);
   _ctx.state_triang = fix_clip(fix_add(fix_mul(_ctx.state_triang,0xffdf /* 0.999500 */),fix_mul(fix_mul(0x20000 /* 2.000000 */,_ctx.state_pulse),_ctx.rate)),(-0x10000 /* -1.000000 */),0x10000 /* 1.000000 */);
   uint8_t _cond_17 = (wave < 0x5555 /* 0.333333 */);
   if(_cond_17){
      _ctx.output = _ctx.state_pulse;
   }
   else
   {
      uint8_t _cond_16 = (wave < 0xaaaa /* 0.666667 */);
      if(_cond_16){
         _ctx.output = fix_mul(0x20000 /* 2.000000 */,_ctx.state_saw);
      }
      else
      {
         _ctx.output = fix_mul(fix_mul(0x20000 /* 2.000000 */,_ctx.state_triang),fix_add(0x10000 /* 1.000000 */,pw));
      }
   }
   _ctx.output = Voice_dcblock(_ctx._inst11,_ctx.output);
   return fix_clip(fix_mul(_ctx.output,0x4000 /* 0.250000 */),(-0x10000 /* -1.000000 */),0x10000 /* 1.000000 */);
}

void Voice__ctx_type_11_init(Voice__ctx_type_11 &_output_){
   Voice__ctx_type_11 _ctx;
   _ctx.dlow = 0x0 /* 0.000000 */;
   _ctx.dband = 0x0 /* 0.000000 */;
   _output_ = _ctx;
   return ;
}

void Voice_svf_step_init(Voice__ctx_type_11 &_output_){
   Voice__ctx_type_11_init(_output_);
   return ;
}

fix16_t Voice_svf_step(Voice__ctx_type_11 &_ctx, fix16_t input, fix16_t g, fix16_t q, int sel){
   fix16_t low = fix_add(_ctx.dlow,fix_mul(g,_ctx.dband));
   fix16_t high = fix_add(fix_add(input,(- low)),(- fix_mul(q,_ctx.dband)));
   fix16_t band = fix_add(fix_mul(g,high),_ctx.dband);
   fix16_t notch = fix_add(high,low);
   _ctx.dband = fix_clip(band,(-0x10000 /* -1.000000 */),0x10000 /* 1.000000 */);
   _ctx.dlow = fix_clip(low,(-0x10000 /* -1.000000 */),0x10000 /* 1.000000 */);
   fix16_t output;
   uint8_t _cond_1 = (sel == 0);
   if(_cond_1)output = low;
   else
   {
      uint8_t _cond_2 = (sel == 1);
      if(_cond_2)output = high;
      else
      {
         uint8_t _cond_3 = (sel == 2);
         if(_cond_3)output = band;
         else
         output = notch;
      }
   }
   return output;
}

void Voice__ctx_type_12_init(Voice__ctx_type_12 &_output_){
   Voice__ctx_type_12 _ctx;
   Voice__ctx_type_11_init(_ctx.step);
   _ctx.g = 0x0 /* 0.000000 */;
   Voice__ctx_type_1_init(_ctx._inst1);
   _output_ = _ctx;
   return ;
}

void Voice_svf_init(Voice__ctx_type_12 &_output_){
   Voice__ctx_type_12_init(_output_);
   return ;
}

fix16_t Voice_svf(Voice__ctx_type_12 &_ctx, fix16_t input, fix16_t fc, fix16_t q, int sel){
   fc = fix_clip(fc,0x0 /* 0.000000 */,0x10000 /* 1.000000 */);
   q = fix_clip(q,0x0 /* 0.000000 */,0x10000 /* 1.000000 */);
   fix16_t fix_q = fix_mul(0x20000 /* 2.000000 */,fix_add(0x10000 /* 1.000000 */,(- q)));
   uint8_t _cond_3 = Voice_change(_ctx._inst1,fc);
   if(_cond_3){
      _ctx.g = fix_mul(fc,0x8000 /* 0.500000 */);
   }
   fix16_t x1 = Voice_svf_step(_ctx.step,input,_ctx.g,fix_q,sel);
   fix16_t x2 = Voice_svf_step(_ctx.step,input,_ctx.g,fix_q,sel);
   return fix_mul(fix_add(x1,x2),0x8000 /* 0.500000 */);
}

void Voice__ctx_type_13_init(Voice__ctx_type_13 &_output_){
   Voice__ctx_type_13 _ctx;
   _ctx.target = 0x0 /* 0.000000 */;
   _ctx.state = 0;
   _ctx.rate = 0x0 /* 0.000000 */;
   _ctx.out = 0x0 /* 0.000000 */;
   _output_ = _ctx;
   return ;
}

void Voice_adsr_init(Voice__ctx_type_13 &_output_){
   Voice__ctx_type_13_init(_output_);
   return ;
}

fix16_t Voice_adsr(Voice__ctx_type_13 &_ctx, uint8_t gate, fix16_t a, fix16_t d, fix16_t s, fix16_t r){
   _ctx.out = fix_add(_ctx.out,fix_mul(fix_mul(fix_add(_ctx.target,(- _ctx.out)),_ctx.rate),0x41 /* 0.001000 */));
   uint8_t _cond_8 = (_ctx.state == 0);
   if(_cond_8){
      if(gate){
         _ctx.state = 1;
      }
      _ctx.rate = r;
      _ctx.target = 0x0 /* 0.000000 */;
   }
   uint8_t _cond_11 = (_ctx.state == 1);
   if(_cond_11){
      uint8_t _cond_9 = bool_not(gate);
      if(_cond_9){
         _ctx.state = 0;
      }
      uint8_t _cond_10 = (_ctx.out > 0x4000000 /* 1024.000000 */);
      if(_cond_10){
         _ctx.state = 2;
      }
      _ctx.rate = a;
      _ctx.target = 0x4cccccc /* 1228.800000 */;
   }
   uint8_t _cond_13 = (_ctx.state == 2);
   if(_cond_13){
      uint8_t _cond_12 = bool_not(gate);
      if(_cond_12){
         _ctx.state = 0;
      }
      _ctx.rate = d;
      _ctx.target = fix_mul(s,0x4000000 /* 1024.000000 */);
   }
   return fix_mul(_ctx.out,0x40 /* 0.000977 */);
}

void Voice__ctx_type_14_init(Voice__ctx_type_14 &_output_){
   Voice__ctx_type_14 _ctx;
   _ctx.phase = 0x0 /* 0.000000 */;
   Voice__ctx_type_4_init(_ctx._inst3);
   Voice__ctx_type_3_init(_ctx._inst1);
   _output_ = _ctx;
   return ;
}

void Voice_lfo_init(Voice__ctx_type_14 &_output_){
   Voice__ctx_type_14_init(_output_);
   return ;
}

fix16_t Voice_lfo(Voice__ctx_type_14 &_ctx, fix16_t f, uint8_t gate){
   fix16_t rate = fix_add(fix_mul(fix_mul(f,0x640000 /* 100.000000 */),Voice_minFixed()),Voice_minFixed());
   uint8_t _cond_6 = Voice_edge(_ctx._inst1,gate);
   if(_cond_6){
      _ctx.phase = 0x0 /* 0.000000 */;
   }
   uint8_t _cond_7 = Voice_each(_ctx._inst3,4);
   if(_cond_7){
      _ctx.phase = fix_add(_ctx.phase,rate);
   }
   uint8_t _cond_8 = (_ctx.phase > 0x10000 /* 1.000000 */);
   if(_cond_8){
      _ctx.phase = fix_add(_ctx.phase,(-0x10000 /* -1.000000 */));
   }
   return fix_add(fix_sin(fix_mul(0x6487e /* 6.283185 */,_ctx.phase)),0x8000 /* 0.500000 */);
}

void Voice__ctx_type_15_init(Voice__ctx_type_15 &_output_){
   Voice__ctx_type_15 _ctx;
   _ctx.pre = 0;
   _ctx.n4 = 0;
   _ctx.n3 = 0;
   _ctx.n2 = 0;
   _ctx.n1 = 0;
   _ctx.count = 0;
   _output_ = _ctx;
   return ;
}

void Voice_mono_noteOn_init(Voice__ctx_type_15 &_output_){
   Voice__ctx_type_15_init(_output_);
   return ;
}

int Voice_mono_noteOn(Voice__ctx_type_15 &_ctx, int n){
   uint8_t _cond_12 = (_ctx.count == 0);
   if(_cond_12){
      _ctx.n1 = n;
      _ctx.pre = n;
   }
   else
   {
      uint8_t _cond_11 = (_ctx.count == 1);
      if(_cond_11){
         _ctx.n2 = n;
         _ctx.pre = n;
      }
      else
      {
         uint8_t _cond_10 = (_ctx.count == 2);
         if(_cond_10){
            _ctx.n3 = n;
            _ctx.pre = n;
         }
         else
         {
            uint8_t _cond_9 = (_ctx.count == 3);
            if(_cond_9){
               _ctx.n4 = n;
            }
         }
      }
   }
   _ctx.pre = n;
   uint8_t _cond_13 = (_ctx.count <= 4);
   if(_cond_13){
      _ctx.count = (_ctx.count + 1);
   }
   return _ctx.pre;
}

void Voice_mono_noteOff_init(Voice__ctx_type_15 &_output_){
   Voice__ctx_type_15_init(_output_);
   return ;
}

int Voice_mono_noteOff(Voice__ctx_type_15 &_ctx, int n){
   uint8_t found = 0;
   uint8_t _cond_16 = (n == _ctx.n1);
   if(_cond_16){
      int _tmp_0 = _ctx.n2;
      int _tmp_1 = _ctx.n3;
      int _tmp_2 = _ctx.n4;
      _ctx.n1 = _tmp_0;
      _ctx.n2 = _tmp_1;
      _ctx.n3 = _tmp_2;
      found = 1;
   }
   else
   {
      uint8_t _cond_15 = (n == _ctx.n2);
      if(_cond_15){
         int _tmp_0 = _ctx.n3;
         int _tmp_1 = _ctx.n4;
         _ctx.n2 = _tmp_0;
         _ctx.n3 = _tmp_1;
         found = 1;
      }
      else
      {
         uint8_t _cond_14 = (n == _ctx.n3);
         if(_cond_14){
            _ctx.n3 = _ctx.n4;
            found = 1;
         }
         else
         {
            uint8_t _cond_13 = (n == _ctx.n4);
            if(_cond_13){
               found = 1;
            }
         }
      }
   }
   uint8_t _cond_17 = (found && (_ctx.count > 0));
   if(_cond_17){
      _ctx.count = (_ctx.count + (-1));
   }
   uint8_t _cond_18 = (_ctx.count == 1);
   if(_cond_18){
      _ctx.pre = _ctx.n1;
   }
   uint8_t _cond_19 = (_ctx.count == 2);
   if(_cond_19){
      _ctx.pre = _ctx.n2;
   }
   uint8_t _cond_20 = (_ctx.count == 3);
   if(_cond_20){
      _ctx.pre = _ctx.n3;
   }
   uint8_t _cond_21 = (_ctx.count == 4);
   if(_cond_21){
      _ctx.pre = _ctx.n4;
   }
   return _ctx.pre;
}

void Voice_mono_isGateOn_init(Voice__ctx_type_15 &_output_){
   Voice__ctx_type_15_init(_output_);
   return ;
}

uint8_t Voice_mono_isGateOn(Voice__ctx_type_15 &_ctx){
   return (_ctx.count > 0);
}

void Voice__ctx_type_16_init(Voice__ctx_type_16 &_output_){
   Voice__ctx_type_16 _ctx;
   _ctx.wave = 0x0 /* 0.000000 */;
   _ctx.res = 0x0 /* 0.000000 */;
   _ctx.pw = 0x0 /* 0.000000 */;
   _ctx.pitch = 0x0 /* 0.000000 */;
   Voice__ctx_type_15_init(_ctx.monoin);
   _ctx.lfo_rate = 0x0 /* 0.000000 */;
   _ctx.lfo_amt = 0x0 /* 0.000000 */;
   _ctx.flt_atm = 0x0 /* 0.000000 */;
   _ctx.env_s = 0x0 /* 0.000000 */;
   _ctx.env_r = 0x0 /* 0.000000 */;
   _ctx.env_d = 0x0 /* 0.000000 */;
   _ctx.env_a = 0x0 /* 0.000000 */;
   _ctx.end_r = 0x0 /* 0.000000 */;
   _ctx.cut = 0x0 /* 0.000000 */;
   _ctx.amp_s = 0x0 /* 0.000000 */;
   _ctx.amp_r = 0x0 /* 0.000000 */;
   _ctx.amp_d = 0x0 /* 0.000000 */;
   _ctx.amp_a = 0x0 /* 0.000000 */;
   Voice__ctx_type_12_init(_ctx._inst5);
   Voice__ctx_type_13_init(_ctx._inst4);
   Voice__ctx_type_13_init(_ctx._inst3);
   Voice__ctx_type_10_init(_ctx._inst2);
   Voice__ctx_type_14_init(_ctx._inst1);
   Voice_default(_ctx);
   _output_ = _ctx;
   return ;
}

void Voice_process_init(Voice__ctx_type_16 &_output_){
   Voice__ctx_type_16_init(_output_);
   return ;
}

fix16_t Voice_process(Voice__ctx_type_16 &_ctx, fix16_t i){
   uint8_t gate = Voice_mono_isGateOn(_ctx.monoin);
   fix16_t lfo1 = fix_mul(Voice_lfo(_ctx._inst1,_ctx.lfo_rate,gate),_ctx.lfo_amt);
   fix16_t x = Voice_osc(_ctx._inst2,_ctx.pitch,fix_add(_ctx.pw,lfo1),_ctx.wave);
   fix16_t amp_env = Voice_adsr(_ctx._inst3,gate,_ctx.amp_a,_ctx.amp_d,_ctx.amp_s,_ctx.amp_r);
   fix16_t flt_env = Voice_adsr(_ctx._inst4,gate,_ctx.env_a,_ctx.env_d,_ctx.env_s,_ctx.end_r);
   fix16_t cut_mod = fix_add(_ctx.cut,fix_mul(_ctx.flt_atm,flt_env));
   fix16_t output = fix_mul(amp_env,Voice_svf(_ctx._inst5,x,cut_mod,_ctx.res,0));
   return output;
}

void Voice_noteOn_init(Voice__ctx_type_16 &_output_){
   Voice__ctx_type_16_init(_output_);
   return ;
}

void Voice_noteOn(Voice__ctx_type_16 &_ctx, int note, int velocity){
   _ctx.pitch = int_to_fix(Voice_mono_noteOn(_ctx.monoin,note));
}

void Voice_noteOff_init(Voice__ctx_type_16 &_output_){
   Voice__ctx_type_16_init(_output_);
   return ;
}

void Voice_noteOff(Voice__ctx_type_16 &_ctx, int note){
   _ctx.pitch = int_to_fix(Voice_mono_noteOff(_ctx.monoin,note));
}

void Voice_controlChange_init(Voice__ctx_type_16 &_output_){
   Voice__ctx_type_16_init(_output_);
   return ;
}

void Voice_controlChange(Voice__ctx_type_16 &_ctx, int control, int value){
   fix16_t value_0_1 = fix_mul(int_to_fix(value),0x204 /* 0.007874 */);
   fix16_t value_m1_1 = fix_add(fix_mul(value_0_1,0x20000 /* 2.000000 */),(-0x10000 /* -1.000000 */));
   uint8_t _cond_16 = (control == 30);
   if(_cond_16){
      _ctx.wave = value_0_1;
   }
   uint8_t _cond_17 = (control == 31);
   if(_cond_17){
      _ctx.pw = value_0_1;
   }
   uint8_t _cond_18 = (control == 32);
   if(_cond_18){
      _ctx.lfo_amt = value_m1_1;
   }
   uint8_t _cond_19 = (control == 33);
   if(_cond_19){
      _ctx.lfo_rate = value_0_1;
   }
   uint8_t _cond_20 = (control == 34);
   if(_cond_20){
      _ctx.amp_a = value_0_1;
   }
   uint8_t _cond_21 = (control == 35);
   if(_cond_21){
      _ctx.amp_d = value_0_1;
   }
   uint8_t _cond_22 = (control == 36);
   if(_cond_22){
      _ctx.amp_s = value_0_1;
   }
   uint8_t _cond_23 = (control == 37);
   if(_cond_23){
      _ctx.amp_r = value_0_1;
   }
   uint8_t _cond_24 = (control == 38);
   if(_cond_24){
      _ctx.cut = value_0_1;
   }
   uint8_t _cond_25 = (control == 39);
   if(_cond_25){
      _ctx.res = value_0_1;
   }
   uint8_t _cond_26 = (control == 40);
   if(_cond_26){
      _ctx.flt_atm = value_m1_1;
   }
   uint8_t _cond_27 = (control == 41);
   if(_cond_27){
      _ctx.env_a = value_0_1;
   }
   uint8_t _cond_28 = (control == 42);
   if(_cond_28){
      _ctx.env_d = value_0_1;
   }
   uint8_t _cond_29 = (control == 43);
   if(_cond_29){
      _ctx.env_s = value_0_1;
   }
   uint8_t _cond_30 = (control == 44);
   if(_cond_30){
      _ctx.env_r = value_0_1;
   }
}

void Voice_default_init(Voice__ctx_type_16 &_output_){
   Voice__ctx_type_16_init(_output_);
   return ;
}

void Voice_default(Voice__ctx_type_16 &_ctx){
   _ctx.pw = 0x0 /* 0.000000 */;
   _ctx.pitch = 0x2a0000 /* 42.000000 */;
   _ctx.cut = 0x10000 /* 1.000000 */;
   _ctx.res = 0x0 /* 0.000000 */;
   _ctx.amp_s = 0x10000 /* 1.000000 */;
   _ctx.lfo_amt = 0x8000 /* 0.500000 */;
   _ctx.lfo_rate = 0x0 /* 0.000000 */;
}


