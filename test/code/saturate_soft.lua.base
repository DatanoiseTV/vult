
local this = {}
local ffi = require("ffi")
function this.ternary(cond,then_,else_) if cond then return then_ else return else_ end end
function this.eps()             return 1e-18; end
function this.random()          return math.random(); end
function this.irandom()         return math.floor(math.random() * 4294967296); end
function this.clip(x,low,high)  return (this.ternary(x<low,low,this.ternary(x>high,high,x))); end
function this.real(x)           return x; end
function this.int(x)            local int_part,_ = math.modf(x) return int_part; end
function this.sin(x)            return math.sin(x); end
function this.cos(x)            return math.cos(x); end
function this.abs(x)            return math.abs(x); end
function this.exp(x)            return math.exp(x); end
function this.floor(x)          return math.floor(x); end
function this.tan(x)            return math.tan(x); end
function this.tanh(x)           return math.tanh(x); end
function this.sqrt(x)           return x; end
function this.set(a,i,v)        a[i]=v; end
function this.get(a,i)          return a[i]; end
function this.makeArray(size,v) local a = ffi.new("double[?]",size); for i=0,size-1 do a[i]=v end return a; end
function this.wrap_array(a)     return a; end
local Saturate_soft_table_c0 = ffi.new("double[11]", {0.000000,(-0.000837),(-0.004130),(-0.011331),(-0.023628),(-0.041861),(-0.066455),(-0.097383),(-0.134146),(-0.175783),(-0.220903)});
local Saturate_soft_table_c1 = ffi.new("double[11]", {1.000234,1.003027,1.008519,1.016526,1.026781,1.038945,1.052619,1.067357,1.082688,1.098122,1.113175});
local Saturate_soft_table_c2 = ffi.new("double[11]", {(-0.001171),(-0.003500),(-0.005790),(-0.008016),(-0.010154),(-0.012182),(-0.014083),(-0.015839),(-0.017437),(-0.018867),(-0.020123)});
function this.Saturate_soft_table(x)
   local index = this.clip(this.int((1.500000 * x)),0,9);
   return (this.get(this.wrap_array(Saturate_soft_table_c0),index) + (x * (this.get(this.wrap_array(Saturate_soft_table_c1),index) + (this.get(this.wrap_array(Saturate_soft_table_c2),index) * x))));

end

function this.Saturate_soft_process(_ctx,x)
   if (x == 0.000000) then
      return 0.000000;

   end
   local fixed = 0.0;
   local sign = false;
   if (x > 0.000000) then
      fixed = x;
      sign = false;

   else

      fixed = (- x);
      sign = true;

   end
   local out = 0.000000;
   if (fixed > 6.000000) then
      out = 1.000000;

   else

      out = this.Saturate_soft_table(fixed);

   end
   if sign then
      out = (- out);
   end
   return out;

end

function this.Saturate_soft_noteOn(_ctx,note,velocity,channel)

end

function this.Saturate_soft_noteOff(_ctx,note,channel)

end

function this.Saturate_soft_controlChange(_ctx,control,value,channel)

end

function this.Saturate_soft_default(_ctx)

end


function this.process(in0) return this.Saturate_soft_process(in0) end
function this.noteOn(in0,in1,in2) return this.Saturate_soft_noteOn(in0,in1,in2) end
function this.noteOff(in0,in1) return this.Saturate_soft_noteOff(in0,in1) end
function this.controlChange(in0,in1,in2) return this.Saturate_soft_controlChange(in0,in1,in2) end
function this.init() return this.Saturate_soft_process_init() end
function this.default(ctx) return this.Saturate_soft_default(ctx) end
this.config = { inputs = 1, outputs = 1, noteon_inputs = 3, noteoff_inputs = 2, controlchange_inputs = 3, is_active = false }
return this
