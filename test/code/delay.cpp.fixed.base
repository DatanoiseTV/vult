
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#include "delay.h"

void Delay__ctx_type_5_init(Delay__ctx_type_5 &_output_){
   Delay__ctx_type_5 _ctx;
   _ctx.rate = 0x0 /* 0.000000 */;
   _ctx.phase = 0x0 /* 0.000000 */;
   Delay__ctx_type_1_init(_ctx._inst6);
   _output_ = _ctx;
   return ;
}

fix16_t Delay_phasor(Delay__ctx_type_5 &_ctx, fix16_t pitch, uint8_t reset){
   if(Delay_change(_ctx._inst6,pitch)){
      _ctx.rate = Delay_pitchToRate(pitch);
   }
   if(reset){
      _ctx.phase = 0x0 /* 0.000000 */;
   }
   else
   {
      _ctx.phase = ((_ctx.phase + _ctx.rate) % 0x10000 /* 1.000000 */);
   }
   return _ctx.phase;
}

void Delay__ctx_type_6_init(Delay__ctx_type_6 &_output_){
   Delay__ctx_type_6 _ctx;
   _ctx.phase = 0x0 /* 0.000000 */;
   Delay__ctx_type_2_init(_ctx._inst9);
   _output_ = _ctx;
   return ;
}

fix16_t Delay_lfo(Delay__ctx_type_6 &_ctx, fix16_t f, uint8_t gate){
   fix16_t rate;
   rate = fix_mul(0xe /* 0.000227 */,f);
   if(Delay_edge(_ctx._inst9,gate)){
      _ctx.phase = 0x0 /* 0.000000 */;
   }
   _ctx.phase = (_ctx.phase + rate);
   if(_ctx.phase > 0x10000 /* 1.000000 */){
      _ctx.phase = (-0x10000 /* -1.000000 */ + _ctx.phase);
   }
   return (-0x8000 /* -0.500000 */ + fix_sin(fix_mul(0x6487e /* 6.283185 */,_ctx.phase)));
}

void Delay__ctx_type_7_init(Delay__ctx_type_7 &_output_){
   Delay__ctx_type_7 _ctx;
   _ctx.pre_phase1 = 0x0 /* 0.000000 */;
   Delay__ctx_type_5_init(_ctx._inst15);
   Delay__ctx_type_0_init(_ctx._inst14);
   Delay__ctx_type_5_init(_ctx._inst13);
   _output_ = _ctx;
   return ;
}

fix16_t Delay_phd_osc(Delay__ctx_type_7 &_ctx, fix16_t pitch, fix16_t detune){
   fix16_t phase1;
   phase1 = Delay_phasor(_ctx._inst13,pitch,false);
   fix16_t comp;
   comp = (0x10000 /* 1.000000 */ + (- phase1));
   uint8_t reset;
   reset = ((_ctx.pre_phase1 + (- phase1)) > 0x8000 /* 0.500000 */);
   _ctx.pre_phase1 = phase1;
   fix16_t phase2;
   phase2 = Delay_phasor(_ctx._inst15,(pitch + (Delay_smooth(_ctx._inst14,detune) << 5)),reset);
   fix16_t sine;
   sine = fix_sin(fix_mul(0x6487e /* 6.283185 */,phase2));
   return fix_mul(comp,sine);
}

void Delay__ctx_type_8_init(Delay__ctx_type_8 &_output_){
   Delay__ctx_type_8 _ctx;
   _ctx.write_pos = 0;
   ;
   _output_ = _ctx;
   return ;
}

fix16_t Delay_delay(Delay__ctx_type_8 &_ctx, fix16_t x, fix16_t time, fix16_t feedback){
   time = fix_clip(time,0x0 /* 0.000000 */,0x10000 /* 1.000000 */);
   feedback = fix_clip(feedback,0x0 /* 0.000000 */,0x10000 /* 1.000000 */);
   fix16_t index_r;
   index_r = fix_mul(0x75300000 /* 30000.000000 */,time);
   int index_i;
   index_i = fix_to_int(fix_floor(index_r));
   int delta;
   delta = (_ctx.write_pos + (- index_i));
   int read_pos;
   if(delta < 0){
      read_pos = (30000 + delta);
   }
   else
   {
      read_pos = delta;
   }
   fix16_t decimal;
   decimal = (index_r + (- int_to_fix(index_i)));
   fix16_t x1;
   x1 = fix_get(_ctx.buffer,read_pos);
   fix16_t x2;
   x2 = fix_get(_ctx.buffer,((1 + read_pos) % 30000));
   fix16_t ret;
   ret = (x1 + fix_mul(decimal,(x2 + (- x1))));
   _ctx.write_pos = ((1 + _ctx.write_pos) % 30000);
   fix_set(_ctx.buffer,_ctx.write_pos,fix_clip((x + fix_mul(feedback,ret)),-0x10000 /* -1.000000 */,0x10000 /* 1.000000 */));
   return ret;
}

void Delay__ctx_type_9_init(Delay__ctx_type_9 &_output_){
   Delay__ctx_type_9 _ctx;
   _ctx.pre = 0;
   int_init_array(4,0,_ctx.notes);
   _ctx.count = 0;
   _output_ = _ctx;
   return ;
}

int Delay_mono_noteOn(Delay__ctx_type_9 &_ctx, int n){
   if(_ctx.count < 4){
      int_set(_ctx.notes,_ctx.count,n);
      _ctx.pre = n;
      if(_ctx.count < 4){
         _ctx.count = (1 + _ctx.count);
      }
   }
   return _ctx.pre;
}

int Delay_mono_noteOff(Delay__ctx_type_9 &_ctx, int n){
   uint8_t found;
   found = false;
   int pos;
   int i;
   i = 0;
   if(_ctx.count == 0){
      return _ctx.pre;
   }
   while((i < 4) && bool_not(found)){
      if(int_get(_ctx.notes,i) == n){
         pos = i;
         found = true;
      }
      i = (1 + i);
   }
   if(found){
      int k;
      k = (1 + pos);
      while(k < 4){
         int_set(_ctx.notes,((-1) + k),int_get(_ctx.notes,k));
         k = (1 + k);
      }
      if(found && (_ctx.count > 0)){
         _ctx.count = ((-1) + _ctx.count);
         _ctx.pre = int_get(_ctx.notes,((-1) + _ctx.count));
      }
   }
   return _ctx.pre;
}

void Delay__ctx_type_10_init(Delay__ctx_type_10 &_output_){
   Delay__ctx_type_10 _ctx;
   _ctx.volume = 0x0 /* 0.000000 */;
   _ctx.time = 0x0 /* 0.000000 */;
   _ctx.pitch = 0x0 /* 0.000000 */;
   Delay__ctx_type_9_init(_ctx.notes);
   _ctx.lfo_rate = 0x0 /* 0.000000 */;
   _ctx.lfo_amt = 0x0 /* 0.000000 */;
   _ctx.feedback = 0x0 /* 0.000000 */;
   _ctx.detune = 0x0 /* 0.000000 */;
   Delay__ctx_type_8_init(_ctx._inst34);
   Delay__ctx_type_0_init(_ctx._inst33);
   Delay__ctx_type_0_init(_ctx._inst32);
   Delay__ctx_type_0_init(_ctx._inst31);
   Delay__ctx_type_7_init(_ctx._inst30);
   Delay__ctx_type_6_init(_ctx._inst29);
   _output_ = _ctx;
   return ;
}

fix16_t Delay_process(Delay__ctx_type_10 &_ctx, fix16_t input){
   uint8_t gate;
   gate = Delay_mono_isGateOn(_ctx.notes);
   fix16_t lfo_val;
   lfo_val = fix_mul(_ctx.lfo_amt,Delay_lfo(_ctx._inst29,_ctx.lfo_rate,gate));
   fix16_t o1;
   o1 = Delay_phd_osc(_ctx._inst30,_ctx.pitch,(_ctx.detune + lfo_val));
   fix16_t amp;
   fix16_t _if_54;
   if(gate){
      _if_54 = 0x10000 /* 1.000000 */;
   }
   else
   {
      _if_54 = 0x0 /* 0.000000 */;
   }
   amp = Delay_smooth(_ctx._inst31,_if_54);
   fix16_t osc_out;
   osc_out = fix_mul(amp,o1);
   fix16_t delay_out;
   delay_out = Delay_delay(_ctx._inst34,osc_out,Delay_smooth(_ctx._inst32,_ctx.time),Delay_smooth(_ctx._inst33,_ctx.feedback));
   return (fix_mul(_ctx.volume,(delay_out + osc_out)) >> 1);
}

void Delay_controlChange(Delay__ctx_type_10 &_ctx, int control, fix16_t value, int channel){
   if(control == 30){
      _ctx.volume = fix_mul(0x204 /* 0.007874 */,value);
   }
   if(control == 31){
      _ctx.detune = fix_mul(0x204 /* 0.007874 */,value);
   }
   if(control == 32){
      _ctx.lfo_rate = fix_mul(0x204 /* 0.007874 */,value);
   }
   if(control == 33){
      _ctx.lfo_amt = ((-0x8000 /* -0.500000 */ + fix_mul(0x204 /* 0.007874 */,value)) << 1);
   }
   if(control == 34){
      _ctx.time = fix_mul(0x204 /* 0.007874 */,value);
   }
   if(control == 35){
      _ctx.feedback = fix_mul(0x204 /* 0.007874 */,value);
   }
}

void Delay_default(Delay__ctx_type_10 &_ctx){
   _ctx.volume = 0x10000 /* 1.000000 */;
   _ctx.pitch = 0x2d0000 /* 45.000000 */;
   _ctx.detune = 0xcccc /* 0.800000 */;
   _ctx.lfo_rate = 0x11eb /* 0.070000 */;
   _ctx.lfo_amt = -0xcccc /* -0.800000 */;
   _ctx.time = 0x8000 /* 0.500000 */;
   _ctx.feedback = 0x8000 /* 0.500000 */;
}


