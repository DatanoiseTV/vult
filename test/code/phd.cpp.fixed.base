
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#include "phd.h"

void Util__ctx_type_0_init(Util__ctx_type_0 &_output_){
   Util__ctx_type_0 _ctx;
   _ctx.pre = 0;
   _output_ = _ctx;
   return ;
}

void Util_edge_init(Util__ctx_type_0 &_output_){
   Util__ctx_type_0_init(_output_);
   return ;
}

uint8_t Util_edge(Util__ctx_type_0 &_ctx, uint8_t x){
   uint8_t ret;
   ret = (x && bool_not(_ctx.pre));
   _ctx.pre = x;
   return ret;
}

void Util__ctx_type_1_init(Util__ctx_type_1 &_output_){
   Util__ctx_type_1 _ctx;
   _ctx.pre_x = 0x0 /* 0.000000 */;
   _output_ = _ctx;
   return ;
}

void Util_change_init(Util__ctx_type_1 &_output_){
   Util__ctx_type_1_init(_output_);
   return ;
}

uint8_t Util_change(Util__ctx_type_1 &_ctx, fix16_t x){
   uint8_t v;
   v = (_ctx.pre_x != x);
   _ctx.pre_x = x;
   return v;
}

fix16_t Util_map(fix16_t x, fix16_t x0, fix16_t x1, fix16_t y0, fix16_t y1){
   return (fix_div(fix_mul((x + (- x0)),(y1 + (- y0))),(x1 + (- x0))) + y0);
}

void Util__ctx_type_3_init(Util__ctx_type_3 &_output_){
   Util__ctx_type_3 _ctx;
   _ctx.y1 = 0x0 /* 0.000000 */;
   _ctx.x1 = 0x0 /* 0.000000 */;
   _output_ = _ctx;
   return ;
}

void Util_dcblock_init(Util__ctx_type_3 &_output_){
   Util__ctx_type_3_init(_output_);
   return ;
}

fix16_t Util_dcblock(Util__ctx_type_3 &_ctx, fix16_t x0){
   fix16_t y0;
   y0 = (x0 + (- _ctx.x1) + fix_mul(_ctx.y1,0xfeb8 /* 0.995000 */));
   _ctx.x1 = x0;
   _ctx.y1 = y0;
   return y0;
}

void Util__ctx_type_4_init(Util__ctx_type_4 &_output_){
   Util__ctx_type_4 _ctx;
   _ctx.x = 0x0 /* 0.000000 */;
   _output_ = _ctx;
   return ;
}

void Util_smooth_init(Util__ctx_type_4 &_output_){
   Util__ctx_type_4_init(_output_);
   return ;
}

fix16_t Util_smooth(Util__ctx_type_4 &_ctx, fix16_t input){
   _ctx.x = (_ctx.x + fix_mul((input + (- _ctx.x)),0x147 /* 0.005000 */));
   return _ctx.x;
}

void Util__ctx_type_5_init(Util__ctx_type_5 &_output_){
   Util__ctx_type_5 _ctx;
   _ctx.x0 = 0x0 /* 0.000000 */;
   _output_ = _ctx;
   return ;
}

void Util_average2_init(Util__ctx_type_5 &_output_){
   Util__ctx_type_5_init(_output_);
   return ;
}

fix16_t Util_average2(Util__ctx_type_5 &_ctx, fix16_t x1){
   fix16_t result;
   result = ((_ctx.x0 + x1) >> 1);
   _ctx.x0 = x1;
   return result;
}

fix16_t Util_cubic_clipper(fix16_t x){
   uint8_t _cond_21;
   _cond_21 = (x <= -0xaaaa /* -0.666667 */);
   if(_cond_21){
      return -0xaaaa /* -0.666667 */;
   }
   else
   {
      uint8_t _cond_20;
      _cond_20 = (x >= 0xaaaa /* 0.666667 */);
      if(_cond_20){
         return 0xaaaa /* 0.666667 */;
      }
      else
      {
         return (x + fix_mul(fix_mul(fix_mul(-0x5555 /* -0.333333 */,x),x),x));
      }
   }
}

fix16_t Util_pitchToRate_1024(fix16_t pitch){
   int index;
   index = int_clip(fix_to_int(fix_mul(0x3e7c /* 0.244094 */,pitch)),0,31);
   return (fix_wrap_array(Util_pitchToRate_1024_c0)[index] + fix_mul(pitch,(fix_wrap_array(Util_pitchToRate_1024_c1)[index] + fix_mul(fix_wrap_array(Util_pitchToRate_1024_c2)[index],pitch))));
}

fix16_t Util_pitchToRate(fix16_t pitch){
   int index;
   index = int_clip(fix_to_int(fix_mul(0x3e7c /* 0.244094 */,pitch)),0,31);
   return (fix_wrap_array(Util_pitchToRate_c0)[index] + fix_mul(pitch,(fix_wrap_array(Util_pitchToRate_c1)[index] + fix_mul(fix_wrap_array(Util_pitchToRate_c2)[index],pitch))));
}

fix16_t Util_cvToPitch(fix16_t cv){
   return (fix_mul(cv,0x780000 /* 120.000000 */) + 0x180000 /* 24.000000 */);
}

fix16_t Util_cvToRate_1024(fix16_t cv){
   int index;
   index = int_clip(fix_to_int(fix_mul(0x2271c7 /* 34.444445 */,cv)),0,31);
   return (fix_wrap_array(Util_cvToRate_1024_c0)[index] + fix_mul(cv,(fix_wrap_array(Util_cvToRate_1024_c1)[index] + fix_mul(fix_wrap_array(Util_cvToRate_1024_c2)[index],cv))));
}

fix16_t Util_cvToRate(fix16_t cv){
   int index;
   index = int_clip(fix_to_int(fix_mul(0x8d1c71 /* 141.111111 */,cv)),0,127);
   return (fix_wrap_array(Util_cvToRate_c0)[index] + fix_mul(cv,(fix_wrap_array(Util_cvToRate_c1)[index] + fix_mul(fix_wrap_array(Util_cvToRate_c2)[index],cv))));
}

fix16_t Util_pitchToCv(fix16_t pitch){
   return fix_mul(0x222 /* 0.008333 */,(-0x180000 /* -24.000000 */ + pitch));
}

fix16_t Util_cvToperiod(fix16_t cv){
   int index;
   index = int_clip(fix_to_int(fix_mul(0x1f0000 /* 31.000000 */,cv)),0,31);
   return (fix_wrap_array(Util_cvToperiod_c0)[index] + fix_mul(cv,(fix_wrap_array(Util_cvToperiod_c1)[index] + fix_mul(fix_wrap_array(Util_cvToperiod_c2)[index],cv))));
}

fix16_t Util_cvTokHz(fix16_t cv){
   int index;
   index = int_clip(fix_to_int(fix_mul(0x1f0000 /* 31.000000 */,cv)),0,31);
   return (fix_wrap_array(Util_cvTokHz_c0)[index] + fix_mul(cv,(fix_wrap_array(Util_cvTokHz_c1)[index] + fix_mul(fix_wrap_array(Util_cvTokHz_c2)[index],cv))));
}

void Phase__ctx_type_0_init(Phase__ctx_type_0 &_output_){
   Phase__ctx_type_0 _ctx;
   _ctx.rate = 0x0 /* 0.000000 */;
   _ctx.phase = 0x0 /* 0.000000 */;
   Util__ctx_type_0_init(_ctx._inst25);
   Util__ctx_type_1_init(_ctx._inst23);
   Phase_default(_ctx);
   _output_ = _ctx;
   return ;
}

void Phase_process_init(Phase__ctx_type_0 &_output_){
   Phase__ctx_type_0_init(_output_);
   return ;
}

fix16_t Phase_process(Phase__ctx_type_0 &_ctx, fix16_t cv, fix16_t reset){
   uint8_t _cond_30;
   _cond_30 = Util_change(_ctx._inst23,cv);
   if(_cond_30){
      _ctx.rate = Util_cvToRate_1024(cv);
   }
   uint8_t _cond_31;
   _cond_31 = Util_edge(_ctx._inst25,(reset > 0x8000 /* 0.500000 */));
   if(_cond_31){ _ctx.phase = 0x0 /* 0.000000 */; }
   else
   { _ctx.phase = (_ctx.phase + _ctx.rate); }
   uint8_t _cond_32;
   _cond_32 = (_ctx.phase > 0x4000000 /* 1024.000000 */);
   if(_cond_32){ _ctx.phase = (_ctx.phase + -0x4000000 /* -1024.000000 */); }
   return (_ctx.phase >> 10);
}

void Phase_noteOn_init(Phase__ctx_type_0 &_output_){
   Phase__ctx_type_0_init(_output_);
   return ;
}

void Phase_noteOn(Phase__ctx_type_0 &_ctx, int note, int velocity, int channel){
}

void Phase_noteOff_init(Phase__ctx_type_0 &_output_){
   Phase__ctx_type_0_init(_output_);
   return ;
}

void Phase_noteOff(Phase__ctx_type_0 &_ctx, int note, int channel){
}

void Phase_controlChange_init(Phase__ctx_type_0 &_output_){
   Phase__ctx_type_0_init(_output_);
   return ;
}

void Phase_controlChange(Phase__ctx_type_0 &_ctx, int control, int value, int channel){
}

void Phase_default_init(Phase__ctx_type_0 &_output_){
   Phase__ctx_type_0_init(_output_);
   return ;
}

void Phase_default(Phase__ctx_type_0 &_ctx){
   _ctx.rate = 0xc265 /* 0.759367 */;
}

fix16_t Tables_nsine(fix16_t x){
   int index;
   index = int_clip(fix_to_int(fix_mul(0x7f0000 /* 127.000000 */,x)),0,127);
   return (fix_wrap_array(Tables_nsine_c0)[index] + fix_mul(x,(fix_wrap_array(Tables_nsine_c1)[index] + fix_mul(fix_wrap_array(Tables_nsine_c2)[index],x))));
}

void Phd__ctx_type_0_init(Phd__ctx_type_0 &_output_){
   Phd__ctx_type_0 _ctx;
   _ctx.pre_phase1 = 0x0 /* 0.000000 */;
   Phase__ctx_type_0_init(_ctx._inst37);
   Util__ctx_type_4_init(_ctx._inst36);
   Phase__ctx_type_0_init(_ctx._inst35);
   _output_ = _ctx;
   return ;
}

void Phd_process_init(Phd__ctx_type_0 &_output_){
   Phd__ctx_type_0_init(_output_);
   return ;
}

fix16_t Phd_process(Phd__ctx_type_0 &_ctx, fix16_t cv, fix16_t detune){
   fix16_t phase1;
   phase1 = Phase_process(_ctx._inst35,cv,0x0 /* 0.000000 */);
   fix16_t comp;
   comp = (0x10000 /* 1.000000 */ + (- phase1));
   fix16_t reset;
   reset = (_ctx.pre_phase1 + (- phase1));
   _ctx.pre_phase1 = phase1;
   fix16_t phase2;
   phase2 = Phase_process(_ctx._inst37,(cv + Util_smooth(_ctx._inst36,(detune >> 1))),reset);
   fix16_t sine;
   sine = Tables_nsine(phase2);
   return fix_mul(sine,comp);
}

void Phd_noteOn_init(Phd__ctx_type_0 &_output_){
   Phd__ctx_type_0_init(_output_);
   return ;
}

void Phd_noteOn(Phd__ctx_type_0 &_ctx, int note, int velocity, int channel){
}

void Phd_noteOff_init(Phd__ctx_type_0 &_output_){
   Phd__ctx_type_0_init(_output_);
   return ;
}

void Phd_noteOff(Phd__ctx_type_0 &_ctx, int note, int channel){
}

void Phd_controlChange_init(Phd__ctx_type_0 &_output_){
   Phd__ctx_type_0_init(_output_);
   return ;
}

void Phd_controlChange(Phd__ctx_type_0 &_ctx, int control, int value, int channel){
}

void Phd_default_init(Phd__ctx_type_0 &_output_){
   Phd__ctx_type_0_init(_output_);
   return ;
}

void Phd_default(Phd__ctx_type_0 &_ctx){
}


