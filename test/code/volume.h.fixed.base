
#ifndef VOLUME_H
#define VOLUME_H
#include <stdint.h>
#include <math.h>
#include "vultin.h"

typedef struct Volume__ctx_type_0 {
   fix16_t x;
} Volume__ctx_type_0;

typedef Volume__ctx_type_0 Volume_smooth_type;

Volume__ctx_type_0 Volume__ctx_type_0_init();

Volume__ctx_type_0 Volume_smooth_init();

fix16_t Volume_smooth(Volume__ctx_type_0 &_ctx, fix16_t input);

typedef struct Volume__ctx_type_1 {
   fix16_t volume;
   Volume__ctx_type_0 _inst0;
} Volume__ctx_type_1;

typedef Volume__ctx_type_1 Volume_process_type;

Volume__ctx_type_1 Volume__ctx_type_1_init();

Volume__ctx_type_1 Volume_process_init();

fix16_t Volume_process(Volume__ctx_type_1 &_ctx, fix16_t input);

typedef Volume__ctx_type_1 Volume_noteOn_type;

Volume__ctx_type_1 Volume_noteOn_init();

void Volume_noteOn(Volume__ctx_type_1 &_ctx, int note, int velocity);

typedef Volume__ctx_type_1 Volume_noteOff_type;

Volume__ctx_type_1 Volume_noteOff_init();

void Volume_noteOff(Volume__ctx_type_1 &_ctx, int note);

typedef Volume__ctx_type_1 Volume_controlChange_type;

Volume__ctx_type_1 Volume_controlChange_init();

void Volume_controlChange(Volume__ctx_type_1 &_ctx, int control, int value);

typedef Volume__ctx_type_1 Volume_default_type;

Volume__ctx_type_1 Volume_default_init();

void Volume_default(Volume__ctx_type_1 &_ctx);



#endif // VOLUME_H
