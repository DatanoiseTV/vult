
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#include "polycv.h"

void Util__ctx_type_0_init(Util__ctx_type_0 &_output_){
   Util__ctx_type_0 _ctx;
   _ctx.pre = 0;
   _output_ = _ctx;
   return ;
}

void Util_edge_init(Util__ctx_type_0 &_output_){
   Util__ctx_type_0_init(_output_);
   return ;
}

uint8_t Util_edge(Util__ctx_type_0 &_ctx, uint8_t x){
   uint8_t ret;
   ret = (x && bool_not(_ctx.pre));
   _ctx.pre = x;
   return ret;
}

void Util__ctx_type_1_init(Util__ctx_type_1 &_output_){
   Util__ctx_type_1 _ctx;
   _ctx.pre_x = 0x0 /* 0.000000 */;
   _output_ = _ctx;
   return ;
}

void Util_change_init(Util__ctx_type_1 &_output_){
   Util__ctx_type_1_init(_output_);
   return ;
}

uint8_t Util_change(Util__ctx_type_1 &_ctx, fix16_t x){
   uint8_t v;
   v = (_ctx.pre_x != x);
   _ctx.pre_x = x;
   return v;
}

fix16_t Util_map(fix16_t x, fix16_t x0, fix16_t x1, fix16_t y0, fix16_t y1){
   return fix_add(fix_div(fix_mul(fix_add(x,(- x0)),fix_add(y1,(- y0))),fix_add(x1,(- x0))),y0);
}

void Util__ctx_type_3_init(Util__ctx_type_3 &_output_){
   Util__ctx_type_3 _ctx;
   _ctx.y1 = 0x0 /* 0.000000 */;
   _ctx.x1 = 0x0 /* 0.000000 */;
   _output_ = _ctx;
   return ;
}

void Util_dcblock_init(Util__ctx_type_3 &_output_){
   Util__ctx_type_3_init(_output_);
   return ;
}

fix16_t Util_dcblock(Util__ctx_type_3 &_ctx, fix16_t x0){
   fix16_t y0;
   y0 = fix_add(fix_add(x0,(- _ctx.x1)),fix_mul(_ctx.y1,0xfeb8 /* 0.995000 */));
   _ctx.x1 = x0;
   _ctx.y1 = y0;
   return y0;
}

void Util__ctx_type_4_init(Util__ctx_type_4 &_output_){
   Util__ctx_type_4 _ctx;
   _ctx.x = 0x0 /* 0.000000 */;
   _output_ = _ctx;
   return ;
}

void Util_smooth_init(Util__ctx_type_4 &_output_){
   Util__ctx_type_4_init(_output_);
   return ;
}

fix16_t Util_smooth(Util__ctx_type_4 &_ctx, fix16_t input){
   _ctx.x = fix_add(_ctx.x,fix_mul(fix_add(input,(- _ctx.x)),0x147 /* 0.005000 */));
   return _ctx.x;
}

void Util__ctx_type_5_init(Util__ctx_type_5 &_output_){
   Util__ctx_type_5 _ctx;
   _ctx.x0 = 0x0 /* 0.000000 */;
   _output_ = _ctx;
   return ;
}

void Util_average2_init(Util__ctx_type_5 &_output_){
   Util__ctx_type_5_init(_output_);
   return ;
}

fix16_t Util_average2(Util__ctx_type_5 &_ctx, fix16_t x1){
   fix16_t result;
   result = fix_mul(fix_add(_ctx.x0,x1),0x8000 /* 0.500000 */);
   _ctx.x0 = x1;
   return result;
}

fix16_t Util_pitchToRate_1024(fix16_t pitch){
   int index;
   index = int_clip(fix_to_int(fix_mul(0x3e7c /* 0.244094 */,pitch)),0,31);
   return fix_add(fix_get(fix_wrap_array(Util_pitchToRate_1024_c0),index),fix_mul(pitch,fix_add(fix_get(fix_wrap_array(Util_pitchToRate_1024_c1),index),fix_mul(fix_get(fix_wrap_array(Util_pitchToRate_1024_c2),index),pitch))));
}

fix16_t Util_pitchToRate(fix16_t pitch){
   int index;
   index = int_clip(fix_to_int(fix_mul(0x3e7c /* 0.244094 */,pitch)),0,31);
   return fix_add(fix_get(fix_wrap_array(Util_pitchToRate_c0),index),fix_mul(pitch,fix_add(fix_get(fix_wrap_array(Util_pitchToRate_c1),index),fix_mul(fix_get(fix_wrap_array(Util_pitchToRate_c2),index),pitch))));
}

fix16_t Util_cvToPitch(fix16_t cv){
   return fix_add(fix_mul(cv,0x780000 /* 120.000000 */),0x180000 /* 24.000000 */);
}

fix16_t Util_cvToRate_1024(fix16_t cv){
   int index;
   index = int_clip(fix_to_int(fix_mul(0x2271c7 /* 34.444444 */,cv)),0,31);
   return fix_add(fix_get(fix_wrap_array(Util_cvToRate_1024_c0),index),fix_mul(cv,fix_add(fix_get(fix_wrap_array(Util_cvToRate_1024_c1),index),fix_mul(fix_get(fix_wrap_array(Util_cvToRate_1024_c2),index),cv))));
}

fix16_t Util_cvToRate(fix16_t cv){
   int index;
   index = int_clip(fix_to_int(fix_mul(0x2271c7 /* 34.444444 */,cv)),0,31);
   return fix_add(fix_get(fix_wrap_array(Util_cvToRate_c0),index),fix_mul(cv,fix_add(fix_get(fix_wrap_array(Util_cvToRate_c1),index),fix_mul(fix_get(fix_wrap_array(Util_cvToRate_c2),index),cv))));
}

fix16_t Util_pitchToCv(fix16_t pitch){
   return fix_mul(0x222 /* 0.008333 */,fix_add((-0x180000 /* -24.000000 */),pitch));
}

fix16_t Util_cvToperiod(fix16_t cv){
   int index;
   index = int_clip(fix_to_int(fix_mul(0x1f0000 /* 31.000000 */,cv)),0,31);
   return fix_add(fix_get(fix_wrap_array(Util_cvToperiod_c0),index),fix_mul(cv,fix_add(fix_get(fix_wrap_array(Util_cvToperiod_c1),index),fix_mul(fix_get(fix_wrap_array(Util_cvToperiod_c2),index),cv))));
}

fix16_t Util_cvTokHz(fix16_t cv){
   int index;
   index = int_clip(fix_to_int(fix_mul(0x1f0000 /* 31.000000 */,cv)),0,31);
   return fix_add(fix_get(fix_wrap_array(Util_cvTokHz_c0),index),fix_mul(cv,fix_add(fix_get(fix_wrap_array(Util_cvTokHz_c1),index),fix_mul(fix_get(fix_wrap_array(Util_cvTokHz_c2),index),cv))));
}

fix16_t Polycv_velToCV(int vel){
   return fix_mul(int_to_fix(vel),0x204 /* 0.007874 */);
}

fix16_t Polycv_velToGate(int vel){
   fix16_t _if_33;
   uint8_t _cond_43;
   _cond_43 = (vel > 0);
   if(_cond_43){ _if_33 = fix_mul(int_to_fix(vel),0x204 /* 0.007874 */); }
   else
   { _if_33 = 0x0 /* 0.000000 */; }
   return _if_33;
}

void Polycv__ctx_type_2_init(Polycv__ctx_type_2 &_output_){
   Polycv__ctx_type_2 _ctx;
   int_init_array(4,0,_ctx.vel);
   int_init_array(4,0,_ctx.notes);
   _output_ = _ctx;
   return ;
}

void Polycv_poly_noteOn_init(Polycv__ctx_type_2 &_output_){
   Polycv__ctx_type_2_init(_output_);
   return ;
}

void Polycv_poly_noteOn(Polycv__ctx_type_2 &_ctx, int note, int velocity){
   int i;
   i = 0;
   uint8_t found;
   found = 0;
   while((i < 4) && bool_not(found)){
      uint8_t _cond_34;
      _cond_34 = (int_get(_ctx.vel,i) == 0);
      if(_cond_34){
         int_set(_ctx.notes,i,note);
         int_set(_ctx.vel,i,velocity);
         found = 1;
      }
      i = (i + 1);
   }
}

void Polycv_poly_noteOff_init(Polycv__ctx_type_2 &_output_){
   Polycv__ctx_type_2_init(_output_);
   return ;
}

void Polycv_poly_noteOff(Polycv__ctx_type_2 &_ctx, int note){
   int i;
   i = 0;
   uint8_t found;
   found = 0;
   while((i < 4) && bool_not(found)){
      uint8_t _cond_35;
      _cond_35 = (int_get(_ctx.notes,i) == note);
      if(_cond_35){
         int_set(_ctx.vel,i,0);
         found = 1;
      }
      i = (i + 1);
   }
}

void Polycv_polyState_init(Polycv__ctx_type_2 &_output_){
   Polycv__ctx_type_2_init(_output_);
   return ;
}

void Polycv_polyState(Polycv__ctx_type_2 &_ctx, _tuple_$_real_real_real_real_real_real_real_real_real_real_real_real_$ &_output_){
   fix16_t note1;
   note1 = Util_pitchToCv(int_to_fix(int_get(_ctx.notes,0)));
   fix16_t note2;
   note2 = Util_pitchToCv(int_to_fix(int_get(_ctx.notes,1)));
   fix16_t note3;
   note3 = Util_pitchToCv(int_to_fix(int_get(_ctx.notes,2)));
   fix16_t note4;
   note4 = Util_pitchToCv(int_to_fix(int_get(_ctx.notes,3)));
   fix16_t vel1;
   vel1 = Polycv_velToCV(int_get(_ctx.vel,0));
   fix16_t vel2;
   vel2 = Polycv_velToCV(int_get(_ctx.vel,1));
   fix16_t vel3;
   vel3 = Polycv_velToCV(int_get(_ctx.vel,2));
   fix16_t vel4;
   vel4 = Polycv_velToCV(int_get(_ctx.vel,3));
   fix16_t gate1;
   gate1 = Polycv_velToGate(int_get(_ctx.vel,0));
   fix16_t gate2;
   gate2 = Polycv_velToGate(int_get(_ctx.vel,1));
   fix16_t gate3;
   gate3 = Polycv_velToGate(int_get(_ctx.vel,2));
   fix16_t gate4;
   gate4 = Polycv_velToGate(int_get(_ctx.vel,3));
   _tuple_$_real_real_real_real_real_real_real_real_real_real_real_real_$ _tuple_36;
   {
      _tuple_36.field_0 = note1;
      _tuple_36.field_1 = vel1;
      _tuple_36.field_2 = gate1;
      _tuple_36.field_3 = note2;
      _tuple_36.field_4 = vel2;
      _tuple_36.field_5 = gate2;
      _tuple_36.field_6 = note3;
      _tuple_36.field_7 = vel3;
      _tuple_36.field_8 = gate3;
      _tuple_36.field_9 = note4;
      _tuple_36.field_10 = vel4;
      _tuple_36.field_11 = gate4;
   }
   _output_ = _tuple_36;
   return ;
}

void Polycv__ctx_type_3_init(Polycv__ctx_type_3 &_output_){
   Polycv__ctx_type_3 _ctx;
   Polycv__ctx_type_2_init(_ctx.poly);
   _ctx.channel_in = 0;
   _output_ = _ctx;
   return ;
}

void Polycv_process_init(Polycv__ctx_type_3 &_output_){
   Polycv__ctx_type_3_init(_output_);
   return ;
}

void Polycv_process(Polycv__ctx_type_3 &_ctx, int c, _tuple_$_real_real_real_real_real_real_real_real_real_real_real_real_$ &_output_){
   _ctx.channel_in = c;
   _tuple_$_real_real_real_real_real_real_real_real_real_real_real_real_$ _call_38;
   Polycv_polyState(_ctx.poly,_call_38);
   _output_ = _call_38;
   return ;
}

void Polycv_noteOn_init(Polycv__ctx_type_3 &_output_){
   Polycv__ctx_type_3_init(_output_);
   return ;
}

void Polycv_noteOn(Polycv__ctx_type_3 &_ctx, int note, int velocity, int channel){
   uint8_t _cond_41;
   _cond_41 = (_ctx.channel_in == channel);
   if(_cond_41){
      uint8_t _cond_40;
      _cond_40 = (velocity > 0);
      if(_cond_40){
         Polycv_poly_noteOn(_ctx.poly,note,velocity);
      }
      else
      {
         Polycv_poly_noteOff(_ctx.poly,note);
      }
   }
}

void Polycv_noteOff_init(Polycv__ctx_type_3 &_output_){
   Polycv__ctx_type_3_init(_output_);
   return ;
}

void Polycv_noteOff(Polycv__ctx_type_3 &_ctx, int note, int channel){
   uint8_t _cond_42;
   _cond_42 = (_ctx.channel_in == channel);
   if(_cond_42){
      Polycv_poly_noteOff(_ctx.poly,note);
   }
}

void Polycv_controlChange_init(Polycv__ctx_type_3 &_output_){
   Polycv__ctx_type_3_init(_output_);
   return ;
}

void Polycv_controlChange(Polycv__ctx_type_3 &_ctx, int control, int value, int channel){
}

void Polycv_default_init(Polycv__ctx_type_3 &_output_){
   Polycv__ctx_type_3_init(_output_);
   return ;
}

void Polycv_default(Polycv__ctx_type_3 &_ctx){
}


