{
   type tuple(real,real) {
      val field_0 : real;
      val field_1 : real;
   }

   fun Output_references.foo(x:int,_output_:tuple(real,real)) : unit /* scope_0 */
   {
      val (_cond_5:bool);
      (_cond_5:bool) = (x > 0);
      if(_cond_5)
         /* scope_1 */
         {
            val (_tuple_3:tuple(real,real));
            (_tuple_3:tuple(real,real)) = (0.,0.);
            (_output_:tuple(real,real)) = _tuple_3;
            return ();
         }
      else
         /* scope_2 */
         {
            val (_tuple_4:tuple(real,real));
            (_tuple_4:tuple(real,real)) = (1.,1.);
            (_output_:tuple(real,real)) = _tuple_4;
            return ();
         }
   }

   fun Output_references.bar(_output_:tuple(real,real)) : unit /* scope_0 */
   {
      val (x:tuple(real,real));
      val (y:int);
      (_:unit) = Output_references.foo(1,x);
      (y:int) = 1;
      (_output_:tuple(real,real)) = x;
      return ();
   }

}