{
   type Context_nested._ctx_type_0 {
      val pre : real;
   }

   type Context_nested.change_a_type : Context_nested._ctx_type_0;
   fun Context_nested._ctx_type_0_init(_output_:Context_nested._ctx_type_0) : unit {
      val (_ctx:Context_nested._ctx_type_0);
      (_ctx.pre:real) = 0.0000;
      (_output_:Context_nested._ctx_type_0) = _ctx;
      return ();
   }

   fun Context_nested.change_a_init(_output_:Context_nested._ctx_type_0) : unit {
      (_:unit) = Context_nested._ctx_type_0_init(_output_);
      return ();
   }

   fun Context_nested.change_a(_ctx:Context_nested._ctx_type_0,x:real) : bool /* scope_0 */
   {
      val (ret:bool);
      (ret:bool) = (x <> _ctx.pre);
      (_ctx.pre:real) = x;
      return ret;
   }

   type Context_nested._ctx_type_1 {
      val pre : real;
   }

   type Context_nested.change_b_type : Context_nested._ctx_type_1;
   fun Context_nested._ctx_type_1_init(_output_:Context_nested._ctx_type_1) : unit {
      val (_ctx:Context_nested._ctx_type_1);
      (_ctx.pre:real) = 0.0000;
      (_output_:Context_nested._ctx_type_1) = _ctx;
      return ();
   }

   fun Context_nested.change_b_init(_output_:Context_nested._ctx_type_1) : unit {
      (_:unit) = Context_nested._ctx_type_1_init(_output_);
      return ();
   }

   fun Context_nested.change_b(_ctx:Context_nested._ctx_type_1,x:real) : bool /* scope_1 */
   {
      val (ret:bool);
      (ret:bool) = (x <> _ctx.pre);
      (_ctx.pre:real) = x;
      return ret;
   }

   type Context_nested._ctx_type_2 {
      val y : Context_nested._ctx_type_1;
      val x : Context_nested._ctx_type_0;
      val _inst4 : Context_nested._ctx_type_1;
      val _inst3 : Context_nested._ctx_type_0;
   }

   type Context_nested.foo_type : Context_nested._ctx_type_2;
   fun Context_nested._ctx_type_2_init(_output_:Context_nested._ctx_type_2) : unit {
      val (_ctx:Context_nested._ctx_type_2);
      (_:unit) = Context_nested._ctx_type_1_init(_ctx.y);
      (_:unit) = Context_nested._ctx_type_0_init(_ctx.x);
      (_:unit) = Context_nested._ctx_type_1_init(_ctx._inst4);
      (_:unit) = Context_nested._ctx_type_0_init(_ctx._inst3);
      (_output_:Context_nested._ctx_type_2) = _ctx;
      return ();
   }

   fun Context_nested.foo_init(_output_:Context_nested._ctx_type_2) : unit {
      (_:unit) = Context_nested._ctx_type_2_init(_output_);
      return ();
   }

   fun Context_nested.foo(_ctx:Context_nested._ctx_type_2) : unit /* scope_2 */
   {
      val (ret1:bool);
      (ret1:bool) = Context_nested.change_a(_ctx._inst3,0.0000);
      val (ret2:bool);
      (ret2:bool) = Context_nested.change_b(_ctx._inst4,0.0000);
      val (ret3:bool);
      (ret3:bool) = Context_nested.change_a(_ctx.x,0.0000);
      val (ret4:bool);
      (ret4:bool) = Context_nested.change_a(_ctx.x,0.0000);
      val (ret5:bool);
      (ret5:bool) = Context_nested.change_b(_ctx.y,0.0000);
      val (ret6:bool);
      (ret6:bool) = Context_nested.change_b(_ctx.y,0.0000);
   }

}