ocaml setup.ml -build 
/Users/leonardo/.opam/4.02.3/bin/ocamlfind ocamlopt -shared src/util/vult_util.cmxa src/util/loc.cmx src/util/error.cmx src/util/printBuffer.cmx -o src/util/vult_util.cmxs
/Users/leonardo/.opam/4.02.3/bin/ocamlfind ocamlopt -shared src/core/vult_core.cmxa src/core/VType.cmx src/core/typesVult.cmx src/core/printTypes.cmx src/core/VEnv.cmx src/core/mapper.cmx src/core/common.cmx src/core/inference.cmx -o src/core/vult_core.cmxs
/Users/leonardo/.opam/4.02.3/bin/ocamlfind ocamlopt -shared src/parser/vult_parser.cmxa src/parser/parserTypes.cmx src/parser/lexerVult.cmx src/parser/tokenStream.cmx src/parser/parserVult.cmx -o src/parser/vult_parser.cmxs
/Users/leonardo/.opam/4.02.3/bin/ocamlfind ocamlopt -shared src/generators/vult_generators.cmxa src/generators/vultJs.cmx src/generators/vultCh.cmx -o src/generators/vult_generators.cmxs
/Users/leonardo/.opam/4.02.3/bin/ocamlfind ocamlopt -shared src/passes/vult_passes.cmxa src/passes/passes.cmx -o src/passes/vult_passes.cmxs
/Users/leonardo/.opam/4.02.3/bin/ocamlfind ocamlopt -shared src/vult.cmxa src/driver.cmx -o src/vult.cmxs
ocaml setup.ml -test 
..................F..F..F...F..FF..F..F...F..F..........................................
==============================================================================
Error: vult:3:code:13:delay.vult.fixed.

File "/Users/leonardo/Development/vult/_build/oUnit-vult-echoplex#00.log", line 2800, characters 1-1:
Error: vult:3:code:13:delay.vult.fixed (in the log).

Raised at file "src/oUnitAssert.ml", line 45, characters 8-27
Called from file "list.ml", line 110, characters 24-31
Called from file "src/oUnitRunner.ml", line 46, characters 13-26

Generating cpp for file /Users/leonardo/Development/vult/test/../examples/web/delay.vult
not equal
differences: 
#include "delay.h"

Delay__ctx_type_0 Delay__ctx_type_0_init(){
   Delay__ctx_type_0 _ctx;
   _ctx.x = 0x0 /* 0.000000 */;
   return _ctx;
}

Delay__ctx_type_0 Delay_smooth_init(){ return Delay__ctx_type_0_init();}

fix16_t Delay_smooth(Delay__ctx_type_0 &_ctx, fix16_t input){
   _ctx.x = fix_add(_ctx.x,fix_mul(fix_add(input,(- _ctx.x)),0x147 /* 0.005000 */));
   return _ctx.x;
}

Delay__ctx_type_1 Delay__ctx_type_1_init(){
   Delay__ctx_type_1 _ctx;
   _ctx.pre_x = 0x0 /* 0.000000 */;
   return _ctx;
}

Delay__ctx_type_1 Delay_change_init(){ return Delay__ctx_type_1_init();}

uint8_t Delay_change(Delay__ctx_type_1 &_ctx, fix16_t x){
   uint8_t v = (_ctx.pre_x != x);
   _ctx.pre_x = x;
   return v;
}

Delay__ctx_type_2 Delay__ctx_type_2_init(){
   Delay__ctx_type_2 _ctx;
   _ctx.pre_x = 0;
   return _ctx;
}

Delay__ctx_type_2 Delay_edge_init(){ return Delay__ctx_type_2_init();}

uint8_t Delay_edge(Delay__ctx_type_2 &_ctx, uint8_t x){
   uint8_t v = ((_ctx.pre_x != x) && (_ctx.pre_x == 0));
   _ctx.pre_x = x;
   return v;
}

Delay__ctx_type_3 Delay__ctx_type_3_init(){
   Delay__ctx_type_3 _ctx;
   _ctx.count = 0;
   return _ctx;
}

Delay__ctx_type_3 Delay_each_init(){ return Delay__ctx_type_3_init();}

uint8_t Delay_each(Delay__ctx_type_3 &_ctx, int n){
   uint8_t ret = (_ctx.count == 0);
   _ctx.count = ((_ctx.count + 1) % n);
   return ret;
}

fix16_t Delay_pitchToRate(fix16_t d){
   return fix_mul(0xc /* 0.000185 */,fix_exp(fix_mul(0xec9 /* 0.057762 */,d)));
}

Delay__ctx_type_5 Delay__ctx_type_5_init(){
   Delay__ctx_type_5 _ctx;
   _ctx.rate = 0x0 /* 0.000000 */;
   _ctx.phase = 0x0 /* 0.000000 */;
   _ctx._inst0 = Delay__ctx_type_1_init();
   return _ctx;
}

Delay__ctx_type_5 Delay_phasor_init(){ return Delay__ctx_type_5_init();}

fix16_t Delay_phasor(Delay__ctx_type_5 &_ctx, fix16_t pitch, uint8_t reset){
   if(Delay_change(_ctx._inst0,pitch)){
      _ctx.rate = Delay_pitchToRate(pitch);
   }
   _ctx.phase = (reset?0x0 /* 0.000000 */:(fix_add(_ctx.phase,_ctx.rate) % 0x10000 /* 1.000000 */));
   return _ctx.phase;
}

Delay__ctx_type_6 Delay__ctx_type_6_init(){
   Delay__ctx_type_6 _ctx;
   _ctx.phase = 0x0 /* 0.000000 */;
   _ctx._inst0 = Delay__ctx_type_2_init();
   return _ctx;
}

Delay__ctx_type_6 Delay_lfo_init(){ return Delay__ctx_type_6_init();}

fix16_t Delay_lfo(Delay__ctx_type_6 &_ctx, fix16_t f, uint8_t gate){
   fix16_t rate = fix_mul(0xe /* 0.000227 */,f);
   if(Delay_edge(_ctx._inst0,gate)){
      _ctx.phase = 0x0 /* 0.000000 */;
   }
   _ctx.phase = fix_add(_ctx.phase,rate);
   if(_ctx.phase > 0x10000 /* 1.000000 */){
      _ctx.phase = fix_add(_ctx.phase,(0xffff0000 /* -1.000000 */));
   }
   return fix_add(fix_sin(fix_mul(0x6487e /* 6.283185 */,_ctx.phase)),(0xffff8000 /* -0.500000 */));
}

Delay__ctx_type_7 Delay__ctx_type_7_init(){
   Delay__ctx_type_7 _ctx;
   _ctx.pre_phase1 = 0x0 /* 0.000000 */;
   _ctx._inst2 = Delay__ctx_type_5_init();
   _ctx._inst1 = Delay__ctx_type_0_init();
   _ctx._inst0 = Delay__ctx_type_5_init();
   return _ctx;
}

Delay__ctx_type_7 Delay_phd_osc_init(){ return Delay__ctx_type_7_init();}

fix16_t Delay_phd_osc(Delay__ctx_type_7 &_ctx, fix16_t pitch, fix16_t detune){
   fix16_t phase1 = Delay_phasor(_ctx._inst0,pitch,0);
   fix16_t comp = fix_add(0x10000 /* 1.000000 */,(- phase1));
   uint8_t reset = (fix_add(_ctx.pre_phase1,(- phase1)) > 0x8000 /* 0.500000 */);
   _ctx.pre_phase1 = phase1;
   fix16_t phase2 = Delay_phasor(_ctx._inst2,fix_add(pitch,fix_mul(Delay_smooth(_ctx._inst1,detune),0x200000 /* 32.000000 */)),reset);
   fix16_t sine = fix_sin(fix_mul(0x6487e /* 6.283185 */,phase2));
   return fix_mul(sine,comp);
}

Delay__ctx_type_8 Delay__ctx_type_8_init(){
   Delay__ctx_type_8 _ctx;
   _ctx.write_pos = 0;
   fix_init_array(_ctx.buffer,44100,0x0 /* 0.000000 */);
   return _ctx;
}

Delay__ctx_type_8 Delay_delay_init(){ return Delay__ctx_type_8_init();}

fix16_t Delay_delay(Delay__ctx_type_8 &_ctx, fix16_t x, fix16_t time, fix16_t feedback){
   time = fix_clip(time,0x0 /* 0.000000 */,0x10000 /* 1.000000 */);
   feedback = fix_clip(feedback,0x0 /* 0.000000 */,0x10000 /* 1.000000 */);
   fix16_t index_r = fix_mul(int_to_fix(44100),time);
   int index_i = fix_to_int(fix_floor(index_r));
   int delta = (_ctx.write_pos + (- index_i));
   int read_pos = ((delta < 0)?(44100 + delta):delta);
   fix16_t decimal = fix_add(index_r,(- int_to_fix(index_i)));
   fix16_t x1 = fix_get(_ctx.buffer,read_pos);
   fix16_t x2 = fix_get(_ctx.buffer,((read_pos + 1) % 44100));
   fix16_t ret = fix_add(fix_mul(fix_add(x2,(- x1)),decimal),x1);
   _ctx.write_pos = ((_ctx.write_pos + 1) % 44100);
   fix_set(_ctx.buffer,_ctx.write_pos,fix_clip(fix_add(x,fix_mul(feedback,ret)),(0xffff0000 /* -1.000000 */),0x10000 /* 1.000000 */));
   return ret;
}

Delay__ctx_type_9 Delay__ctx_type_9_init(){
   Delay__ctx_type_9 _ctx;
   _ctx.pre = 0;
   int_init_array(_ctx.notes,4,0);
   _ctx.count = 0;
   return _ctx;
}

Delay__ctx_type_9 Delay_mono_noteOn_init(){ return Delay__ctx_type_9_init();}

int Delay_mono_noteOn(Delay__ctx_type_9 &_ctx, int n){
   if(_ctx.count < 4){
      int_set(_ctx.notes,_ctx.count,n);
      _ctx.pre = n;
      if(_ctx.count < 4){
         _ctx.count = (_ctx.count + 1);
      }
   }
   return _ctx.pre;
}

Delay__ctx_type_9 Delay_mono_noteOff_init(){ return Delay__ctx_type_9_init();}

int Delay_mono_noteOff(Delay__ctx_type_9 &_ctx, int n){
   uint8_t found = 0;
   int pos;
   int i = 0;
   if(_ctx.count == 0){
      return _ctx.pre;
   }
+    while(((i < 4) && bool_not(found))){
-    while(((i < 4) && (! found))){
      if(int_get(_ctx.notes,i) == n){
         pos = i;
         found = 1;
      }
      i = (i + 1);
   }
   if(found){
      int k = (pos + 1);
      while((k < 4)){
         int_set(_ctx.notes,(k + (-1)),int_get(_ctx.notes,k));
         k = (k + 1);
      }
      if(found && (_ctx.count > 0)){
         _ctx.count = (_ctx.count + (-1));
         _ctx.pre = int_get(_ctx.notes,(_ctx.count + (-1)));
      }
   }
   return _ctx.pre;
}

Delay__ctx_type_9 Delay_mono_isGateOn_init(){ return Delay__ctx_type_9_init();}

uint8_t Delay_mono_isGateOn(Delay__ctx_type_9 &_ctx){
   return (_ctx.count > 0);
}

Delay__ctx_type_10 Delay__ctx_type_10_init(){
   Delay__ctx_type_10 _ctx;
   _ctx.volume = 0x0 /* 0.000000 */;
   _ctx.time = 0x0 /* 0.000000 */;
   _ctx.pitch = 0x0 /* 0.000000 */;
   _ctx.notes = Delay__ctx_type_9_init();
   _ctx.lfo_rate = 0x0 /* 0.000000 */;
   _ctx.lfo_amt = 0x0 /* 0.000000 */;
   _ctx.feedback = 0x0 /* 0.000000 */;
   _ctx.detune = 0x0 /* 0.000000 */;
   _ctx._inst5 = Delay__ctx_type_8_init();
   _ctx._inst4 = Delay__ctx_type_0_init();
   _ctx._inst3 = Delay__ctx_type_0_init();
   _ctx._inst2 = Delay__ctx_type_0_init();
   _ctx._inst1 = Delay__ctx_type_7_init();
   _ctx._inst0 = Delay__ctx_type_6_init();
   return _ctx;
}

Delay__ctx_type_10 Delay_process_init(){ return Delay__ctx_type_10_init();}

fix16_t Delay_process(Delay__ctx_type_10 &_ctx, fix16_t input){
   uint8_t gate = Delay_mono_isGateOn(_ctx.notes);
   fix16_t lfo_val = fix_mul(Delay_lfo(_ctx._inst0,_ctx.lfo_rate,gate),_ctx.lfo_amt);
   fix16_t o1 = Delay_phd_osc(_ctx._inst1,_ctx.pitch,fix_add(_ctx.detune,lfo_val));
   fix16_t amp = Delay_smooth(_ctx._inst2,(gate?0x10000 /* 1.000000 */:0x0 /* 0.000000 */));
   fix16_t osc_out = fix_mul(o1,amp);
   fix16_t delay_out = Delay_delay(_ctx._inst5,osc_out,Delay_smooth(_ctx._inst3,_ctx.time),Delay_smooth(_ctx._inst4,_ctx.feedback));
   return fix_mul(fix_mul(_ctx.volume,fix_add(osc_out,delay_out)),0x8000 /* 0.500000 */);
}

Delay__ctx_type_10 Delay_noteOn_init(){ return Delay__ctx_type_10_init();}

void Delay_noteOn(Delay__ctx_type_10 &_ctx, int note, int velocity){
   _ctx.pitch = int_to_fix(Delay_mono_noteOn(_ctx.notes,note));
}

Delay__ctx_type_10 Delay_noteOff_init(){ return Delay__ctx_type_10_init();}

void Delay_noteOff(Delay__ctx_type_10 &_ctx, int note){
   _ctx.pitch = int_to_fix(Delay_mono_noteOff(_ctx.notes,note));
}

Delay__ctx_type_10 Delay_controlChange_init(){ return Delay__ctx_type_10_init();}

void Delay_controlChange(Delay__ctx_type_10 &_ctx, int control, fix16_t value){
   if(control == 30){
      _ctx.volume = fix_mul(value,0x204 /* 0.007874 */);
   }
   if(control == 31){
      _ctx.detune = fix_mul(value,0x204 /* 0.007874 */);
   }
   if(control == 32){
      _ctx.lfo_rate = fix_mul(value,0x204 /* 0.007874 */);
   }
   if(control == 33){
      _ctx.lfo_amt = fix_mul(0x20000 /* 2.000000 */,fix_add(fix_mul(value,0x204 /* 0.007874 */),(0xffff8000 /* -0.500000 */)));
   }
   if(control == 34){
      _ctx.time = fix_mul(value,0x204 /* 0.007874 */);
   }
   if(control == 35){
      _ctx.feedback = fix_mul(value,0x204 /* 0.007874 */);
   }
}

Delay__ctx_type_10 Delay_default_init(){ return Delay__ctx_type_10_init();}

void Delay_default_(Delay__ctx_type_10 &_ctx){
   _ctx.volume = 0x0 /* 0.000000 */;
   _ctx.pitch = 0x2d0000 /* 45.000000 */;
   _ctx.detune = 0xcccc /* 0.800000 */;
   _ctx.lfo_rate = 0x11eb /* 0.070000 */;
   _ctx.lfo_amt = (0xffff3334 /* -0.800000 */);
   _ctx.time = 0x8000 /* 0.500000 */;
   _ctx.feedback = 0x8000 /* 0.500000 */;
}


------------------------------------------------------------------------------
==============================================================================
Error: vult:3:code:10:synth2.vult.fixed.

File "/Users/leonardo/Development/vult/_build/oUnit-vult-echoplex#00.log", line 2386, characters 1-1:
Error: vult:3:code:10:synth2.vult.fixed (in the log).

Raised at file "src/oUnitAssert.ml", line 45, characters 8-27
Called from file "list.ml", line 110, characters 24-31
Called from file "src/oUnitRunner.ml", line 46, characters 13-26

Generating cpp for file /Users/leonardo/Development/vult/test/../examples/web/synth2.vult
not equal
differences: 
#include "synth2.h"

fix16_t Synth2_minFixed(){
   return 0x1 /* 0.000015 */;
}

Synth2__ctx_type_1 Synth2__ctx_type_1_init(){
   Synth2__ctx_type_1 _ctx;
   _ctx.pre_x = 0x0 /* 0.000000 */;
   return _ctx;
}

Synth2__ctx_type_1 Synth2_change_init(){ return Synth2__ctx_type_1_init();}

uint8_t Synth2_change(Synth2__ctx_type_1 &_ctx, fix16_t x){
   uint8_t v = (_ctx.pre_x != x);
   _ctx.pre_x = x;
   return v;
}

Synth2__ctx_type_2 Synth2__ctx_type_2_init(){
   Synth2__ctx_type_2 _ctx;
   _ctx.pre_x = 0;
   return _ctx;
}

Synth2__ctx_type_2 Synth2_bchange_init(){ return Synth2__ctx_type_2_init();}

uint8_t Synth2_bchange(Synth2__ctx_type_2 &_ctx, uint8_t x){
   uint8_t v = (_ctx.pre_x != x);
   _ctx.pre_x = x;
   return v;
}

Synth2__ctx_type_3 Synth2__ctx_type_3_init(){
   Synth2__ctx_type_3 _ctx;
   _ctx.pre_x = 0;
   return _ctx;
}

Synth2__ctx_type_3 Synth2_edge_init(){ return Synth2__ctx_type_3_init();}

uint8_t Synth2_edge(Synth2__ctx_type_3 &_ctx, uint8_t x){
   uint8_t v = ((_ctx.pre_x != x) && (_ctx.pre_x == 1));
   _ctx.pre_x = x;
   return v;
}

Synth2__ctx_type_4 Synth2__ctx_type_4_init(){
   Synth2__ctx_type_4 _ctx;
   _ctx.count = 0;
   return _ctx;
}

Synth2__ctx_type_4 Synth2_each_init(){ return Synth2__ctx_type_4_init();}

uint8_t Synth2_each(Synth2__ctx_type_4 &_ctx, int n){
   uint8_t ret = (_ctx.count == 0);
   _ctx.count = ((_ctx.count + 1) % n);
   return ret;
}

uint8_t Synth2_near_zero(fix16_t x){
   return (fix_abs(x) < 0x51e /* 0.020000 */);
}

Synth2__ctx_type_6 Synth2__ctx_type_6_init(){
   Synth2__ctx_type_6 _ctx;
   _ctx.y1 = 0x0 /* 0.000000 */;
   _ctx.x1 = 0x0 /* 0.000000 */;
   return _ctx;
}

Synth2__ctx_type_6 Synth2_dcblock_init(){ return Synth2__ctx_type_6_init();}

fix16_t Synth2_dcblock(Synth2__ctx_type_6 &_ctx, fix16_t x0){
   fix16_t y0 = fix_add(fix_add(x0,(- _ctx.x1)),fix_mul(_ctx.y1,0xfeb8 /* 0.995000 */));
   _ctx.x1 = x0;
   _ctx.y1 = y0;
   return y0;
}

Synth2__ctx_type_7 Synth2__ctx_type_7_init(){
   Synth2__ctx_type_7 _ctx;
   _ctx.x = 0x0 /* 0.000000 */;
   return _ctx;
}

Synth2__ctx_type_7 Synth2_smooth_init(){ return Synth2__ctx_type_7_init();}

fix16_t Synth2_smooth(Synth2__ctx_type_7 &_ctx, fix16_t input){
   _ctx.x = fix_add(_ctx.x,fix_mul(fix_add(input,(- _ctx.x)),0x147 /* 0.005000 */));
   return _ctx.x;
}

Synth2__ctx_type_8 Synth2__ctx_type_8_init(){
   Synth2__ctx_type_8 _ctx;
   _ctx.pre_x = 0x0 /* 0.000000 */;
   return _ctx;
}

Synth2__ctx_type_8 Synth2_lpfilter_init(){ return Synth2__ctx_type_8_init();}

fix16_t Synth2_lpfilter(Synth2__ctx_type_8 &_ctx, fix16_t x){
   fix16_t ret = fix_mul(fix_add(x,_ctx.pre_x),0x8000 /* 0.500000 */);
   _ctx.pre_x = x;
   return ret;
}

fix16_t Synth2_pitchToRate(fix16_t d){
   return fix_mul(0xc /* 0.000185 */,fix_exp(fix_mul(0xec9 /* 0.057762 */,d)));
}

fix16_t Synth2_pulse_train(fix16_t m, fix16_t phase){
   fix16_t pi_phase = fix_mul(phase,0x3243f /* 3.141593 */);
   fix16_t denominator1 = fix_sin(pi_phase);
   fix16_t tmp1 = 0x0 /* 0.000000 */;
   if(Synth2_near_zero(denominator1)){
      tmp1 = 0x10000 /* 1.000000 */;
   }
   else
   {
      tmp1 = fix_sin(fix_mul(m,pi_phase));
      tmp1 = fix_div(tmp1,fix_mul(m,denominator1));
   }
   return tmp1;
}

Synth2__ctx_type_11 Synth2__ctx_type_11_init(){
   Synth2__ctx_type_11 _ctx;
   _ctx.state_triang = 0x0 /* 0.000000 */;
   _ctx.state_saw = 0x0 /* 0.000000 */;
   _ctx.state_pulse = 0x0 /* 0.000000 */;
   _ctx.rate = 0x0 /* 0.000000 */;
   _ctx.phase = 0x0 /* 0.000000 */;
   _ctx.output = 0x0 /* 0.000000 */;
   _ctx.m = 0x0 /* 0.000000 */;
   _ctx._inst1 = Synth2__ctx_type_6_init();
   _ctx._inst0 = Synth2__ctx_type_1_init();
   return _ctx;
}

Synth2__ctx_type_11 Synth2_osc_init(){ return Synth2__ctx_type_11_init();}

fix16_t Synth2_osc(Synth2__ctx_type_11 &_ctx, fix16_t pitch, fix16_t pw, fix16_t wave){
   fix16_t fixed_pitch = 0x0 /* 0.000000 */;
   if(wave < 0xaaaa /* 0.666667 */){
      fixed_pitch = pitch;
   }
   else
   {
      fixed_pitch = fix_add(pitch,0xc0000 /* 12.000000 */);
   }
   if(Synth2_change(_ctx._inst0,fixed_pitch)){
      _ctx.rate = Synth2_pitchToRate(fixed_pitch);
      fix16_t p = fix_div(0x10000 /* 1.000000 */,_ctx.rate);
      fix16_t maxHarmonics = fix_floor(fix_mul(p,0x8000 /* 0.500000 */));
      _ctx.m = fix_add(fix_mul(0x20000 /* 2.000000 */,maxHarmonics),0x10000 /* 1.000000 */);
   }
   fix16_t shift05 = fix_add(0x8000 /* 0.500000 */,fix_mul(pw,0x7d70 /* 0.490000 */));
   fix16_t shift = fix_add(_ctx.phase,shift05);
   if(shift > 0x10000 /* 1.000000 */){
      shift = fix_add(shift,(0xffff0000 /* -1.000000 */));
   }
   fix16_t tmp1 = Synth2_pulse_train(_ctx.m,_ctx.phase);
   fix16_t tmp2 = Synth2_pulse_train(_ctx.m,shift);
   _ctx.phase = fix_add(_ctx.phase,_ctx.rate);
   if(_ctx.phase > 0x10000 /* 1.000000 */){
      _ctx.phase = fix_add(_ctx.phase,(0xffff0000 /* -1.000000 */));
   }
   _ctx.state_pulse = fix_clip(fix_add(fix_add(fix_mul(_ctx.state_pulse,0xffdf /* 0.999500 */),tmp1),(- tmp2)),(0xffff0000 /* -1.000000 */),0x10000 /* 1.000000 */);
   _ctx.state_saw = fix_clip(fix_add(fix_mul(_ctx.state_saw,0xffdf /* 0.999500 */),fix_mul(fix_div(fix_add(fix_add(tmp1,tmp2),fix_mul((0xfffe0000 /* -2.000000 */),_ctx.rate)),shift05),0x8000 /* 0.500000 */)),(0xffff0000 /* -1.000000 */),0x10000 /* 1.000000 */);
   _ctx.state_triang = fix_clip(fix_add(fix_mul(_ctx.state_triang,0xffdf /* 0.999500 */),fix_mul(fix_mul(0x20000 /* 2.000000 */,_ctx.state_pulse),_ctx.rate)),(0xffff0000 /* -1.000000 */),0x10000 /* 1.000000 */);
   if(wave < 0x5555 /* 0.333333 */){
      _ctx.output = _ctx.state_pulse;
   }
   else
   {
      if(wave < 0xaaaa /* 0.666667 */){
         _ctx.output = fix_mul(0x20000 /* 2.000000 */,_ctx.state_saw);
      }
      else
      {
         _ctx.output = fix_mul(fix_mul(0x20000 /* 2.000000 */,_ctx.state_triang),fix_add(0x10000 /* 1.000000 */,pw));
      }
   }
   _ctx.output = Synth2_dcblock(_ctx._inst1,_ctx.output);
   return fix_clip(fix_mul(_ctx.output,0x4000 /* 0.250000 */),(0xffff0000 /* -1.000000 */),0x10000 /* 1.000000 */);
}

Synth2__ctx_type_12 Synth2__ctx_type_12_init(){
   Synth2__ctx_type_12 _ctx;
   _ctx.dlow = 0x0 /* 0.000000 */;
   _ctx.dband = 0x0 /* 0.000000 */;
   return _ctx;
}

Synth2__ctx_type_12 Synth2_svf_step_init(){ return Synth2__ctx_type_12_init();}

fix16_t Synth2_svf_step(Synth2__ctx_type_12 &_ctx, fix16_t input, fix16_t g, fix16_t q, int sel){
   fix16_t low = fix_add(_ctx.dlow,fix_mul(g,_ctx.dband));
   fix16_t high = fix_add(fix_add(input,(- low)),(- fix_mul(q,_ctx.dband)));
   fix16_t band = fix_add(fix_mul(g,high),_ctx.dband);
   fix16_t notch = fix_add(high,low);
   _ctx.dband = fix_clip(band,(0xffff0000 /* -1.000000 */),0x10000 /* 1.000000 */);
   _ctx.dlow = fix_clip(low,(0xffff0000 /* -1.000000 */),0x10000 /* 1.000000 */);
   fix16_t output = ((sel == 0)?low:((sel == 1)?high:((sel == 2)?band:notch)));
   return output;
}

Synth2__ctx_type_13 Synth2__ctx_type_13_init(){
   Synth2__ctx_type_13 _ctx;
   _ctx.step = Synth2__ctx_type_12_init();
   _ctx.g = 0x0 /* 0.000000 */;
   _ctx._inst0 = Synth2__ctx_type_1_init();
   return _ctx;
}

Synth2__ctx_type_13 Synth2_svf_init(){ return Synth2__ctx_type_13_init();}

fix16_t Synth2_svf(Synth2__ctx_type_13 &_ctx, fix16_t input, fix16_t fc, fix16_t q, int sel){
   fc = fix_clip(fc,0x0 /* 0.000000 */,0x10000 /* 1.000000 */);
   q = fix_clip(q,0x0 /* 0.000000 */,0x10000 /* 1.000000 */);
   fix16_t fix_q = fix_mul(0x20000 /* 2.000000 */,fix_add(0x10000 /* 1.000000 */,(- q)));
   if(Synth2_change(_ctx._inst0,fc)){
      _ctx.g = fix_mul(fc,0x8000 /* 0.500000 */);
   }
   fix16_t x1 = Synth2_svf_step(_ctx.step,input,_ctx.g,fix_q,sel);
   fix16_t x2 = Synth2_svf_step(_ctx.step,input,_ctx.g,fix_q,sel);
   return fix_mul(fix_add(x1,x2),0x8000 /* 0.500000 */);
}

Synth2__ctx_type_14 Synth2__ctx_type_14_init(){
   Synth2__ctx_type_14 _ctx;
   _ctx.phase = 0x0 /* 0.000000 */;
   _ctx._inst1 = Synth2__ctx_type_4_init();
   _ctx._inst0 = Synth2__ctx_type_3_init();
   return _ctx;
}

Synth2__ctx_type_14 Synth2_lfo_init(){ return Synth2__ctx_type_14_init();}

fix16_t Synth2_lfo(Synth2__ctx_type_14 &_ctx, fix16_t f, uint8_t gate){
   fix16_t rate = fix_add(fix_mul(fix_mul(f,0x640000 /* 100.000000 */),Synth2_minFixed()),Synth2_minFixed());
   if(Synth2_edge(_ctx._inst0,gate)){
      _ctx.phase = 0x0 /* 0.000000 */;
   }
   if(Synth2_each(_ctx._inst1,4)){
      _ctx.phase = fix_add(_ctx.phase,rate);
   }
   if(_ctx.phase > 0x10000 /* 1.000000 */){
      _ctx.phase = fix_add(_ctx.phase,(0xffff0000 /* -1.000000 */));
   }
   return fix_add(fix_sin(fix_mul(0x6487e /* 6.283185 */,_ctx.phase)),0x8000 /* 0.500000 */);
}

Synth2__ctx_type_15 Synth2__ctx_type_15_init(){
   Synth2__ctx_type_15 _ctx;
   _ctx.pre = 0;
   int_init_array(_ctx.notes,4,0);
   _ctx.count = 0;
   return _ctx;
}

Synth2__ctx_type_15 Synth2_mono_noteOn_init(){ return Synth2__ctx_type_15_init();}

int Synth2_mono_noteOn(Synth2__ctx_type_15 &_ctx, int n){
   if(_ctx.count < 4){
      int_set(_ctx.notes,_ctx.count,n);
      _ctx.pre = n;
      if(_ctx.count < 4){
         _ctx.count = (_ctx.count + 1);
      }
   }
   return _ctx.pre;
}

Synth2__ctx_type_15 Synth2_mono_noteOff_init(){ return Synth2__ctx_type_15_init();}

int Synth2_mono_noteOff(Synth2__ctx_type_15 &_ctx, int n){
   uint8_t found = 0;
   int pos;
   int i = 0;
   if(_ctx.count == 0){
      return _ctx.pre;
   }
+    while(((i < 4) && bool_not(found))){
-    while(((i < 4) && (! found))){
      if(int_get(_ctx.notes,i) == n){
         pos = i;
         found = 1;
      }
      i = (i + 1);
   }
   if(found){
      int k = (pos + 1);
      while((k < 4)){
         int_set(_ctx.notes,(k + (-1)),int_get(_ctx.notes,k));
         k = (k + 1);
      }
      if(found && (_ctx.count > 0)){
         _ctx.count = (_ctx.count + (-1));
         _ctx.pre = int_get(_ctx.notes,(_ctx.count + (-1)));
      }
   }
   return _ctx.pre;
}

Synth2__ctx_type_15 Synth2_mono_isGateOn_init(){ return Synth2__ctx_type_15_init();}

uint8_t Synth2_mono_isGateOn(Synth2__ctx_type_15 &_ctx){
   return (_ctx.count > 0);
}

Synth2__ctx_type_16 Synth2__ctx_type_16_init(){
   Synth2__ctx_type_16 _ctx;
   _ctx.wave = 0x0 /* 0.000000 */;
   _ctx.volume = 0x0 /* 0.000000 */;
   _ctx.res = 0x0 /* 0.000000 */;
   _ctx.pw = 0x0 /* 0.000000 */;
   _ctx.pitch = 0x0 /* 0.000000 */;
   _ctx.monoin = Synth2__ctx_type_15_init();
   _ctx.lfo_rate = 0x0 /* 0.000000 */;
   _ctx.lfo_amt = 0x0 /* 0.000000 */;
   _ctx.cut = 0x0 /* 0.000000 */;
   _ctx.amp_s = 0x0 /* 0.000000 */;
   _ctx._inst3 = Synth2__ctx_type_13_init();
   _ctx._inst2 = Synth2__ctx_type_7_init();
   _ctx._inst1 = Synth2__ctx_type_11_init();
   _ctx._inst0 = Synth2__ctx_type_14_init();
   Synth2_default_(_ctx);
   return _ctx;
}

Synth2__ctx_type_16 Synth2_process_init(){ return Synth2__ctx_type_16_init();}

fix16_t Synth2_process(Synth2__ctx_type_16 &_ctx, fix16_t i){
   uint8_t gate = Synth2_mono_isGateOn(_ctx.monoin);
   fix16_t lfo1 = fix_mul(Synth2_lfo(_ctx._inst0,_ctx.lfo_rate,gate),_ctx.lfo_amt);
   fix16_t o1 = Synth2_osc(_ctx._inst1,_ctx.pitch,fix_add(_ctx.pw,lfo1),_ctx.wave);
   fix16_t amp_env = Synth2_smooth(_ctx._inst2,(gate?0x10000 /* 1.000000 */:0x0 /* 0.000000 */));
   fix16_t output = fix_mul(amp_env,Synth2_svf(_ctx._inst3,o1,_ctx.cut,_ctx.res,0));
   return fix_mul(_ctx.volume,output);
}

Synth2__ctx_type_16 Synth2_noteOn_init(){ return Synth2__ctx_type_16_init();}

void Synth2_noteOn(Synth2__ctx_type_16 &_ctx, int note, int velocity){
   _ctx.pitch = int_to_fix(Synth2_mono_noteOn(_ctx.monoin,note));
}

Synth2__ctx_type_16 Synth2_noteOff_init(){ return Synth2__ctx_type_16_init();}

void Synth2_noteOff(Synth2__ctx_type_16 &_ctx, int note){
   _ctx.pitch = int_to_fix(Synth2_mono_noteOff(_ctx.monoin,note));
}

Synth2__ctx_type_16 Synth2_controlChange_init(){ return Synth2__ctx_type_16_init();}

void Synth2_controlChange(Synth2__ctx_type_16 &_ctx, int control, int value){
   fix16_t value_0_1 = fix_mul(int_to_fix(value),0x204 /* 0.007874 */);
   fix16_t value_m1_1 = fix_add(fix_mul(value_0_1,0x20000 /* 2.000000 */),(0xffff0000 /* -1.000000 */));
   if(control == 30){
      _ctx.volume = value_0_1;
   }
   if(control == 31){
      _ctx.wave = value_0_1;
   }
   if(control == 32){
      _ctx.pw = value_0_1;
   }
   if(control == 33){
      _ctx.lfo_rate = value_0_1;
   }
   if(control == 34){
      _ctx.lfo_amt = value_m1_1;
   }
   if(control == 35){
      _ctx.cut = value_0_1;
   }
   if(control == 36){
      _ctx.res = value_0_1;
   }
}

Synth2__ctx_type_16 Synth2_default_init(){ return Synth2__ctx_type_16_init();}

void Synth2_default_(Synth2__ctx_type_16 &_ctx){
   _ctx.pw = 0x0 /* 0.000000 */;
   _ctx.pitch = 0x2a0000 /* 42.000000 */;
   _ctx.cut = 0x10000 /* 1.000000 */;
   _ctx.res = 0x0 /* 0.000000 */;
   _ctx.amp_s = 0x10000 /* 1.000000 */;
   _ctx.lfo_amt = 0x8000 /* 0.500000 */;
   _ctx.lfo_rate = 0x0 /* 0.000000 */;
}


------------------------------------------------------------------------------
==============================================================================
Error: vult:3:code:6:voice.vult.fixed.

File "/Users/leonardo/Development/vult/_build/oUnit-vult-echoplex#00.log", line 1811, characters 1-1:
Error: vult:3:code:6:voice.vult.fixed (in the log).

Raised at file "src/oUnitAssert.ml", line 45, characters 8-27
Called from file "list.ml", line 110, characters 24-31
Called from file "src/oUnitRunner.ml", line 46, characters 13-26

Generating cpp for file /Users/leonardo/Development/vult/test/../examples/voice.vult
not equal
differences: 
#include "voice.h"

fix16_t Voice_minFixed(){
   return 0x1 /* 0.000015 */;
}

Voice__ctx_type_1 Voice__ctx_type_1_init(){
   Voice__ctx_type_1 _ctx;
   _ctx.pre_x = 0x0 /* 0.000000 */;
   return _ctx;
}

Voice__ctx_type_1 Voice_change_init(){ return Voice__ctx_type_1_init();}

uint8_t Voice_change(Voice__ctx_type_1 &_ctx, fix16_t x){
   uint8_t v = (_ctx.pre_x != x);
   _ctx.pre_x = x;
   return v;
}

Voice__ctx_type_2 Voice__ctx_type_2_init(){
   Voice__ctx_type_2 _ctx;
   _ctx.pre_x = 0;
   return _ctx;
}

Voice__ctx_type_2 Voice_bchange_init(){ return Voice__ctx_type_2_init();}

uint8_t Voice_bchange(Voice__ctx_type_2 &_ctx, uint8_t x){
   uint8_t v = (_ctx.pre_x != x);
   _ctx.pre_x = x;
   return v;
}

Voice__ctx_type_3 Voice__ctx_type_3_init(){
   Voice__ctx_type_3 _ctx;
   _ctx.pre_x = 0;
   return _ctx;
}

Voice__ctx_type_3 Voice_edge_init(){ return Voice__ctx_type_3_init();}

uint8_t Voice_edge(Voice__ctx_type_3 &_ctx, uint8_t x){
   uint8_t v = ((_ctx.pre_x != x) && (_ctx.pre_x == 1));
   _ctx.pre_x = x;
   return v;
}

Voice__ctx_type_4 Voice__ctx_type_4_init(){
   Voice__ctx_type_4 _ctx;
   _ctx.count = 0;
   return _ctx;
}

Voice__ctx_type_4 Voice_each_init(){ return Voice__ctx_type_4_init();}

uint8_t Voice_each(Voice__ctx_type_4 &_ctx, int n){
   uint8_t ret = (_ctx.count == 0);
   _ctx.count = ((_ctx.count + 1) % n);
   return ret;
}

uint8_t Voice_near_zero(fix16_t x){
   return (fix_abs(x) < 0x51e /* 0.020000 */);
}

Voice__ctx_type_6 Voice__ctx_type_6_init(){
   Voice__ctx_type_6 _ctx;
   _ctx.y1 = 0x0 /* 0.000000 */;
   _ctx.x1 = 0x0 /* 0.000000 */;
   return _ctx;
}

Voice__ctx_type_6 Voice_dcblock_init(){ return Voice__ctx_type_6_init();}

fix16_t Voice_dcblock(Voice__ctx_type_6 &_ctx, fix16_t x0){
   fix16_t y0 = fix_add(fix_add(x0,(- _ctx.x1)),fix_mul(_ctx.y1,0xfeb8 /* 0.995000 */));
   _ctx.x1 = x0;
   _ctx.y1 = y0;
   return y0;
}

Voice__ctx_type_7 Voice__ctx_type_7_init(){
   Voice__ctx_type_7 _ctx;
   _ctx.pre_x = 0x0 /* 0.000000 */;
   return _ctx;
}

Voice__ctx_type_7 Voice_lpfilter_init(){ return Voice__ctx_type_7_init();}

fix16_t Voice_lpfilter(Voice__ctx_type_7 &_ctx, fix16_t x){
   fix16_t ret = fix_mul(fix_add(x,_ctx.pre_x),0x8000 /* 0.500000 */);
   _ctx.pre_x = x;
   return ret;
}

fix16_t Voice_pitchToRate(fix16_t d){
   return fix_mul(0xc /* 0.000185 */,fix_exp(fix_mul(0xec9 /* 0.057762 */,d)));
}

fix16_t Voice_pulse_train(fix16_t m, fix16_t phase){
   fix16_t pi_phase = fix_mul(phase,0x3243f /* 3.141593 */);
   fix16_t denominator1 = fix_sin(pi_phase);
   fix16_t tmp1 = 0x0 /* 0.000000 */;
   if(Voice_near_zero(denominator1)){
      tmp1 = 0x10000 /* 1.000000 */;
   }
   else
   {
      tmp1 = fix_sin(fix_mul(m,pi_phase));
      tmp1 = fix_div(tmp1,fix_mul(m,denominator1));
   }
   return tmp1;
}

Voice__ctx_type_10 Voice__ctx_type_10_init(){
   Voice__ctx_type_10 _ctx;
   _ctx.state_triang = 0x0 /* 0.000000 */;
   _ctx.state_saw = 0x0 /* 0.000000 */;
   _ctx.state_pulse = 0x0 /* 0.000000 */;
   _ctx.rate = 0x0 /* 0.000000 */;
   _ctx.phase = 0x0 /* 0.000000 */;
   _ctx.output = 0x0 /* 0.000000 */;
   _ctx.m = 0x0 /* 0.000000 */;
   _ctx._inst1 = Voice__ctx_type_6_init();
   _ctx._inst0 = Voice__ctx_type_1_init();
   return _ctx;
}

Voice__ctx_type_10 Voice_osc_init(){ return Voice__ctx_type_10_init();}

fix16_t Voice_osc(Voice__ctx_type_10 &_ctx, fix16_t pitch, fix16_t pw, fix16_t wave){
   fix16_t fixed_pitch = 0x0 /* 0.000000 */;
   if(wave < 0xaaaa /* 0.666667 */){
      fixed_pitch = pitch;
   }
   else
   {
      fixed_pitch = fix_add(pitch,0xc0000 /* 12.000000 */);
   }
   if(Voice_change(_ctx._inst0,fixed_pitch)){
      _ctx.rate = Voice_pitchToRate(fixed_pitch);
      fix16_t p = fix_div(0x10000 /* 1.000000 */,_ctx.rate);
      fix16_t maxHarmonics = fix_floor(fix_mul(p,0x8000 /* 0.500000 */));
      _ctx.m = fix_add(fix_mul(0x20000 /* 2.000000 */,maxHarmonics),0x10000 /* 1.000000 */);
   }
   fix16_t shift05 = fix_add(0x8000 /* 0.500000 */,fix_mul(pw,0x7d70 /* 0.490000 */));
   fix16_t shift = fix_add(_ctx.phase,shift05);
   if(shift > 0x10000 /* 1.000000 */){
      shift = fix_add(shift,(0xffff0000 /* -1.000000 */));
   }
   fix16_t tmp1 = Voice_pulse_train(_ctx.m,_ctx.phase);
   fix16_t tmp2 = Voice_pulse_train(_ctx.m,shift);
   _ctx.phase = fix_add(_ctx.phase,_ctx.rate);
   if(_ctx.phase > 0x10000 /* 1.000000 */){
      _ctx.phase = fix_add(_ctx.phase,(0xffff0000 /* -1.000000 */));
   }
   _ctx.state_pulse = fix_clip(fix_add(fix_add(fix_mul(_ctx.state_pulse,0xffdf /* 0.999500 */),tmp1),(- tmp2)),(0xffff0000 /* -1.000000 */),0x10000 /* 1.000000 */);
   _ctx.state_saw = fix_clip(fix_add(fix_mul(_ctx.state_saw,0xffdf /* 0.999500 */),fix_mul(fix_div(fix_add(fix_add(tmp1,tmp2),fix_mul((0xfffe0000 /* -2.000000 */),_ctx.rate)),shift05),0x8000 /* 0.500000 */)),(0xffff0000 /* -1.000000 */),0x10000 /* 1.000000 */);
   _ctx.state_triang = fix_clip(fix_add(fix_mul(_ctx.state_triang,0xffdf /* 0.999500 */),fix_mul(fix_mul(0x20000 /* 2.000000 */,_ctx.state_pulse),_ctx.rate)),(0xffff0000 /* -1.000000 */),0x10000 /* 1.000000 */);
   if(wave < 0x5555 /* 0.333333 */){
      _ctx.output = _ctx.state_pulse;
   }
   else
   {
      if(wave < 0xaaaa /* 0.666667 */){
         _ctx.output = fix_mul(0x20000 /* 2.000000 */,_ctx.state_saw);
      }
      else
      {
         _ctx.output = fix_mul(fix_mul(0x20000 /* 2.000000 */,_ctx.state_triang),fix_add(0x10000 /* 1.000000 */,pw));
      }
   }
   _ctx.output = Voice_dcblock(_ctx._inst1,_ctx.output);
   return fix_clip(fix_mul(_ctx.output,0x4000 /* 0.250000 */),(0xffff0000 /* -1.000000 */),0x10000 /* 1.000000 */);
}

Voice__ctx_type_11 Voice__ctx_type_11_init(){
   Voice__ctx_type_11 _ctx;
   _ctx.dlow = 0x0 /* 0.000000 */;
   _ctx.dband = 0x0 /* 0.000000 */;
   return _ctx;
}

Voice__ctx_type_11 Voice_svf_step_init(){ return Voice__ctx_type_11_init();}

fix16_t Voice_svf_step(Voice__ctx_type_11 &_ctx, fix16_t input, fix16_t g, fix16_t q, int sel){
   fix16_t low = fix_add(_ctx.dlow,fix_mul(g,_ctx.dband));
   fix16_t high = fix_add(fix_add(input,(- low)),(- fix_mul(q,_ctx.dband)));
   fix16_t band = fix_add(fix_mul(g,high),_ctx.dband);
   fix16_t notch = fix_add(high,low);
   _ctx.dband = fix_clip(band,(0xffff0000 /* -1.000000 */),0x10000 /* 1.000000 */);
   _ctx.dlow = fix_clip(low,(0xffff0000 /* -1.000000 */),0x10000 /* 1.000000 */);
   fix16_t output = ((sel == 0)?low:((sel == 1)?high:((sel == 2)?band:notch)));
   return output;
}

Voice__ctx_type_12 Voice__ctx_type_12_init(){
   Voice__ctx_type_12 _ctx;
   _ctx.step = Voice__ctx_type_11_init();
   _ctx.g = 0x0 /* 0.000000 */;
   _ctx._inst0 = Voice__ctx_type_1_init();
   return _ctx;
}

Voice__ctx_type_12 Voice_svf_init(){ return Voice__ctx_type_12_init();}

fix16_t Voice_svf(Voice__ctx_type_12 &_ctx, fix16_t input, fix16_t fc, fix16_t q, int sel){
   fc = fix_clip(fc,0x0 /* 0.000000 */,0x10000 /* 1.000000 */);
   q = fix_clip(q,0x0 /* 0.000000 */,0x10000 /* 1.000000 */);
   fix16_t fix_q = fix_mul(0x20000 /* 2.000000 */,fix_add(0x10000 /* 1.000000 */,(- q)));
   if(Voice_change(_ctx._inst0,fc)){
      _ctx.g = fix_mul(fc,0x8000 /* 0.500000 */);
   }
   fix16_t x1 = Voice_svf_step(_ctx.step,input,_ctx.g,fix_q,sel);
   fix16_t x2 = Voice_svf_step(_ctx.step,input,_ctx.g,fix_q,sel);
   return fix_mul(fix_add(x1,x2),0x8000 /* 0.500000 */);
}

Voice__ctx_type_13 Voice__ctx_type_13_init(){
   Voice__ctx_type_13 _ctx;
   _ctx.value = 0x0 /* 0.000000 */;
   _ctx.sustainLevel = 0x0 /* 0.000000 */;
   _ctx.state = 0;
   _ctx.releaseRate = 0x0 /* 0.000000 */;
   _ctx.decayRate = 0x0 /* 0.000000 */;
   _ctx.attackRate = 0x0 /* 0.000000 */;
   _ctx._inst2 = Voice__ctx_type_7_init();
   _ctx._inst1 = Voice__ctx_type_2_init();
   _ctx._inst0 = Voice__ctx_type_4_init();
   return _ctx;
}

Voice__ctx_type_13 Voice_adsr_init(){ return Voice__ctx_type_13_init();}

fix16_t Voice_adsr(Voice__ctx_type_13 &_ctx, uint8_t gate, fix16_t attack, fix16_t decay, fix16_t sustain, fix16_t release){
   int IDLE = 0;
   int ATTACK = 1;
   int DECAY = 2;
   int SUSTAIN = 3;
   int RELEASE = 4;
   if(Voice_each(_ctx._inst0,32)){
      _ctx.attackRate = fix_mul(0x1 /* 0.000023 */,fix_div(0x10000 /* 1.000000 */,fix_add(attack,0x1999 /* 0.100000 */)));
      fix16_t inv_sustain = fix_add(0x10000 /* 1.000000 */,(- sustain));
      _ctx.decayRate = fix_mul(fix_mul(inv_sustain,0x1 /* 0.000023 */),fix_div(inv_sustain,fix_add(decay,0x1999 /* 0.100000 */)));
      _ctx.releaseRate = fix_mul(0x0 /* 0.000011 */,fix_div(0x8000 /* 0.500000 */,fix_add(release,0x1999 /* 0.100000 */)));
   }
   _ctx.sustainLevel = sustain;
   fix16_t rate = 0x0 /* 0.000000 */;
   uint8_t trig = Voice_bchange(_ctx._inst1,gate);
   uint8_t up = (trig && gate);
+    uint8_t down = (trig && bool_not(gate));
-    uint8_t down = (trig && (! gate));
   if(_ctx.state == IDLE){
      if(up){
         _ctx.state = ATTACK;
      }
   }
   else
   {
      if(_ctx.state == ATTACK){
         if(_ctx.value >= 0x10000 /* 1.000000 */){
            _ctx.state = DECAY;
         }
         if(down){
            _ctx.state = RELEASE;
         }
         rate = _ctx.attackRate;
      }
      else
      {
         if(_ctx.state == DECAY){
            if(_ctx.value <= _ctx.sustainLevel){
               _ctx.state = SUSTAIN;
            }
            if(down){
               _ctx.state = RELEASE;
            }
            rate = (- _ctx.decayRate);
         }
         else
         {
            if(_ctx.state == SUSTAIN){
               if(down){
                  _ctx.state = RELEASE;
               }
               rate = 0x0 /* 0.000000 */;
               _ctx.value = _ctx.sustainLevel;
            }
            else
            {
               if(_ctx.state == RELEASE){
                  if(_ctx.value <= 0x0 /* 0.000000 */){
                     _ctx.state = IDLE;
                  }
                  if(up){
                     _ctx.state = ATTACK;
                  }
                  rate = (- _ctx.releaseRate);
               }
            }
         }
      }
   }
   _ctx.value = fix_clip(fix_add(Voice_lpfilter(_ctx._inst2,rate),_ctx.value),0x0 /* 0.000000 */,0x10000 /* 1.000000 */);
   return _ctx.value;
}

Voice__ctx_type_14 Voice__ctx_type_14_init(){
   Voice__ctx_type_14 _ctx;
   _ctx.phase = 0x0 /* 0.000000 */;
   _ctx._inst1 = Voice__ctx_type_4_init();
   _ctx._inst0 = Voice__ctx_type_3_init();
   return _ctx;
}

Voice__ctx_type_14 Voice_lfo_init(){ return Voice__ctx_type_14_init();}

fix16_t Voice_lfo(Voice__ctx_type_14 &_ctx, fix16_t f, uint8_t gate){
   fix16_t rate = fix_add(fix_mul(fix_mul(f,0x640000 /* 100.000000 */),Voice_minFixed()),Voice_minFixed());
   if(Voice_edge(_ctx._inst0,gate)){
      _ctx.phase = 0x0 /* 0.000000 */;
   }
   if(Voice_each(_ctx._inst1,4)){
      _ctx.phase = fix_add(_ctx.phase,rate);
   }
   if(_ctx.phase > 0x10000 /* 1.000000 */){
      _ctx.phase = fix_add(_ctx.phase,(0xffff0000 /* -1.000000 */));
   }
   return fix_add(fix_sin(fix_mul(0x6487e /* 6.283185 */,_ctx.phase)),0x8000 /* 0.500000 */);
}

Voice__ctx_type_15 Voice__ctx_type_15_init(){
   Voice__ctx_type_15 _ctx;
   _ctx.pre = 0;
   _ctx.n4 = 0;
   _ctx.n3 = 0;
   _ctx.n2 = 0;
   _ctx.n1 = 0;
   _ctx.count = 0;
   return _ctx;
}

Voice__ctx_type_15 Voice_mono_noteOn_init(){ return Voice__ctx_type_15_init();}

int Voice_mono_noteOn(Voice__ctx_type_15 &_ctx, int n){
   if(_ctx.count == 0){
      _ctx.n1 = n;
      _ctx.pre = n;
   }
   else
   {
      if(_ctx.count == 1){
         _ctx.n2 = n;
         _ctx.pre = n;
      }
      else
      {
         if(_ctx.count == 2){
            _ctx.n3 = n;
            _ctx.pre = n;
         }
         else
         {
            if(_ctx.count == 3){
               _ctx.n4 = n;
            }
         }
      }
   }
   _ctx.pre = n;
   if(_ctx.count <= 4){
      _ctx.count = (_ctx.count + 1);
   }
   return _ctx.pre;
}

Voice__ctx_type_15 Voice_mono_noteOff_init(){ return Voice__ctx_type_15_init();}

int Voice_mono_noteOff(Voice__ctx_type_15 &_ctx, int n){
   uint8_t found = 0;
   if(n == _ctx.n1){
      int _tmp_0 = _ctx.n2;
      int _tmp_1 = _ctx.n3;
      int _tmp_2 = _ctx.n4;
      _ctx.n1 = _tmp_0;
      _ctx.n2 = _tmp_1;
      _ctx.n3 = _tmp_2;
      found = 1;
   }
   else
   {
      if(n == _ctx.n2){
         int _tmp_0 = _ctx.n3;
         int _tmp_1 = _ctx.n4;
         _ctx.n2 = _tmp_0;
         _ctx.n3 = _tmp_1;
         found = 1;
      }
      else
      {
         if(n == _ctx.n3){
            _ctx.n3 = _ctx.n4;
            found = 1;
         }
         else
         {
            if(n == _ctx.n4){
               found = 1;
            }
         }
      }
   }
   if(found && (_ctx.count > 0)){
      _ctx.count = (_ctx.count + (-1));
   }
   if(_ctx.count == 1){
      _ctx.pre = _ctx.n1;
   }
   if(_ctx.count == 2){
      _ctx.pre = _ctx.n2;
   }
   if(_ctx.count == 3){
      _ctx.pre = _ctx.n3;
   }
   if(_ctx.count == 4){
      _ctx.pre = _ctx.n4;
   }
   return _ctx.pre;
}

Voice__ctx_type_15 Voice_mono_isGateOn_init(){ return Voice__ctx_type_15_init();}

uint8_t Voice_mono_isGateOn(Voice__ctx_type_15 &_ctx){
   return (_ctx.count > 0);
}

Voice__ctx_type_16 Voice__ctx_type_16_init(){
   Voice__ctx_type_16 _ctx;
   _ctx.wave = 0x0 /* 0.000000 */;
   _ctx.res = 0x0 /* 0.000000 */;
   _ctx.pw = 0x0 /* 0.000000 */;
   _ctx.pitch = 0x0 /* 0.000000 */;
   _ctx.monoin = Voice__ctx_type_15_init();
   _ctx.lfo_rate = 0x0 /* 0.000000 */;
   _ctx.lfo_amt = 0x0 /* 0.000000 */;
   _ctx.flt_atm = 0x0 /* 0.000000 */;
   _ctx.env_s = 0x0 /* 0.000000 */;
   _ctx.env_r = 0x0 /* 0.000000 */;
   _ctx.env_d = 0x0 /* 0.000000 */;
   _ctx.env_a = 0x0 /* 0.000000 */;
   _ctx.end_r = 0x0 /* 0.000000 */;
   _ctx.cut = 0x0 /* 0.000000 */;
   _ctx.amp_s = 0x0 /* 0.000000 */;
   _ctx.amp_r = 0x0 /* 0.000000 */;
   _ctx.amp_d = 0x0 /* 0.000000 */;
   _ctx.amp_a = 0x0 /* 0.000000 */;
   _ctx._inst4 = Voice__ctx_type_12_init();
   _ctx._inst3 = Voice__ctx_type_13_init();
   _ctx._inst2 = Voice__ctx_type_13_init();
   _ctx._inst1 = Voice__ctx_type_10_init();
   _ctx._inst0 = Voice__ctx_type_14_init();
   Voice_default_(_ctx);
   return _ctx;
}

Voice__ctx_type_16 Voice_process_init(){ return Voice__ctx_type_16_init();}

fix16_t Voice_process(Voice__ctx_type_16 &_ctx, fix16_t i){
   uint8_t gate = Voice_mono_isGateOn(_ctx.monoin);
   fix16_t lfo1 = fix_mul(Voice_lfo(_ctx._inst0,_ctx.lfo_rate,gate),_ctx.lfo_amt);
   fix16_t x = Voice_osc(_ctx._inst1,_ctx.pitch,fix_add(_ctx.pw,lfo1),_ctx.wave);
   fix16_t amp_env = Voice_adsr(_ctx._inst2,gate,_ctx.amp_a,_ctx.amp_d,_ctx.amp_s,_ctx.amp_r);
   fix16_t flt_env = Voice_adsr(_ctx._inst3,gate,_ctx.env_a,_ctx.env_d,_ctx.env_s,_ctx.end_r);
   fix16_t cut_mod = fix_add(_ctx.cut,fix_mul(_ctx.flt_atm,flt_env));
   fix16_t output = fix_mul(amp_env,Voice_svf(_ctx._inst4,x,cut_mod,_ctx.res,0));
   return output;
}

Voice__ctx_type_16 Voice_noteOn_init(){ return Voice__ctx_type_16_init();}

void Voice_noteOn(Voice__ctx_type_16 &_ctx, int note, int velocity){
   _ctx.pitch = int_to_fix(Voice_mono_noteOn(_ctx.monoin,note));
}

Voice__ctx_type_16 Voice_noteOff_init(){ return Voice__ctx_type_16_init();}

void Voice_noteOff(Voice__ctx_type_16 &_ctx, int note){
   _ctx.pitch = int_to_fix(Voice_mono_noteOff(_ctx.monoin,note));
}

Voice__ctx_type_16 Voice_controlChange_init(){ return Voice__ctx_type_16_init();}

void Voice_controlChange(Voice__ctx_type_16 &_ctx, int control, int value){
   fix16_t value_0_1 = fix_mul(int_to_fix(value),0x204 /* 0.007874 */);
   fix16_t value_m1_1 = fix_add(fix_mul(value_0_1,0x20000 /* 2.000000 */),(0xffff0000 /* -1.000000 */));
   if(control == 30){
      _ctx.wave = value_0_1;
   }
   if(control == 31){
      _ctx.pw = value_0_1;
   }
   if(control == 32){
      _ctx.lfo_amt = value_m1_1;
   }
   if(control == 33){
      _ctx.lfo_rate = value_0_1;
   }
   if(control == 34){
      _ctx.amp_a = value_0_1;
   }
   if(control == 35){
      _ctx.amp_d = value_0_1;
   }
   if(control == 36){
      _ctx.amp_s = value_0_1;
   }
   if(control == 37){
      _ctx.amp_r = value_0_1;
   }
   if(control == 38){
      _ctx.cut = value_0_1;
   }
   if(control == 39){
      _ctx.res = value_0_1;
   }
   if(control == 40){
      _ctx.flt_atm = value_m1_1;
   }
   if(control == 41){
      _ctx.env_a = value_0_1;
   }
   if(control == 42){
      _ctx.env_d = value_0_1;
   }
   if(control == 43){
      _ctx.env_s = value_0_1;
   }
   if(control == 44){
      _ctx.env_r = value_0_1;
   }
}

Voice__ctx_type_16 Voice_default_init(){ return Voice__ctx_type_16_init();}

void Voice_default_(Voice__ctx_type_16 &_ctx){
   _ctx.pw = 0x0 /* 0.000000 */;
   _ctx.pitch = 0x2a0000 /* 42.000000 */;
   _ctx.cut = 0x10000 /* 1.000000 */;
   _ctx.res = 0x0 /* 0.000000 */;
   _ctx.amp_s = 0x10000 /* 1.000000 */;
   _ctx.lfo_amt = 0x8000 /* 0.500000 */;
   _ctx.lfo_rate = 0x0 /* 0.000000 */;
}


------------------------------------------------------------------------------
==============================================================================
Error: vult:3:code:3:monoin.vult.fixed.

File "/Users/leonardo/Development/vult/_build/oUnit-vult-echoplex#00.log", line 1734, characters 1-1:
Error: vult:3:code:3:monoin.vult.fixed (in the log).

Raised at file "src/oUnitAssert.ml", line 45, characters 8-27
Called from file "list.ml", line 110, characters 24-31
Called from file "src/oUnitRunner.ml", line 46, characters 13-26

Generating cpp for file /Users/leonardo/Development/vult/test/../examples/monoin.vult
not equal
differences: 
#include "monoin.h"

Monoin__ctx_type_0 Monoin__ctx_type_0_init(){
   Monoin__ctx_type_0 _ctx;
   _ctx.pre = 0;
   int_init_array(_ctx.notes,4,0);
   _ctx.count = 0;
   return _ctx;
}

Monoin__ctx_type_0 Monoin_mono_noteOn_init(){ return Monoin__ctx_type_0_init();}

int Monoin_mono_noteOn(Monoin__ctx_type_0 &_ctx, int n){
   if(_ctx.count < 4){
      int_set(_ctx.notes,_ctx.count,n);
      _ctx.pre = n;
      if(_ctx.count < 4){
         _ctx.count = (_ctx.count + 1);
      }
   }
   return _ctx.pre;
}

Monoin__ctx_type_0 Monoin_mono_noteOff_init(){ return Monoin__ctx_type_0_init();}

int Monoin_mono_noteOff(Monoin__ctx_type_0 &_ctx, int n){
   uint8_t found = 0;
   int pos;
   int i = 0;
   if(_ctx.count == 0){
      return _ctx.pre;
   }
+    while(((i < 4) && bool_not(found))){
-    while(((i < 4) && (! found))){
      if(int_get(_ctx.notes,i) == n){
         pos = i;
         found = 1;
      }
      i = (i + 1);
   }
   if(found){
      int k = (pos + 1);
      while((k < 4)){
         int_set(_ctx.notes,(k + (-1)),int_get(_ctx.notes,k));
         k = (k + 1);
      }
      if(found && (_ctx.count > 0)){
         _ctx.count = (_ctx.count + (-1));
         _ctx.pre = int_get(_ctx.notes,(_ctx.count + (-1)));
      }
   }
   return _ctx.pre;
}

Monoin__ctx_type_0 Monoin_mono_isGateOn_init(){ return Monoin__ctx_type_0_init();}

uint8_t Monoin_mono_isGateOn(Monoin__ctx_type_0 &_ctx){
   return (_ctx.count > 0);
}


------------------------------------------------------------------------------
==============================================================================
Error: vult:3:code:0:adsr.vult.fixed.

File "/Users/leonardo/Development/vult/_build/oUnit-vult-echoplex#00.log", line 1584, characters 1-1:
Error: vult:3:code:0:adsr.vult.fixed (in the log).

Raised at file "src/oUnitAssert.ml", line 45, characters 8-27
Called from file "list.ml", line 110, characters 24-31
Called from file "src/oUnitRunner.ml", line 46, characters 13-26

Generating cpp for file /Users/leonardo/Development/vult/test/../examples/adsr.vult
not equal
differences: 
#include "adsr.h"

Adsr__ctx_type_0 Adsr__ctx_type_0_init(){
   Adsr__ctx_type_0 _ctx;
   _ctx.count = 0;
   return _ctx;
}

Adsr__ctx_type_0 Adsr_each_init(){ return Adsr__ctx_type_0_init();}

uint8_t Adsr_each(Adsr__ctx_type_0 &_ctx, int n){
   uint8_t ret = (_ctx.count == 0);
   _ctx.count = ((_ctx.count + 1) % n);
   return ret;
}

Adsr__ctx_type_1 Adsr__ctx_type_1_init(){
   Adsr__ctx_type_1 _ctx;
   _ctx.pre_x = 0;
   return _ctx;
}

Adsr__ctx_type_1 Adsr_bchange_init(){ return Adsr__ctx_type_1_init();}

uint8_t Adsr_bchange(Adsr__ctx_type_1 &_ctx, uint8_t x){
   uint8_t v = (_ctx.pre_x != x);
   _ctx.pre_x = x;
   return v;
}

Adsr__ctx_type_2 Adsr__ctx_type_2_init(){
   Adsr__ctx_type_2 _ctx;
   _ctx.pre_x = 0x0 /* 0.000000 */;
   return _ctx;
}

Adsr__ctx_type_2 Adsr_lpfilter_init(){ return Adsr__ctx_type_2_init();}

fix16_t Adsr_lpfilter(Adsr__ctx_type_2 &_ctx, fix16_t x){
   fix16_t ret = fix_mul(fix_add(x,_ctx.pre_x),0x8000 /* 0.500000 */);
   _ctx.pre_x = x;
   return ret;
}

Adsr__ctx_type_3 Adsr__ctx_type_3_init(){
   Adsr__ctx_type_3 _ctx;
   _ctx.value = 0x0 /* 0.000000 */;
   _ctx.sustainLevel = 0x0 /* 0.000000 */;
   _ctx.state = 0;
   _ctx.releaseRate = 0x0 /* 0.000000 */;
   _ctx.decayRate = 0x0 /* 0.000000 */;
   _ctx.attackRate = 0x0 /* 0.000000 */;
   _ctx._inst2 = Adsr__ctx_type_2_init();
   _ctx._inst1 = Adsr__ctx_type_1_init();
   _ctx._inst0 = Adsr__ctx_type_0_init();
   return _ctx;
}

Adsr__ctx_type_3 Adsr_adsr_init(){ return Adsr__ctx_type_3_init();}

fix16_t Adsr_adsr(Adsr__ctx_type_3 &_ctx, uint8_t gate, fix16_t attack, fix16_t decay, fix16_t sustain, fix16_t release){
   int IDLE = 0;
   int ATTACK = 1;
   int DECAY = 2;
   int SUSTAIN = 3;
   int RELEASE = 4;
   if(Adsr_each(_ctx._inst0,32)){
      _ctx.attackRate = fix_mul(0x1 /* 0.000023 */,fix_div(0x10000 /* 1.000000 */,fix_add(attack,0x1999 /* 0.100000 */)));
      fix16_t inv_sustain = fix_add(0x10000 /* 1.000000 */,(- sustain));
      _ctx.decayRate = fix_mul(fix_mul(inv_sustain,0x1 /* 0.000023 */),fix_div(inv_sustain,fix_add(decay,0x1999 /* 0.100000 */)));
      _ctx.releaseRate = fix_mul(0x0 /* 0.000011 */,fix_div(0x8000 /* 0.500000 */,fix_add(release,0x1999 /* 0.100000 */)));
   }
   _ctx.sustainLevel = sustain;
   fix16_t rate = 0x0 /* 0.000000 */;
   uint8_t trig = Adsr_bchange(_ctx._inst1,gate);
   uint8_t up = (trig && gate);
+    uint8_t down = (trig && bool_not(gate));
-    uint8_t down = (trig && (! gate));
   if(_ctx.state == IDLE){
      if(up){
         _ctx.state = ATTACK;
      }
   }
   else
   {
      if(_ctx.state == ATTACK){
         if(_ctx.value >= 0x10000 /* 1.000000 */){
            _ctx.state = DECAY;
         }
         if(down){
            _ctx.state = RELEASE;
         }
         rate = _ctx.attackRate;
      }
      else
      {
         if(_ctx.state == DECAY){
            if(_ctx.value <= _ctx.sustainLevel){
               _ctx.state = SUSTAIN;
            }
            if(down){
               _ctx.state = RELEASE;
            }
            rate = (- _ctx.decayRate);
         }
         else
         {
            if(_ctx.state == SUSTAIN){
               if(down){
                  _ctx.state = RELEASE;
               }
               rate = 0x0 /* 0.000000 */;
               _ctx.value = _ctx.sustainLevel;
            }
            else
            {
               if(_ctx.state == RELEASE){
                  if(_ctx.value <= 0x0 /* 0.000000 */){
                     _ctx.state = IDLE;
                  }
                  if(up){
                     _ctx.state = ATTACK;
                  }
                  rate = (- _ctx.releaseRate);
               }
            }
         }
      }
   }
   _ctx.value = fix_clip(fix_add(Adsr_lpfilter(_ctx._inst2,rate),_ctx.value),0x0 /* 0.000000 */,0x10000 /* 1.000000 */);
   return _ctx.value;
}


------------------------------------------------------------------------------
==============================================================================
Error: vult:2:code:13:delay.vult.float.

File "/Users/leonardo/Development/vult/_build/oUnit-vult-echoplex#00.log", line 1291, characters 1-1:
Error: vult:2:code:13:delay.vult.float (in the log).

Raised at file "src/oUnitAssert.ml", line 45, characters 8-27
Called from file "list.ml", line 110, characters 24-31
Called from file "src/oUnitRunner.ml", line 46, characters 13-26

Generating cpp for file /Users/leonardo/Development/vult/test/../examples/web/delay.vult
not equal
differences: 
#include "delay.h"

Delay__ctx_type_0 Delay__ctx_type_0_init(){
   Delay__ctx_type_0 _ctx;
   _ctx.x = 0.f;
   return _ctx;
}

Delay__ctx_type_0 Delay_smooth_init(){ return Delay__ctx_type_0_init();}

float Delay_smooth(Delay__ctx_type_0 &_ctx, float input){
   _ctx.x = (_ctx.x + ((input + (- _ctx.x)) * 0.005f));
   return _ctx.x;
}

Delay__ctx_type_1 Delay__ctx_type_1_init(){
   Delay__ctx_type_1 _ctx;
   _ctx.pre_x = 0.f;
   return _ctx;
}

Delay__ctx_type_1 Delay_change_init(){ return Delay__ctx_type_1_init();}

uint8_t Delay_change(Delay__ctx_type_1 &_ctx, float x){
   uint8_t v = (_ctx.pre_x != x);
   _ctx.pre_x = x;
   return v;
}

Delay__ctx_type_2 Delay__ctx_type_2_init(){
   Delay__ctx_type_2 _ctx;
   _ctx.pre_x = 0;
   return _ctx;
}

Delay__ctx_type_2 Delay_edge_init(){ return Delay__ctx_type_2_init();}

uint8_t Delay_edge(Delay__ctx_type_2 &_ctx, uint8_t x){
   uint8_t v = ((_ctx.pre_x != x) && (_ctx.pre_x == 0));
   _ctx.pre_x = x;
   return v;
}

Delay__ctx_type_3 Delay__ctx_type_3_init(){
   Delay__ctx_type_3 _ctx;
   _ctx.count = 0;
   return _ctx;
}

Delay__ctx_type_3 Delay_each_init(){ return Delay__ctx_type_3_init();}

uint8_t Delay_each(Delay__ctx_type_3 &_ctx, int n){
   uint8_t ret = (_ctx.count == 0);
   _ctx.count = ((_ctx.count + 1) % n);
   return ret;
}

float Delay_pitchToRate(float d){
   return (0.000185392290249f * expf((0.0577623f * d)));
}

Delay__ctx_type_5 Delay__ctx_type_5_init(){
   Delay__ctx_type_5 _ctx;
   _ctx.rate = 0.f;
   _ctx.phase = 0.f;
   _ctx._inst0 = Delay__ctx_type_1_init();
   return _ctx;
}

Delay__ctx_type_5 Delay_phasor_init(){ return Delay__ctx_type_5_init();}

float Delay_phasor(Delay__ctx_type_5 &_ctx, float pitch, uint8_t reset){
   if(Delay_change(_ctx._inst0,pitch)){
      _ctx.rate = Delay_pitchToRate(pitch);
   }
   _ctx.phase = (reset?0.f:fmodf((_ctx.phase + _ctx.rate),1.f));
   return _ctx.phase;
}

Delay__ctx_type_6 Delay__ctx_type_6_init(){
   Delay__ctx_type_6 _ctx;
   _ctx.phase = 0.f;
   _ctx._inst0 = Delay__ctx_type_2_init();
   return _ctx;
}

Delay__ctx_type_6 Delay_lfo_init(){ return Delay__ctx_type_6_init();}

float Delay_lfo(Delay__ctx_type_6 &_ctx, float f, uint8_t gate){
   float rate = (0.000226757369615f * f);
   if(Delay_edge(_ctx._inst0,gate)){
      _ctx.phase = 0.f;
   }
   _ctx.phase = (_ctx.phase + rate);
   if(_ctx.phase > 1.f){
      _ctx.phase = (_ctx.phase + (-1.f));
   }
   return (sinf((6.28318530718f * _ctx.phase)) + (-0.5f));
}

Delay__ctx_type_7 Delay__ctx_type_7_init(){
   Delay__ctx_type_7 _ctx;
   _ctx.pre_phase1 = 0.f;
   _ctx._inst2 = Delay__ctx_type_5_init();
   _ctx._inst1 = Delay__ctx_type_0_init();
   _ctx._inst0 = Delay__ctx_type_5_init();
   return _ctx;
}

Delay__ctx_type_7 Delay_phd_osc_init(){ return Delay__ctx_type_7_init();}

float Delay_phd_osc(Delay__ctx_type_7 &_ctx, float pitch, float detune){
   float phase1 = Delay_phasor(_ctx._inst0,pitch,0);
   float comp = (1.f + (- phase1));
   uint8_t reset = ((_ctx.pre_phase1 + (- phase1)) > 0.5f);
   _ctx.pre_phase1 = phase1;
   float phase2 = Delay_phasor(_ctx._inst2,(pitch + (Delay_smooth(_ctx._inst1,detune) * 32.f)),reset);
   float sine = sinf((6.28318530718f * phase2));
   return (sine * comp);
}

Delay__ctx_type_8 Delay__ctx_type_8_init(){
   Delay__ctx_type_8 _ctx;
   _ctx.write_pos = 0;
   float_init_array(_ctx.buffer,44100,0.f);
   return _ctx;
}

Delay__ctx_type_8 Delay_delay_init(){ return Delay__ctx_type_8_init();}

float Delay_delay(Delay__ctx_type_8 &_ctx, float x, float time, float feedback){
   time = float_clip(time,0.f,1.f);
   feedback = float_clip(feedback,0.f,1.f);
   float index_r = (int_to_float(44100) * time);
   int index_i = float_to_int(floorf(index_r));
   int delta = (_ctx.write_pos + (- index_i));
   int read_pos = ((delta < 0)?(44100 + delta):delta);
   float decimal = (index_r + (- int_to_float(index_i)));
   float x1 = float_get(_ctx.buffer,read_pos);
   float x2 = float_get(_ctx.buffer,((read_pos + 1) % 44100));
   float ret = (((x2 + (- x1)) * decimal) + x1);
   _ctx.write_pos = ((_ctx.write_pos + 1) % 44100);
   float_set(_ctx.buffer,_ctx.write_pos,float_clip((x + (feedback * ret)),(-1.f),1.f));
   return ret;
}

Delay__ctx_type_9 Delay__ctx_type_9_init(){
   Delay__ctx_type_9 _ctx;
   _ctx.pre = 0;
   int_init_array(_ctx.notes,4,0);
   _ctx.count = 0;
   return _ctx;
}

Delay__ctx_type_9 Delay_mono_noteOn_init(){ return Delay__ctx_type_9_init();}

int Delay_mono_noteOn(Delay__ctx_type_9 &_ctx, int n){
   if(_ctx.count < 4){
      int_set(_ctx.notes,_ctx.count,n);
      _ctx.pre = n;
      if(_ctx.count < 4){
         _ctx.count = (_ctx.count + 1);
      }
   }
   return _ctx.pre;
}

Delay__ctx_type_9 Delay_mono_noteOff_init(){ return Delay__ctx_type_9_init();}

int Delay_mono_noteOff(Delay__ctx_type_9 &_ctx, int n){
   uint8_t found = 0;
   int pos;
   int i = 0;
   if(_ctx.count == 0){
      return _ctx.pre;
   }
+    while(((i < 4) && bool_not(found))){
-    while(((i < 4) && (! found))){
      if(int_get(_ctx.notes,i) == n){
         pos = i;
         found = 1;
      }
      i = (i + 1);
   }
   if(found){
      int k = (pos + 1);
      while((k < 4)){
         int_set(_ctx.notes,(k + (-1)),int_get(_ctx.notes,k));
         k = (k + 1);
      }
      if(found && (_ctx.count > 0)){
         _ctx.count = (_ctx.count + (-1));
         _ctx.pre = int_get(_ctx.notes,(_ctx.count + (-1)));
      }
   }
   return _ctx.pre;
}

Delay__ctx_type_9 Delay_mono_isGateOn_init(){ return Delay__ctx_type_9_init();}

uint8_t Delay_mono_isGateOn(Delay__ctx_type_9 &_ctx){
   return (_ctx.count > 0);
}

Delay__ctx_type_10 Delay__ctx_type_10_init(){
   Delay__ctx_type_10 _ctx;
   _ctx.volume = 0.f;
   _ctx.time = 0.f;
   _ctx.pitch = 0.f;
   _ctx.notes = Delay__ctx_type_9_init();
   _ctx.lfo_rate = 0.f;
   _ctx.lfo_amt = 0.f;
   _ctx.feedback = 0.f;
   _ctx.detune = 0.f;
   _ctx._inst5 = Delay__ctx_type_8_init();
   _ctx._inst4 = Delay__ctx_type_0_init();
   _ctx._inst3 = Delay__ctx_type_0_init();
   _ctx._inst2 = Delay__ctx_type_0_init();
   _ctx._inst1 = Delay__ctx_type_7_init();
   _ctx._inst0 = Delay__ctx_type_6_init();
   return _ctx;
}

Delay__ctx_type_10 Delay_process_init(){ return Delay__ctx_type_10_init();}

float Delay_process(Delay__ctx_type_10 &_ctx, float input){
   uint8_t gate = Delay_mono_isGateOn(_ctx.notes);
   float lfo_val = (Delay_lfo(_ctx._inst0,_ctx.lfo_rate,gate) * _ctx.lfo_amt);
   float o1 = Delay_phd_osc(_ctx._inst1,_ctx.pitch,(_ctx.detune + lfo_val));
   float amp = Delay_smooth(_ctx._inst2,(gate?1.f:0.f));
   float osc_out = (o1 * amp);
   float delay_out = Delay_delay(_ctx._inst5,osc_out,Delay_smooth(_ctx._inst3,_ctx.time),Delay_smooth(_ctx._inst4,_ctx.feedback));
   return (_ctx.volume * (osc_out + delay_out) * 0.5f);
}

Delay__ctx_type_10 Delay_noteOn_init(){ return Delay__ctx_type_10_init();}

void Delay_noteOn(Delay__ctx_type_10 &_ctx, int note, int velocity){
   _ctx.pitch = int_to_float(Delay_mono_noteOn(_ctx.notes,note));
}

Delay__ctx_type_10 Delay_noteOff_init(){ return Delay__ctx_type_10_init();}

void Delay_noteOff(Delay__ctx_type_10 &_ctx, int note){
   _ctx.pitch = int_to_float(Delay_mono_noteOff(_ctx.notes,note));
}

Delay__ctx_type_10 Delay_controlChange_init(){ return Delay__ctx_type_10_init();}

void Delay_controlChange(Delay__ctx_type_10 &_ctx, int control, float value){
   if(control == 30){
      _ctx.volume = (value * 0.00787401574803f);
   }
   if(control == 31){
      _ctx.detune = (value * 0.00787401574803f);
   }
   if(control == 32){
      _ctx.lfo_rate = (value * 0.00787401574803f);
   }
   if(control == 33){
      _ctx.lfo_amt = (2.f * ((value * 0.00787401574803f) + (-0.5f)));
   }
   if(control == 34){
      _ctx.time = (value * 0.00787401574803f);
   }
   if(control == 35){
      _ctx.feedback = (value * 0.00787401574803f);
   }
}

Delay__ctx_type_10 Delay_default_init(){ return Delay__ctx_type_10_init();}

void Delay_default_(Delay__ctx_type_10 &_ctx){
   _ctx.volume = 0.f;
   _ctx.pitch = 45.f;
   _ctx.detune = 0.8f;
   _ctx.lfo_rate = 0.07f;
   _ctx.lfo_amt = (-0.8f);
   _ctx.time = 0.5f;
   _ctx.feedback = 0.5f;
}


------------------------------------------------------------------------------
==============================================================================
Error: vult:2:code:10:synth2.vult.float.

File "/Users/leonardo/Development/vult/_build/oUnit-vult-echoplex#00.log", line 877, characters 1-1:
Error: vult:2:code:10:synth2.vult.float (in the log).

Raised at file "src/oUnitAssert.ml", line 45, characters 8-27
Called from file "list.ml", line 110, characters 24-31
Called from file "src/oUnitRunner.ml", line 46, characters 13-26

Generating cpp for file /Users/leonardo/Development/vult/test/../examples/web/synth2.vult
not equal
differences: 
#include "synth2.h"

float Synth2_minFixed(){
   return 1.52588e-05f;
}

Synth2__ctx_type_1 Synth2__ctx_type_1_init(){
   Synth2__ctx_type_1 _ctx;
   _ctx.pre_x = 0.f;
   return _ctx;
}

Synth2__ctx_type_1 Synth2_change_init(){ return Synth2__ctx_type_1_init();}

uint8_t Synth2_change(Synth2__ctx_type_1 &_ctx, float x){
   uint8_t v = (_ctx.pre_x != x);
   _ctx.pre_x = x;
   return v;
}

Synth2__ctx_type_2 Synth2__ctx_type_2_init(){
   Synth2__ctx_type_2 _ctx;
   _ctx.pre_x = 0;
   return _ctx;
}

Synth2__ctx_type_2 Synth2_bchange_init(){ return Synth2__ctx_type_2_init();}

uint8_t Synth2_bchange(Synth2__ctx_type_2 &_ctx, uint8_t x){
   uint8_t v = (_ctx.pre_x != x);
   _ctx.pre_x = x;
   return v;
}

Synth2__ctx_type_3 Synth2__ctx_type_3_init(){
   Synth2__ctx_type_3 _ctx;
   _ctx.pre_x = 0;
   return _ctx;
}

Synth2__ctx_type_3 Synth2_edge_init(){ return Synth2__ctx_type_3_init();}

uint8_t Synth2_edge(Synth2__ctx_type_3 &_ctx, uint8_t x){
   uint8_t v = ((_ctx.pre_x != x) && (_ctx.pre_x == 1));
   _ctx.pre_x = x;
   return v;
}

Synth2__ctx_type_4 Synth2__ctx_type_4_init(){
   Synth2__ctx_type_4 _ctx;
   _ctx.count = 0;
   return _ctx;
}

Synth2__ctx_type_4 Synth2_each_init(){ return Synth2__ctx_type_4_init();}

uint8_t Synth2_each(Synth2__ctx_type_4 &_ctx, int n){
   uint8_t ret = (_ctx.count == 0);
   _ctx.count = ((_ctx.count + 1) % n);
   return ret;
}

uint8_t Synth2_near_zero(float x){
   return (fabsf(x) < 0.02f);
}

Synth2__ctx_type_6 Synth2__ctx_type_6_init(){
   Synth2__ctx_type_6 _ctx;
   _ctx.y1 = 0.f;
   _ctx.x1 = 0.f;
   return _ctx;
}

Synth2__ctx_type_6 Synth2_dcblock_init(){ return Synth2__ctx_type_6_init();}

float Synth2_dcblock(Synth2__ctx_type_6 &_ctx, float x0){
   float y0 = (x0 + (- _ctx.x1) + (_ctx.y1 * 0.995f));
   _ctx.x1 = x0;
   _ctx.y1 = y0;
   return y0;
}

Synth2__ctx_type_7 Synth2__ctx_type_7_init(){
   Synth2__ctx_type_7 _ctx;
   _ctx.x = 0.f;
   return _ctx;
}

Synth2__ctx_type_7 Synth2_smooth_init(){ return Synth2__ctx_type_7_init();}

float Synth2_smooth(Synth2__ctx_type_7 &_ctx, float input){
   _ctx.x = (_ctx.x + ((input + (- _ctx.x)) * 0.005f));
   return _ctx.x;
}

Synth2__ctx_type_8 Synth2__ctx_type_8_init(){
   Synth2__ctx_type_8 _ctx;
   _ctx.pre_x = 0.f;
   return _ctx;
}

Synth2__ctx_type_8 Synth2_lpfilter_init(){ return Synth2__ctx_type_8_init();}

float Synth2_lpfilter(Synth2__ctx_type_8 &_ctx, float x){
   float ret = ((x + _ctx.pre_x) * 0.5f);
   _ctx.pre_x = x;
   return ret;
}

float Synth2_pitchToRate(float d){
   return (0.000185392290249f * expf((0.0577623f * d)));
}

float Synth2_pulse_train(float m, float phase){
   float pi_phase = (phase * 3.14159265359f);
   float denominator1 = sinf(pi_phase);
   float tmp1 = 0.f;
   if(Synth2_near_zero(denominator1)){
      tmp1 = 1.f;
   }
   else
   {
      tmp1 = sinf((m * pi_phase));
      tmp1 = (tmp1 / (m * denominator1));
   }
   return tmp1;
}

Synth2__ctx_type_11 Synth2__ctx_type_11_init(){
   Synth2__ctx_type_11 _ctx;
   _ctx.state_triang = 0.f;
   _ctx.state_saw = 0.f;
   _ctx.state_pulse = 0.f;
   _ctx.rate = 0.f;
   _ctx.phase = 0.f;
   _ctx.output = 0.f;
   _ctx.m = 0.f;
   _ctx._inst1 = Synth2__ctx_type_6_init();
   _ctx._inst0 = Synth2__ctx_type_1_init();
   return _ctx;
}

Synth2__ctx_type_11 Synth2_osc_init(){ return Synth2__ctx_type_11_init();}

float Synth2_osc(Synth2__ctx_type_11 &_ctx, float pitch, float pw, float wave){
   float fixed_pitch = 0.f;
   if(wave < (0.666666666667f)){
      fixed_pitch = pitch;
   }
   else
   {
      fixed_pitch = (pitch + 12.f);
   }
   if(Synth2_change(_ctx._inst0,fixed_pitch)){
      _ctx.rate = Synth2_pitchToRate(fixed_pitch);
      float p = (1.f / _ctx.rate);
      float maxHarmonics = floorf((p * 0.5f));
      _ctx.m = ((2.f * maxHarmonics) + 1.f);
   }
   float shift05 = (0.5f + (pw * 0.49f));
   float shift = (_ctx.phase + shift05);
   if(shift > 1.f){
      shift = (shift + (-1.f));
   }
   float tmp1 = Synth2_pulse_train(_ctx.m,_ctx.phase);
   float tmp2 = Synth2_pulse_train(_ctx.m,shift);
   _ctx.phase = (_ctx.phase + _ctx.rate);
   if(_ctx.phase > 1.f){
      _ctx.phase = (_ctx.phase + (-1.f));
   }
   _ctx.state_pulse = float_clip(((_ctx.state_pulse * 0.9995f) + tmp1 + (- tmp2)),(-1.f),1.f);
   _ctx.state_saw = float_clip(((_ctx.state_saw * 0.9995f) + (((tmp1 + tmp2 + ((-2.f) * _ctx.rate)) / shift05) * 0.5f)),(-1.f),1.f);
   _ctx.state_triang = float_clip(((_ctx.state_triang * 0.9995f) + (2.f * _ctx.state_pulse * _ctx.rate)),(-1.f),1.f);
   if(wave < (0.333333333333f)){
      _ctx.output = _ctx.state_pulse;
   }
   else
   {
      if(wave < (0.666666666667f)){
         _ctx.output = (2.f * _ctx.state_saw);
      }
      else
      {
         _ctx.output = (2.f * _ctx.state_triang * (1.f + pw));
      }
   }
   _ctx.output = Synth2_dcblock(_ctx._inst1,_ctx.output);
   return float_clip((_ctx.output * 0.25f),(-1.f),1.f);
}

Synth2__ctx_type_12 Synth2__ctx_type_12_init(){
   Synth2__ctx_type_12 _ctx;
   _ctx.dlow = 0.f;
   _ctx.dband = 0.f;
   return _ctx;
}

Synth2__ctx_type_12 Synth2_svf_step_init(){ return Synth2__ctx_type_12_init();}

float Synth2_svf_step(Synth2__ctx_type_12 &_ctx, float input, float g, float q, int sel){
   float low = (_ctx.dlow + (g * _ctx.dband));
   float high = (input + (- low) + (- (q * _ctx.dband)));
   float band = ((g * high) + _ctx.dband);
   float notch = (high + low);
   _ctx.dband = float_clip(band,(-1.f),1.f);
   _ctx.dlow = float_clip(low,(-1.f),1.f);
   float output = ((sel == 0)?low:((sel == 1)?high:((sel == 2)?band:notch)));
   return output;
}

Synth2__ctx_type_13 Synth2__ctx_type_13_init(){
   Synth2__ctx_type_13 _ctx;
   _ctx.step = Synth2__ctx_type_12_init();
   _ctx.g = 0.f;
   _ctx._inst0 = Synth2__ctx_type_1_init();
   return _ctx;
}

Synth2__ctx_type_13 Synth2_svf_init(){ return Synth2__ctx_type_13_init();}

float Synth2_svf(Synth2__ctx_type_13 &_ctx, float input, float fc, float q, int sel){
   fc = float_clip(fc,0.f,1.f);
   q = float_clip(q,0.f,1.f);
   float fix_q = (2.f * (1.f + (- q)));
   if(Synth2_change(_ctx._inst0,fc)){
      _ctx.g = (fc * 0.5f);
   }
   float x1 = Synth2_svf_step(_ctx.step,input,_ctx.g,fix_q,sel);
   float x2 = Synth2_svf_step(_ctx.step,input,_ctx.g,fix_q,sel);
   return ((x1 + x2) * 0.5f);
}

Synth2__ctx_type_14 Synth2__ctx_type_14_init(){
   Synth2__ctx_type_14 _ctx;
   _ctx.phase = 0.f;
   _ctx._inst1 = Synth2__ctx_type_4_init();
   _ctx._inst0 = Synth2__ctx_type_3_init();
   return _ctx;
}

Synth2__ctx_type_14 Synth2_lfo_init(){ return Synth2__ctx_type_14_init();}

float Synth2_lfo(Synth2__ctx_type_14 &_ctx, float f, uint8_t gate){
   float rate = ((f * 100.f * Synth2_minFixed()) + Synth2_minFixed());
   if(Synth2_edge(_ctx._inst0,gate)){
      _ctx.phase = 0.f;
   }
   if(Synth2_each(_ctx._inst1,4)){
      _ctx.phase = (_ctx.phase + rate);
   }
   if(_ctx.phase > 1.f){
      _ctx.phase = (_ctx.phase + (-1.f));
   }
   return (sinf((6.28318530718f * _ctx.phase)) + 0.5f);
}

Synth2__ctx_type_15 Synth2__ctx_type_15_init(){
   Synth2__ctx_type_15 _ctx;
   _ctx.pre = 0;
   int_init_array(_ctx.notes,4,0);
   _ctx.count = 0;
   return _ctx;
}

Synth2__ctx_type_15 Synth2_mono_noteOn_init(){ return Synth2__ctx_type_15_init();}

int Synth2_mono_noteOn(Synth2__ctx_type_15 &_ctx, int n){
   if(_ctx.count < 4){
      int_set(_ctx.notes,_ctx.count,n);
      _ctx.pre = n;
      if(_ctx.count < 4){
         _ctx.count = (_ctx.count + 1);
      }
   }
   return _ctx.pre;
}

Synth2__ctx_type_15 Synth2_mono_noteOff_init(){ return Synth2__ctx_type_15_init();}

int Synth2_mono_noteOff(Synth2__ctx_type_15 &_ctx, int n){
   uint8_t found = 0;
   int pos;
   int i = 0;
   if(_ctx.count == 0){
      return _ctx.pre;
   }
+    while(((i < 4) && bool_not(found))){
-    while(((i < 4) && (! found))){
      if(int_get(_ctx.notes,i) == n){
         pos = i;
         found = 1;
      }
      i = (i + 1);
   }
   if(found){
      int k = (pos + 1);
      while((k < 4)){
         int_set(_ctx.notes,(k + (-1)),int_get(_ctx.notes,k));
         k = (k + 1);
      }
      if(found && (_ctx.count > 0)){
         _ctx.count = (_ctx.count + (-1));
         _ctx.pre = int_get(_ctx.notes,(_ctx.count + (-1)));
      }
   }
   return _ctx.pre;
}

Synth2__ctx_type_15 Synth2_mono_isGateOn_init(){ return Synth2__ctx_type_15_init();}

uint8_t Synth2_mono_isGateOn(Synth2__ctx_type_15 &_ctx){
   return (_ctx.count > 0);
}

Synth2__ctx_type_16 Synth2__ctx_type_16_init(){
   Synth2__ctx_type_16 _ctx;
   _ctx.wave = 0.f;
   _ctx.volume = 0.f;
   _ctx.res = 0.f;
   _ctx.pw = 0.f;
   _ctx.pitch = 0.f;
   _ctx.monoin = Synth2__ctx_type_15_init();
   _ctx.lfo_rate = 0.f;
   _ctx.lfo_amt = 0.f;
   _ctx.cut = 0.f;
   _ctx.amp_s = 0.f;
   _ctx._inst3 = Synth2__ctx_type_13_init();
   _ctx._inst2 = Synth2__ctx_type_7_init();
   _ctx._inst1 = Synth2__ctx_type_11_init();
   _ctx._inst0 = Synth2__ctx_type_14_init();
   Synth2_default_(_ctx);
   return _ctx;
}

Synth2__ctx_type_16 Synth2_process_init(){ return Synth2__ctx_type_16_init();}

float Synth2_process(Synth2__ctx_type_16 &_ctx, float i){
   uint8_t gate = Synth2_mono_isGateOn(_ctx.monoin);
   float lfo1 = (Synth2_lfo(_ctx._inst0,_ctx.lfo_rate,gate) * _ctx.lfo_amt);
   float o1 = Synth2_osc(_ctx._inst1,_ctx.pitch,(_ctx.pw + lfo1),_ctx.wave);
   float amp_env = Synth2_smooth(_ctx._inst2,(gate?1.f:0.f));
   float output = (amp_env * Synth2_svf(_ctx._inst3,o1,_ctx.cut,_ctx.res,0));
   return (_ctx.volume * output);
}

Synth2__ctx_type_16 Synth2_noteOn_init(){ return Synth2__ctx_type_16_init();}

void Synth2_noteOn(Synth2__ctx_type_16 &_ctx, int note, int velocity){
   _ctx.pitch = int_to_float(Synth2_mono_noteOn(_ctx.monoin,note));
}

Synth2__ctx_type_16 Synth2_noteOff_init(){ return Synth2__ctx_type_16_init();}

void Synth2_noteOff(Synth2__ctx_type_16 &_ctx, int note){
   _ctx.pitch = int_to_float(Synth2_mono_noteOff(_ctx.monoin,note));
}

Synth2__ctx_type_16 Synth2_controlChange_init(){ return Synth2__ctx_type_16_init();}

void Synth2_controlChange(Synth2__ctx_type_16 &_ctx, int control, int value){
   float value_0_1 = (int_to_float(value) * 0.00787401574803f);
   float value_m1_1 = ((value_0_1 * 2.f) + (-1.f));
   if(control == 30){
      _ctx.volume = value_0_1;
   }
   if(control == 31){
      _ctx.wave = value_0_1;
   }
   if(control == 32){
      _ctx.pw = value_0_1;
   }
   if(control == 33){
      _ctx.lfo_rate = value_0_1;
   }
   if(control == 34){
      _ctx.lfo_amt = value_m1_1;
   }
   if(control == 35){
      _ctx.cut = value_0_1;
   }
   if(control == 36){
      _ctx.res = value_0_1;
   }
}

Synth2__ctx_type_16 Synth2_default_init(){ return Synth2__ctx_type_16_init();}

void Synth2_default_(Synth2__ctx_type_16 &_ctx){
   _ctx.pw = 0.f;
   _ctx.pitch = 42.f;
   _ctx.cut = 1.f;
   _ctx.res = 0.f;
   _ctx.amp_s = 1.f;
   _ctx.lfo_amt = 0.5f;
   _ctx.lfo_rate = 0.f;
}


------------------------------------------------------------------------------
==============================================================================
Error: vult:2:code:6:voice.vult.float.

File "/Users/leonardo/Development/vult/_build/oUnit-vult-echoplex#00.log", line 302, characters 1-1:
Error: vult:2:code:6:voice.vult.float (in the log).

Raised at file "src/oUnitAssert.ml", line 45, characters 8-27
Called from file "list.ml", line 110, characters 24-31
Called from file "src/oUnitRunner.ml", line 46, characters 13-26

Generating cpp for file /Users/leonardo/Development/vult/test/../examples/voice.vult
not equal
differences: 
#include "voice.h"

float Voice_minFixed(){
   return 1.52588e-05f;
}

Voice__ctx_type_1 Voice__ctx_type_1_init(){
   Voice__ctx_type_1 _ctx;
   _ctx.pre_x = 0.f;
   return _ctx;
}

Voice__ctx_type_1 Voice_change_init(){ return Voice__ctx_type_1_init();}

uint8_t Voice_change(Voice__ctx_type_1 &_ctx, float x){
   uint8_t v = (_ctx.pre_x != x);
   _ctx.pre_x = x;
   return v;
}

Voice__ctx_type_2 Voice__ctx_type_2_init(){
   Voice__ctx_type_2 _ctx;
   _ctx.pre_x = 0;
   return _ctx;
}

Voice__ctx_type_2 Voice_bchange_init(){ return Voice__ctx_type_2_init();}

uint8_t Voice_bchange(Voice__ctx_type_2 &_ctx, uint8_t x){
   uint8_t v = (_ctx.pre_x != x);
   _ctx.pre_x = x;
   return v;
}

Voice__ctx_type_3 Voice__ctx_type_3_init(){
   Voice__ctx_type_3 _ctx;
   _ctx.pre_x = 0;
   return _ctx;
}

Voice__ctx_type_3 Voice_edge_init(){ return Voice__ctx_type_3_init();}

uint8_t Voice_edge(Voice__ctx_type_3 &_ctx, uint8_t x){
   uint8_t v = ((_ctx.pre_x != x) && (_ctx.pre_x == 1));
   _ctx.pre_x = x;
   return v;
}

Voice__ctx_type_4 Voice__ctx_type_4_init(){
   Voice__ctx_type_4 _ctx;
   _ctx.count = 0;
   return _ctx;
}

Voice__ctx_type_4 Voice_each_init(){ return Voice__ctx_type_4_init();}

uint8_t Voice_each(Voice__ctx_type_4 &_ctx, int n){
   uint8_t ret = (_ctx.count == 0);
   _ctx.count = ((_ctx.count + 1) % n);
   return ret;
}

uint8_t Voice_near_zero(float x){
   return (fabsf(x) < 0.02f);
}

Voice__ctx_type_6 Voice__ctx_type_6_init(){
   Voice__ctx_type_6 _ctx;
   _ctx.y1 = 0.f;
   _ctx.x1 = 0.f;
   return _ctx;
}

Voice__ctx_type_6 Voice_dcblock_init(){ return Voice__ctx_type_6_init();}

float Voice_dcblock(Voice__ctx_type_6 &_ctx, float x0){
   float y0 = (x0 + (- _ctx.x1) + (_ctx.y1 * 0.995f));
   _ctx.x1 = x0;
   _ctx.y1 = y0;
   return y0;
}

Voice__ctx_type_7 Voice__ctx_type_7_init(){
   Voice__ctx_type_7 _ctx;
   _ctx.pre_x = 0.f;
   return _ctx;
}

Voice__ctx_type_7 Voice_lpfilter_init(){ return Voice__ctx_type_7_init();}

float Voice_lpfilter(Voice__ctx_type_7 &_ctx, float x){
   float ret = ((x + _ctx.pre_x) * 0.5f);
   _ctx.pre_x = x;
   return ret;
}

float Voice_pitchToRate(float d){
   return (0.000185392290249f * expf((0.0577623f * d)));
}

float Voice_pulse_train(float m, float phase){
   float pi_phase = (phase * 3.14159265359f);
   float denominator1 = sinf(pi_phase);
   float tmp1 = 0.f;
   if(Voice_near_zero(denominator1)){
      tmp1 = 1.f;
   }
   else
   {
      tmp1 = sinf((m * pi_phase));
      tmp1 = (tmp1 / (m * denominator1));
   }
   return tmp1;
}

Voice__ctx_type_10 Voice__ctx_type_10_init(){
   Voice__ctx_type_10 _ctx;
   _ctx.state_triang = 0.f;
   _ctx.state_saw = 0.f;
   _ctx.state_pulse = 0.f;
   _ctx.rate = 0.f;
   _ctx.phase = 0.f;
   _ctx.output = 0.f;
   _ctx.m = 0.f;
   _ctx._inst1 = Voice__ctx_type_6_init();
   _ctx._inst0 = Voice__ctx_type_1_init();
   return _ctx;
}

Voice__ctx_type_10 Voice_osc_init(){ return Voice__ctx_type_10_init();}

float Voice_osc(Voice__ctx_type_10 &_ctx, float pitch, float pw, float wave){
   float fixed_pitch = 0.f;
   if(wave < (0.666666666667f)){
      fixed_pitch = pitch;
   }
   else
   {
      fixed_pitch = (pitch + 12.f);
   }
   if(Voice_change(_ctx._inst0,fixed_pitch)){
      _ctx.rate = Voice_pitchToRate(fixed_pitch);
      float p = (1.f / _ctx.rate);
      float maxHarmonics = floorf((p * 0.5f));
      _ctx.m = ((2.f * maxHarmonics) + 1.f);
   }
   float shift05 = (0.5f + (pw * 0.49f));
   float shift = (_ctx.phase + shift05);
   if(shift > 1.f){
      shift = (shift + (-1.f));
   }
   float tmp1 = Voice_pulse_train(_ctx.m,_ctx.phase);
   float tmp2 = Voice_pulse_train(_ctx.m,shift);
   _ctx.phase = (_ctx.phase + _ctx.rate);
   if(_ctx.phase > 1.f){
      _ctx.phase = (_ctx.phase + (-1.f));
   }
   _ctx.state_pulse = float_clip(((_ctx.state_pulse * 0.9995f) + tmp1 + (- tmp2)),(-1.f),1.f);
   _ctx.state_saw = float_clip(((_ctx.state_saw * 0.9995f) + (((tmp1 + tmp2 + ((-2.f) * _ctx.rate)) / shift05) * 0.5f)),(-1.f),1.f);
   _ctx.state_triang = float_clip(((_ctx.state_triang * 0.9995f) + (2.f * _ctx.state_pulse * _ctx.rate)),(-1.f),1.f);
   if(wave < (0.333333333333f)){
      _ctx.output = _ctx.state_pulse;
   }
   else
   {
      if(wave < (0.666666666667f)){
         _ctx.output = (2.f * _ctx.state_saw);
      }
      else
      {
         _ctx.output = (2.f * _ctx.state_triang * (1.f + pw));
      }
   }
   _ctx.output = Voice_dcblock(_ctx._inst1,_ctx.output);
   return float_clip((_ctx.output * 0.25f),(-1.f),1.f);
}

Voice__ctx_type_11 Voice__ctx_type_11_init(){
   Voice__ctx_type_11 _ctx;
   _ctx.dlow = 0.f;
   _ctx.dband = 0.f;
   return _ctx;
}

Voice__ctx_type_11 Voice_svf_step_init(){ return Voice__ctx_type_11_init();}

float Voice_svf_step(Voice__ctx_type_11 &_ctx, float input, float g, float q, int sel){
   float low = (_ctx.dlow + (g * _ctx.dband));
   float high = (input + (- low) + (- (q * _ctx.dband)));
   float band = ((g * high) + _ctx.dband);
   float notch = (high + low);
   _ctx.dband = float_clip(band,(-1.f),1.f);
   _ctx.dlow = float_clip(low,(-1.f),1.f);
   float output = ((sel == 0)?low:((sel == 1)?high:((sel == 2)?band:notch)));
   return output;
}

Voice__ctx_type_12 Voice__ctx_type_12_init(){
   Voice__ctx_type_12 _ctx;
   _ctx.step = Voice__ctx_type_11_init();
   _ctx.g = 0.f;
   _ctx._inst0 = Voice__ctx_type_1_init();
   return _ctx;
}

Voice__ctx_type_12 Voice_svf_init(){ return Voice__ctx_type_12_init();}

float Voice_svf(Voice__ctx_type_12 &_ctx, float input, float fc, float q, int sel){
   fc = float_clip(fc,0.f,1.f);
   q = float_clip(q,0.f,1.f);
   float fix_q = (2.f * (1.f + (- q)));
   if(Voice_change(_ctx._inst0,fc)){
      _ctx.g = (fc * 0.5f);
   }
   float x1 = Voice_svf_step(_ctx.step,input,_ctx.g,fix_q,sel);
   float x2 = Voice_svf_step(_ctx.step,input,_ctx.g,fix_q,sel);
   return ((x1 + x2) * 0.5f);
}

Voice__ctx_type_13 Voice__ctx_type_13_init(){
   Voice__ctx_type_13 _ctx;
   _ctx.value = 0.f;
   _ctx.sustainLevel = 0.f;
   _ctx.state = 0;
   _ctx.releaseRate = 0.f;
   _ctx.decayRate = 0.f;
   _ctx.attackRate = 0.f;
   _ctx._inst2 = Voice__ctx_type_7_init();
   _ctx._inst1 = Voice__ctx_type_2_init();
   _ctx._inst0 = Voice__ctx_type_4_init();
   return _ctx;
}

Voice__ctx_type_13 Voice_adsr_init(){ return Voice__ctx_type_13_init();}

float Voice_adsr(Voice__ctx_type_13 &_ctx, uint8_t gate, float attack, float decay, float sustain, float release){
   int IDLE = 0;
   int ATTACK = 1;
   int DECAY = 2;
   int SUSTAIN = 3;
   int RELEASE = 4;
   if(Voice_each(_ctx._inst0,32)){
      _ctx.attackRate = (2.26757369615e-05f * (1.f / (attack + 0.1f)));
      float inv_sustain = (1.f + (- sustain));
      _ctx.decayRate = (inv_sustain * 2.26757369615e-05f * (inv_sustain / (decay + 0.1f)));
      _ctx.releaseRate = (1.13378684807e-05f * (0.5f / (release + 0.1f)));
   }
   _ctx.sustainLevel = sustain;
   float rate = 0.f;
   uint8_t trig = Voice_bchange(_ctx._inst1,gate);
   uint8_t up = (trig && gate);
+    uint8_t down = (trig && bool_not(gate));
-    uint8_t down = (trig && (! gate));
   if(_ctx.state == IDLE){
      if(up){
         _ctx.state = ATTACK;
      }
   }
   else
   {
      if(_ctx.state == ATTACK){
         if(_ctx.value >= 1.f){
            _ctx.state = DECAY;
         }
         if(down){
            _ctx.state = RELEASE;
         }
         rate = _ctx.attackRate;
      }
      else
      {
         if(_ctx.state == DECAY){
            if(_ctx.value <= _ctx.sustainLevel){
               _ctx.state = SUSTAIN;
            }
            if(down){
               _ctx.state = RELEASE;
            }
            rate = (- _ctx.decayRate);
         }
         else
         {
            if(_ctx.state == SUSTAIN){
               if(down){
                  _ctx.state = RELEASE;
               }
               rate = 0.f;
               _ctx.value = _ctx.sustainLevel;
            }
            else
            {
               if(_ctx.state == RELEASE){
                  if(_ctx.value <= 0.f){
                     _ctx.state = IDLE;
                  }
                  if(up){
                     _ctx.state = ATTACK;
                  }
                  rate = (- _ctx.releaseRate);
               }
            }
         }
      }
   }
   _ctx.value = float_clip((Voice_lpfilter(_ctx._inst2,rate) + _ctx.value),0.f,1.f);
   return _ctx.value;
}

Voice__ctx_type_14 Voice__ctx_type_14_init(){
   Voice__ctx_type_14 _ctx;
   _ctx.phase = 0.f;
   _ctx._inst1 = Voice__ctx_type_4_init();
   _ctx._inst0 = Voice__ctx_type_3_init();
   return _ctx;
}

Voice__ctx_type_14 Voice_lfo_init(){ return Voice__ctx_type_14_init();}

float Voice_lfo(Voice__ctx_type_14 &_ctx, float f, uint8_t gate){
   float rate = ((f * 100.f * Voice_minFixed()) + Voice_minFixed());
   if(Voice_edge(_ctx._inst0,gate)){
      _ctx.phase = 0.f;
   }
   if(Voice_each(_ctx._inst1,4)){
      _ctx.phase = (_ctx.phase + rate);
   }
   if(_ctx.phase > 1.f){
      _ctx.phase = (_ctx.phase + (-1.f));
   }
   return (sinf((6.28318530718f * _ctx.phase)) + 0.5f);
}

Voice__ctx_type_15 Voice__ctx_type_15_init(){
   Voice__ctx_type_15 _ctx;
   _ctx.pre = 0;
   _ctx.n4 = 0;
   _ctx.n3 = 0;
   _ctx.n2 = 0;
   _ctx.n1 = 0;
   _ctx.count = 0;
   return _ctx;
}

Voice__ctx_type_15 Voice_mono_noteOn_init(){ return Voice__ctx_type_15_init();}

int Voice_mono_noteOn(Voice__ctx_type_15 &_ctx, int n){
   if(_ctx.count == 0){
      _ctx.n1 = n;
      _ctx.pre = n;
   }
   else
   {
      if(_ctx.count == 1){
         _ctx.n2 = n;
         _ctx.pre = n;
      }
      else
      {
         if(_ctx.count == 2){
            _ctx.n3 = n;
            _ctx.pre = n;
         }
         else
         {
            if(_ctx.count == 3){
               _ctx.n4 = n;
            }
         }
      }
   }
   _ctx.pre = n;
   if(_ctx.count <= 4){
      _ctx.count = (_ctx.count + 1);
   }
   return _ctx.pre;
}

Voice__ctx_type_15 Voice_mono_noteOff_init(){ return Voice__ctx_type_15_init();}

int Voice_mono_noteOff(Voice__ctx_type_15 &_ctx, int n){
   uint8_t found = 0;
   if(n == _ctx.n1){
      int _tmp_0 = _ctx.n2;
      int _tmp_1 = _ctx.n3;
      int _tmp_2 = _ctx.n4;
      _ctx.n1 = _tmp_0;
      _ctx.n2 = _tmp_1;
      _ctx.n3 = _tmp_2;
      found = 1;
   }
   else
   {
      if(n == _ctx.n2){
         int _tmp_0 = _ctx.n3;
         int _tmp_1 = _ctx.n4;
         _ctx.n2 = _tmp_0;
         _ctx.n3 = _tmp_1;
         found = 1;
      }
      else
      {
         if(n == _ctx.n3){
            _ctx.n3 = _ctx.n4;
            found = 1;
         }
         else
         {
            if(n == _ctx.n4){
               found = 1;
            }
         }
      }
   }
   if(found && (_ctx.count > 0)){
      _ctx.count = (_ctx.count + (-1));
   }
   if(_ctx.count == 1){
      _ctx.pre = _ctx.n1;
   }
   if(_ctx.count == 2){
      _ctx.pre = _ctx.n2;
   }
   if(_ctx.count == 3){
      _ctx.pre = _ctx.n3;
   }
   if(_ctx.count == 4){
      _ctx.pre = _ctx.n4;
   }
   return _ctx.pre;
}

Voice__ctx_type_15 Voice_mono_isGateOn_init(){ return Voice__ctx_type_15_init();}

uint8_t Voice_mono_isGateOn(Voice__ctx_type_15 &_ctx){
   return (_ctx.count > 0);
}

Voice__ctx_type_16 Voice__ctx_type_16_init(){
   Voice__ctx_type_16 _ctx;
   _ctx.wave = 0.f;
   _ctx.res = 0.f;
   _ctx.pw = 0.f;
   _ctx.pitch = 0.f;
   _ctx.monoin = Voice__ctx_type_15_init();
   _ctx.lfo_rate = 0.f;
   _ctx.lfo_amt = 0.f;
   _ctx.flt_atm = 0.f;
   _ctx.env_s = 0.f;
   _ctx.env_r = 0.f;
   _ctx.env_d = 0.f;
   _ctx.env_a = 0.f;
   _ctx.end_r = 0.f;
   _ctx.cut = 0.f;
   _ctx.amp_s = 0.f;
   _ctx.amp_r = 0.f;
   _ctx.amp_d = 0.f;
   _ctx.amp_a = 0.f;
   _ctx._inst4 = Voice__ctx_type_12_init();
   _ctx._inst3 = Voice__ctx_type_13_init();
   _ctx._inst2 = Voice__ctx_type_13_init();
   _ctx._inst1 = Voice__ctx_type_10_init();
   _ctx._inst0 = Voice__ctx_type_14_init();
   Voice_default_(_ctx);
   return _ctx;
}

Voice__ctx_type_16 Voice_process_init(){ return Voice__ctx_type_16_init();}

float Voice_process(Voice__ctx_type_16 &_ctx, float i){
   uint8_t gate = Voice_mono_isGateOn(_ctx.monoin);
   float lfo1 = (Voice_lfo(_ctx._inst0,_ctx.lfo_rate,gate) * _ctx.lfo_amt);
   float x = Voice_osc(_ctx._inst1,_ctx.pitch,(_ctx.pw + lfo1),_ctx.wave);
   float amp_env = Voice_adsr(_ctx._inst2,gate,_ctx.amp_a,_ctx.amp_d,_ctx.amp_s,_ctx.amp_r);
   float flt_env = Voice_adsr(_ctx._inst3,gate,_ctx.env_a,_ctx.env_d,_ctx.env_s,_ctx.end_r);
   float cut_mod = (_ctx.cut + (_ctx.flt_atm * flt_env));
   float output = (amp_env * Voice_svf(_ctx._inst4,x,cut_mod,_ctx.res,0));
   return output;
}

Voice__ctx_type_16 Voice_noteOn_init(){ return Voice__ctx_type_16_init();}

void Voice_noteOn(Voice__ctx_type_16 &_ctx, int note, int velocity){
   _ctx.pitch = int_to_float(Voice_mono_noteOn(_ctx.monoin,note));
}

Voice__ctx_type_16 Voice_noteOff_init(){ return Voice__ctx_type_16_init();}

void Voice_noteOff(Voice__ctx_type_16 &_ctx, int note){
   _ctx.pitch = int_to_float(Voice_mono_noteOff(_ctx.monoin,note));
}

Voice__ctx_type_16 Voice_controlChange_init(){ return Voice__ctx_type_16_init();}

void Voice_controlChange(Voice__ctx_type_16 &_ctx, int control, int value){
   float value_0_1 = (int_to_float(value) * 0.00787401574803f);
   float value_m1_1 = ((value_0_1 * 2.f) + (-1.f));
   if(control == 30){
      _ctx.wave = value_0_1;
   }
   if(control == 31){
      _ctx.pw = value_0_1;
   }
   if(control == 32){
      _ctx.lfo_amt = value_m1_1;
   }
   if(control == 33){
      _ctx.lfo_rate = value_0_1;
   }
   if(control == 34){
      _ctx.amp_a = value_0_1;
   }
   if(control == 35){
      _ctx.amp_d = value_0_1;
   }
   if(control == 36){
      _ctx.amp_s = value_0_1;
   }
   if(control == 37){
      _ctx.amp_r = value_0_1;
   }
   if(control == 38){
      _ctx.cut = value_0_1;
   }
   if(control == 39){
      _ctx.res = value_0_1;
   }
   if(control == 40){
      _ctx.flt_atm = value_m1_1;
   }
   if(control == 41){
      _ctx.env_a = value_0_1;
   }
   if(control == 42){
      _ctx.env_d = value_0_1;
   }
   if(control == 43){
      _ctx.env_s = value_0_1;
   }
   if(control == 44){
      _ctx.env_r = value_0_1;
   }
}

Voice__ctx_type_16 Voice_default_init(){ return Voice__ctx_type_16_init();}

void Voice_default_(Voice__ctx_type_16 &_ctx){
   _ctx.pw = 0.f;
   _ctx.pitch = 42.f;
   _ctx.cut = 1.f;
   _ctx.res = 0.f;
   _ctx.amp_s = 1.f;
   _ctx.lfo_amt = 0.5f;
   _ctx.lfo_rate = 0.f;
}


------------------------------------------------------------------------------
==============================================================================
Error: vult:2:code:3:monoin.vult.float.

File "/Users/leonardo/Development/vult/_build/oUnit-vult-echoplex#00.log", line 225, characters 1-1:
Error: vult:2:code:3:monoin.vult.float (in the log).

Raised at file "src/oUnitAssert.ml", line 45, characters 8-27
Called from file "list.ml", line 110, characters 24-31
Called from file "src/oUnitRunner.ml", line 46, characters 13-26

Generating cpp for file /Users/leonardo/Development/vult/test/../examples/monoin.vult
not equal
differences: 
#include "monoin.h"

Monoin__ctx_type_0 Monoin__ctx_type_0_init(){
   Monoin__ctx_type_0 _ctx;
   _ctx.pre = 0;
   int_init_array(_ctx.notes,4,0);
   _ctx.count = 0;
   return _ctx;
}

Monoin__ctx_type_0 Monoin_mono_noteOn_init(){ return Monoin__ctx_type_0_init();}

int Monoin_mono_noteOn(Monoin__ctx_type_0 &_ctx, int n){
   if(_ctx.count < 4){
      int_set(_ctx.notes,_ctx.count,n);
      _ctx.pre = n;
      if(_ctx.count < 4){
         _ctx.count = (_ctx.count + 1);
      }
   }
   return _ctx.pre;
}

Monoin__ctx_type_0 Monoin_mono_noteOff_init(){ return Monoin__ctx_type_0_init();}

int Monoin_mono_noteOff(Monoin__ctx_type_0 &_ctx, int n){
   uint8_t found = 0;
   int pos;
   int i = 0;
   if(_ctx.count == 0){
      return _ctx.pre;
   }
+    while(((i < 4) && bool_not(found))){
-    while(((i < 4) && (! found))){
      if(int_get(_ctx.notes,i) == n){
         pos = i;
         found = 1;
      }
      i = (i + 1);
   }
   if(found){
      int k = (pos + 1);
      while((k < 4)){
         int_set(_ctx.notes,(k + (-1)),int_get(_ctx.notes,k));
         k = (k + 1);
      }
      if(found && (_ctx.count > 0)){
         _ctx.count = (_ctx.count + (-1));
         _ctx.pre = int_get(_ctx.notes,(_ctx.count + (-1)));
      }
   }
   return _ctx.pre;
}

Monoin__ctx_type_0 Monoin_mono_isGateOn_init(){ return Monoin__ctx_type_0_init();}

uint8_t Monoin_mono_isGateOn(Monoin__ctx_type_0 &_ctx){
   return (_ctx.count > 0);
}


------------------------------------------------------------------------------
==============================================================================
Error: vult:2:code:0:adsr.vult.float.

File "/Users/leonardo/Development/vult/_build/oUnit-vult-echoplex#00.log", line 75, characters 1-1:
Error: vult:2:code:0:adsr.vult.float (in the log).

Raised at file "src/oUnitAssert.ml", line 45, characters 8-27
Called from file "list.ml", line 110, characters 24-31
Called from file "src/oUnitRunner.ml", line 46, characters 13-26

Generating cpp for file /Users/leonardo/Development/vult/test/../examples/adsr.vult
not equal
differences: 
#include "adsr.h"

Adsr__ctx_type_0 Adsr__ctx_type_0_init(){
   Adsr__ctx_type_0 _ctx;
   _ctx.count = 0;
   return _ctx;
}

Adsr__ctx_type_0 Adsr_each_init(){ return Adsr__ctx_type_0_init();}

uint8_t Adsr_each(Adsr__ctx_type_0 &_ctx, int n){
   uint8_t ret = (_ctx.count == 0);
   _ctx.count = ((_ctx.count + 1) % n);
   return ret;
}

Adsr__ctx_type_1 Adsr__ctx_type_1_init(){
   Adsr__ctx_type_1 _ctx;
   _ctx.pre_x = 0;
   return _ctx;
}

Adsr__ctx_type_1 Adsr_bchange_init(){ return Adsr__ctx_type_1_init();}

uint8_t Adsr_bchange(Adsr__ctx_type_1 &_ctx, uint8_t x){
   uint8_t v = (_ctx.pre_x != x);
   _ctx.pre_x = x;
   return v;
}

Adsr__ctx_type_2 Adsr__ctx_type_2_init(){
   Adsr__ctx_type_2 _ctx;
   _ctx.pre_x = 0.f;
   return _ctx;
}

Adsr__ctx_type_2 Adsr_lpfilter_init(){ return Adsr__ctx_type_2_init();}

float Adsr_lpfilter(Adsr__ctx_type_2 &_ctx, float x){
   float ret = ((x + _ctx.pre_x) * 0.5f);
   _ctx.pre_x = x;
   return ret;
}

Adsr__ctx_type_3 Adsr__ctx_type_3_init(){
   Adsr__ctx_type_3 _ctx;
   _ctx.value = 0.f;
   _ctx.sustainLevel = 0.f;
   _ctx.state = 0;
   _ctx.releaseRate = 0.f;
   _ctx.decayRate = 0.f;
   _ctx.attackRate = 0.f;
   _ctx._inst2 = Adsr__ctx_type_2_init();
   _ctx._inst1 = Adsr__ctx_type_1_init();
   _ctx._inst0 = Adsr__ctx_type_0_init();
   return _ctx;
}

Adsr__ctx_type_3 Adsr_adsr_init(){ return Adsr__ctx_type_3_init();}

float Adsr_adsr(Adsr__ctx_type_3 &_ctx, uint8_t gate, float attack, float decay, float sustain, float release){
   int IDLE = 0;
   int ATTACK = 1;
   int DECAY = 2;
   int SUSTAIN = 3;
   int RELEASE = 4;
   if(Adsr_each(_ctx._inst0,32)){
      _ctx.attackRate = (2.26757369615e-05f * (1.f / (attack + 0.1f)));
      float inv_sustain = (1.f + (- sustain));
      _ctx.decayRate = (inv_sustain * 2.26757369615e-05f * (inv_sustain / (decay + 0.1f)));
      _ctx.releaseRate = (1.13378684807e-05f * (0.5f / (release + 0.1f)));
   }
   _ctx.sustainLevel = sustain;
   float rate = 0.f;
   uint8_t trig = Adsr_bchange(_ctx._inst1,gate);
   uint8_t up = (trig && gate);
+    uint8_t down = (trig && bool_not(gate));
-    uint8_t down = (trig && (! gate));
   if(_ctx.state == IDLE){
      if(up){
         _ctx.state = ATTACK;
      }
   }
   else
   {
      if(_ctx.state == ATTACK){
         if(_ctx.value >= 1.f){
            _ctx.state = DECAY;
         }
         if(down){
            _ctx.state = RELEASE;
         }
         rate = _ctx.attackRate;
      }
      else
      {
         if(_ctx.state == DECAY){
            if(_ctx.value <= _ctx.sustainLevel){
               _ctx.state = SUSTAIN;
            }
            if(down){
               _ctx.state = RELEASE;
            }
            rate = (- _ctx.decayRate);
         }
         else
         {
            if(_ctx.state == SUSTAIN){
               if(down){
                  _ctx.state = RELEASE;
               }
               rate = 0.f;
               _ctx.value = _ctx.sustainLevel;
            }
            else
            {
               if(_ctx.state == RELEASE){
                  if(_ctx.value <= 0.f){
                     _ctx.state = IDLE;
                  }
                  if(up){
                     _ctx.state = ATTACK;
                  }
                  rate = (- _ctx.releaseRate);
               }
            }
         }
      }
   }
   _ctx.value = float_clip((Adsr_lpfilter(_ctx._inst2,rate) + _ctx.value),0.f,1.f);
   return _ctx.value;
}


------------------------------------------------------------------------------
Ran: 88 tests in: 3.21 seconds.
FAILED: Cases: 88 Tried: 88 Errors: 0 Failures: 10 Skip:  0 Todo: 0 Timeouts: 0.
