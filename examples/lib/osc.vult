// Copyright (c) 2016 Leonardo Laguna Ruiz
// License: MIT
// Implementation of different oscillators

// Saw  oscillator with simple soft transition
fun saw_simple(p) {
   val inc = Util.pitchToRate(p);
   val i = if inc < Util.minFixed() then Util.minFixed() else inc;
   // generater a ramp from -1.0  to 1.0
   mem phase = (2.0*inc + phase) % 2.0;
   val ph = phase - 1.0;
   val o = 0.0;
   // soften the transitions
   if(ph >= 1.0 - i) {
      val b = (1.0 - i - ph)/i;
      o = b * abs(b) + ph;
   }
   else if(ph <= i - 1.0) {
      val b = (i - 1.0 - ph)/i;
      o = b * abs(b) + ph;
   }
   else {
      o = ph;
   }
   return o;
}


// Simple wavetable oscillator
fun wavetable(pitch:real,reset) : real {
   mem buffer : array(real,128);
   val phase = Util.phasor(pitch,reset);
   // Gets the position in the buffer to read
   val index_r  = real(size(buffer)) * phase;
   val index_i  = int(floor(index_r));
   // Gets the decimal part of the position
   val decimal  = index_r - real(index_i);
   // Reads the values in the buffer
   val x1 = get(buffer,index_i);
   val x2 = get(buffer,(index_i+1) % size(buffer));
   // Interpolates the value
   val ret = (x2-x1)*decimal + x1;
   return ret;
}
and initTable() @[init] {
   mem buffer;
   val i = 0;
   while(i<size(buffer)){
      val w = 2.0 * 3.1415 * real(i)/(real(size(buffer)));
      // Initializes the wavetable
      val x = (sin(w)+sin(3.0*w)+sin(5.0*w))/3.0;
      _ = set(buffer,i,x);
      i = i + 1;
   }
}
