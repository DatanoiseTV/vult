
fun change(x):bool {
    mem pre_x;
    val v:bool = pre_x <> x;
    pre_x = x;
    return v;
}

fun min(a,b) return if a<b then a else b;
fun max(a,b) return if a>b then a else b;

fun clip(value,low,high){
    return min(max(low,value),high);
}

fun samplerate() return 44100.;
fun PI() return 3.141592653589793;

fun thermal() return 1./1.22070313;

fun moog_step(input, resFixed, tune,output):real {
    mem tw0,tw1,tw2;
    mem dw0,dw1,dw2,dw3;

    val i0 = input - resFixed * output;
    val w0 = dw0 + tune * (tanh(i0*thermal()) - tw0);

    tw0 = tanh(w0*thermal());
    val w1 = dw1 + tune * tw0 -  tw1;

    tw1 = tanh(w1*thermal());
    val w2 = dw2 + tune * tw1 - tw2;

    tw2 = tanh(w2*thermal());
    val w3 = dw3 + tune * tw2 - tanh(dw3*thermal());

    dw0 = w0;
    dw1 = w1;
    dw2 = w2;
    dw3 = w3;
    return w3;
}

fun moog(input:real, cut:real, res:real):real{
    mem resFixed;
    mem tune,dx1;

    if(change(cut) || change(res)){
        // clips the inputs to the valid range
        res = clip(res,0.0,1.0);
        cut = clip(cut,1.0,samplerate());

        val fc = cut/samplerate();
        val x_2 = fc/2.;
        val x2 = fc*fc;
        val x3 = fc*x2;
        // Frequency & amplitude correction
        val fcr = 1.8730 * x3 + 0.4955 * x2 - 0.6490 * fc + 0.9988;

        // Resonance compensation
        val acr = -3.9364 * x2 + 1.8409 * fc + 0.9968;

        // Normal scaled impulse invariant transformed one-pole filter; exp() models resonance
        tune = (1.0 - exp(-((2.0*PI())*x_2*fcr))) / thermal();

        resFixed = 4.0*res*acr;
    }

    // 2x oversampling
    val x0 = filter:moog_step(input, resFixed, tune,dx1);
    val x1 = filter:moog_step(input, resFixed, tune,x0);
    dx1 = x1;
    return (x0+x1)/2.0;
}
