
fun minFixed() return 0.0000152588;

// Returns true every time the input value changes
fun change(x:real):bool {
    mem pre_x;
    val v:bool = pre_x<>x;
    pre_x = x;
    return v;
}

// Returns true every time the input value changes
fun bchange(x:bool):bool {
    mem pre_x;
    val v:bool = pre_x<>x;
    pre_x = x;
    return v;
}

// Returns true if the value changes from 0 to anything
fun edge(x):bool {
    mem pre_x;
    val v:bool = (pre_x<>x) && (pre_x==true);
    pre_x = x;
    return v;
}

// Returns true every 'n' calls
fun each(n){
   mem count;
   val ret = (count == 0);
   count = (count + 1) % n;
   return ret;
}

// Returns true if the input value is near zero (< 1e-2)
fun near_zero(x) : bool return abs(x)<2e-2;

// Filters the DC component of a signal
fun dcblock(x0){
  mem x1,y1;
  val y0 = x0-x1+y1*0.995;
  x1,y1 = x0,y0;
  return y0;
}

// Average two samples
fun lpfilter(x){
   mem pre_x;
   val ret = (x+pre_x)/2.;
   pre_x = x;
   return ret;
}

// ==== OSCILLATOR =====

// Converts the MIDI note to increment rate at a 44100 sample rate
fun pitchToRate(d) : real
  return 8.1758*exp(0.0577623*d)/44100.0;

// Generates a BW-limited pulse train given the phase and the number of harmonics
fun pulse_train(m,phase){
  val pi_phase = phase * 3.141592653589793;
  val denominator1 = sin(pi_phase);
  val tmp1 = 0.;
  if(near_zero(denominator1)) {
    tmp1 = 1.;
  }
  else {
    tmp1 = sin(m * pi_phase);
    tmp1 =  tmp1 / (m * denominator1);
  }
  return tmp1;
}

// Generates BW-limited waveforms using the blit algorithm.
// It can generate PWM puses, saws and triangles.
fun osc(pitch,pw,wave){
  mem m;
  mem rate;
  mem phase;
  mem pre_pitch;
  mem state_triang;
  mem state_pulse;
  mem state_saw;
  mem triang;
  mem output;

  val fixed_pitch = 0.;
  if(wave < 2. / 3.) {
    fixed_pitch = pitch;
  }
  else {
    fixed_pitch = pitch + 12.;
  }
  // Updates the parameters if the pre_pitch changed
  if(change(fixed_pitch)) {
    rate = pitchToRate(fixed_pitch);
    val p = 1. / rate;
    val maxHarmonics = floor(p/2.);
    m = 2. * maxHarmonics + 1.;
  }
  // Generates a shifted version of the phase
  val shift05 = 0.5 + pw * 0.49;
  val shift = phase + shift05;
  if(shift > 1.) {
    shift = shift - 1.;
  }
  // Generates the first pulse train
  val tmp1 = pulse_train(m,phase);
  // Generates the second pulse train
  val tmp2 = pulse_train(m,shift);
  // Updates the phase
  phase = phase + rate;
  if(phase > 1.) {
    phase = phase - 1.;
  }

  // Calculates the waveforms based on the pulse trains
  state_pulse  = clip(state_pulse  * 0.9995 + tmp1 - tmp2, -1., 1.);
  state_saw    = clip(state_saw    * 0.9995 + (tmp1 + tmp2  - 2. * rate)/shift05/2., -1.,1.);
  state_triang = clip(state_triang * 0.9995 + 2. * state_pulse * rate, -1.,1.);

  // Select the wave to output
  if(wave < 1. / 3.) {
    output = state_pulse;
  }
  else if(wave < 2. / 3.) {
    output = 2. * state_saw;
  }
  else {
    output = 2. * state_triang*(1. + pw);
  }

  output = dcblock(output);
  return clip(output/4.,-1.,1.);
}


// ==== FILTER =====

// Calculates one step of the state-variable filter
fun svf_step(input,g,q,sel) : real {
   mem dlow, dband;
   val low = dlow + g * dband;
   val high = input - low - q*dband;
   val band = g * high + dband;
   val notch = high + low;

   dband = clip(band,-1.,1.);
   dlow  = clip(low,-1.,1.);
   val output =
      if sel == 0 then low else
      if sel == 1 then high else
      if sel == 2 then band else
      notch;
   return output;
}

// Main function for the state-variable filter with 2x of oversampling
fun svf(input,fc,q,sel){
   mem g;
   fc = clip(fc, 0., 1.);
   q  = clip(q, 0., 1.);
   val fix_q = 2. * (1. - q);

   if(change(fc)){
      g = fc/2.;
   }

   // In Vult oversamplig in very easy!
   val x1 = step:svf_step(input,g,fix_q,sel);
   val x2 = step:svf_step(input,g,fix_q,sel);

   return (x1+x2)/2.;
}

// ==== ENVELOPE =====

fun adsr(gate,attack,decay,sustain,release){
   mem state,value,gate;
   mem attackRate;
   mem decayRate;
   mem releaseRate;
   mem sustainLevel;

   val IDLE    = 0;
   val ATTACK  = 1;
   val DECAY   = 2;
   val SUSTAIN = 3;
   val RELEASE = 4;

   // Calculates the rate every 32 samples
   if(each(32)){
      attackRate      = (1./44100.) * (1./(attack+0.1));
      val inv_sustain = 1. - sustain;
      decayRate       = (inv_sustain/44100.) * (inv_sustain/(decay+0.1));
      releaseRate     = (0.5/44100.) * (0.5/(release+0.1));
   }
   sustainLevel = sustain;

   val trig = false;
   val rate = 0.;

   trig = bchange(gate);

   val up   = trig && gate;
   val down = trig && not(gate);

   // State machine of the ADSR
   if(state == IDLE){
      if(up) state = ATTACK;
   }
   else if(state == ATTACK){
      if(value >= 1.) state = DECAY;
      if(down)       state = RELEASE;
      rate = attackRate;
   }
   else if(state == DECAY){
      if(value <= sustainLevel) state = SUSTAIN;
      if(down)                  state = RELEASE;
      rate = -decayRate;
   }
   else if(state == SUSTAIN){
      if(down) state = RELEASE;
      rate  = 0.;
      value = sustainLevel;
   }
   else if(state == RELEASE){
      if(value <= 0.) state = IDLE;
      if(up)         state = ATTACK;
      rate = -releaseRate;
   }

   value = clip(lpfilter(rate) + value,0.,1.);
   return value;
}

// ======= LFO ======
fun lfo(f,gate){
   mem phase;
   val rate = f * 100. * minFixed() + minFixed();
   if(edge(gate)) phase = 0.;
   if(each(4))
      phase = phase + rate;
   if(phase>1.) phase = phase-1.;
   return sin(phase * 2. * 3.141592653589793)+0.5;
}

// ==== MONOPHONIC VOICE =====

/* These two functions handle midi on/off events in order to behave
 * like a monophonic sinthesizer that can hold 4 notes */

// Activates a note and returns the current note value
fun noteOn(n){
   mem n1,n2,n3,n4;
   mem (count:int),pre;
   // written this way because Vult does not have array support yet.
   if(count == 0) { n1 = n; pre = n; } else
   if(count == 1) { n2 = n; pre = n; } else
   if(count == 2) { n3 = n; pre = n; } else
   if(count == 3) { n4 = n; pre = n; }
   if(count <= 4) count = count + 1;
   return pre;
}

// Deactivates a note and returns the following note value;
and noteOff(n){
   mem n1,n2,n3,n4;
   mem count,pre;
   val found = false;

   // finds the voice and removes it
   if(n == n1) { n1,n2,n3 = n2,n3,n4; found = true; } else
   if(n == n2) { n2,n3    = n3,n4;    found = true; } else
   if(n == n3) { n3       = n4;       found = true; } else
   if(n == n4) {                      found = true; }

   // If found, decrease the number of active notes
   if(found && count>0) count = count - 1;

   if(count == 1) pre = n1;
   if(count == 2) pre = n2;
   if(count == 3) pre = n3;
   if(count == 4) pre = n4;
   return pre;
}

// Returns 1 if any note is active
and isGateOn(){
   mem n1,n2,n3,n4;
   mem count,pre;
   return count>0;
}

fun process(i:real){
  mem param1; // pitch
  mem param2; // pw
  mem param3; // wave
  mem param4; // osc amt
  mem param5; // rate
  mem param6; // cut
  mem param7; // res
  mem param8; // flt amt

  mem param9;  // amp_a
  mem param10; // amp_d
  mem param11; // amp_s
  mem param12; // amp_r

  mem param13; // env_a
  mem param14; // env_d
  mem param15; // env_s
  mem param16; // env_r

  val gate    = monoin:isGateOn();
  val lfo     = lfo(param5,gate)*param4;
  val x       = osc(param1,param2+lfo,param3);
  val amp_env = adsr(gate,param9,param10,param11,param12);
  val flt_env = adsr(gate,param13,param14,param15,param16);
  val cut_mod = param6 + param8 * flt_env;
  val output  = svf(x,cut_mod,param7,0);
  return output/2.;
}

and process_noteOn(n:int){
  _ = monoin:noteOn(n);
}

and process_noteOff(n:int){
  _ = monoin:noteOff(n);
}


