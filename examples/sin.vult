/* You can use a this template to start a program */

// Returns true every time the input value changes
fun change(x:real):bool {
    mem pre_x;
    val v:bool = pre_x<>x;
    pre_x = x;
    return v;
}

fun sc_osc(pitch:real):real{
    mem w,cos_w;
    mem y1, y2;
    val g = 1.0;
    if(change(pitch)){
        val pre_w = w;
        // Converts pitch to omega
        w = 0.00116485*exp(0.0577623*pitch);
        g = tan(w/2.0)/tan(pre_w/2.0);
        cos_w = cos(w);
    }
    val y1_next = cos_w*y1 + (cos_w+1.0)*g*y2;
    val y2_next = (cos_w-1.0)*y1 + cos_w*g*y2;
    y1 = clip(y1_next,-1.0,1.0);
    y2 = clip(y2_next,-1.0,1.0);
    return y1;
}
and sc_osc_start() @[init] {
    mem y1, y2;
    y1 = 1.0;
    y2 = -y1/2.0;
}

// Main processing function
// 'input' is by default a sine wave at 440 Hz
fun process(input:real){
    mem pitch;
    return sc_osc(pitch);
}
// Called when a note On is received
and noteOn(note:int,velocity:int){
   mem pitch = real(note);
}

// Called when a note Off is received
and noteOff(note:int){
}

// Called when a control changes
and controlChange(control:int,value:int){
}

// Called on initialization to define initial values
and default() @[init]{
    mem pitch = 69.0;
}
