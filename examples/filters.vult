
fun pi() return 3.1416;

fun min(a,b) return if a<b then a else b;
fun max(a,b) return if a>b then a else b;

fun clip(low,high,value){
    return min(max(low,value),high);
}

// Returns true every time the input value changes
fun change(x) {
    mem pre_x;
    val v = pre_x<>x;
    pre_x = x;
    return v;
}

fun biquad(x:real,b0:real,b1:real,b2:real,a1:real,a2:real){
    mem w1,w2;
    val w0 = x - a1*w1 - a2*w2;
    val y0 = b0*w0 + b1*w1 + b2*w2;
    w2, w1 = w1, w0;
    return y0;
}

fun lp6(x,fc) {
    mem fc,k;
    if(change(fc)){
        fc = clip(fc,0.0,44100.0/2.0);
        k = tan(pi()*fc/44100.0);
    }
    val b0 = k/(k+1.0);
    val b1 = k/(k+1.0);
    val a1 = (k-1.0)/(k+1.0);
    return biquad(x,b0,b1,0.0,a1,0.0);
}

fun lp12(x,fc,q) {
    mem b0,b1,b2,a1,a2;
    if (change(fc) || change(q)) {
        val qc = max(sqrt(2.0),q+sqrt(2.0));
        fc = clip(fc,0.0,44100.0/2.0);
        val k = tan(pi()*fc/44100.0);
        val den = k*k*qc+k+qc;
        b0 = k*k*qc/den;
        b1 = 2.0*b0;
        b2 = b0;
        a1 = 2.0*qc*(k*k-1.0)/den;
        a2 = (k*k*qc-k+qc)/den;
    }
    return biquad(x,b0,b1,b2,a1,a2);
}
fun hp6(x,fc){
    fc = clip(fc,0.0,44100.0/2.0);
    val k = tan(pi()*fc/44100.0);
    val b0 = 1.0/(k+1.0);
    val b1 = -1.0/(k+1.0);
    val a1 = (k-1.0)/(k+1.0);
    return biquad(x,b0,b1,0.0,a1,0.0);
}

fun allp6(x,fc){
    fc = clip(fc,0.0,44100.0/2.0);
    val k = tan(pi()*fc/44100.0);
    val b0 = (k-1.0)/(k+1.0);
    val b1 = 1.0;
    val a1 = (k-1.0)/(k+1.0);
    return biquad(x,b0,b1,0.0,a1,0.0);
}

fun hp12(x,fc,q){
    mem b0,b1,b2,a1,a2;
    if(change(fc) || change(q)){
        val qc = max(sqrt(2.0),q+sqrt(2.0));
        fc = clip(fc,0.0,44100.0/2.0);
        val k = tan(pi()*fc/44100.0);
        val den = k*k*qc+k+qc;
        b0 = qc/den;
        b1 = -2.0*qc/den;
        b2 = qc/den;
        a1 = 2.0*qc*(k*k-1.0)/den;
        a2 = (k*k*qc-k+qc)/den;
    }
    return biquad(x,b0,b1,b2,a1,a2);
}


fun bp12(x,fc,q){
    mem b0,b1,b2,a1,a2;
    if(change(fc) || change(q)){
        val qc = max(sqrt(2.0),q+sqrt(2.0));
        fc = clip(fc,0.0,44100.0/2.0);
        val k = tan(pi()*fc/44100.0);
        val den = k*k*qc+k+qc;
        b0 = k/den;
        b1 = 0.0;
        b2 = -k/den;
        a1 = 2.0*qc*(k*k-1.0)/den;
        a2 = (k*k*qc-k+qc)/den;
    }
    return biquad(x,b0,b1,b2,a1,a2);
}


fun notch12(x,fc,q){
    mem b0,b1,b2,a1,a2;
    if(change(fc) || change(q)){
        val qc = max(sqrt(2.0),q+sqrt(2.0));
        fc = clip(fc,0.0,44100.0/2.0);
        val k = tan(pi()*fc/44100.0);
        val den = k*k*qc+k+qc;
        b0 = qc*(1.0+k*k)/den;
        b1 = 2.0*qc*(k*k-1.0)/den;
        b2 = b0;
        a1 = 2.0*qc*(k*k-1.0)/den;
        a2 = (k*k*qc-k+qc)/den;
    }
    return biquad(x,b0,b1,b2,a1,a2);
}

fun allp12(x,fc,q){
    mem b0,b1,b2,a1,a2;
    if(change(fc) || change(q)){
        val qc = max(sqrt(2.0),q+sqrt(2.0));
        fc = clip(fc,0.0,44100.0/2.0);
        val k = tan(pi()*fc/44100.0);
        val den = k*k*qc+k+qc;
        b0 = (k*k*qc-k+qc)/den;
        b1 = 2.0*qc*(k*k-1.0)/den;
        b2 = 1.0;
        a1 = 2.0*qc*(k*k-1.0)/den;
        a2 = (k*k*qc-k+qc)/den;
    }
    return biquad(x,b0,b1,b2,a1,a2);
}

