/*
The MIT License (MIT)

Copyright (c) 2017 Leonardo Laguna Ruiz
-----
Diode ladder filter
*/

fun tune(cut) @[table(min = 0.0, max = 1.0, size = 128)]{
   val f = Util.cvTokHz(cut);
   f = clip(f, 0.0, 20.0);
   val fh = (2.0 * 3.1415) * f / (4.0 * 44.1);
   return fh;
}

fun ladder_step(input, fh, res, p, dp) {
   val w0 = Util.cubic_clipper(input - 4.0 * res * p[3]);
   val w1 = Util.cubic_clipper(p[0]);
   dp[0] = (w0 - w1) * fh;
   val w3 = Util.cubic_clipper(p[1]);
   dp[1] = (w1 - w3) * fh;
   val w5 = Util.cubic_clipper(p[2]);
   dp[2] = (w3 - w5) * fh;
   val w7 = Util.cubic_clipper(p[3]);
   dp[3] = (w5 - w7) * fh;
}

fun heun(input, cut, res) {
   mem fh;
   mem p[4];
   val dp[4], pt[4], dpt[4];
   if(Util.change(cut)) {
      fh = tune(cut);
   }
   _ = ladder_step(input, fh, res, p, dpt);
   pt[0] = p[0] + dpt[0];
   pt[1] = p[1] + dpt[1];
   pt[2] = p[2] + dpt[2];
   pt[3] = p[3] + dpt[3];
   _ = ladder_step(input, fh, res, pt, dp);
   p[0] = p[0] + (dp[0] + dpt[0])/ 2.0;
   p[1] = p[1] + (dp[1] + dpt[1])/ 2.0;
   p[2] = p[2] + (dp[2] + dpt[2])/ 2.0;
   p[3] = p[3] + (dp[3] + dpt[3])/ 2.0;
   return p[3];
}

fun euler(input, cut, res) {
   mem fh;
   mem p[4];
   val dpt[4];
   if(Util.change(cut)) {
      fh = tune(cut);
   }
   _ = ladder_step(input, fh, res, p, dpt);
   p[0] = p[0] + dpt[0];
   p[1] = p[1] + dpt[1];
   p[2] = p[2] + dpt[2];
   p[3] = p[3] + dpt[3];
   return p[3];
}

fun process_euler(input:real, cut:real, res:real):real{
    _ = e:euler(input, cut, res);
    _ = e:euler(input, cut, res);
    _ = e:euler(input, cut, res);
    val out = e:euler(input, cut, res);
    return out;
}

fun process_heun(input:real, cut:real, res:real):real{
    _ = h:heun(input, cut, res);
    _ = h:heun(input, cut, res);
    _ = h:heun(input, cut, res);
    val out = h:heun(input, cut, res);
    return out;
}

fun process(input:real, cut:real, res:real):real{
    return process_heun(input, cut, res);
}

and noteOn(note:int,velocity:int,channel:int){ }
and noteOff(note:int,channel:int){ }
and controlChange(control:int,value:int,channel:int){ }
and default(){ }