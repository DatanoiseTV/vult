external minblep(ch:int,i:int) : real @[wave(channels=1,file="minblep.wav")];


fun biquad(x:real,b0:real,b1:real,b2:real,a1:real,a2:real){
    mem w1,w2;
    val w0 = x - a1*w1 - a2*w2;
    val y0 = b0*w0 + b1*w1 + b2*w2;
    w2, w1 = w1, w0;
    return y0;
}

fun lp12(x,fc,q) {
    mem b0,b1,b2,a1,a2;
    if (Util.change(fc) || Util.change(q)) {
        val qc = q+sqrt(2.0);
        val k = tan(3.1415926535897*fc/(4.0 * 44100.0));
        val den = k*k*qc+k+qc;
        b0 = k*k*qc/den;
        b1 = 2.0*b0;
        b2 = b0;
        a1 = 2.0*qc*(k*k-1.0)/den;
        a2 = (k*k*qc-k+qc)/den;
    }
    return biquad(x,b0,b1,b2,a1,a2);
}

fun minblep_play(trigger) {
   mem playing;
   mem index;
   if(Util.edge(trigger)) {
      index = 0;
      playing = true;
   }
   if(index >= minblep_samples()) {
      playing = false;
      index = 0;
   }
   else
      index = index + 16;
   val out = if playing then minblep(0, index) else 0.0;
   return out;
}

fun minblep_step(cv:real, reset: bool) {
   mem pre_phase;
   mem active_blep;
   val phase = Phase.process(cv, 0.0);
   val wrap = (pre_phase - phase) > 0.5;
   pre_phase = phase;
   if(wrap || Util.edge(reset)) {
      active_blep = (active_blep + 1) % 4;
   }
   val o0 = minblep_play(active_blep == 0);
   val o1 = minblep_play(active_blep == 1);
   val o2 = minblep_play(active_blep == 2);
   val o3 = minblep_play(active_blep == 3);
   val pulses = o0 - o1 + o2 - o3;
   mem acc = acc * 0.996 + 20.0 * pulses;
   val out = lp12(lp12(lp12(acc, 19000.0, 0.0), 19000.0, 0.0), 19000.0, 0.0);
   return out;
}

fun smooth(input){
   mem x;
   x = x+(input-x)*0.0005;
   return x;
}

fun process(cv_in:real, reset: real){
   val cv = smooth(cv_in);
   val breset = reset > 0.5;
   val out1 = o:minblep_step(cv, breset);
   val out2 = o:minblep_step(cv, breset);
   val out3 = o:minblep_step(cv, breset);
   val out4 = o:minblep_step(cv, breset);
   return (out1+out2+out3+out4)/4.0;
}
and noteOn(note:int,velocity:int,channel:int){ }
and noteOff(note:int,channel:int){ }
and controlChange(control:int,value:int,channel:int){ }
and default(){ }